/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400D70();
// wchar_t *wcscpy(wchar_t *dest, const wchar_t *src);
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// size_t wcslen(const wchar_t *s);
// int close(int fd);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// size_t strlen(const char *s);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int atoi(const char *nptr);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
// void *memmove(void *dest, const void *src, size_t n);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// char *strcpy(char *dest, const char *src);
// void srand(unsigned int seed);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// void *memcpy(void *dest, const void *src, size_t n);
// time_t time(time_t *timer);
// in_addr_t inet_addr(const char *cp);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_66_bad();
int goodG2B();
int goodB2G();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_bad();
int goodG2B_0();
int goodB2G_0();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad();
int goodB2G1();
int goodB2G2();
int goodG2B1();
int goodG2B2();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_bad();
int goodG2B_1();
int goodB2G_1();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_bad();
int goodB2G1_0();
int goodB2G2_0();
int goodG2B1_0();
int goodG2B2_0();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_bad();
int goodG2B_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_good();
int badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_bad();
int goodG2BSink();
int goodG2B_3();
int goodB2GSink();
int goodB2G_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_bad();
int goodB2G1_1();
int goodB2G2_1();
int goodG2B1_1();
int goodG2B2_1();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_bad();
int goodG2B_4();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_bad();
int goodG2B_5();
int goodB2G_3();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad();
int goodB2G1_2();
int goodB2G2_2();
int goodG2B1_2();
int goodG2B2_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_bad();
int goodG2B_6();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_bad();
int goodB2G_4();
int goodG2B_7();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_good();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_badSource(unsigned int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodG2BSource();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodB2GSource(unsigned int a1);
__int64 __fastcall badSource(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_bad();
__int64 goodG2BSource();
int goodG2B_8();
__int64 __fastcall goodB2GSource(unsigned int a1);
int goodB2G_5();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_bad();
int goodB2G1_3();
int goodB2G2_3();
int goodG2B1_3();
int goodG2B2_3();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_bad();
int goodG2B_9();
__int64 goodB2G_6();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodB2GSink(int *a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_bad();
int good1();
int good2();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_bad();
int goodG2B1_4();
int goodG2B2_4();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_bad();
int goodG2B_10();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_bad();
int goodB2G1_4();
int goodB2G2_4();
int goodG2B1_5();
int goodG2B2_5();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_bad();
int goodB2G1_5();
int goodB2G2_5();
int goodG2B1_6();
int goodG2B2_6();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_good();
int __fastcall badSink_0(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_bad();
int __fastcall goodG2BSink_0(int a1);
int goodG2B_11();
int __fastcall goodB2GSink_0(int a1);
int goodB2G_7();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_bad();
int goodG2B_12();
int goodB2G_8();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_badSink(unsigned int **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_goodG2BSink(unsigned int **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_bad();
int goodG2B_13();
int goodB2G_9();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_bad();
int goodG2B_14();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_bad();
int goodB2G_10();
int goodG2B_15();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_good();
int __fastcall badSink_1(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_bad();
int __fastcall goodG2BSink_1(_DWORD *a1);
int goodG2B_16();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_bad();
int goodG2B_17();
int goodB2G_11();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_bad();
int goodG2B1_7();
int goodG2B2_7();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodB2GSink(__int64 a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad();
int goodG2B_18();
int goodB2G_12();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_bad();
int goodG2B_19();
int goodB2G_13();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_bad();
int goodG2B_20();
int goodB2G_14();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_bad();
int goodG2B_21();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_bad();
int goodB2G1_6();
int goodB2G2_6();
int goodG2B_22();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodB2GSink(int a1);
int badSink_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_bad();
int goodG2BSink_2();
int goodG2B_23();
int goodB2GSink_1();
int goodB2G_15();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_bad();
int goodG2B_24();
int goodB2G_16();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_bad();
int goodG2B_25();
int goodB2G_17();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_bad();
int goodB2G1_7();
int goodB2G2_7();
int goodG2B1_8();
int goodG2B2_8();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_goodG2BSink(__int64 a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_bad();
int goodG2B_26();
int goodB2G_18();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_bad();
int goodG2B_27();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_14_bad();
int goodB2G1_8();
int goodB2G2_8();
int goodG2B1_9();
int goodG2B2_9();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_bad();
int goodG2B1_10();
int goodG2B2_10();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad();
int goodG2B_28();
int goodB2G_19();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_32_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_bad();
int goodB2G1_9();
int goodB2G2_9();
int goodG2B1_11();
int goodG2B2_11();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodB2GSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad();
int goodG2B_29();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_bad();
int good1_0();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_good();
int __fastcall badSink_3(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_bad();
int __fastcall goodG2BSink_3(unsigned int *a1);
int goodG2B_30();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_good();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_badSource(unsigned int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodG2BSource();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodB2GSource(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_bad();
int goodG2B1_12();
int goodG2B2_12();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_bad();
int goodG2B_31();
int goodB2G_20();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_bad();
int goodG2B_32();
int goodB2G_21();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_bad();
int goodB2G1_10();
int goodB2G2_10();
int goodG2B1_13();
int goodG2B2_13();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_bad();
int goodB2G1_11();
int goodB2G2_11();
int goodG2B_33();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_goodG2BSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodB2GSink(int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_bad();
int goodG2B_34();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_bad();
int goodG2B_35();
int goodB2G_22();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_bad();
int goodB2G1_12();
int goodB2G2_12();
int goodG2B1_14();
int goodG2B2_14();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_61_bad();
int goodG2B_36();
int goodB2G_23();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_61_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_bad();
int goodG2B1_15();
int goodG2B2_15();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_badSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_bad();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(_DWORD *a1);
int goodG2B_37();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_bad();
int goodG2B_38();
int goodB2G_24();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_badSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_goodG2BSink(char **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad();
int goodG2B_39();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_bad();
int goodG2B_40();
int goodB2G_25();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_bad();
int goodG2B_41();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad();
int goodB2G1_13();
int goodB2G2_13();
int goodG2B1_16();
int goodG2B2_16();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_bad();
int good1_1();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_bad();
int goodB2G1_14();
int goodB2G2_14();
int goodG2B1_17();
int goodG2B2_17();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_bad();
int goodG2B_42();
int goodB2G_26();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_bad();
int goodG2B_43();
int goodB2G_27();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_bad();
int goodG2B_44();
int goodB2G_28();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_bad();
int goodG2B_45();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_bad();
int goodB2G1_15();
int goodB2G2_15();
int goodG2B1_18();
int goodG2B2_18();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad();
int good1_2();
int good2_0();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_bad();
int goodB2G1_16();
int goodB2G2_16();
int goodG2B1_19();
int goodG2B2_19();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_good();
int __fastcall badSink_4(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_bad();
int __fastcall goodB2G1Sink(int a1);
int goodB2G1_17();
int __fastcall goodB2G2Sink(int a1);
int goodB2G2_17();
int __fastcall goodG2BSink_4(int a1);
int goodG2B_46();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_bad();
int goodB2G1_18();
int goodB2G2_18();
int goodG2B1_20();
int goodG2B2_20();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_bad();
int goodG2B_47();
__int64 goodB2G_29();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_65_bad();
int goodG2B_48();
int goodB2G_30();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_bad();
int goodB2G1_19();
int goodB2G2_19();
int goodG2B1_21();
int goodG2B2_21();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_good();
int badSink_5();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_bad();
int goodG2BSink_5();
int goodG2B_49();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad();
int goodB2G_31();
int goodG2B_50();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_bad();
int goodG2B_51();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_bad();
int goodG2B1_22();
int goodG2B2_22();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_bad();
int goodG2B_52();
int goodB2G_32();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_31_bad();
int goodG2B_53();
int goodB2G_33();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_bad();
int goodB2G1_20();
int goodB2G2_20();
int goodG2B_54();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodB2GSink();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_bad();
int goodB2G_34();
int goodG2B_55();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_good();
int __fastcall badSink_6(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_bad();
int __fastcall goodG2BSink_6(int a1);
int goodG2B_56();
int __fastcall goodB2GSink_2(int a1);
__int64 goodB2G_35();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_bad();
int goodG2B_57();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad();
int good1_3();
int good2_1();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_bad();
int goodB2G1_21();
int goodB2G2_21();
int goodG2B1_23();
int goodG2B2_23();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad();
int goodG2B_58();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_bad();
int good1_4();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_badSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_goodG2BSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_bad();
int goodB2G1_22();
int goodB2G2_22();
int goodG2B1_24();
int goodG2B2_24();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_good();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_badSource(unsigned int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodG2BSource();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodB2GSource(unsigned int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_bad();
int goodB2G1_23();
int goodB2G2_23();
int goodG2B1_25();
int goodG2B2_25();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_bad();
int goodB2G1_24();
int goodB2G2_24();
int goodG2B1_26();
int goodG2B2_26();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad();
int good1_5();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_bad();
int goodG2B_59();
int goodB2G_36();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_bad();
int goodG2B_60();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_bad();
int goodG2B_61();
int goodB2G_37();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_bad();
int goodB2G1_25();
int goodB2G2_25();
int goodG2B1_27();
int goodG2B2_27();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_bad();
int goodG2B1_28();
int goodG2B2_28();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_bad();
int goodG2B_62();
int goodB2G_38();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_good();
int __fastcall badSink_7(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad();
int __fastcall goodB2G1Sink_0(int a1);
int goodB2G1_26();
int __fastcall goodB2G2Sink_0(int a1);
int goodB2G2_26();
int __fastcall goodG2BSink_7(int a1);
int goodG2B_63();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good();
int badSink_8();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad();
int goodG2BSink_8();
int goodG2B_64();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad();
int goodB2G1_27();
int goodB2G2_27();
int goodG2B1_29();
int goodG2B2_29();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodB2GSink(int a1);
void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_bad();
void goodB2G_39();
int goodG2B_65();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_bad();
int goodB2G1_28();
int goodB2G2_28();
int goodG2B1_30();
int goodG2B2_30();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_bad();
int good1_6();
int good2_2();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_bad();
int goodB2G1_29();
int goodB2G2_29();
int goodG2B1_31();
int goodG2B2_31();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink(char **a1);
__int64 __fastcall badSource_0(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_bad();
__int64 goodG2BSource_0();
int goodG2B_66();
__int64 __fastcall goodB2GSource_0(unsigned int a1);
int goodB2G_40();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodB2GSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_bad();
int goodB2G_41();
int goodG2B_67();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_bad();
int goodG2B_68();
__int64 goodB2G_42();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodB2GSink();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodB2GSink(int a1);
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_bad();
int goodB2G1_30();
int goodB2G2_30();
int goodG2B1_32();
int goodG2B2_32();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_badSink(unsigned int **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_goodG2BSink(unsigned int **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_05_bad();
int goodB2G1_31();
int goodB2G2_31();
int goodG2B1_33();
int goodG2B2_33();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_05_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad();
int goodG2B_69();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good();
int __fastcall badSink_9(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad();
int __fastcall goodG2BSink_9(char *a1);
int goodG2B_70();
int __fastcall goodB2GSink_3(wchar_t *a1);
int goodB2G_43();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_bad();
int goodB2G1_32();
int goodB2G2_32();
int goodG2B1_34();
int goodG2B2_34();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_good();
int __fastcall badSink_10(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_bad();
int __fastcall goodG2BSink_10(int a1);
int goodG2B_71();
int __fastcall goodB2GSink_4(int a1);
int goodB2G_44();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodB2GSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_bad();
int goodG2B1_35();
int goodG2B2_35();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_bad();
int goodB2G1_33();
int goodB2G2_33();
int goodG2B1_36();
int goodG2B2_36();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_bad();
int goodB2G1_34();
int goodB2G2_34();
int goodG2B1_37();
int goodG2B2_37();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_good();
int __fastcall badSink_11(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_bad();
int __fastcall goodG2BSink_11(int a1);
int goodG2B_72();
int __fastcall goodB2GSink_5(int a1);
int goodB2G_45();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_34_bad();
int goodG2B_73();
int goodB2G_46();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_34_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_bad();
int goodG2B_74();
int goodB2G_47();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(__int64 a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_bad();
int goodB2G1_35();
int goodB2G2_35();
int goodG2B1_38();
int goodG2B2_38();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad();
int goodG2B1_39();
int goodG2B2_39();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodB2GSink(__int64 a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_bad();
int goodB2G1_36();
int goodB2G2_36();
int goodG2B1_40();
int goodG2B2_40();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_bad();
int goodG2B_75();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_bad();
int goodG2B1_41();
int goodG2B2_41();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad();
int goodG2B_76();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_bad();
int goodG2B_77();
int goodB2G_48();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_bad();
int goodG2B_78();
int goodB2G_49();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_badSink(void *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink(void *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_bad();
int goodG2B_79();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_bad();
int goodG2B_80();
int goodB2G_50();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_bad();
int goodG2B_81();
int goodB2G_51();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_good();
int __fastcall badSink_12(char *a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad();
int __fastcall goodG2BSink_12(char *a1);
__int64 goodG2B_82();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_bad();
int goodG2B_83();
int goodB2G_52();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_bad();
int goodG2B_84();
int goodB2G_53();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_bad();
int goodG2B_85();
__int64 goodB2G_54();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_bad();
int goodG2B_86();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_badSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(wchar_t **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_bad();
int goodG2B_87();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_bad();
int goodG2B_88();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_bad();
int goodB2G1_37();
int goodB2G2_37();
int goodG2B1_42();
int goodG2B2_42();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_bad();
int goodG2B1_43();
int goodG2B2_43();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_bad();
int goodG2B_89();
int goodB2G_55();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_bad();
int goodG2B1_44();
int goodG2B2_44();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_bad();
int goodG2B_90();
int goodB2G_56();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodB2GSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_bad();
int goodG2B_91();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_good();
int badSink_13();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_bad();
int goodG2BSink_13();
int goodG2B_92();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodB2GSink();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_bad();
int good1_7();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_bad();
int goodB2G1_38();
int goodB2G2_38();
int goodG2B1_45();
int goodG2B2_45();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_bad();
int goodG2B1_46();
int goodG2B2_46();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_bad();
int goodB2G1_39();
int goodB2G2_39();
int goodG2B1_47();
int goodG2B2_47();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_bad();
int goodG2B_93();
int goodB2G_57();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_good();
__int64 __fastcall badSource_1(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_bad();
__int64 goodG2BSource_1();
int goodG2B_94();
__int64 __fastcall goodB2GSource_1(unsigned int a1);
int goodB2G_58();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_bad();
int goodG2B1_48();
int goodG2B2_48();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_bad();
int goodG2B1_49();
int goodG2B2_49();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_bad();
int goodG2B_95();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_bad();
int good1_8();
int good2_3();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_bad();
int goodG2B_96();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_bad();
int goodG2B_97();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68_bad();
int goodG2B_98();
int goodB2G_59();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_bad();
int goodG2B_99();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad();
int good1_9();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_bad();
int goodG2B_100();
int goodB2G_60();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_badSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_bad();
int goodB2G1_40();
int goodB2G2_40();
int goodG2B1_50();
int goodG2B2_50();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_badSource();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodG2BSource();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodB2GSource();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_bad();
int goodG2B_101();
int goodB2G_61();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_good();
int __fastcall badSink_14(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_bad();
int __fastcall goodG2BSink_14(int a1);
int goodG2B_102();
int __fastcall goodB2GSink_6(int a1);
int goodB2G_62();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_53_bad();
int goodG2B_103();
int goodB2G_63();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_bad();
int goodG2B_104();
int goodB2G_64();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad();
int goodG2B1_51();
int goodG2B2_51();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_bad();
int goodG2B_105();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_bad();
int goodG2B_106();
int goodB2G_65();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad();
int good1_10();
int good2_4();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_good();
int __fastcall badSink_15(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_bad();
int __fastcall goodB2G1Sink_1(int a1);
int goodB2G1_41();
int __fastcall goodB2G2Sink_1(int a1);
int goodB2G2_41();
int __fastcall goodG2BSink_15(int a1);
int goodG2B_107();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodB2GSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_bad();
int goodG2B1_52();
int goodG2B2_52();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad();
int good1_11();
int good2_5();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_bad();
int goodG2B_108();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_bad();
int goodG2B_109();
int goodB2G_66();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_bad();
int goodG2B1_53();
int goodG2B2_53();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_bad();
int goodG2B1_54();
int goodG2B2_54();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad();
int good1_12();
int good2_6();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_bad();
int goodB2G1_42();
int goodB2G2_42();
int goodG2B1_55();
int goodG2B2_55();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_bad();
int goodG2B1_56();
int goodG2B2_56();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodB2GSink(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_bad();
int goodG2B_110();
__int64 goodB2G_67();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_bad();
int goodG2B1_57();
int goodG2B2_57();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_bad();
int goodG2B_111();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_bad();
int goodG2B_112();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_bad();
int goodB2G1_43();
int goodB2G2_43();
int goodG2B1_58();
int goodG2B2_58();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_bad();
int goodB2G1_44();
int goodB2G2_44();
int goodG2B1_59();
int goodG2B2_59();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_52_bad();
int goodG2B_113();
int goodB2G_68();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_52_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_bad();
int goodG2B_114();
int goodB2G_69();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_bad();
int goodG2B_115();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_bad();
int goodG2B_116();
int goodB2G_70();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_bad();
int goodG2B_117();
int goodB2G_71();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad();
int goodB2G_72();
int goodG2B_118();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_bad();
int goodB2G1_45();
int goodB2G2_45();
int goodG2B1_60();
int goodG2B2_60();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_bad();
int goodG2B_119();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_bad();
int goodB2G_73();
int goodG2B_120();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_goodG2BSink(unsigned int *a1);
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_bad();
int goodG2B1_61();
int goodG2B2_61();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_bad();
int goodB2G1_46();
int goodB2G2_46();
int goodG2B1_62();
int goodG2B2_62();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_good();
__int64 badSource_2();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_bad();
__int64 goodG2BSource_2();
int goodG2B_121();
__int64 goodB2GSource_2();
int goodB2G_74();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_bad();
int goodB2G1_47();
int goodB2G2_47();
int goodG2B1_63();
int goodG2B2_63();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_bad();
int goodG2B_122();
int goodB2G_75();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_bad();
int goodG2B1_64();
int goodG2B2_64();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad();
int good1_13();
int good2_7();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_51_bad();
int goodG2B_123();
int goodB2G_76();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_51_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_bad();
int goodG2B_124();
int goodB2G_77();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_bad();
int goodG2B_125();
int goodB2G_78();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_bad();
int goodG2B_126();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_bad();
int goodG2B1_65();
int goodG2B2_65();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_bad();
int goodB2G1_48();
int goodB2G2_48();
int goodG2B1_66();
int goodG2B2_66();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_good();
int __fastcall badSink_16(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_bad();
int __fastcall goodG2BSink_16(int a1);
int goodG2B_127();
int __fastcall goodB2GSink_7(int a1);
int goodB2G_79();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_good();
int __fastcall badSink_17(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_bad();
int __fastcall goodB2G1Sink_2(int a1);
int goodB2G1_49();
int __fastcall goodB2G2Sink_2(int a1);
int goodB2G2_49();
int __fastcall goodG2BSink_17(int a1);
int goodG2B_128();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_good();
int badSink_18();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad();
int goodG2BSink_18();
int goodG2B_129();
int goodB2GSink_8();
int goodB2G_80();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad();
int goodB2G1_50();
int goodB2G2_50();
int goodG2B1_67();
int goodG2B2_67();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_bad();
int goodG2B_130();
int goodB2G_81();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_bad();
int goodG2B_131();
int goodB2G_82();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_badSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink(void **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_bad();
int goodG2B1_68();
int goodG2B2_68();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad();
int goodB2G1_51();
int goodB2G2_51();
int goodG2B1_69();
int goodG2B2_69();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_bad();
int goodG2B_132();
int goodB2G_83();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad();
int goodG2B1_70();
int goodG2B2_70();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_bad();
int goodB2G1_52();
int goodB2G2_52();
int goodG2B1_71();
int goodG2B2_71();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_bad();
int good1_14();
int good2_8();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_bad();
int goodG2B_133();
int goodB2G_84();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_bad();
int goodG2B_134();
int goodB2G_85();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodB2GSink(__int64 a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_bad();
int goodG2B_135();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad();
int goodG2B_136();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_bad();
int goodG2B_137();
int goodB2G_86();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_bad();
int goodG2B_138();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad();
int good1_15();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_bad();
int goodG2B_139();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad();
int goodG2B_140();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_bad();
int goodB2G1_53();
int goodB2G2_53();
int goodG2B1_72();
int goodG2B2_72();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_bad();
int goodG2B_141();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodB2GSink(int *a1);
const char *badSource_3();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_42_bad();
const char *goodG2BSource_3();
int goodG2B_142();
const char *goodB2GSource_3();
int goodB2G_87();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_42_good();
__int64 badSource_4();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_bad();
__int64 goodG2BSource_4();
int goodG2B_143();
__int64 goodB2GSource_4();
int goodB2G_88();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_goodG2BSink(char *a1);
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_bad();
int goodB2G1_54();
int goodB2G2_54();
int goodG2B1_73();
int goodG2B2_73();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_bad();
int goodG2B1_74();
int goodG2B2_74();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad();
int goodG2B_144();
int goodB2G_89();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_bad();
int goodB2G1_55();
int goodB2G2_55();
int goodG2B_145();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_bad();
int goodB2G1_56();
int goodB2G2_56();
int goodG2B1_75();
int goodG2B2_75();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_bad();
int goodG2B1_76();
int goodG2B2_76();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_bad();
int goodG2B1_77();
int goodG2B2_77();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_bad();
int good1_16();
int good2_9();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad();
int good1_17();
int good2_10();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_64_bad();
int goodG2B_146();
int goodB2G_90();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_bad();
int goodG2B_147();
int goodB2G_91();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_bad();
int goodB2G_92();
int goodG2B_148();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_bad();
int goodB2G1_57();
int goodB2G2_57();
int goodG2B1_78();
int goodG2B2_78();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_goodG2BSink(_DWORD *a1);
int __fastcall badSink_19(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_bad();
int __fastcall goodG2BSink_19(int a1);
int goodG2B_149();
int __fastcall goodB2GSink_9(int a1);
int goodB2G_93();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_bad();
int goodG2B_150();
int goodB2G_94();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_good();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_bad();
__int64 goodG2B_151();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_good();
int badSink_20();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_bad();
int goodG2BSink_20();
int goodG2B_152();
int goodB2GSink_10();
int goodB2G_95();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_bad();
int goodG2B1_79();
int goodG2B2_79();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_bad();
int good1_18();
int good2_11();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad();
int goodG2B1_80();
int goodG2B2_80();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good();
int __fastcall badSink_21(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_bad();
int __fastcall goodG2BSink_21(_DWORD *a1);
int goodG2B_153();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_bad();
int goodB2G1_58();
int goodB2G2_58();
int goodG2B1_81();
int goodG2B2_81();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad();
int goodG2B_154();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad();
int good1_19();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodB2GSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_bad();
int goodB2G_96();
int goodG2B_155();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_goodG2BSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_bad();
int goodG2B_156();
int goodB2G_97();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_bad();
int goodB2G1_59();
int goodB2G2_59();
int goodG2B1_82();
int goodG2B2_82();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_bad();
int goodG2B_157();
int goodB2G_98();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad();
int goodG2B1_83();
int goodG2B2_83();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_bad();
int goodB2G1_60();
int goodB2G2_60();
int goodG2B1_84();
int goodG2B2_84();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_good();
int badSink_22();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_bad();
int goodG2BSink_22();
int goodG2B_158();
int goodB2GSink_11();
int goodB2G_99();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_bad();
int goodG2B_159();
int goodB2G_100();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_goodG2BSink(char *a1);
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad();
int goodG2B1_85();
int goodG2B2_85();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good();
int __fastcall badSink_23(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_bad();
int __fastcall goodB2G1Sink_3(int a1);
int goodB2G1_61();
int __fastcall goodB2G2Sink_3(int a1);
int goodB2G2_61();
int __fastcall goodG2BSink_23(int a1);
int goodG2B_160();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_good();
__int64 staticReturnsTrue_6();
__int64 staticReturnsFalse_6();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad();
int good1_20();
int good2_12();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_bad();
int goodB2G1_62();
int goodB2G2_62();
int goodG2B1_86();
int goodG2B2_86();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_bad();
int goodB2G_101();
int goodG2B_161();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_bad();
int goodG2B_162();
int goodB2G_102();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_bad();
int goodG2B_163();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodB2GSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_bad();
int good1_21();
int good2_13();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_bad();
int goodG2B_164();
int goodB2G_103();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_bad();
int goodB2G_104();
int goodG2B_165();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_bad();
int goodG2B1_87();
int goodG2B2_87();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_goodG2BSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodB2GSink(int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_bad();
int goodG2B_166();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_bad();
int goodB2G1_63();
int goodB2G2_63();
int goodG2B1_88();
int goodG2B2_88();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_bad();
int goodB2G1_64();
int goodB2G2_64();
int goodG2B_167();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_bad();
int goodB2G1_65();
int goodB2G2_65();
int goodG2B1_89();
int goodG2B2_89();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_bad();
int goodB2G1_66();
int goodB2G2_66();
int goodG2B1_90();
int goodG2B2_90();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_bad();
int goodB2G1_67();
int goodB2G2_67();
int goodG2B1_91();
int goodG2B2_91();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_goodG2BSink();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_bad();
int goodG2B_168();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_bad();
int goodB2G1_68();
int goodB2G2_68();
int goodG2B1_92();
int goodG2B2_92();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_bad();
int goodG2B_169();
int goodB2G_105();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_bad();
int goodB2G1_69();
int goodB2G2_69();
int goodG2B1_93();
int goodG2B2_93();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_bad();
int goodB2G1_70();
int goodB2G2_70();
int goodG2B1_94();
int goodG2B2_94();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_bad();
int goodG2B_170();
int goodB2G_106();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_63_bad();
int goodG2B_171();
int goodB2G_107();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_63_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad();
int goodG2B_172();
int goodB2G_108();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_bad();
int goodG2B_173();
int goodB2G_109();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_goodG2BSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_bad();
int goodG2B_174();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_bad();
int goodG2B_175();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_badSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_goodG2BSink(void **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_bad();
int goodB2G1_71();
int goodB2G2_71();
int goodG2B1_95();
int goodG2B2_95();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_bad();
int goodB2G1_72();
int goodB2G2_72();
int goodG2B1_96();
int goodG2B2_96();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_bad();
int good1_22();
int good2_14();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_bad();
int goodG2B_176();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_bad();
int goodB2G1_73();
int goodB2G2_73();
int goodG2B1_97();
int goodG2B2_97();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_bad();
int goodG2B_177();
int goodB2G_110();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_bad();
int goodB2G1_74();
int goodB2G2_74();
int goodG2B1_98();
int goodG2B2_98();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_bad();
int goodG2B_178();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad();
int goodG2B1_99();
int goodG2B2_99();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodB2GSink(int a1);
void CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad();
void goodB2G_111();
void goodG2B_179();
void CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodB2GSink(int a1);
void CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_bad();
void goodB2G_112();
int goodG2B_180();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_bad();
int goodG2B_181();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_bad();
int goodB2G_113();
int goodG2B_182();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_bad();
int goodG2B_183();
int goodB2G_114();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_good();
int __fastcall badSink_24(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad();
int __fastcall goodG2BSink_24(int a1);
int goodG2B_184();
int __fastcall goodB2GSink_12(int a1);
__int64 goodB2G_115();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_goodG2BSink();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_bad();
int goodG2B1_100();
int goodG2B2_100();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_good();
int badSink_25();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_bad();
int goodG2BSink_25();
int goodG2B_185();
int goodB2GSink_13();
int goodB2G_116();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_good();
int badSink_26();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_bad();
int goodG2BSink_26();
int goodG2B_186();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_good();
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_badSource();
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodG2BSource();
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodB2GSource();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodB2GSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_bad();
int goodB2G_117();
int goodG2B_187();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_bad();
int goodG2B_188();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodB2GSink(int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_bad();
int goodG2B_189();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad();
int good1_23();
int good2_15();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_bad();
int goodB2G_118();
int goodG2B_190();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_bad();
int goodG2B1_101();
int goodG2B2_101();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_bad();
int goodB2G1_75();
int goodB2G2_75();
int goodG2B1_102();
int goodG2B2_102();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_bad();
int goodB2G1_76();
int goodB2G2_76();
int goodG2B1_103();
int goodG2B2_103();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_bad();
int goodG2B_191();
int goodB2G_119();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_bad();
int goodG2B1_104();
int goodG2B2_104();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_bad();
int goodG2B1_105();
int goodG2B2_105();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_bad();
int goodG2B_192();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_67_bad();
int goodG2B_193();
int goodB2G_120();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_67_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_13_bad();
int goodB2G1_77();
int goodB2G2_77();
int goodG2B1_106();
int goodG2B2_106();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_13_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodB2GSink(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_badSource();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodG2BSource();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodB2GSource();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_bad();
int goodB2G_121();
int goodG2B_194();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_bad();
int goodB2G_122();
int goodG2B_195();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad();
int good1_24();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_bad();
int goodG2B_196();
int goodB2G_123();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_badSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_bad();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_goodG2BSink(char *a1);
int goodG2B_197();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_bad();
int goodG2B1_107();
int goodG2B2_107();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_bad();
int good1_25();
int good2_16();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_bad();
int goodG2B_198();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_bad();
int goodG2B1_108();
int goodG2B2_108();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_bad();
int goodG2B_199();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_bad();
int good1_26();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_bad();
int goodB2G1_78();
int goodB2G2_78();
int goodG2B_200();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_bad();
int good1_27();
int good2_17();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_bad();
int goodB2G_124();
int goodG2B_201();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_bad();
int goodB2G1_79();
int goodB2G2_79();
int goodG2B_202();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodB2GSink(int a1);
int badSink_27();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_bad();
int goodG2BSink_27();
int goodG2B_203();
int goodB2GSink_14();
int goodB2G_125();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_18_bad();
int goodB2G_126();
int goodG2B_204();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_bad();
int goodG2B_205();
int goodB2G_127();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_bad();
int goodB2G1_80();
int goodB2G2_80();
int goodG2B1_109();
int goodG2B2_109();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_03_bad();
int goodB2G1_81();
int goodB2G2_81();
int goodG2B1_110();
int goodG2B2_110();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad();
int goodG2B1_111();
int goodG2B2_111();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good();
void CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_bad();
void goodB2G_128();
int goodG2B_206();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad();
int good1_28();
int good2_18();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_bad();
int goodG2B_207();
int goodB2G_129();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_bad();
int goodB2G1_82();
int goodB2G2_82();
int goodG2B1_112();
int goodG2B2_112();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_good();
int __fastcall badSink_28(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad();
int __fastcall goodG2BSink_28(int a1);
int goodG2B_208();
int __fastcall goodB2GSink_15(int a1);
__int64 goodB2G_130();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_badSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(char **a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(wchar_t **a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_bad();
int goodB2G1_83();
int goodB2G2_83();
int goodG2B1_113();
int goodG2B2_113();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_good();
__int64 staticReturnsTrue_7();
__int64 staticReturnsFalse_7();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_bad();
int goodG2B1_114();
int goodG2B2_114();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_goodG2BSink(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_bad();
int goodG2B_209();
int goodB2G_131();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_bad();
int goodG2B_210();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_bad();
int goodG2B_211();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad();
int good1_29();
int good2_19();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad();
int good1_30();
int good2_20();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodB2GSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodB2GSink(int a1);
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_badSource(unsigned int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodG2BSource();
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodB2GSource(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_bad();
int good1_31();
int good2_21();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodB2GSink(int *a1);
int __fastcall badSink_29(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad();
int __fastcall goodB2G1Sink_4(wchar_t *a1);
int goodB2G1_84();
int __fastcall goodB2G2Sink_4(wchar_t *a1);
int goodB2G2_84();
int __fastcall goodG2BSink_29(char *a1);
int goodG2B_212();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_bad();
int goodB2G1_85();
int goodB2G2_85();
int goodG2B1_115();
int goodG2B2_115();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_bad();
int goodG2B1_116();
int goodG2B2_116();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_bad();
int goodG2B_213();
int goodB2G_132();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_good();
__int64 staticReturnsTrue_8();
__int64 staticReturnsFalse_8();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_bad();
int goodB2G1_86();
int goodB2G2_86();
int goodG2B1_117();
int goodG2B2_117();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_bad();
int goodG2B_214();
int goodB2G_133();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_badSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_bad();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink(_DWORD *a1);
int goodG2B_215();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_bad();
int goodG2B_216();
int goodB2G_134();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_bad();
int goodG2B_217();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_bad();
int goodG2B_218();
int goodB2G_135();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_bad();
int goodB2G_136();
int goodG2B_219();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_bad();
int goodG2B_220();
int goodB2G_137();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_bad();
int goodG2B_221();
int goodB2G_138();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_bad();
int goodG2B_222();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_goodG2BSink(__int64 a1);
__int64 staticReturnsTrue_9();
__int64 staticReturnsFalse_9();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_bad();
int good1_32();
int good2_22();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad();
int goodB2G_139();
int goodG2B_223();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_bad();
int goodG2B_224();
int goodB2G_140();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Sink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_bad();
int goodB2G1_87();
int goodB2G2_87();
int goodG2B1_118();
int goodG2B2_118();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_bad();
int goodB2G_141();
int goodG2B_225();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_bad();
int goodB2G1_88();
int goodB2G2_88();
int goodG2B1_119();
int goodG2B2_119();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_bad();
int goodG2B1_120();
int goodG2B2_120();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_goodG2BSink(_DWORD *a1);
int __fastcall badSink_30(char *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad();
int __fastcall goodG2BSink_30(char *a1);
int goodG2B_226();
int __fastcall goodB2GSink_16(wchar_t *a1);
int goodB2G_142();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_09_bad();
int goodB2G1_89();
int goodB2G2_89();
int goodG2B1_121();
int goodG2B2_121();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_bad();
int goodG2B1_122();
int goodG2B2_122();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_02_bad();
int goodB2G1_90();
int goodB2G2_90();
int goodG2B1_123();
int goodG2B2_123();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_02_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_bad();
int goodG2B_227();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_bad();
int goodB2G1_91();
int goodB2G2_91();
int goodG2B1_124();
int goodG2B2_124();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_bad();
int goodB2G1_92();
int goodB2G2_92();
int goodG2B1_125();
int goodG2B2_125();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_bad();
int goodG2B_228();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodB2GSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_bad();
int goodG2B_229();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_bad();
int goodG2B1_126();
int goodG2B2_126();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodB2GSink(int a1);
int __fastcall badSink_31(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_bad();
int __fastcall goodG2BSink_31(int a1);
int goodG2B_230();
int __fastcall goodB2GSink_17(int a1);
__int64 goodB2G_143();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_bad();
int goodG2B1_127();
int goodG2B2_127();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad();
int good1_33();
int good2_23();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_badSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_bad();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_goodG2BSink(unsigned int *a1);
int goodG2B_231();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_badSink();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(wchar_t *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_bad();
int goodG2B_232();
int goodB2G_144();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_bad();
int goodG2B_233();
int goodB2G_145();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_bad();
int goodG2B_234();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(_DWORD *a1);
__int64 staticReturnsTrue_10();
__int64 staticReturnsFalse_10();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad();
int goodB2G1_93();
int goodB2G2_93();
int goodG2B1_128();
int goodG2B2_128();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_bad();
int goodG2B1_129();
int goodG2B2_129();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodB2GSink(int *a1);
__int64 staticReturnsTrue_11();
__int64 staticReturnsFalse_11();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_bad();
int goodB2G1_94();
int goodB2G2_94();
int goodG2B1_130();
int goodG2B2_130();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_bad();
int goodG2B1_131();
int goodG2B2_131();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_good();
int __fastcall badSink_32(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_bad();
int __fastcall goodB2G1Sink_5(int a1);
int goodB2G1_95();
int __fastcall goodB2G2Sink_5(int a1);
int goodB2G2_95();
int __fastcall goodG2BSink_32(int a1);
int goodG2B_235();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_bad();
int goodB2G1_96();
int goodB2G2_96();
int goodG2B1_132();
int goodG2B2_132();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_bad();
int goodG2B_236();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_bad();
int goodG2B_237();
int goodB2G_146();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_bad();
int goodB2G_147();
int goodG2B_238();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_badSink(unsigned int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_goodG2BSink(unsigned int *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_bad();
int goodG2B_239();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_bad();
int goodG2B_240();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_bad();
int goodB2G1_97();
int goodB2G2_97();
int goodG2B1_133();
int goodG2B2_133();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_bad();
int goodG2B_241();
int goodB2G_148();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_bad();
int goodG2B_242();
int goodB2G_149();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_bad();
int goodB2G_150();
int goodG2B_243();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_bad();
int goodB2G1_98();
int goodB2G2_98();
int goodG2B1_134();
int goodG2B2_134();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_bad();
int goodG2B_244();
int goodB2G_151();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_bad();
int goodG2B_245();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_good();
__int64 __fastcall badSource_5(unsigned int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_bad();
__int64 goodG2BSource_5();
int goodG2B_246();
__int64 __fastcall goodB2GSource_5(unsigned int a1);
int goodB2G_152();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad();
int goodB2G1_99();
int goodB2G2_99();
int goodG2B1_135();
int goodG2B2_135();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_bad();
int goodG2B_247();
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad();
int goodG2B_248();
int goodB2G_153();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_54_bad();
int goodG2B_249();
int goodB2G_154();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad();
int goodB2G1_100();
int goodB2G2_100();
int goodG2B1_136();
int goodG2B2_136();
int CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_bad();
int goodG2B1_137();
int goodG2B2_137();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_bad();
int goodG2B_250();
int goodB2G_155();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_bad();
int goodB2G1_101();
int goodB2G2_101();
int goodG2B1_138();
int goodG2B2_138();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_good();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_bad();
int good1_34();
int good2_24();
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_bad();
int goodB2G1_102();
int goodB2G2_102();
int goodG2B1_139();
int goodG2B2_139();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_good();
int __fastcall badSink_33(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad();
int __fastcall goodG2BSink_33(int a1);
int goodG2B_251();
int __fastcall goodB2GSink_18(int a1);
int goodB2G_156();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad();
int goodB2G1_103();
int goodB2G2_103();
int goodG2B1_140();
int goodG2B2_140();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good();
void CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad();
void goodB2G_157();
int goodG2B_252();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_badSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodG2BSink(int *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodB2GSink(int *a1);
int __fastcall badSink_34(int a1);
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_bad();
int __fastcall goodG2BSink_34(int a1);
int goodG2B_253();
int __fastcall goodB2GSink_19(int a1);
__int64 goodB2G_158();
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_bad();
int goodG2B1_141();
int goodG2B2_141();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_good();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_bad();
int goodG2B_254();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_bad();
int goodG2B_255();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_badSink(_DWORD *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink(_DWORD *a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad();
int goodG2B_256();
int goodB2G_159();
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_badSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodG2BSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodB2GSink(__int64 a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_badSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(char *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(wchar_t *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_badSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodG2BSink(int a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodB2GSink(int a1);
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_bad();
int goodG2B_257();
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_good();
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_badSink(void *a1);
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_goodG2BSink(void *a1);
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_35();
void good2_25();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

wchar_t dword_460608[43] =
{
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  0
}; // idb
_UNKNOWN unk_460E4C; // weak
wchar_t dword_463DA0[43] =
{
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  65,
  0
}; // idb
_UNKNOWN unk_464810; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_682010)(void) = NULL; // weak
int staticFive = 5; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticFive_0 = 5; // weak
int staticFive_1 = 5; // weak
int staticTrue_1 = 1; // weak
int staticFive_2 = 5; // weak
int staticTrue_2 = 1; // weak
int staticTrue_3 = 1; // weak
int staticFive_3 = 5; // weak
int staticTrue_4 = 1; // weak
int staticFive_4 = 5; // weak
int staticTrue_5 = 1; // weak
int staticTrue_6 = 1; // weak
int staticFive_5 = 5; // weak
int staticFive_6 = 5; // weak
int staticTrue_7 = 1; // weak
int staticFive_7 = 5; // weak
int staticFive_8 = 5; // weak
int staticTrue_8 = 1; // weak
int staticFive_9 = 5; // weak
int staticFive_10 = 5; // weak
int staticTrue_9 = 1; // weak
int staticTrue_10 = 1; // weak
int staticFive_11 = 5; // weak
int staticTrue_11 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData; // weak
int staticFalse; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal; // weak
int staticFalse_0; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal; // weak
int staticFalse_1; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData; // weak
int staticFalse_2; // weak
int staticFalse_3; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData; // weak
int staticFalse_4; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int staticFalse_5; // weak
int staticFalse_6; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData; // weak
int badStatic_3; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal; // weak
int staticFalse_7; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData; // weak
int badStatic_4; // weak
int goodB2G1Static_4; // weak
int goodB2G2Static_4; // weak
int goodG2BStatic_4; // weak
int staticFalse_8; // weak
int staticFalse_9; // weak
int staticFalse_10; // weak
int badStatic_5; // weak
int goodB2G1Static_5; // weak
int goodB2G2Static_5; // weak
int goodG2BStatic_5; // weak
int staticFalse_11; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData; // weak
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData; // weak
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400D48) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400FF0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400D70) ----------------------------------------------------
__int64 sub_400D70()
{
  return qword_682010();
}
// 682010: using guessed type __int64 (*qword_682010)(void);

//----- (0000000000401000) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 401006: positive sp value 8 has been found

//----- (0000000000401030) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6824399LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6824399LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000401060) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (00000000004010A0) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 6821D0: using guessed type char completed_6355;

//----- (00000000004010C0) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 4010C0: could not find valid save-restore pair for rbp

//----- (00000000004010ED) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_53_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_53_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_42_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_42_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_54_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_54_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_good();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_68_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_68_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_65_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_65_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_good();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_good();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_53_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_53_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_42_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_42_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_54_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_54_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad();");
  CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_68_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_68_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE135_65_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE135_65_bad();
  printLine("Calling CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_bad();");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_bad();
  return 0;
}
// 68239C: using guessed type int globalArgc;
// 6823A0: using guessed type __int64 globalArgv;

//----- (0000000000405598) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  const char *v2; // [rsp+10h] [rbp-20h]
  const char *v3; // [rsp+28h] [rbp-8h]

  v3 = "A";
  v2 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_badSink((__int64)&v1);
}

//----- (00000000004055C6) ----------------------------------------------------
int goodG2B()
{
  char v1; // [rsp+0h] [rbp-30h]
  const char *v2; // [rsp+10h] [rbp-20h]
  const char *v3; // [rsp+28h] [rbp-8h]

  v3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v2 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004055F4) ----------------------------------------------------
int goodB2G()
{
  char v1; // [rsp+0h] [rbp-30h]
  const char *v2; // [rsp+10h] [rbp-20h]
  const char *v3; // [rsp+28h] [rbp-8h]

  v3 = "A";
  v2 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000405622) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_66_good()
{
  goodG2B();
  return goodB2G();
}

//----- (000000000040563C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_badSink((__int64)&v5);
}
// 40563C: using guessed type char buf[16];

//----- (0000000000405772) ----------------------------------------------------
int goodG2B_0()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040579C) ----------------------------------------------------
int goodB2G_0()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodB2GSink((__int64)&v5);
}
// 40579C: using guessed type char buf[16];

//----- (00000000004058D2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66_good()
{
  goodG2B_0();
  return goodB2G_0();
}

//----- (00000000004058EC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)dword_460608;
  v0 = strlen((const char *)dword_460608);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_460608);
  return printLine((const char *)dest);
}

//----- (000000000040598A) ----------------------------------------------------
int goodB2G1()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = dword_460608;
  v0 = wcslen(dword_460608);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_460608);
  return printWLine((__int64)dest);
}

//----- (0000000000405A34) ----------------------------------------------------
int goodB2G2()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = dword_460608;
  v0 = wcslen(dword_460608);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_460608);
  return printWLine((__int64)dest);
}

//----- (0000000000405AD2) ----------------------------------------------------
int goodG2B1()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (0000000000405B78) ----------------------------------------------------
int goodG2B2()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (0000000000405C12) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  return goodG2B2();
}

//----- (0000000000405C40) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000405C78) ----------------------------------------------------
int goodG2B_1()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodG2BSink(7);
}

//----- (0000000000405C9A) ----------------------------------------------------
int goodB2G_1()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodB2GSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000405CD2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53_good()
{
  goodG2B_1();
  return goodB2G_1();
}

//----- (0000000000405CEC) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (0000000000405CF7) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (0000000000405D02) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000405DE6) ----------------------------------------------------
int goodB2G1_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000405EDC) ----------------------------------------------------
int goodB2G2_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000405FC6) ----------------------------------------------------
int goodG2B1_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000406070) ----------------------------------------------------
int goodG2B2_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue() )
    v7 = 7;
  result = staticReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000040610E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (000000000040613C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004061E4) ----------------------------------------------------
int goodG2B_2()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040628C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31_good()
{
  return goodG2B_2();
}

//----- (000000000040629C) ----------------------------------------------------
int badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821D4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData;

//----- (0000000000406319) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData = v7;
  return badSink();
}
// 6821D4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_badData;
// 406319: using guessed type char buf[16];

//----- (000000000040640A) ----------------------------------------------------
int goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821D8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData;

//----- (0000000000406487) ----------------------------------------------------
int goodG2B_3()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData = 7;
  return goodG2BSink();
}
// 6821D8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodG2BData;

//----- (00000000004064B2) ----------------------------------------------------
int goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821DC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData;

//----- (0000000000406535) ----------------------------------------------------
int goodB2G_2()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData = v7;
  return goodB2GSink();
}
// 6821DC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_goodB2GData;
// 406535: using guessed type char buf[16];

//----- (0000000000406626) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45_good()
{
  goodG2B_3();
  return goodB2G_2();
}

//----- (0000000000406640) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 406640: using guessed type char buf[16];

//----- (00000000004067A0) ----------------------------------------------------
int goodB2G1_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4067A0: using guessed type char buf[16];

//----- (0000000000406912) ----------------------------------------------------
int goodB2G2_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 406912: using guessed type char buf[16];

//----- (0000000000406A78) ----------------------------------------------------
int goodG2B1_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000406B1A) ----------------------------------------------------
int goodG2B2_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000406BB0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_1();
  return goodG2B2_1();
}

//----- (0000000000406BDE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_badSink((void *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000406C38) ----------------------------------------------------
int goodG2B_4()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink((void *)(16
                                                                                   * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000406C92) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67_good()
{
  return goodG2B_4();
}

//----- (0000000000406CA2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_badSink(v2);
}

//----- (0000000000406D12) ----------------------------------------------------
int goodG2B_5()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodG2BSink(7);
}

//----- (0000000000406D3A) ----------------------------------------------------
int goodB2G_3()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodB2GSink(v2);
}

//----- (0000000000406DAA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67_good()
{
  goodG2B_5();
  return goodB2G_3();
}

//----- (0000000000406DC4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000406E8E) ----------------------------------------------------
int goodB2G1_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000406F5E) ----------------------------------------------------
int goodB2G2_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040702E) ----------------------------------------------------
int goodG2B1_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004070B2) ----------------------------------------------------
int goodG2B2_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000407136) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (0000000000407164) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_badSink((void **)&v2);
}

//----- (00000000004071B6) ----------------------------------------------------
int goodG2B_6()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_goodG2BSink((void **)&v2);
}

//----- (0000000000407208) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63_good()
{
  return goodG2B_6();
}

//----- (0000000000407218) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040728F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000407306) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000407383) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_badSink(a1);
}

//----- (000000000040739A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodG2BSink(a1);
}

//----- (00000000004073B1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodB2GSink(a1);
}

//----- (00000000004073C8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int k; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%d", &v6);
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407487) ----------------------------------------------------
int goodB2G_4()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int k; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%d", &v6);
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040754E) ----------------------------------------------------
int goodG2B_7()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (00000000004075F6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17_good()
{
  goodB2G_4();
  return goodG2B_7();
}

//----- (0000000000407610) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040763D) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodG2BSource()
{
  return 7LL;
}

//----- (0000000000407650) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040767D) ----------------------------------------------------
__int64 __fastcall badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (00000000004076DA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000407762) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 7LL;
}

//----- (0000000000407775) ----------------------------------------------------
int goodG2B_8()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004077FD) ----------------------------------------------------
__int64 __fastcall goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000040785A) ----------------------------------------------------
int goodB2G_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004078E8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42_good()
{
  goodB2G_5();
  return goodG2B_8();
}

//----- (0000000000407902) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_badSink(a1);
}

//----- (0000000000407919) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodG2BSink(a1);
}

//----- (0000000000407930) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodB2GSink(a1);
}

//----- (0000000000407947) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_badSink(a1);
}

//----- (000000000040795E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodG2BSink(a1);
}

//----- (0000000000407975) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodB2GSink(a1);
}

//----- (000000000040798C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000407A70) ----------------------------------------------------
int goodB2G1_3()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000407B66) ----------------------------------------------------
int goodB2G2_3()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000407C50) ----------------------------------------------------
int goodG2B1_3()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000407CFA) ----------------------------------------------------
int goodG2B2_3()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000407D98) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (0000000000407DC6) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_badSink)(v2);
}

//----- (0000000000407E39) ----------------------------------------------------
int goodG2B_9()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodG2BSink(7);
}

//----- (0000000000407E64) ----------------------------------------------------
__int64 goodB2G_6()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodB2GSink)(v2);
}

//----- (0000000000407ED7) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65_good()
{
  goodG2B_9();
  return goodB2G_6();
}

//----- (0000000000407EF1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000407F7A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000408003) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000408092) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000408118) ----------------------------------------------------
int good1()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000408185) ----------------------------------------------------
int good2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (00000000004081E6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14_good()
{
  good1();
  return good2();
}

//----- (0000000000408200) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( staticFive == 5 )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682154: using guessed type int staticFive;

//----- (00000000004082C8) ----------------------------------------------------
int goodG2B1_4()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( staticFive == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682154: using guessed type int staticFive;

//----- (000000000040839C) ----------------------------------------------------
int goodG2B2_4()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( staticFive == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682154: using guessed type int staticFive;

//----- (0000000000408464) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07_good()
{
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (000000000040847E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_badSink((_DWORD *)(16
                                                                                 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004084D0) ----------------------------------------------------
int goodG2B_10()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink((_DWORD *)(16
                                                                                     * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000408522) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51_good()
{
  return goodG2B_10();
}

//----- (0000000000408532) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticTrue;
  if ( staticTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682158: using guessed type int staticTrue;

//----- (000000000040860E) ----------------------------------------------------
int goodB2G1_4()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682158: using guessed type int staticTrue;
// 6821E0: using guessed type int staticFalse;

//----- (00000000004086FC) ----------------------------------------------------
int goodB2G2_4()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticTrue;
  if ( staticTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682158: using guessed type int staticTrue;

//----- (00000000004087DE) ----------------------------------------------------
int goodG2B1_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue;
  if ( staticTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682158: using guessed type int staticTrue;
// 6821E0: using guessed type int staticFalse;

//----- (0000000000408880) ----------------------------------------------------
int goodG2B2_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue )
    v7 = 7;
  result = staticTrue;
  if ( staticTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682158: using guessed type int staticTrue;

//----- (0000000000408916) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B1_5();
  return goodG2B2_5();
}

//----- (0000000000408944) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004089D8) ----------------------------------------------------
int goodB2G1_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000408A7E) ----------------------------------------------------
int goodB2G2_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000408B18) ----------------------------------------------------
int goodG2B1_6()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000408BB8) ----------------------------------------------------
int goodG2B2_6()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000408C4C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (0000000000408C7A) ----------------------------------------------------
int __fastcall badSink_0(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000408CF1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return badSink_0(v4);
}

//----- (0000000000408D59) ----------------------------------------------------
int __fastcall goodG2BSink_0(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000408DD0) ----------------------------------------------------
int goodG2B_11()
{
  return goodG2BSink_0(7);
}

//----- (0000000000408DF2) ----------------------------------------------------
int __fastcall goodB2GSink_0(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000408E6F) ----------------------------------------------------
int goodB2G_7()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return goodB2GSink_0(v4);
}

//----- (0000000000408ED7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41_good()
{
  goodB2G_7();
  return goodG2B_11();
}

//----- (0000000000408EF1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000408F29) ----------------------------------------------------
int goodG2B_12()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodG2BSink(7);
}

//----- (0000000000408F4B) ----------------------------------------------------
int goodB2G_8()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b_goodB2GSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000408F83) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52_good()
{
  goodG2B_12();
  return goodB2G_8();
}

//----- (0000000000408F9D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000409014) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040908B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000409108) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_badSink(unsigned int **a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000409189) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_goodG2BSink(unsigned int **a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000040920A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_badSink(10);
}

//----- (000000000040922C) ----------------------------------------------------
int goodG2B_13()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodG2BSink(7);
}

//----- (000000000040924E) ----------------------------------------------------
int goodB2G_9()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b_goodB2GSink(10);
}

//----- (0000000000409270) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54_good()
{
  goodG2B_13();
  return goodB2G_9();
}

//----- (000000000040928A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+30h] [rbp-20h]
  int i; // [rsp+3Ch] [rbp-14h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000409335) ----------------------------------------------------
int goodG2B_14()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+30h] [rbp-20h]
  int i; // [rsp+3Ch] [rbp-14h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004093E0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17_good()
{
  return goodG2B_14();
}

//----- (00000000004093F0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040948B) ----------------------------------------------------
int goodB2G_10()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040952E) ----------------------------------------------------
int goodG2B_15()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004095B2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16_good()
{
  goodB2G_10();
  return goodG2B_15();
}

//----- (00000000004095CC) ----------------------------------------------------
int __fastcall badSink_1(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000409627) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = badSink_1;
  v0 = alloca(32LL);
  return badSink_1((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000409682) ----------------------------------------------------
int __fastcall goodG2BSink_1(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (00000000004096DD) ----------------------------------------------------
int goodG2B_16()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = goodG2BSink_1;
  v0 = alloca(64LL);
  return goodG2BSink_1((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000409738) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44_good()
{
  return goodG2B_16();
}

//----- (0000000000409748) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000040978D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (00000000004097D2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(a1);
}

//----- (00000000004097EC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(a1);
}

//----- (0000000000409806) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_badSink(&v5);
}
// 409806: using guessed type char buf[16];

//----- (00000000004098F0) ----------------------------------------------------
int goodG2B_17()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodG2BSink(&v1);
}

//----- (0000000000409914) ----------------------------------------------------
int goodB2G_11()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b_goodB2GSink(&v5);
}
// 409914: using guessed type char buf[16];

//----- (00000000004099FE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64_good()
{
  goodG2B_17();
  return goodB2G_11();
}

//----- (0000000000409A18) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000409ABB) ----------------------------------------------------
int goodG2B1_7()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000409B6A) ----------------------------------------------------
int goodG2B2_7()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000409C0D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_good()
{
  goodG2B1_7();
  return goodG2B2_7();
}

//----- (0000000000409C27) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000409CA9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000409D2B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000409DB3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000409E7D) ----------------------------------------------------
int goodG2B_18()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000409EFF) ----------------------------------------------------
int goodB2G_12()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000409FCF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good()
{
  goodG2B_18();
  return goodB2G_12();
}

//----- (0000000000409FE9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_badSink(a1);
}

//----- (000000000040A000) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodG2BSink(a1);
}

//----- (000000000040A017) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c_goodB2GSink(a1);
}

//----- (000000000040A02E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A0A5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A11C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A199) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A210) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A287) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A304) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040A33C) ----------------------------------------------------
int goodG2B_19()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodG2BSink(7);
}

//----- (000000000040A35E) ----------------------------------------------------
int goodB2G_13()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b_goodB2GSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040A396) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51_good()
{
  goodG2B_19();
  return goodB2G_13();
}

//----- (000000000040A3B0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_badSink();
}
// 6823AC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData;

//----- (000000000040A423) ----------------------------------------------------
int goodG2B_20()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodG2BSink();
}
// 6823A8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData;

//----- (000000000040A44E) ----------------------------------------------------
int goodB2G_14()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodB2GSink();
}
// 6823B0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData;

//----- (000000000040A4C1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_good()
{
  goodG2B_20();
  return goodB2G_14();
}

//----- (000000000040A4DB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_badSink((unsigned int **)&v2);
}

//----- (000000000040A52D) ----------------------------------------------------
int goodG2B_21()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b_goodG2BSink((unsigned int **)&v2);
}

//----- (000000000040A57F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63_good()
{
  return goodG2B_21();
}

//----- (000000000040A58F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badSink(v4);
}
// 6821E4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal;

//----- (000000000040A601) ----------------------------------------------------
int goodB2G1_6()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Sink(v4);
}
// 6821E8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Global;

//----- (000000000040A673) ----------------------------------------------------
int goodB2G2_6()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Sink(v4);
}
// 6821EC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global;

//----- (000000000040A6E5) ----------------------------------------------------
int goodG2B_22()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BSink(7);
}
// 6821F0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal;

//----- (000000000040A711) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_good()
{
  goodB2G1_6();
  goodB2G2_6();
  return goodG2B_22();
}

//----- (000000000040A735) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A7AC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A823) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040A8A0) ----------------------------------------------------
int badSink_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821F4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData;

//----- (000000000040A91D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData = v1;
  return badSink_2();
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821F4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_badData;

//----- (000000000040A95E) ----------------------------------------------------
int goodG2BSink_2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821F8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData;

//----- (000000000040A9DB) ----------------------------------------------------
int goodG2B_23()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData = 7;
  return goodG2BSink_2();
}
// 6821F8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodG2BData;

//----- (000000000040AA06) ----------------------------------------------------
int goodB2GSink_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821FC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData;

//----- (000000000040AA89) ----------------------------------------------------
int goodB2G_15()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData = v1;
  return goodB2GSink_1();
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821FC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_goodB2GData;

//----- (000000000040AACA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45_good()
{
  goodG2B_23();
  return goodB2G_15();
}

//----- (000000000040AAE4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v2; // [rsp+8h] [rbp-28h]
  __int16 v3; // [rsp+Ch] [rbp-24h]
  char v4; // [rsp+10h] [rbp-20h]
  int v5; // [rsp+18h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v6 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v6;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_badSink((__int64)&v4);
}

//----- (000000000040AB54) ----------------------------------------------------
int goodG2B_24()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040AB7E) ----------------------------------------------------
int goodB2G_16()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v2; // [rsp+8h] [rbp-28h]
  __int16 v3; // [rsp+Ch] [rbp-24h]
  char v4; // [rsp+10h] [rbp-20h]
  int v5; // [rsp+18h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v6 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v6;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b_goodB2GSink((__int64)&v4);
}

//----- (000000000040ABEE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66_good()
{
  goodG2B_24();
  return goodB2G_16();
}

//----- (000000000040AC08) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_badSink(v2);
}

//----- (000000000040AC72) ----------------------------------------------------
int goodG2B_25()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodG2BSink(7);
}

//----- (000000000040AC94) ----------------------------------------------------
int goodB2G_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b_goodB2GSink(v2);
}

//----- (000000000040ACFE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53_good()
{
  goodG2B_25();
  return goodB2G_17();
}

//----- (000000000040AD18) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_460E4C, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040ADC5) ----------------------------------------------------
int goodB2G1_7()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_460E4C, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040AE86) ----------------------------------------------------
int goodB2G2_7()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_460E4C, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040AF3B) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040AFDD) ----------------------------------------------------
int goodG2B2_8()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040B073) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (000000000040B0A1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_badSink(__int64 a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *(char **)(a1 + 16);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040B0F2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_goodG2BSink(__int64 a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *(char **)(a1 + 16);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040B143) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_badSink(10);
}

//----- (000000000040B16E) ----------------------------------------------------
int goodG2B_26()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodG2BSink(7);
}

//----- (000000000040B199) ----------------------------------------------------
int goodB2G_18()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b_goodB2GSink(10);
}

//----- (000000000040B1C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65_good()
{
  goodG2B_26();
  return goodB2G_18();
}

//----- (000000000040B1DE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040B277) ----------------------------------------------------
int goodG2B_27()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040B310) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18_good()
{
  return goodG2B_27();
}

//----- (000000000040B320) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_14_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFive == 5 )
    s = "A";
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040B3C2) ----------------------------------------------------
int goodB2G1_8()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFive == 5 )
    s = (wchar_t *)"A";
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040B470) ----------------------------------------------------
int goodB2G2_8()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFive == 5 )
    s = (wchar_t *)"A";
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040B512) ----------------------------------------------------
int goodG2B1_9()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFive == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040B5BC) ----------------------------------------------------
int goodG2B2_9()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFive == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040B65A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_14_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (000000000040B688) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040B720) ----------------------------------------------------
int goodG2B1_10()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040B7B8) ----------------------------------------------------
int goodG2B2_10()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040B850) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_good()
{
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (000000000040B86A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  const char *v3; // [rsp+8h] [rbp-38h]
  wchar_t *dest; // [rsp+10h] [rbp-30h]
  size_t v5; // [rsp+18h] [rbp-28h]
  char *s; // [rsp+20h] [rbp-20h]
  const char *v7; // [rsp+28h] [rbp-18h]
  const char **v8; // [rsp+30h] [rbp-10h]
  const char **v9; // [rsp+38h] [rbp-8h]

  v9 = &v3;
  v8 = &v3;
  v7 = "A";
  v3 = "A";
  s = "A";
  v0 = strlen("A");
  v5 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (000000000040B927) ----------------------------------------------------
int goodG2B_28()
{
  size_t v0; // rax
  void *v1; // rsp
  const char *v3; // [rsp+8h] [rbp-38h]
  char *dest; // [rsp+10h] [rbp-30h]
  size_t v5; // [rsp+18h] [rbp-28h]
  char *s; // [rsp+20h] [rbp-20h]
  const char *v7; // [rsp+28h] [rbp-18h]
  const char **v8; // [rsp+30h] [rbp-10h]
  const char **v9; // [rsp+38h] [rbp-8h]

  v9 = &v3;
  v8 = &v3;
  v7 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v5 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), s);
  return printLine(dest);
}

//----- (000000000040B9E0) ----------------------------------------------------
int goodB2G_19()
{
  size_t v0; // rax
  void *v1; // rsp
  const char *v3; // [rsp+8h] [rbp-38h]
  wchar_t *dest; // [rsp+10h] [rbp-30h]
  size_t v5; // [rsp+18h] [rbp-28h]
  wchar_t *s; // [rsp+20h] [rbp-20h]
  const char *v7; // [rsp+28h] [rbp-18h]
  const char **v8; // [rsp+30h] [rbp-10h]
  const char **v9; // [rsp+38h] [rbp-8h]

  v9 = &v3;
  v8 = &v3;
  v7 = "A";
  v3 = "A";
  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v5 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (000000000040BA9D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_32_good()
{
  goodG2B_28();
  return goodB2G_19();
}

//----- (000000000040BAB7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalFive == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;
// 40BAB7: using guessed type char buf[16];

//----- (000000000040BC5F) ----------------------------------------------------
int goodB2G1_9()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalFive == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821C0: using guessed type int globalFive;
// 40BC5F: using guessed type char buf[16];

//----- (000000000040BE19) ----------------------------------------------------
int goodB2G2_9()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalFive == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;
// 40BE19: using guessed type char buf[16];

//----- (000000000040BFC7) ----------------------------------------------------
int goodG2B1_11()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040C06B) ----------------------------------------------------
int goodG2B2_11()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000040C103) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_11();
  return goodG2B2_11();
}

//----- (000000000040C131) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682450: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData;

//----- (000000000040C1AE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682448: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData;

//----- (000000000040C22B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68244C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData;

//----- (000000000040C2AE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 j; // [rsp+28h] [rbp-18h]
  unsigned int *v8; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( j = 0LL; j <= 9; ++j )
    v8[j] = *((_DWORD *)&v2 + j);
  return printIntLine(*v8);
}

//----- (000000000040C36F) ----------------------------------------------------
int goodG2B_29()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 j; // [rsp+28h] [rbp-18h]
  unsigned int *v8; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( j = 0LL; j <= 9; ++j )
    v8[j] = *((_DWORD *)&v2 + j);
  return printIntLine(*v8);
}

//----- (000000000040C430) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good()
{
  return goodG2B_29();
}

//----- (000000000040C440) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}

//----- (000000000040C4A3) ----------------------------------------------------
int good1_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  const char *v2; // [rsp+10h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (000000000040C50C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17_good()
{
  return good1_0();
}

//----- (000000000040C51C) ----------------------------------------------------
int __fastcall badSink_3(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000040C592) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(unsigned int *); // [rsp+8h] [rbp-8h]

  v2 = badSink_3;
  v0 = alloca(32LL);
  return badSink_3((unsigned int *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040C5ED) ----------------------------------------------------
int __fastcall goodG2BSink_3(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000040C663) ----------------------------------------------------
int goodG2B_30()
{
  void *v0; // rsp
  int (__fastcall *v2)(unsigned int *); // [rsp+8h] [rbp-8h]

  v2 = goodG2BSink_3;
  v0 = alloca(64LL);
  return goodG2BSink_3((unsigned int *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040C6BE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_good()
{
  return goodG2B_30();
}

//----- (000000000040C6CE) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40C6CE: using guessed type char buf[16];

//----- (000000000040C7F1) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000040C804) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40C804: using guessed type char buf[16];

//----- (000000000040C927) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040C9EE) ----------------------------------------------------
int goodG2B1_12()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  _BYTE *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v5 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040CAC1) ----------------------------------------------------
int goodG2B2_12()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  _BYTE *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v5 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040CB88) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06_good()
{
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (000000000040CBA2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+2Ch] [rbp-24h]
  int v8; // [rsp+30h] [rbp-20h]
  int v9; // [rsp+34h] [rbp-1Ch]
  int *v10; // [rsp+38h] [rbp-18h]
  int *v11; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v11 = &v7;
  v10 = &v7;
  v9 = 10;
  v7 = 10;
  v8 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040CC4F) ----------------------------------------------------
int goodG2B_31()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040CCFC) ----------------------------------------------------
int goodB2G_20()
{
  int v1; // [rsp+2Ch] [rbp-24h]
  int v2; // [rsp+30h] [rbp-20h]
  int v3; // [rsp+34h] [rbp-1Ch]
  int *v4; // [rsp+38h] [rbp-18h]
  int *v5; // [rsp+40h] [rbp-10h]

  v5 = &v1;
  v4 = &v1;
  v3 = 10;
  v1 = 10;
  v2 = 10;
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000040CDAF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32_good()
{
  goodG2B_31();
  return goodB2G_20();
}

//----- (000000000040CDC9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+10h] [rbp-10h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v5;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_badSink(v5);
}

//----- (000000000040CE37) ----------------------------------------------------
int goodG2B_32()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodG2BSink(7);
}

//----- (000000000040CE5F) ----------------------------------------------------
int goodB2G_21()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+10h] [rbp-10h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v5;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodB2GSink(v5);
}

//----- (000000000040CECD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67_good()
{
  goodG2B_32();
  return goodB2G_21();
}

//----- (000000000040CEE7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CF9C) ----------------------------------------------------
int goodB2G1_10()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D065) ----------------------------------------------------
int goodB2G2_10()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D122) ----------------------------------------------------
int goodG2B1_13()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000040D1CC) ----------------------------------------------------
int goodG2B2_13()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000040D26A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_13();
  return goodG2B2_13();
}

//----- (000000000040D298) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_badSink(a1);
}

//----- (000000000040D2B2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_goodG2BSink(a1);
}

//----- (000000000040D2CC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badSink(v2);
}
// 682200: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal;

//----- (000000000040D340) ----------------------------------------------------
int goodB2G1_11()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Sink(v2);
}
// 682204: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Global;

//----- (000000000040D3B4) ----------------------------------------------------
int goodB2G2_11()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Sink(v2);
}
// 682208: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global;

//----- (000000000040D428) ----------------------------------------------------
int goodG2B_33()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BSink(7);
}
// 68220C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal;

//----- (000000000040D454) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_good()
{
  goodB2G1_11();
  goodB2G2_11();
  return goodG2B_33();
}

//----- (000000000040D478) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000040D4EE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000040D564) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D5E1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D65E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D6E1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D762) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D7E3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040D86A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_badSink();
}
// 6823B8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData;

//----- (000000000040D8C5) ----------------------------------------------------
int goodG2B_34()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_goodG2BSink();
}
// 6823C0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData;

//----- (000000000040D920) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_good()
{
  return goodG2B_34();
}

//----- (000000000040D930) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_badSink(v7);
}
// 40D930: using guessed type char buf[16];

//----- (000000000040DA18) ----------------------------------------------------
int goodG2B_35()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodG2BSink(7);
}

//----- (000000000040DA3A) ----------------------------------------------------
int goodB2G_22()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodB2GSink(v7);
}
// 40DA3A: using guessed type char buf[16];

//----- (000000000040DB22) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54_good()
{
  goodG2B_35();
  return goodB2G_22();
}

//----- (000000000040DB3C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821BC: using guessed type int globalTrue;

//----- (000000000040DBE9) ----------------------------------------------------
int goodB2G1_12()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000040DCAA) ----------------------------------------------------
int goodB2G2_12()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821BC: using guessed type int globalTrue;

//----- (000000000040DD5F) ----------------------------------------------------
int goodG2B1_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000040DE01) ----------------------------------------------------
int goodG2B2_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000040DE97) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (000000000040DEC5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_61_bad()
{
  char *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  v0 = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_badSource();
  s = v0;
  v1 = strlen(v0);
  v5 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (000000000040DF59) ----------------------------------------------------
int goodG2B_36()
{
  char *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  v0 = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodG2BSource();
  s = v0;
  v1 = strlen(v0);
  v5 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printLine(dest);
}

//----- (000000000040DFE9) ----------------------------------------------------
int goodB2G_23()
{
  wchar_t *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  v0 = (wchar_t *)CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodB2GSource();
  s = v0;
  v1 = wcslen(v0);
  v5 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (000000000040E07D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_61_good()
{
  goodG2B_36();
  return goodB2G_23();
}

//----- (000000000040E097) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_badSink(a1);
}

//----- (000000000040E0AE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodG2BSink(a1);
}

//----- (000000000040E0C5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodB2GSink(a1);
}

//----- (000000000040E0DC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticTrue_0 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 68215C: using guessed type int staticTrue_0;

//----- (000000000040E17E) ----------------------------------------------------
int goodG2B1_15()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFalse_0 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682210: using guessed type int staticFalse_0;

//----- (000000000040E22C) ----------------------------------------------------
int goodG2B2_15()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticTrue_0 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 68215C: using guessed type int staticTrue_0;

//----- (000000000040E2CE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05_good()
{
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (000000000040E2E8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000040E343) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000040E39E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000040E3F9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040E44B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000040E4A6) ----------------------------------------------------
int goodG2B_37()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040E4F8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41_good()
{
  return goodG2B_37();
}

//----- (000000000040E508) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_badSink(a1);
}

//----- (000000000040E51F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodG2BSink(a1);
}

//----- (000000000040E536) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodB2GSink(a1);
}

//----- (000000000040E54D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+28h] [rbp-18h]
  int v7; // [rsp+30h] [rbp-10h]
  int v8; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v9 = 10;
  v8 = 10;
  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040E5DB) ----------------------------------------------------
int goodG2B_38()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040E669) ----------------------------------------------------
int goodB2G_24()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000040E6FD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31_good()
{
  goodG2B_38();
  return goodB2G_24();
}

//----- (000000000040E717) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_badSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char **v4; // [rsp+28h] [rbp-8h]

  v4 = a1;
  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040E76F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_goodG2BSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char **v4; // [rsp+28h] [rbp-8h]

  v4 = a1;
  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000040E7C7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040E860) ----------------------------------------------------
int goodG2B_39()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040E8F9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good()
{
  return goodG2B_39();
}

//----- (000000000040E909) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E9A2) ----------------------------------------------------
int goodG2B_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000040EA24) ----------------------------------------------------
int goodB2G_25()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040EAC5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_good()
{
  goodG2B_40();
  return goodB2G_25();
}

//----- (000000000040EADF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040EB31) ----------------------------------------------------
int goodG2B_41()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000040EB83) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53_good()
{
  return goodG2B_41();
}

//----- (000000000040EB93) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040EC0A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040EC81) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000040ECFE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_07_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFive_0 == 5 )
    s = "A";
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 682160: using guessed type int staticFive_0;

//----- (000000000040EDA0) ----------------------------------------------------
int goodB2G1_13()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFive_0 == 5 )
    s = (wchar_t *)"A";
  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 682160: using guessed type int staticFive_0;

//----- (000000000040EE4E) ----------------------------------------------------
int goodB2G2_13()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFive_0 == 5 )
    s = (wchar_t *)"A";
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 682160: using guessed type int staticFive_0;

//----- (000000000040EEF0) ----------------------------------------------------
int goodG2B1_16()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFive_0 == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  else
    printLine("Benign, fixed string");
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682160: using guessed type int staticFive_0;

//----- (000000000040EF9A) ----------------------------------------------------
int goodG2B2_16()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFive_0 == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682160: using guessed type int staticFive_0;

//----- (000000000040F038) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_07_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (000000000040F066) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (000000000040F0B7) ----------------------------------------------------
int good1_1()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000040F10E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18_good()
{
  return good1_1();
}

//----- (000000000040F11E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticFive_1 == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682164: using guessed type int staticFive_1;
// 40F11E: using guessed type char buf[16];

//----- (000000000040F2C6) ----------------------------------------------------
int goodB2G1_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticFive_1 == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682164: using guessed type int staticFive_1;
// 40F2C6: using guessed type char buf[16];

//----- (000000000040F480) ----------------------------------------------------
int goodB2G2_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticFive_1 == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682164: using guessed type int staticFive_1;
// 40F480: using guessed type char buf[16];

//----- (000000000040F62E) ----------------------------------------------------
int goodG2B1_17()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_1 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682164: using guessed type int staticFive_1;

//----- (000000000040F6D2) ----------------------------------------------------
int goodG2B2_17()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_1 == 5 )
    v7 = 7;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682164: using guessed type int staticFive_1;

//----- (000000000040F76A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (000000000040F798) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_badSink(v2);
}

//----- (000000000040F802) ----------------------------------------------------
int goodG2B_42()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodG2BSink(7);
}

//----- (000000000040F824) ----------------------------------------------------
int goodB2G_26()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodB2GSink(v2);
}

//----- (000000000040F88E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51_good()
{
  goodG2B_42();
  return goodB2G_26();
}

//----- (000000000040F8A8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_badSink(10);
}

//----- (000000000040F8D0) ----------------------------------------------------
int goodG2B_43()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodG2BSink(7);
}

//----- (000000000040F8F8) ----------------------------------------------------
int goodB2G_27()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b_goodB2GSink(10);
}

//----- (000000000040F920) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67_good()
{
  goodG2B_43();
  return goodB2G_27();
}

//----- (000000000040F93A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_badSink(&v4);
}

//----- (000000000040F9A4) ----------------------------------------------------
int goodG2B_44()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodG2BSink(&v1);
}

//----- (000000000040F9C8) ----------------------------------------------------
int goodB2G_28()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b_goodB2GSink(&v4);
}

//----- (000000000040FA32) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63_good()
{
  goodG2B_44();
  return goodB2G_28();
}

//----- (000000000040FA4C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_badSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040FAB3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000040FB1A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_badSink(a1);
}

//----- (000000000040FB31) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodG2BSink(a1);
}

//----- (000000000040FB48) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodB2GSink(a1);
}

//----- (000000000040FB5F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682238: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal;

//----- (000000000040FBE0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 68223C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Global;

//----- (000000000040FC73) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682240: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global;

//----- (000000000040FCFA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682244: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal;

//----- (000000000040FD7B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_badSink((char **)&v3);
}

//----- (000000000040FE08) ----------------------------------------------------
int goodG2B_45()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  unsigned __int64 v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b_goodG2BSink((char **)&v4);
}

//----- (000000000040FE95) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64_good()
{
  return goodG2B_45();
}

//----- (000000000040FEA5) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040FEB0) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040FEBB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticReturnsTrue_0();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040FF70) ----------------------------------------------------
int goodB2G1_15()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000410039) ----------------------------------------------------
int goodB2G2_15()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticReturnsTrue_0();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004100F6) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue_0();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (00000000004101A0) ----------------------------------------------------
int goodG2B2_18()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    v7 = 7;
  result = staticReturnsTrue_0();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000041023E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000041026C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (00000000004102E8) ----------------------------------------------------
int good1_2()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000041033F) ----------------------------------------------------
int good2_0()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000410396) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15_good()
{
  good1_2();
  return good2_0();
}

//----- (00000000004103B0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000410490) ----------------------------------------------------
int goodB2G1_16()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000410582) ----------------------------------------------------
int goodB2G2_16()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000410668) ----------------------------------------------------
int goodG2B1_19()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041070C) ----------------------------------------------------
int goodG2B2_19()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004107A4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (00000000004107D2) ----------------------------------------------------
int __fastcall badSink_4(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic;
  if ( badStatic )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682214: using guessed type int badStatic;

//----- (0000000000410853) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic = 1;
  return badSink_4(v2);
}
// 682214: using guessed type int badStatic;

//----- (00000000004108C7) ----------------------------------------------------
int __fastcall goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 682218: using guessed type int goodB2G1Static;

//----- (000000000041095A) ----------------------------------------------------
int goodB2G1_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static = 0;
  return goodB2G1Sink(v2);
}
// 682218: using guessed type int goodB2G1Static;

//----- (00000000004109CE) ----------------------------------------------------
int __fastcall goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static;
  if ( goodB2G2Static )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 68221C: using guessed type int goodB2G2Static;

//----- (0000000000410A55) ----------------------------------------------------
int goodB2G2_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static = 1;
  return goodB2G2Sink(v2);
}
// 68221C: using guessed type int goodB2G2Static;

//----- (0000000000410AC9) ----------------------------------------------------
int __fastcall goodG2BSink_4(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic;
  if ( goodG2BStatic )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682220: using guessed type int goodG2BStatic;

//----- (0000000000410B4A) ----------------------------------------------------
int goodG2B_46()
{
  goodG2BStatic = 1;
  return goodG2BSink_4(7);
}
// 682220: using guessed type int goodG2BStatic;

//----- (0000000000410B76) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21_good()
{
  goodB2G1_17();
  goodB2G2_17();
  return goodG2B_46();
}

//----- (0000000000410B9A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000410C64) ----------------------------------------------------
int goodB2G1_18()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000410D34) ----------------------------------------------------
int goodB2G2_18()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000410E04) ----------------------------------------------------
int goodG2B1_20()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000410E86) ----------------------------------------------------
int goodG2B2_20()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000410F08) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (0000000000410F36) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_badSink;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 410F36: using guessed type char buf[16];

//----- (0000000000411027) ----------------------------------------------------
int goodG2B_47()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodG2BSink(7);
}

//----- (0000000000411052) ----------------------------------------------------
__int64 goodB2G_29()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b_goodB2GSink;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 411052: using guessed type char buf[16];

//----- (0000000000411143) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65_good()
{
  goodG2B_47();
  return goodB2G_29();
}

//----- (000000000041115D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_badSink(a1);
}

//----- (0000000000411177) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c_goodG2BSink(a1);
}

//----- (0000000000411191) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_65_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_badSink("A");
}

//----- (00000000004111C0) ----------------------------------------------------
int goodG2B_48()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (00000000004111EF) ----------------------------------------------------
int goodB2G_30()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodB2GSink((wchar_t *)"A");
}

//----- (000000000041121E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_65_good()
{
  goodG2B_48();
  return goodB2G_30();
}

//----- (0000000000411238) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000411316) ----------------------------------------------------
int goodB2G1_19()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000411406) ----------------------------------------------------
int goodB2G2_19()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004114EA) ----------------------------------------------------
int goodG2B1_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041158E) ----------------------------------------------------
int goodG2B2_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000411626) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B1_21();
  return goodG2B2_21();
}

//----- (0000000000411654) ----------------------------------------------------
int badSink_5()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memcpy((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682228: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData;

//----- (00000000004116B6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return badSink_5();
}
// 682228: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_badData;

//----- (0000000000411711) ----------------------------------------------------
int goodG2BSink_5()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memcpy((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682230: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;

//----- (0000000000411773) ----------------------------------------------------
int goodG2B_49()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return goodG2BSink_5();
}
// 682230: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;

//----- (00000000004117CE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45_good()
{
  return goodG2B_49();
}

//----- (00000000004117DE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (00000000004118AA) ----------------------------------------------------
int goodB2G_31()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000041197C) ----------------------------------------------------
int goodG2B_50()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000411A00) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good()
{
  goodB2G_31();
  return goodG2B_50();
}

//----- (0000000000411A1A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000411A75) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000411AD0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_bad()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_badSink((__int64)&v2);
}

//----- (0000000000411B2A) ----------------------------------------------------
int goodG2B_51()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(64LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink((__int64)&v2);
}

//----- (0000000000411B84) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66_good()
{
  return goodG2B_51();
}

//----- (0000000000411B94) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000411C36) ----------------------------------------------------
int goodG2B1_22()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000411CE4) ----------------------------------------------------
int goodG2B2_22()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000411D86) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_good()
{
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (0000000000411DA0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_badSink(v7);
}
// 411DA0: using guessed type char buf[16];

//----- (0000000000411E88) ----------------------------------------------------
int goodG2B_52()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodG2BSink(7);
}

//----- (0000000000411EAA) ----------------------------------------------------
int goodB2G_32()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodB2GSink(v7);
}
// 411EAA: using guessed type char buf[16];

//----- (0000000000411F92) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53_good()
{
  goodG2B_52();
  return goodB2G_32();
}

//----- (0000000000411FAC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_31_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v4; // [rsp+10h] [rbp-20h]
  char *s; // [rsp+18h] [rbp-18h]
  const char *v6; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "A";
  v6 = "A";
  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (0000000000412048) ----------------------------------------------------
int goodG2B_53()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-28h]
  size_t v4; // [rsp+10h] [rbp-20h]
  char *s; // [rsp+18h] [rbp-18h]
  const char *v6; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v6 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (00000000004120E0) ----------------------------------------------------
int goodB2G_33()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v4; // [rsp+10h] [rbp-20h]
  wchar_t *s; // [rsp+18h] [rbp-18h]
  const char *v6; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "A";
  v6 = "A";
  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000041217C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_31_good()
{
  goodG2B_53();
  return goodB2G_33();
}

//----- (0000000000412196) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badSink(10);
}
// 682238: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_badGlobal;

//----- (00000000004121C2) ----------------------------------------------------
int goodB2G1_20()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Sink(10);
}
// 68223C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G1Global;

//----- (00000000004121EE) ----------------------------------------------------
int goodB2G2_20()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Sink(10);
}
// 682240: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodB2G2Global;

//----- (000000000041221A) ----------------------------------------------------
int goodG2B_54()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BSink(7);
}
// 682244: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_goodG2BGlobal;

//----- (0000000000412246) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22_good()
{
  goodB2G1_20();
  goodB2G2_20();
  return goodG2B_54();
}

//----- (000000000041226A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682430: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData;

//----- (00000000004122E7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682428: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData;

//----- (0000000000412364) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68242C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData;

//----- (00000000004123E7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_badSink(a1);
}

//----- (00000000004123FE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodG2BSink(a1);
}

//----- (0000000000412415) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c_goodB2GSink(a1);
}

//----- (000000000041242C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-50h]
  __int64 v7; // [rsp+8h] [rbp-48h]
  __int64 v8; // [rsp+10h] [rbp-40h]
  __int64 v9; // [rsp+18h] [rbp-38h]
  __int64 v10; // [rsp+20h] [rbp-30h]
  int j; // [rsp+34h] [rbp-1Ch]
  int i; // [rsp+38h] [rbp-18h]
  int v13; // [rsp+3Ch] [rbp-14h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v13 = v2;
  }
  else
  {
    v13 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v6 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  else
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v6 + v13) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v6 + j));
    }
  }
  return result;
}

//----- (000000000041258D) ----------------------------------------------------
int goodB2G_34()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  int result; // eax
  __int64 v11; // [rsp+0h] [rbp-50h]
  __int64 v12; // [rsp+8h] [rbp-48h]
  __int64 v13; // [rsp+10h] [rbp-40h]
  __int64 v14; // [rsp+18h] [rbp-38h]
  __int64 v15; // [rsp+20h] [rbp-30h]
  int j; // [rsp+34h] [rbp-1Ch]
  int i; // [rsp+38h] [rbp-18h]
  int v18; // [rsp+3Ch] [rbp-14h]

  v18 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v18 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v18 = v7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v11 = 0LL;
    v12 = 0LL;
    v13 = 0LL;
    v14 = 0LL;
    v15 = 0LL;
    if ( v18 < 0 || v18 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v18;
      *((_DWORD *)&v11 + v18) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v11 + i));
    }
  }
  else
  {
    v11 = 0LL;
    v12 = 0LL;
    v13 = 0LL;
    v14 = 0LL;
    v15 = 0LL;
    if ( v18 < 0 || v18 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v18;
      *((_DWORD *)&v11 + v18) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v11 + j));
    }
  }
  return result;
}

//----- (0000000000412737) ----------------------------------------------------
int goodG2B_55()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (000000000041284A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12_good()
{
  goodB2G_34();
  return goodG2B_55();
}

//----- (0000000000412864) ----------------------------------------------------
int __fastcall badSink_6(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004128DB) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = badSink_6;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (000000000041294C) ----------------------------------------------------
int __fastcall goodG2BSink_6(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004129C3) ----------------------------------------------------
int goodG2B_56()
{
  return goodG2BSink_6(7);
}

//----- (00000000004129EE) ----------------------------------------------------
int __fastcall goodB2GSink_2(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000412A6B) ----------------------------------------------------
__int64 goodB2G_35()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = goodB2GSink_2;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000412ADC) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44_good()
{
  goodG2B_56();
  return goodB2G_35();
}

//----- (0000000000412AF6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000412B48) ----------------------------------------------------
int goodG2B_57()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000412B9A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52_good()
{
  return goodG2B_57();
}

//----- (0000000000412BAA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_badSink(a1);
}

//----- (0000000000412BC1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodG2BSink(a1);
}

//----- (0000000000412BD8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodB2GSink(a1);
}

//----- (0000000000412BEF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 682168: using guessed type int staticTrue_1;

//----- (0000000000412C74) ----------------------------------------------------
int good1_3()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 682248: using guessed type int staticFalse_1;

//----- (0000000000412CE0) ----------------------------------------------------
int good2_1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 682168: using guessed type int staticTrue_1;

//----- (0000000000412D40) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05_good()
{
  good1_3();
  return good2_1();
}

//----- (0000000000412D5A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 10;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000412DF2) ----------------------------------------------------
int goodB2G1_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 10;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000412E9C) ----------------------------------------------------
int goodB2G2_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 10;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000412F3A) ----------------------------------------------------
int goodG2B1_23()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000412FDE) ----------------------------------------------------
int goodG2B2_23()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000413076) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_23();
  return goodG2B2_23();
}

//----- (00000000004130A4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000413153) ----------------------------------------------------
int goodG2B_58()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000413202) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16_good()
{
  return goodG2B_58();
}

//----- (0000000000413212) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (0000000000413263) ----------------------------------------------------
int good1_4()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (00000000004132BA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16_good()
{
  return good1_4();
}

//----- (00000000004132CA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v8; // [rsp+48h] [rbp-8h]

  v8 = a1;
  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000413338) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v8; // [rsp+48h] [rbp-8h]

  v8 = a1;
  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004133A6) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_badSink(a1);
}

//----- (00000000004133BD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodG2BSink(a1);
}

//----- (00000000004133D4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c_goodB2GSink(a1);
}

//----- (00000000004133EB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 10;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413483) ----------------------------------------------------
int goodB2G1_22()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 10;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041352D) ----------------------------------------------------
int goodB2G2_22()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 10;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004135CB) ----------------------------------------------------
int goodG2B1_24()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041366F) ----------------------------------------------------
int goodG2B2_24()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413707) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (0000000000413735) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (0000000000413792) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodG2BSource()
{
  return 7LL;
}

//----- (00000000004137A5) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (0000000000413802) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000413879) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004138F0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041396D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}

//----- (0000000000413A53) ----------------------------------------------------
int goodB2G1_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000413B4B) ----------------------------------------------------
int goodB2G2_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}

//----- (0000000000413C37) ----------------------------------------------------
int goodG2B1_25()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000413CE1) ----------------------------------------------------
int goodG2B2_25()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000413D7F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (0000000000413DAD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000413E77) ----------------------------------------------------
int goodB2G1_24()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000413F47) ----------------------------------------------------
int goodB2G2_24()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000414017) ----------------------------------------------------
int goodG2B1_26()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000414099) ----------------------------------------------------
int goodG2B2_26()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041411B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_26();
  return goodG2B2_26();
}

//----- (0000000000414149) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_bad()
{
  char dest[15]; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    printLine("0123456789abcdef0123456789abcde");
    memcpy(dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
  }
  else
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(dest, "0123456789abcde");
  }
  printLine(dest);
  return printLine(v3);
}

//----- (00000000004141F5) ----------------------------------------------------
int good1_5()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (00000000004142A7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12_good()
{
  return good1_5();
}

//----- (00000000004142B7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_badSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041433F) ----------------------------------------------------
int goodG2B_59()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004143C7) ----------------------------------------------------
int goodB2G_36()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b_goodB2GSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000414455) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61_good()
{
  goodG2B_59();
  return goodB2G_36();
}

//----- (000000000041446F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004144C1) ----------------------------------------------------
int goodG2B_60()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000414513) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51_good()
{
  return goodG2B_60();
}

//----- (0000000000414523) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+50h] [rbp-20h]
  int v11; // [rsp+58h] [rbp-18h]
  int v12; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v15; // [rsp+68h] [rbp-8h]
  int v16; // [rsp+6Ch] [rbp-4h]

  v16 = -1;
  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v15 = accept(fd, 0LL, 0LL);
      if ( v15 != -1 )
      {
        v12 = recv(v15, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v16 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v15 != -1 )
    close(v15);
  v10 = v16;
  v11 = v16;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v16 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 414523: using guessed type char buf[16];

//----- (00000000004146BD) ----------------------------------------------------
int goodG2B_61()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041474B) ----------------------------------------------------
int goodB2G_37()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+50h] [rbp-20h]
  int v11; // [rsp+58h] [rbp-18h]
  int v12; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v15; // [rsp+68h] [rbp-8h]
  int v16; // [rsp+6Ch] [rbp-4h]

  v16 = -1;
  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v15 = accept(fd, 0LL, 0LL);
      if ( v15 != -1 )
      {
        v12 = recv(v15, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v16 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v15 != -1 )
    close(v15);
  v10 = v16;
  v11 = v16;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v16 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 41474B: using guessed type char buf[16];

//----- (00000000004148EB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34_good()
{
  goodG2B_61();
  return goodB2G_37();
}

//----- (0000000000414905) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (00000000004149E3) ----------------------------------------------------
int goodB2G1_25()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (0000000000414AD3) ----------------------------------------------------
int goodB2G2_25()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000414BB7) ----------------------------------------------------
int goodG2B1_27()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (0000000000414C59) ----------------------------------------------------
int goodG2B2_27()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000414CEF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B1_27();
  return goodG2B2_27();
}

//----- (0000000000414D1D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000414DBE) ----------------------------------------------------
int goodG2B1_28()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000414E6B) ----------------------------------------------------
int goodG2B2_28()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000414F0C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04_good()
{
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (0000000000414F26) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000414F9D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000415014) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000415091) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_badSink(10);
}

//----- (00000000004150B3) ----------------------------------------------------
int goodG2B_62()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodG2BSink(7);
}

//----- (00000000004150D5) ----------------------------------------------------
int goodB2G_38()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodB2GSink(10);
}

//----- (00000000004150F7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53_good()
{
  goodG2B_62();
  return goodB2G_38();
}

//----- (0000000000415111) ----------------------------------------------------
int __fastcall badSink_7(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic_0;
  if ( badStatic_0 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 68224C: using guessed type int badStatic_0;

//----- (0000000000415192) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad()
{
  badStatic_0 = 1;
  return badSink_7(10);
}
// 68224C: using guessed type int badStatic_0;

//----- (00000000004151BE) ----------------------------------------------------
int __fastcall goodB2G1Sink_0(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static_0 )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 682250: using guessed type int goodB2G1Static_0;

//----- (0000000000415251) ----------------------------------------------------
int goodB2G1_26()
{
  goodB2G1Static_0 = 0;
  return goodB2G1Sink_0(10);
}
// 682250: using guessed type int goodB2G1Static_0;

//----- (000000000041527D) ----------------------------------------------------
int __fastcall goodB2G2Sink_0(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static_0;
  if ( goodB2G2Static_0 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682254: using guessed type int goodB2G2Static_0;

//----- (0000000000415304) ----------------------------------------------------
int goodB2G2_26()
{
  goodB2G2Static_0 = 1;
  return goodB2G2Sink_0(10);
}
// 682254: using guessed type int goodB2G2Static_0;

//----- (0000000000415330) ----------------------------------------------------
int __fastcall goodG2BSink_7(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic_0;
  if ( goodG2BStatic_0 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682258: using guessed type int goodG2BStatic_0;

//----- (00000000004153B1) ----------------------------------------------------
int goodG2B_63()
{
  goodG2BStatic_0 = 1;
  return goodG2BSink_7(7);
}
// 682258: using guessed type int goodG2BStatic_0;

//----- (00000000004153DD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good()
{
  goodB2G1_26();
  goodB2G2_26();
  return goodG2B_63();
}

//----- (0000000000415401) ----------------------------------------------------
int badSink_8()
{
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  unsigned int *v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v6 = (unsigned int *)CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v6[i] = *((_DWORD *)&v1 + i);
  return printIntLine(*v6);
}
// 682260: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData;

//----- (000000000041547E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return badSink_8();
}
// 682260: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_badData;

//----- (00000000004154D9) ----------------------------------------------------
int goodG2BSink_8()
{
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  unsigned int *v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v6 = (unsigned int *)CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v6[i] = *((_DWORD *)&v1 + i);
  return printIntLine(*v6);
}
// 682268: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData;

//----- (0000000000415556) ----------------------------------------------------
int goodG2B_64()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return goodG2BSink_8();
}
// 682268: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_goodG2BData;

//----- (00000000004155B1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45_good()
{
  return goodG2B_64();
}

//----- (00000000004155C1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (000000000041564F) ----------------------------------------------------
int goodB2G1_27()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (00000000004156DD) ----------------------------------------------------
int goodB2G2_27()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000041576B) ----------------------------------------------------
int goodG2B1_29()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (00000000004157F5) ----------------------------------------------------
int goodG2B2_29()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000041587F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (00000000004158AD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000415924) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041599B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000415A18) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_bad()
{
  __int64 v0; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+38h] [rbp-18h]
  __int16 v7; // [rsp+3Ch] [rbp-14h]
  int k; // [rsp+40h] [rbp-10h]
  int v9; // [rsp+44h] [rbp-Ch]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v6 = 0;
    v7 = 0;
    if ( fgets(s, 14, stdin) )
      v9 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)&v0 + v9) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}

//----- (0000000000415B06) ----------------------------------------------------
void goodB2G_39()
{
  __int64 v0; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+38h] [rbp-18h]
  __int16 v7; // [rsp+3Ch] [rbp-14h]
  int k; // [rsp+40h] [rbp-10h]
  int v9; // [rsp+44h] [rbp-Ch]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v6 = 0;
    v7 = 0;
    if ( fgets(s, 14, stdin) )
      v9 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)&v0 + v9) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}

//----- (0000000000415BFA) ----------------------------------------------------
int goodG2B_65()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (0000000000415CA2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17_good()
{
  goodB2G_39();
  return goodG2B_65();
}

//----- (0000000000415CBC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 415CBC: using guessed type char buf[16];

//----- (0000000000415E4C) ----------------------------------------------------
int goodB2G1_28()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 415E4C: using guessed type char buf[16];

//----- (0000000000415FE2) ----------------------------------------------------
int goodB2G2_28()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 415FE2: using guessed type char buf[16];

//----- (0000000000416178) ----------------------------------------------------
int goodG2B1_30()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004161FC) ----------------------------------------------------
int goodG2B2_30()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000416280) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15_good()
{
  goodB2G1_28();
  goodB2G2_28();
  goodG2B1_30();
  return goodG2B2_30();
}

//----- (00000000004162AE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (0000000000416308) ----------------------------------------------------
int good1_6()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000416374) ----------------------------------------------------
int good2_2()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (00000000004163D4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_good()
{
  good1_6();
  return good2_2();
}

//----- (00000000004163EE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticFive_2 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68216C: using guessed type int staticFive_2;

//----- (00000000004164CC) ----------------------------------------------------
int goodB2G1_29()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticFive_2 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_2 != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68216C: using guessed type int staticFive_2;

//----- (00000000004165BC) ----------------------------------------------------
int goodB2G2_29()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( staticFive_2 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68216C: using guessed type int staticFive_2;

//----- (00000000004166A0) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_2 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68216C: using guessed type int staticFive_2;

//----- (0000000000416744) ----------------------------------------------------
int goodG2B2_31()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_2 == 5 )
    v7 = 7;
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68216C: using guessed type int staticFive_2;

//----- (00000000004167DC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (000000000041680A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_badSink(a1);
}

//----- (0000000000416821) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodG2BSink(a1);
}

//----- (0000000000416838) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d_goodB2GSink(a1);
}

//----- (000000000041684F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041689F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (00000000004168EF) ----------------------------------------------------
__int64 __fastcall badSource_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 4168EF: using guessed type char buf[16];

//----- (0000000000416A12) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource_0(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000416A9A) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 7LL;
}

//----- (0000000000416AAD) ----------------------------------------------------
int goodG2B_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource_0();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000416B35) ----------------------------------------------------
__int64 __fastcall goodB2GSource_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 416B35: using guessed type char buf[16];

//----- (0000000000416C58) ----------------------------------------------------
int goodB2G_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource_0(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000416CE6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42_good()
{
  goodB2G_40();
  return goodG2B_66();
}

//----- (0000000000416D00) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823AC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_badData;

//----- (0000000000416D7D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823A8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodG2BData;

//----- (0000000000416DFA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823B0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68_goodB2GData;

//----- (0000000000416E7D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v8 = 10;
  else
    v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 || v8 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (0000000000416F96) ----------------------------------------------------
int goodB2G_41()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 10;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 || v8 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 || v8 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (00000000004170B6) ----------------------------------------------------
int goodG2B_67()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (00000000004171C9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_good()
{
  goodB2G_41();
  return goodG2B_67();
}

//----- (00000000004171E3) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_badSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000417224) ----------------------------------------------------
int goodG2B_68()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodG2BSink(7);
}

//----- (000000000041724F) ----------------------------------------------------
__int64 goodB2G_42()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b_goodB2GSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000417290) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65_good()
{
  goodG2B_68();
  return goodB2G_42();
}

//----- (00000000004172AA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68240C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData;

//----- (0000000000417327) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682410: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData;

//----- (00000000004173A4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682414: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData;

//----- (0000000000417427) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_badSink(a1);
}

//----- (000000000041743E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodG2BSink(a1);
}

//----- (0000000000417455) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c_goodB2GSink(a1);
}

//----- (000000000041746C) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000417477) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (0000000000417482) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}

//----- (0000000000417568) ----------------------------------------------------
int goodB2G1_30()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000417660) ----------------------------------------------------
int goodB2G2_30()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}

//----- (000000000041774C) ----------------------------------------------------
int goodG2B1_32()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue_1();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (00000000004177F6) ----------------------------------------------------
int goodG2B2_32()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
    v7 = 7;
  result = staticReturnsTrue_1();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000417894) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (00000000004178C2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_badSink(unsigned int **a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+38h] [rbp-18h]
  unsigned int **v8; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000041794B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_goodG2BSink(unsigned int **a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+38h] [rbp-18h]
  unsigned int **v8; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (00000000004179D4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_05_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticTrue_2 )
    s = "A";
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 682170: using guessed type int staticTrue_2;

//----- (0000000000417A74) ----------------------------------------------------
int goodB2G1_31()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticTrue_2 )
    s = (wchar_t *)"A";
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 682170: using guessed type int staticTrue_2;
// 682270: using guessed type int staticFalse_2;

//----- (0000000000417B20) ----------------------------------------------------
int goodB2G2_31()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticTrue_2 )
    s = (wchar_t *)"A";
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 682170: using guessed type int staticTrue_2;

//----- (0000000000417BC0) ----------------------------------------------------
int goodG2B1_33()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682170: using guessed type int staticTrue_2;
// 682270: using guessed type int staticFalse_2;

//----- (0000000000417C68) ----------------------------------------------------
int goodG2B2_33()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( staticTrue_2 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682170: using guessed type int staticTrue_2;

//----- (0000000000417D04) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_05_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (0000000000417D32) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_badSink((char **)&v3);
}

//----- (0000000000417DBF) ----------------------------------------------------
int goodG2B_69()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  unsigned __int64 v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b_goodG2BSink((char **)&v4);
}

//----- (0000000000417E4C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63_good()
{
  return goodG2B_69();
}

//----- (0000000000417E5C) ----------------------------------------------------
int __fastcall badSink_9(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (0000000000417EDC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad()
{
  return badSink_9("A");
}

//----- (0000000000417F02) ----------------------------------------------------
int __fastcall goodG2BSink_9(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (0000000000417F7E) ----------------------------------------------------
int goodG2B_70()
{
  return goodG2BSink_9("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (0000000000417FA4) ----------------------------------------------------
int __fastcall goodB2GSink_3(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (0000000000418024) ----------------------------------------------------
int goodB2G_43()
{
  return goodB2GSink_3((wchar_t *)"A");
}

//----- (000000000041804A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good()
{
  goodB2G_43();
  return goodG2B_70();
}

//----- (0000000000418064) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticTrue_3 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682174: using guessed type int staticTrue_3;
// 418064: using guessed type char buf[16];

//----- (000000000041820A) ----------------------------------------------------
int goodB2G1_32()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticTrue_3 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( staticFalse_3 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682174: using guessed type int staticTrue_3;
// 682274: using guessed type int staticFalse_3;
// 41820A: using guessed type char buf[16];

//----- (00000000004183C2) ----------------------------------------------------
int goodB2G2_32()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( staticTrue_3 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682174: using guessed type int staticTrue_3;
// 4183C2: using guessed type char buf[16];

//----- (000000000041856E) ----------------------------------------------------
int goodG2B1_34()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682174: using guessed type int staticTrue_3;
// 682274: using guessed type int staticFalse_3;

//----- (0000000000418610) ----------------------------------------------------
int goodG2B2_34()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_3 )
    v7 = 7;
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682174: using guessed type int staticTrue_3;

//----- (00000000004186A6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (00000000004186D4) ----------------------------------------------------
int __fastcall badSink_10(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041874B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return badSink_10(v8);
}
// 41874B: using guessed type char buf[16];

//----- (0000000000418879) ----------------------------------------------------
int __fastcall goodG2BSink_10(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004188F0) ----------------------------------------------------
int goodG2B_71()
{
  return goodG2BSink_10(7);
}

//----- (0000000000418912) ----------------------------------------------------
int __fastcall goodB2GSink_4(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041898F) ----------------------------------------------------
int goodB2G_44()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return goodB2GSink_4(v8);
}
// 41898F: using guessed type char buf[16];

//----- (0000000000418ABD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41_good()
{
  goodB2G_44();
  return goodG2B_71();
}

//----- (0000000000418AD7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823C8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData;

//----- (0000000000418B54) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823CC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData;

//----- (0000000000418BD1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6823D0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData;

//----- (0000000000418C54) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000418D1A) ----------------------------------------------------
int goodG2B1_35()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  _BYTE *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v5 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000418DEC) ----------------------------------------------------
int goodG2B2_35()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  _BYTE *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v5 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000418EB2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04_good()
{
  goodG2B1_35();
  return goodG2B2_35();
}

//----- (0000000000418ECC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 10;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000418F6A) ----------------------------------------------------
int goodB2G1_33()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 10;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041901A) ----------------------------------------------------
int goodB2G2_33()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 10;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (00000000004190BE) ----------------------------------------------------
int goodG2B1_36()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000419168) ----------------------------------------------------
int goodG2B2_36()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000419206) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (0000000000419234) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004192B6) ----------------------------------------------------
int goodB2G1_34()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000041933E) ----------------------------------------------------
int goodB2G2_34()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (00000000004193C6) ----------------------------------------------------
int goodG2B1_37()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000419448) ----------------------------------------------------
int goodG2B2_37()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004194CA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (00000000004194F8) ----------------------------------------------------
int __fastcall badSink_11(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041956F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_bad()
{
  return badSink_11(10);
}

//----- (000000000041959A) ----------------------------------------------------
int __fastcall goodG2BSink_11(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000419611) ----------------------------------------------------
int goodG2B_72()
{
  return goodG2BSink_11(7);
}

//----- (000000000041963C) ----------------------------------------------------
int __fastcall goodB2GSink_5(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004196B9) ----------------------------------------------------
int goodB2G_45()
{
  return goodB2GSink_5(10);
}

//----- (00000000004196E4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44_good()
{
  goodG2B_72();
  return goodB2G_45();
}

//----- (00000000004196FE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_34_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  char v3; // [rsp+Fh] [rbp-21h]
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v5; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "A";
  s = "A";
  v0 = strlen("A");
  v5 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v3 >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v3 >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (000000000041979A) ----------------------------------------------------
int goodG2B_73()
{
  size_t v0; // rax
  void *v1; // rsp
  char v3; // [rsp+Fh] [rbp-21h]
  char *dest; // [rsp+10h] [rbp-20h]
  size_t v5; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v5 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * ((unsigned __int64)&v3 >> 4));
  strcpy((char *)(16 * ((unsigned __int64)&v3 >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (0000000000419832) ----------------------------------------------------
int goodB2G_46()
{
  size_t v0; // rax
  void *v1; // rsp
  char v3; // [rsp+Fh] [rbp-21h]
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v5; // [rsp+18h] [rbp-18h]
  wchar_t *s; // [rsp+20h] [rbp-10h]
  const char *v7; // [rsp+28h] [rbp-8h]

  v7 = "A";
  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v5 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v3 >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v3 >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (00000000004198CE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_34_good()
{
  goodG2B_73();
  return goodB2G_46();
}

//----- (00000000004198E8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_badSink(v7);
}
// 4198E8: using guessed type char buf[16];

//----- (00000000004199D0) ----------------------------------------------------
int goodG2B_74()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodG2BSink(7);
}

//----- (00000000004199F2) ----------------------------------------------------
int goodB2G_47()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b_goodB2GSink(v7);
}
// 4199F2: using guessed type char buf[16];

//----- (0000000000419ADA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52_good()
{
  goodG2B_74();
  return goodB2G_47();
}

//----- (0000000000419AF4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_badSink(a1);
}

//----- (0000000000419B0B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodG2BSink(a1);
}

//----- (0000000000419B22) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodB2GSink(a1);
}

//----- (0000000000419B39) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000419BB0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000419C27) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000419CA4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_badSink(__int64 a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *(char **)(a1 + 16);
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (0000000000419D30) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(__int64 a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *(char **)(a1 + 16);
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * ((unsigned __int64)&v4[7] >> 4));
  strcpy((char *)(16 * ((unsigned __int64)&v4[7] >> 4)), s);
  return printLine(dest);
}

//----- (0000000000419DB8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(__int64 a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  wchar_t *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *(wchar_t **)(a1 + 16);
  v1 = wcslen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (0000000000419E44) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000419F22) ----------------------------------------------------
int goodB2G1_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041A012) ----------------------------------------------------
int goodB2G2_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041A0F6) ----------------------------------------------------
int goodG2B1_38()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041A198) ----------------------------------------------------
int goodG2B2_38()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041A22E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B1_38();
  return goodG2B2_38();
}

//----- (000000000041A25C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000041A314) ----------------------------------------------------
int goodG2B1_39()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000041A3D8) ----------------------------------------------------
int goodG2B2_39()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000041A490) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good()
{
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (000000000041A4AA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041A52C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041A5AE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041A636) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 10;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000041A6CC) ----------------------------------------------------
int goodB2G1_36()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 10;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000041A774) ----------------------------------------------------
int goodB2G2_36()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 10;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000041A810) ----------------------------------------------------
int goodG2B1_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000041A8B2) ----------------------------------------------------
int goodG2B2_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000041A948) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (000000000041A976) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_badSink(a1);
}

//----- (000000000041A98D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodG2BSink(a1);
}

//----- (000000000041A9A4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c_goodB2GSink(a1);
}

//----- (000000000041A9BB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_badSink((unsigned int **)&v2);
}

//----- (000000000041AA0D) ----------------------------------------------------
int goodG2B_75()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b_goodG2BSink((unsigned int **)&v2);
}

//----- (000000000041AA5F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64_good()
{
  return goodG2B_75();
}

//----- (000000000041AA6F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041AB12) ----------------------------------------------------
int goodG2B1_41()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041ABC1) ----------------------------------------------------
int goodG2B2_41()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041AC64) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14_good()
{
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (000000000041AC7E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  void *dest; // [rsp+30h] [rbp-30h]
  unsigned __int64 v9; // [rsp+38h] [rbp-28h]
  unsigned __int64 *v10; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v11; // [rsp+48h] [rbp-18h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041AD47) ----------------------------------------------------
int goodG2B_76()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  void *dest; // [rsp+30h] [rbp-30h]
  unsigned __int64 v9; // [rsp+38h] [rbp-28h]
  unsigned __int64 *v10; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v11; // [rsp+48h] [rbp-18h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041AE10) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good()
{
  return goodG2B_76();
}

//----- (000000000041AE20) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_badSink(a1);
}

//----- (000000000041AE37) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodG2BSink(a1);
}

//----- (000000000041AE4E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d_goodB2GSink(a1);
}

//----- (000000000041AE65) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData = v1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_badSink();
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6823C8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_badData;

//----- (000000000041AEA6) ----------------------------------------------------
int goodG2B_77()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodG2BSink();
}
// 6823CC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodG2BData;

//----- (000000000041AED1) ----------------------------------------------------
int goodB2G_48()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData = v1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b_goodB2GSink();
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6823D0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_goodB2GData;

//----- (000000000041AF12) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68_good()
{
  goodG2B_77();
  return goodB2G_48();
}

//----- (000000000041AF2C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041AFAE) ----------------------------------------------------
int goodG2B_78()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041B030) ----------------------------------------------------
int goodB2G_49()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000041B0B8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_good()
{
  goodG2B_78();
  return goodB2G_49();
}

//----- (000000000041B0D2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041B149) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041B1C0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041B23D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_badSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041B2A0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041B303) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+10h] [rbp-30h]
  char *v6; // [rsp+18h] [rbp-28h]
  char *dest; // [rsp+20h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-14h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  for ( i = 0; i <= 0; ++i )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041B3D3) ----------------------------------------------------
int goodG2B_79()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+10h] [rbp-30h]
  unsigned __int64 v6; // [rsp+18h] [rbp-28h]
  char *dest; // [rsp+20h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-14h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  for ( i = 0; i <= 0; ++i )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041B4A3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17_good()
{
  return goodG2B_79();
}

//----- (000000000041B4B3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_badSink(v7);
}
// 41B4B3: using guessed type char buf[16];

//----- (000000000041B59B) ----------------------------------------------------
int goodG2B_80()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodG2BSink(7);
}

//----- (000000000041B5BD) ----------------------------------------------------
int goodB2G_50()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b_goodB2GSink(v7);
}
// 41B5BD: using guessed type char buf[16];

//----- (000000000041B6A5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51_good()
{
  goodG2B_80();
  return goodB2G_50();
}

//----- (000000000041B6BF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_badSink(v2);
}

//----- (000000000041B729) ----------------------------------------------------
int goodG2B_81()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodG2BSink(7);
}

//----- (000000000041B74B) ----------------------------------------------------
int goodB2G_51()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b_goodB2GSink(v2);
}

//----- (000000000041B7B5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54_good()
{
  goodG2B_81();
  return goodB2G_51();
}

//----- (000000000041B7CF) ----------------------------------------------------
int __fastcall badSink_12(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000041B814) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  _BYTE *v4; // [rsp+10h] [rbp-10h]
  int (__fastcall *v5)(char *); // [rsp+18h] [rbp-8h]

  v5 = badSink_12;
  v0 = alloca(32LL);
  v4 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v4 = 0;
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(16 * (((unsigned __int64)&v3 + 7) >> 4));
}

//----- (000000000041B8AA) ----------------------------------------------------
int __fastcall goodG2BSink_12(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000041B8EF) ----------------------------------------------------
__int64 goodG2B_82()
{
  void *v0; // rsp
  void *v1; // rsp
  __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  int (__fastcall *v5)(char *); // [rsp+18h] [rbp-8h]

  v5 = goodG2BSink_12;
  v0 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v1 = alloca(32LL);
  HIBYTE(v3) = (16 * (((unsigned __int64)&v3 + 7) >> 4)) >> 56;
  *(_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4)) = 0;
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(16 * (((unsigned __int64)&v3 + 7) >> 4));
}

//----- (000000000041B985) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good()
{
  return goodG2B_82();
}

//----- (000000000041B995) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (000000000041BA15) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (000000000041BA91) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (000000000041BB11) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_badSink(&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041BB4B) ----------------------------------------------------
int goodG2B_83()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodG2BSink(&v1);
}

//----- (000000000041BB6F) ----------------------------------------------------
int goodB2G_52()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodB2GSink(&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041BBA9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64_good()
{
  goodG2B_83();
  return goodB2G_52();
}

//----- (000000000041BBC3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_badSink(a1);
}

//----- (000000000041BBDD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_goodG2BSink(a1);
}

//----- (000000000041BBF7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_badSink(&v1);
}

//----- (000000000041BC1B) ----------------------------------------------------
int goodG2B_84()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodG2BSink(&v1);
}

//----- (000000000041BC3F) ----------------------------------------------------
int goodB2G_53()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodB2GSink(&v1);
}

//----- (000000000041BC63) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63_good()
{
  goodG2B_84();
  return goodB2G_53();
}

//----- (000000000041BC7D) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 41BC7D: using guessed type char buf[16];

//----- (000000000041BDB4) ----------------------------------------------------
int goodG2B_85()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodG2BSink(7);
}

//----- (000000000041BDDF) ----------------------------------------------------
__int64 goodB2G_54()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodB2GSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 41BDDF: using guessed type char buf[16];

//----- (000000000041BF16) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65_good()
{
  goodG2B_85();
  return goodB2G_54();
}

//----- (000000000041BF30) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = v6;
    *v6 = 0;
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041C00C) ----------------------------------------------------
int goodG2B_86()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  globalReturnsTrueOrFalse();
  dest = v5;
  *v5 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041C0E8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12_good()
{
  return goodG2B_86();
}

//----- (000000000041C0F8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_badSink(char **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *a1;
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (000000000041C183) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(char **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *a1;
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * ((unsigned __int64)&v4[7] >> 4));
  strcpy((char *)(16 * ((unsigned __int64)&v4[7] >> 4)), s);
  return printLine(dest);
}

//----- (000000000041C20A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(wchar_t **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  _BYTE v4[16]; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  wchar_t *s; // [rsp+28h] [rbp-8h]

  v4[7] = HIBYTE(a1);
  s = *a1;
  v1 = wcslen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4[7] >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (000000000041C295) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041C2EF) ----------------------------------------------------
int goodG2B_87()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041C349) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67_good()
{
  return goodG2B_87();
}

//----- (000000000041C359) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041C401) ----------------------------------------------------
int goodG2B_88()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041C4A9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31_good()
{
  return goodG2B_88();
}

//----- (000000000041C4B9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041C595) ----------------------------------------------------
int goodB2G1_37()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041C683) ----------------------------------------------------
int goodB2G2_37()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041C765) ----------------------------------------------------
int goodG2B1_42()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041C807) ----------------------------------------------------
int goodG2B2_42()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041C89D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (000000000041C8CB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041C993) ----------------------------------------------------
int goodG2B1_43()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CA67) ----------------------------------------------------
int goodG2B2_43()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CB2F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_good()
{
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (000000000041CB49) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041CBC0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041CC37) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041CCB4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  char v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+28h] [rbp-18h]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_badSink((__int64)&v5);
}
// 41CCB4: using guessed type char buf[16];

//----- (000000000041CDA4) ----------------------------------------------------
int goodG2B_89()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041CDCE) ----------------------------------------------------
int goodB2G_55()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  char v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+28h] [rbp-18h]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodB2GSink((__int64)&v5);
}
// 41CDCE: using guessed type char buf[16];

//----- (000000000041CEBE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66_good()
{
  goodG2B_89();
  return goodB2G_55();
}

//----- (000000000041CED8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( GLOBAL_CONST_TRUE )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041CF9F) ----------------------------------------------------
int goodG2B1_44()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041D072) ----------------------------------------------------
int goodG2B2_44()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( GLOBAL_CONST_TRUE )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041D139) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09_good()
{
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (000000000041D153) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_badSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041D1DB) ----------------------------------------------------
int goodG2B_90()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041D263) ----------------------------------------------------
int goodB2G_56()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodB2GSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041D2F1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61_good()
{
  goodG2B_90();
  return goodB2G_56();
}

//----- (000000000041D30B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_badSink()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData;
  v0 = strlen((const char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}
// 6823E0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData;

//----- (000000000041D392) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodG2BSink()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData;
  v0 = strlen((const char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData);
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printLine(dest);
}
// 6823D8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData;

//----- (000000000041D415) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodB2GSink()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData;
  v0 = wcslen((const wchar_t *)CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 6823E8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData;

//----- (000000000041D49C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_badSink((void *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041D4F6) ----------------------------------------------------
int goodG2B_91()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_goodG2BSink((void *)(16
                                                                                  * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041D550) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67_good()
{
  return goodG2B_91();
}

//----- (000000000041D560) ----------------------------------------------------
int badSink_13()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682278: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData;

//----- (000000000041D5C2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return badSink_13();
}
// 682278: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_badData;

//----- (000000000041D61D) ----------------------------------------------------
int goodG2BSink_13()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682280: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;

//----- (000000000041D67F) ----------------------------------------------------
int goodG2B_92()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return goodG2BSink_13();
}
// 682280: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;

//----- (000000000041D6DA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45_good()
{
  return goodG2B_92();
}

//----- (000000000041D6EA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_badSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682400: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData;

//----- (000000000041D767) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodG2BSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682404: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData;

//----- (000000000041D7E4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodB2GSink()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682408: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData;

//----- (000000000041D867) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-40h]
  char v2; // [rsp+Fh] [rbp-31h]
  const char *v3; // [rsp+10h] [rbp-30h]
  int i; // [rsp+2Ch] [rbp-14h]

  for ( i = 0; i <= 0; ++i )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}

//----- (000000000041D8F5) ----------------------------------------------------
int good1_7()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  const char *v2; // [rsp+10h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (000000000041D95E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17_good()
{
  return good1_7();
}

//----- (000000000041D96E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041DA09) ----------------------------------------------------
int goodB2G1_38()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041DAAC) ----------------------------------------------------
int goodB2G2_38()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041DB4F) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041DBD3) ----------------------------------------------------
int goodG2B2_45()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041DC57) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (000000000041DC85) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041DD27) ----------------------------------------------------
int goodG2B1_46()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041DDD5) ----------------------------------------------------
int goodG2B2_46()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041DE77) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06_good()
{
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (000000000041DE91) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticFive_3 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 682178: using guessed type int staticFive_3;

//----- (000000000041DF71) ----------------------------------------------------
int goodB2G1_39()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticFive_3 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( staticFive_3 != 5 )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 682178: using guessed type int staticFive_3;

//----- (000000000041E063) ----------------------------------------------------
int goodB2G2_39()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticFive_3 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 682178: using guessed type int staticFive_3;

//----- (000000000041E149) ----------------------------------------------------
int goodG2B1_47()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_3 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682178: using guessed type int staticFive_3;

//----- (000000000041E1ED) ----------------------------------------------------
int goodG2B2_47()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_3 == 5 )
    v7 = 7;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682178: using guessed type int staticFive_3;

//----- (000000000041E285) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (000000000041E2B3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_badSink(a1);
}

//----- (000000000041E2CA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodG2BSink(a1);
}

//----- (000000000041E2E1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodB2GSink(a1);
}

//----- (000000000041E2F8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  __isoc99_fscanf(stdin, "%d", &v3);
  v2 = v3;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_badSink((__int64)&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041E338) ----------------------------------------------------
int goodG2B_93()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041E362) ----------------------------------------------------
int goodB2G_57()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  __isoc99_fscanf(stdin, "%d", &v3);
  v2 = v3;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodB2GSink((__int64)&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041E3A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66_good()
{
  goodG2B_93();
  return goodB2G_57();
}

//----- (000000000041E3BC) ----------------------------------------------------
__int64 __fastcall badSource_1(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041E3E9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource_1(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041E471) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 7LL;
}

//----- (000000000041E484) ----------------------------------------------------
int goodG2B_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource_1();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041E50C) ----------------------------------------------------
__int64 __fastcall goodB2GSource_1(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041E539) ----------------------------------------------------
int goodB2G_58()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource_1(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000041E5C7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42_good()
{
  goodB2G_58();
  return goodG2B_94();
}

//----- (000000000041E5E1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041E69E) ----------------------------------------------------
int goodG2B1_48()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041E75B) ----------------------------------------------------
int goodG2B2_48()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041E818) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03_good()
{
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (000000000041E832) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_badSink(a1);
}

//----- (000000000041E84C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(a1);
}

//----- (000000000041E866) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(a1);
}

//----- (000000000041E880) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (000000000041E900) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (000000000041E97C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (000000000041E9FC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EAB5) ----------------------------------------------------
int goodG2B1_49()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EB7A) ----------------------------------------------------
int goodG2B2_49()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EC33) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14_good()
{
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (000000000041EC4D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041ED0B) ----------------------------------------------------
int goodG2B_95()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000041EDC9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18_good()
{
  return goodG2B_95();
}

//----- (000000000041EDD9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EE34) ----------------------------------------------------
int good1_8()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EEA1) ----------------------------------------------------
int good2_3()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000041EF02) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14_good()
{
  good1_8();
  return good2_3();
}

//----- (000000000041EF1C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  unsigned int *v8; // [rsp+38h] [rbp-28h]
  unsigned __int64 v9; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v10; // [rsp+48h] [rbp-18h]
  unsigned __int64 *v11; // [rsp+50h] [rbp-10h]
  unsigned __int64 i; // [rsp+58h] [rbp-8h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000041EFFB) ----------------------------------------------------
int goodG2B_96()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  unsigned int *v8; // [rsp+38h] [rbp-28h]
  unsigned __int64 v9; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v10; // [rsp+48h] [rbp-18h]
  unsigned __int64 *v11; // [rsp+50h] [rbp-10h]
  unsigned __int64 i; // [rsp+58h] [rbp-8h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000041F0DA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32_good()
{
  return goodG2B_96();
}

//----- (000000000041F0EA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041F161) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041F1D8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041F255) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041F2A7) ----------------------------------------------------
int goodG2B_97()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000041F2F9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51_good()
{
  return goodG2B_97();
}

//----- (000000000041F309) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData = (__int64)"A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_badSink();
}
// 6823E0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData;

//----- (000000000041F338) ----------------------------------------------------
int goodG2B_98()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData = (__int64)"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodG2BSink();
}
// 6823D8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData;

//----- (000000000041F367) ----------------------------------------------------
int goodB2G_59()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData = (__int64)"A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodB2GSink();
}
// 6823E8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData;

//----- (000000000041F396) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_68_good()
{
  goodG2B_98();
  return goodB2G_59();
}

//----- (000000000041F3B0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v5 = 0;
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData = v3;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_badSink();
}
// 6823F8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData;

//----- (000000000041F446) ----------------------------------------------------
int goodG2B_99()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  unsigned __int64 v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  *v2 = 0;
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData = v4;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_goodG2BSink();
}
// 6823F0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData;

//----- (000000000041F4DC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_good()
{
  return goodG2B_99();
}

//----- (000000000041F4EC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000041F568) ----------------------------------------------------
int good1_9()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000041F5BF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16_good()
{
  return good1_9();
}

//----- (000000000041F5CF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData = v8;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_badSink();
}
// 682400: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_badData;
// 41F5CF: using guessed type char buf[16];

//----- (000000000041F706) ----------------------------------------------------
int goodG2B_100()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodG2BSink();
}
// 682404: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodG2BData;

//----- (000000000041F731) ----------------------------------------------------
int goodB2G_60()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData = v8;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b_goodB2GSink();
}
// 682408: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_goodB2GData;
// 41F731: using guessed type char buf[16];

//----- (000000000041F868) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68_good()
{
  goodG2B_100();
  return goodB2G_60();
}

//----- (000000000041F882) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v8; // [rsp+48h] [rbp-8h]

  v8 = a1;
  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041F8F0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v8; // [rsp+48h] [rbp-8h]

  v8 = a1;
  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000041F95E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000041F9DC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000041FA5A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68217C: using guessed type int staticTrue_4;

//----- (000000000041FB07) ----------------------------------------------------
int goodB2G1_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( staticFalse_4 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68217C: using guessed type int staticTrue_4;
// 682288: using guessed type int staticFalse_4;

//----- (000000000041FBC8) ----------------------------------------------------
int goodB2G2_40()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68217C: using guessed type int staticTrue_4;

//----- (000000000041FC7D) ----------------------------------------------------
int goodG2B1_50()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse_4 )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68217C: using guessed type int staticTrue_4;
// 682288: using guessed type int staticFalse_4;

//----- (000000000041FD1F) ----------------------------------------------------
int goodG2B2_50()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_4 )
    v7 = 7;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 68217C: using guessed type int staticTrue_4;

//----- (000000000041FDB5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000041FDE3) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_badSource()
{
  return 10LL;
}

//----- (000000000041FDF6) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000041FE09) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodB2GSource()
{
  return 10LL;
}

//----- (000000000041FE1C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_badSink(v4);
}

//----- (000000000041FE84) ----------------------------------------------------
int goodG2B_101()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodG2BSink(7);
}

//----- (000000000041FEA6) ----------------------------------------------------
int goodB2G_61()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b_goodB2GSink(v4);
}

//----- (000000000041FF0E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54_good()
{
  goodG2B_101();
  return goodB2G_61();
}

//----- (000000000041FF28) ----------------------------------------------------
int __fastcall badSink_14(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000041FF9F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return badSink_14(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041FFD7) ----------------------------------------------------
int __fastcall goodG2BSink_14(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042004E) ----------------------------------------------------
int goodG2B_102()
{
  return goodG2BSink_14(7);
}

//----- (0000000000420070) ----------------------------------------------------
int __fastcall goodB2GSink_6(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004200ED) ----------------------------------------------------
int goodB2G_62()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return goodB2GSink_6(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000420125) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_good()
{
  goodB2G_62();
  return goodG2B_102();
}

//----- (000000000042013F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_53_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_badSink("A");
}

//----- (0000000000420165) ----------------------------------------------------
int goodG2B_103()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (000000000042018B) ----------------------------------------------------
int goodB2G_63()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53b_goodB2GSink((wchar_t *)"A");
}

//----- (00000000004201B1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_53_good()
{
  goodG2B_103();
  return goodB2G_63();
}

//----- (00000000004201CB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_badSink(v8);
}
// 4201CB: using guessed type char buf[16];

//----- (00000000004202F9) ----------------------------------------------------
int goodG2B_104()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodG2BSink(7);
}

//----- (000000000042031B) ----------------------------------------------------
int goodB2G_64()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodB2GSink(v8);
}
// 42031B: using guessed type char buf[16];

//----- (0000000000420449) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53_good()
{
  goodG2B_104();
  return goodB2G_64();
}

//----- (0000000000420463) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_badSink(a1);
}

//----- (000000000042047D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_goodG2BSink(a1);
}

//----- (0000000000420497) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042050E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000420585) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000420602) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (00000000004206B9) ----------------------------------------------------
int goodG2B1_51()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000042077C) ----------------------------------------------------
int goodG2B2_51()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000420833) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good()
{
  goodG2B1_51();
  return goodG2B2_51();
}

//----- (000000000042084D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  unsigned int *v7; // [rsp+30h] [rbp-20h]
  unsigned __int64 v8; // [rsp+38h] [rbp-18h]
  unsigned __int64 v9; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042090B) ----------------------------------------------------
int goodG2B_105()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  unsigned int *v7; // [rsp+30h] [rbp-20h]
  unsigned __int64 v8; // [rsp+38h] [rbp-18h]
  unsigned __int64 v9; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (00000000004209C9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31_good()
{
  return goodG2B_105();
}

//----- (00000000004209D9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  __isoc99_fscanf(stdin, "%d", &v7);
  v6 = v7;
  v8 = v7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v8;
  *((_DWORD *)&v1 + v8) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000420A7D) ----------------------------------------------------
int goodG2B_106()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000420B0B) ----------------------------------------------------
int goodB2G_65()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  __isoc99_fscanf(stdin, "%d", &v7);
  v6 = v7;
  v8 = v7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v8 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v8;
  *((_DWORD *)&v1 + v8) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000420BB5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34_good()
{
  goodG2B_106();
  return goodB2G_65();
}

//----- (0000000000420BCF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (0000000000420C28) ----------------------------------------------------
int good1_10()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000420C93) ----------------------------------------------------
int good2_4()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000420CF2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_good()
{
  good1_10();
  return good2_4();
}

//----- (0000000000420D0C) ----------------------------------------------------
int __fastcall badSink_15(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic_1;
  if ( badStatic_1 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 68228C: using guessed type int badStatic_1;

//----- (0000000000420D8D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  badStatic_1 = 1;
  return badSink_15(v8);
}
// 68228C: using guessed type int badStatic_1;
// 420D8D: using guessed type char buf[16];

//----- (0000000000420EC5) ----------------------------------------------------
int __fastcall goodB2G1Sink_1(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static_1 )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 682290: using guessed type int goodB2G1Static_1;

//----- (0000000000420F58) ----------------------------------------------------
int goodB2G1_41()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G1Static_1 = 0;
  return goodB2G1Sink_1(v8);
}
// 682290: using guessed type int goodB2G1Static_1;
// 420F58: using guessed type char buf[16];

//----- (0000000000421090) ----------------------------------------------------
int __fastcall goodB2G2Sink_1(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static_1;
  if ( goodB2G2Static_1 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682294: using guessed type int goodB2G2Static_1;

//----- (0000000000421117) ----------------------------------------------------
int goodB2G2_41()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G2Static_1 = 1;
  return goodB2G2Sink_1(v8);
}
// 682294: using guessed type int goodB2G2Static_1;
// 421117: using guessed type char buf[16];

//----- (000000000042124F) ----------------------------------------------------
int __fastcall goodG2BSink_15(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic_1;
  if ( goodG2BStatic_1 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682298: using guessed type int goodG2BStatic_1;

//----- (00000000004212D0) ----------------------------------------------------
int goodG2B_107()
{
  goodG2BStatic_1 = 1;
  return goodG2BSink_15(7);
}
// 682298: using guessed type int goodG2BStatic_1;

//----- (00000000004212FC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21_good()
{
  goodB2G1_41();
  goodB2G2_41();
  return goodG2B_107();
}

//----- (0000000000421320) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004213A2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000421424) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004214AC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000421523) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042159A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000421617) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004216BA) ----------------------------------------------------
int goodG2B1_52()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000421769) ----------------------------------------------------
int goodG2B2_52()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042180C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13_good()
{
  goodG2B1_52();
  return goodG2B2_52();
}

//----- (0000000000421826) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004218AB) ----------------------------------------------------
int good1_11()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000421917) ----------------------------------------------------
int good2_5()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000421977) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09_good()
{
  good1_11();
  return good2_5();
}

//----- (0000000000421991) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_badSink((void **)&v2);
}

//----- (00000000004219E3) ----------------------------------------------------
int goodG2B_108()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink((void **)&v2);
}

//----- (0000000000421A35) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64_good()
{
  return goodG2B_108();
}

//----- (0000000000421A45) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_badSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000421ACD) ----------------------------------------------------
int goodG2B_109()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000421B55) ----------------------------------------------------
int goodB2G_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b_goodB2GSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000421BE3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61_good()
{
  goodG2B_109();
  return goodB2G_66();
}

//----- (0000000000421BFD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000421CC8) ----------------------------------------------------
int goodG2B1_53()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000421D9F) ----------------------------------------------------
int goodG2B2_53()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000421E6A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11_good()
{
  goodG2B1_53();
  return goodG2B2_53();
}

//----- (0000000000421E84) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000421F41) ----------------------------------------------------
int goodG2B1_54()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000421FFE) ----------------------------------------------------
int goodG2B2_54()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (00000000004220BB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02_good()
{
  goodG2B1_54();
  return goodG2B2_54();
}

//----- (00000000004220D5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_badSink(a1);
}

//----- (00000000004220EC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodG2BSink(a1);
}

//----- (0000000000422103) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodB2GSink(a1);
}

//----- (000000000042211A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000042219F) ----------------------------------------------------
int good1_12()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042220B) ----------------------------------------------------
int good2_6()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042226B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06_good()
{
  good1_12();
  return good2_6();
}

//----- (0000000000422285) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_badSink(a1);
}

//----- (000000000042229F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(a1);
}

//----- (00000000004222B9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(a1);
}

//----- (00000000004222D3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_4 == 5 )
    v7 = 10;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682180: using guessed type int staticFive_4;

//----- (000000000042236B) ----------------------------------------------------
int goodB2G1_42()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_4 == 5 )
    v7 = 10;
  if ( staticFive_4 != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682180: using guessed type int staticFive_4;

//----- (0000000000422415) ----------------------------------------------------
int goodB2G2_42()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_4 == 5 )
    v7 = 10;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682180: using guessed type int staticFive_4;

//----- (00000000004224B3) ----------------------------------------------------
int goodG2B1_55()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_4 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682180: using guessed type int staticFive_4;

//----- (0000000000422557) ----------------------------------------------------
int goodG2B2_55()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_4 == 5 )
    v7 = 7;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682180: using guessed type int staticFive_4;

//----- (00000000004225EF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B1_55();
  return goodG2B2_55();
}

//----- (000000000042261D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( globalTrue )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (00000000004226E4) ----------------------------------------------------
int goodG2B1_56()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682398: using guessed type int globalFalse;

//----- (00000000004227B7) ----------------------------------------------------
int goodG2B2_56()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( globalTrue )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042287E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_good()
{
  goodG2B1_56();
  return goodG2B2_56();
}

//----- (0000000000422898) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_badSink(a1);
}

//----- (00000000004228AF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodG2BSink(a1);
}

//----- (00000000004228C6) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c_goodB2GSink(a1);
}

//----- (00000000004228DD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000422954) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004229CB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000422A48) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_badSink;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000422AB9) ----------------------------------------------------
int goodG2B_110()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodG2BSink(7);
}

//----- (0000000000422AE4) ----------------------------------------------------
__int64 goodB2G_67()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b_goodB2GSink;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000422B55) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65_good()
{
  goodG2B_110();
  return goodB2G_67();
}

//----- (0000000000422B6F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_badSink(a1);
}

//----- (0000000000422B89) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d_goodG2BSink(a1);
}

//----- (0000000000422BA3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000422C3B) ----------------------------------------------------
int goodG2B1_57()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000422CD3) ----------------------------------------------------
int goodG2B2_57()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000422D6B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03_good()
{
  goodG2B1_57();
  return goodG2B2_57();
}

//----- (0000000000422D85) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000422E42) ----------------------------------------------------
int goodG2B_111()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000422EFF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01_good()
{
  return goodG2B_111();
}

//----- (0000000000422F0F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (0000000000422F54) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (0000000000422F99) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000423032) ----------------------------------------------------
int goodG2B_112()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004230CB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18_good()
{
  return goodG2B_112();
}

//----- (00000000004230DB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 4230DB: using guessed type char buf[16];

//----- (0000000000423281) ----------------------------------------------------
int goodB2G1_43()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;
// 423281: using guessed type char buf[16];

//----- (0000000000423439) ----------------------------------------------------
int goodB2G2_43()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 423439: using guessed type char buf[16];

//----- (00000000004235E5) ----------------------------------------------------
int goodG2B1_58()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000423687) ----------------------------------------------------
int goodG2B2_58()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042371D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_58();
  return goodG2B2_58();
}

//----- (000000000042374B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000423829) ----------------------------------------------------
int goodB2G1_44()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000423919) ----------------------------------------------------
int goodB2G2_44()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (00000000004239FD) ----------------------------------------------------
int goodG2B1_59()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000423AA1) ----------------------------------------------------
int goodG2B2_59()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000423B39) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_59();
  return goodG2B2_59();
}

//----- (0000000000423B67) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_52_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_badSink("A");
}

//----- (0000000000423B8D) ----------------------------------------------------
int goodG2B_113()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (0000000000423BB3) ----------------------------------------------------
int goodB2G_68()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_52b_goodB2GSink((wchar_t *)"A");
}

//----- (0000000000423BD9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_52_good()
{
  goodG2B_113();
  return goodB2G_68();
}

//----- (0000000000423BF3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_badSink(&v5);
}
// 423BF3: using guessed type char buf[16];

//----- (0000000000423D23) ----------------------------------------------------
int goodG2B_114()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodG2BSink(&v1);
}

//----- (0000000000423D47) ----------------------------------------------------
int goodB2G_69()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodB2GSink(&v5);
}
// 423D47: using guessed type char buf[16];

//----- (0000000000423E77) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64_good()
{
  goodG2B_114();
  return goodB2G_69();
}

//----- (0000000000423E91) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000423EE3) ----------------------------------------------------
int goodG2B_115()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000423F35) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54_good()
{
  return goodG2B_115();
}

//----- (0000000000423F45) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (0000000000423FC5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (0000000000424041) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (00000000004240C1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_badSink(v8);
}
// 4240C1: using guessed type char buf[16];

//----- (00000000004241EF) ----------------------------------------------------
int goodG2B_116()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodG2BSink(7);
}

//----- (0000000000424211) ----------------------------------------------------
int goodB2G_70()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b_goodB2GSink(v8);
}
// 424211: using guessed type char buf[16];

//----- (000000000042433F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52_good()
{
  goodG2B_116();
  return goodB2G_70();
}

//----- (0000000000424359) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004243D0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000424447) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004244C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  in_addr_t v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+50h] [rbp-20h]
  int v11; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v15; // [rsp+6Ch] [rbp-4h]

  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v15 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v10 = v15;
  v11 = v15;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v15 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4244C4: using guessed type char buf[16];

//----- (0000000000424618) ----------------------------------------------------
int goodG2B_117()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004246A6) ----------------------------------------------------
int goodB2G_71()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  in_addr_t v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+50h] [rbp-20h]
  int v11; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v15; // [rsp+6Ch] [rbp-4h]

  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v15 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v10 = v15;
  v11 = v15;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v15 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4246A6: using guessed type char buf[16];

//----- (0000000000424800) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_good()
{
  goodG2B_117();
  return goodB2G_71();
}

//----- (000000000042481A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (00000000004248A8) ----------------------------------------------------
int goodB2G_72()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (0000000000424936) ----------------------------------------------------
int goodG2B_118()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (00000000004249C0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good()
{
  goodB2G_72();
  return goodG2B_118();
}

//----- (00000000004249DA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000424AA6) ----------------------------------------------------
int goodB2G1_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000424B78) ----------------------------------------------------
int goodB2G2_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000424C4A) ----------------------------------------------------
int goodG2B1_60()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000424CCE) ----------------------------------------------------
int goodG2B2_60()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000424D52) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_60();
  return goodG2B2_60();
}

//----- (0000000000424D80) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v4; // [rsp+8h] [rbp-38h]
  __int64 v5; // [rsp+10h] [rbp-30h]
  __int64 v6; // [rsp+18h] [rbp-28h]
  __int64 v7; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v0 = alloca(32LL);
  else
    v1 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  src = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  v7 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v4 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000424E5C) ----------------------------------------------------
int goodG2B_119()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  globalReturnsTrueOrFalse();
  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000424F38) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_good()
{
  return goodG2B_119();
}

//----- (0000000000424F48) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 424F48: using guessed type char buf[16];

//----- (00000000004250D8) ----------------------------------------------------
int goodB2G_73()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4250D8: using guessed type char buf[16];

//----- (000000000042526E) ----------------------------------------------------
int goodG2B_120()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004252F2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16_good()
{
  goodB2G_73();
  return goodG2B_120();
}

//----- (000000000042530C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_badSink(a1);
}

//----- (0000000000425326) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_goodG2BSink(a1);
}

//----- (0000000000425340) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (000000000042534B) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (0000000000425356) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000425421) ----------------------------------------------------
int goodG2B1_61()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( (unsigned int)staticReturnsFalse_2() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (00000000004254F8) ----------------------------------------------------
int goodG2B2_61()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (00000000004255C3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08_good()
{
  goodG2B1_61();
  return goodG2B2_61();
}

//----- (00000000004255DD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_5 )
    v7 = 10;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682184: using guessed type int staticTrue_5;

//----- (0000000000425673) ----------------------------------------------------
int goodB2G1_46()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_5 )
    v7 = 10;
  if ( staticFalse_5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682184: using guessed type int staticTrue_5;
// 68229C: using guessed type int staticFalse_5;

//----- (000000000042571B) ----------------------------------------------------
int goodB2G2_46()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_5 )
    v7 = 10;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682184: using guessed type int staticTrue_5;

//----- (00000000004257B7) ----------------------------------------------------
int goodG2B1_62()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse_5 )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682184: using guessed type int staticTrue_5;
// 68229C: using guessed type int staticFalse_5;

//----- (0000000000425859) ----------------------------------------------------
int goodG2B2_62()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_5 )
    v7 = 7;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682184: using guessed type int staticTrue_5;

//----- (00000000004258EF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_62();
  return goodG2B2_62();
}

//----- (000000000042591D) ----------------------------------------------------
__int64 badSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000042597C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource_2();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000425A04) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 7LL;
}

//----- (0000000000425A17) ----------------------------------------------------
int goodG2B_121()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource_2();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000425A9F) ----------------------------------------------------
__int64 goodB2GSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (0000000000425AFE) ----------------------------------------------------
int goodB2G_74()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource_2();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000425B8C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42_good()
{
  goodB2G_74();
  return goodG2B_121();
}

//----- (0000000000425BA6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;
// 425BA6: using guessed type char buf[16];

//----- (0000000000425D08) ----------------------------------------------------
int goodB2G1_47()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821C0: using guessed type int globalFive;
// 425D08: using guessed type char buf[16];

//----- (0000000000425E7C) ----------------------------------------------------
int goodB2G2_47()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;
// 425E7C: using guessed type char buf[16];

//----- (0000000000425FE4) ----------------------------------------------------
int goodG2B1_63()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000426088) ----------------------------------------------------
int goodG2B2_63()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000426120) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B1_63();
  return goodG2B2_63();
}

//----- (000000000042614E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-80h]
  __int64 v2; // [rsp+8h] [rbp-78h]
  __int64 v3; // [rsp+10h] [rbp-70h]
  __int64 v4; // [rsp+18h] [rbp-68h]
  __int64 v5; // [rsp+20h] [rbp-60h]
  char buf[16]; // [rsp+30h] [rbp-50h]
  __int16 s; // [rsp+40h] [rbp-40h]
  uint16_t v8; // [rsp+42h] [rbp-3Eh]
  in_addr_t v9; // [rsp+44h] [rbp-3Ch]
  int v10; // [rsp+58h] [rbp-28h]
  int v11; // [rsp+5Ch] [rbp-24h]
  int v12; // [rsp+60h] [rbp-20h]
  int fd; // [rsp+64h] [rbp-1Ch]
  int *v14; // [rsp+68h] [rbp-18h]
  int *v15; // [rsp+70h] [rbp-10h]
  int i; // [rsp+78h] [rbp-8h]
  int v17; // [rsp+7Ch] [rbp-4h]

  v15 = &v10;
  v14 = &v10;
  v10 = -1;
  v17 = -1;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v17 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v15 = v17;
  v11 = *v14;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v11 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42614E: using guessed type char buf[16];

//----- (00000000004262C1) ----------------------------------------------------
int goodG2B_122()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042636E) ----------------------------------------------------
int goodB2G_75()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-80h]
  __int64 v2; // [rsp+8h] [rbp-78h]
  __int64 v3; // [rsp+10h] [rbp-70h]
  __int64 v4; // [rsp+18h] [rbp-68h]
  __int64 v5; // [rsp+20h] [rbp-60h]
  char buf[16]; // [rsp+30h] [rbp-50h]
  __int16 s; // [rsp+40h] [rbp-40h]
  uint16_t v8; // [rsp+42h] [rbp-3Eh]
  in_addr_t v9; // [rsp+44h] [rbp-3Ch]
  int v10; // [rsp+58h] [rbp-28h]
  int v11; // [rsp+5Ch] [rbp-24h]
  int v12; // [rsp+60h] [rbp-20h]
  int fd; // [rsp+64h] [rbp-1Ch]
  int *v14; // [rsp+68h] [rbp-18h]
  int *v15; // [rsp+70h] [rbp-10h]
  int i; // [rsp+78h] [rbp-8h]
  int v17; // [rsp+7Ch] [rbp-4h]

  v15 = &v10;
  v14 = &v10;
  v10 = -1;
  v17 = -1;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v17 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v15 = v17;
  v11 = *v14;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v11 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42636E: using guessed type char buf[16];

//----- (00000000004264E7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32_good()
{
  goodG2B_122();
  return goodB2G_75();
}

//----- (0000000000426501) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_badSink(a1);
}

//----- (0000000000426518) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodG2BSink(a1);
}

//----- (000000000042652F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c_goodB2GSink(a1);
}

//----- (0000000000426546) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004265FF) ----------------------------------------------------
int goodG2B1_64()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004266C4) ----------------------------------------------------
int goodG2B2_64()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042677D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13_good()
{
  goodG2B1_64();
  return goodG2B2_64();
}

//----- (0000000000426797) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004267F2) ----------------------------------------------------
int good1_13()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042685F) ----------------------------------------------------
int good2_7()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004268C0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13_good()
{
  good1_13();
  return good2_7();
}

//----- (00000000004268DA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000426951) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004269C8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000426A45) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_51_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_badSink("A");
}

//----- (0000000000426A6B) ----------------------------------------------------
int goodG2B_123()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (0000000000426A91) ----------------------------------------------------
int goodB2G_76()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_51b_goodB2GSink((wchar_t *)"A");
}

//----- (0000000000426AB7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_51_good()
{
  goodG2B_123();
  return goodB2G_76();
}

//----- (0000000000426AD1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_badSink(a1);
}

//----- (0000000000426AEB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_goodG2BSink(a1);
}

//----- (0000000000426B05) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000426B82) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000426BFF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000426C82) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_badSink(v8);
}
// 426C82: using guessed type char buf[16];

//----- (0000000000426DB0) ----------------------------------------------------
int goodG2B_124()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodG2BSink(7);
}

//----- (0000000000426DD2) ----------------------------------------------------
int goodB2G_77()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b_goodB2GSink(v8);
}
// 426DD2: using guessed type char buf[16];

//----- (0000000000426F00) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51_good()
{
  goodG2B_124();
  return goodB2G_77();
}

//----- (0000000000426F1A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData = v4;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_badSink();
}
// 68240C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_badData;

//----- (0000000000426F8B) ----------------------------------------------------
int goodG2B_125()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodG2BSink();
}
// 682410: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodG2BData;

//----- (0000000000426FB6) ----------------------------------------------------
int goodB2G_78()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData = v4;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b_goodB2GSink();
}
// 682414: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_goodB2GData;

//----- (0000000000427027) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68_good()
{
  goodG2B_125();
  return goodB2G_78();
}

//----- (0000000000427041) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  void *dest; // [rsp+40h] [rbp-20h]
  unsigned __int64 v9; // [rsp+48h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004270E9) ----------------------------------------------------
int goodG2B_126()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  void *dest; // [rsp+40h] [rbp-20h]
  unsigned __int64 v9; // [rsp+48h] [rbp-18h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000427191) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34_good()
{
  return goodG2B_126();
}

//----- (00000000004271A1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000427247) ----------------------------------------------------
int goodG2B1_65()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004272F9) ----------------------------------------------------
int goodG2B2_65()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042739F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11_good()
{
  goodG2B1_65();
  return goodG2B2_65();
}

//----- (00000000004273B9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_badSink(a1);
}

//----- (00000000004273D3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c_goodG2BSink(a1);
}

//----- (00000000004273ED) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticTrue_6 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 682188: using guessed type int staticTrue_6;

//----- (00000000004274CB) ----------------------------------------------------
int goodB2G1_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticTrue_6 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( staticFalse_6 )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 682188: using guessed type int staticTrue_6;
// 6822A0: using guessed type int staticFalse_6;

//----- (00000000004275BB) ----------------------------------------------------
int goodB2G2_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( staticTrue_6 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 682188: using guessed type int staticTrue_6;

//----- (000000000042769F) ----------------------------------------------------
int goodG2B1_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse_6 )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682188: using guessed type int staticTrue_6;
// 6822A0: using guessed type int staticFalse_6;

//----- (0000000000427741) ----------------------------------------------------
int goodG2B2_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_6 )
    v7 = 7;
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 682188: using guessed type int staticTrue_6;

//----- (00000000004277D7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_66();
  return goodG2B2_66();
}

//----- (0000000000427805) ----------------------------------------------------
int __fastcall badSink_16(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042787C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_16(v2);
}

//----- (00000000004278E6) ----------------------------------------------------
int __fastcall goodG2BSink_16(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042795D) ----------------------------------------------------
int goodG2B_127()
{
  return goodG2BSink_16(7);
}

//----- (000000000042797F) ----------------------------------------------------
int __fastcall goodB2GSink_7(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004279FC) ----------------------------------------------------
int goodB2G_79()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_7(v2);
}

//----- (0000000000427A66) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41_good()
{
  goodB2G_79();
  return goodG2B_127();
}

//----- (0000000000427A80) ----------------------------------------------------
int __fastcall badSink_17(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic_2;
  if ( badStatic_2 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822A4: using guessed type int badStatic_2;

//----- (0000000000427B01) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  badStatic_2 = 1;
  return badSink_17(v7);
}
// 6822A4: using guessed type int badStatic_2;
// 427B01: using guessed type char buf[16];

//----- (0000000000427BF3) ----------------------------------------------------
int __fastcall goodB2G1Sink_2(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static_2 )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 6822A8: using guessed type int goodB2G1Static_2;

//----- (0000000000427C86) ----------------------------------------------------
int goodB2G1_49()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G1Static_2 = 0;
  return goodB2G1Sink_2(v7);
}
// 6822A8: using guessed type int goodB2G1Static_2;
// 427C86: using guessed type char buf[16];

//----- (0000000000427D78) ----------------------------------------------------
int __fastcall goodB2G2Sink_2(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static_2;
  if ( goodB2G2Static_2 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822AC: using guessed type int goodB2G2Static_2;

//----- (0000000000427DFF) ----------------------------------------------------
int goodB2G2_49()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G2Static_2 = 1;
  return goodB2G2Sink_2(v7);
}
// 6822AC: using guessed type int goodB2G2Static_2;
// 427DFF: using guessed type char buf[16];

//----- (0000000000427EF1) ----------------------------------------------------
int __fastcall goodG2BSink_17(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic_2;
  if ( goodG2BStatic_2 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822B0: using guessed type int goodG2BStatic_2;

//----- (0000000000427F72) ----------------------------------------------------
int goodG2B_128()
{
  goodG2BStatic_2 = 1;
  return goodG2BSink_17(7);
}
// 6822B0: using guessed type int goodG2BStatic_2;

//----- (0000000000427F9E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21_good()
{
  goodB2G1_49();
  goodB2G2_49();
  return goodG2B_128();
}

//----- (0000000000427FC2) ----------------------------------------------------
int badSink_18()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData;
  v0 = strlen((const char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}
// 6822B8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData;

//----- (0000000000428049) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData = (__int64)"A";
  return badSink_18();
}
// 6822B8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData;

//----- (0000000000428078) ----------------------------------------------------
int goodG2BSink_18()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData;
  v0 = strlen((const char *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData);
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printLine(dest);
}
// 6822C0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData;

//----- (00000000004280FB) ----------------------------------------------------
int goodG2B_129()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData = (__int64)"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  return goodG2BSink_18();
}
// 6822C0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData;

//----- (000000000042812A) ----------------------------------------------------
int goodB2GSink_8()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData;
  v0 = wcslen((const wchar_t *)CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 6822C8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData;

//----- (00000000004281B1) ----------------------------------------------------
int goodB2G_80()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData = (__int64)"A";
  return goodB2GSink_8();
}
// 6822C8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData;

//----- (00000000004281E0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good()
{
  goodG2B_129();
  return goodB2G_80();
}

//----- (00000000004281FA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4281FA: using guessed type char buf[16];

//----- (0000000000428358) ----------------------------------------------------
int goodB2G1_50()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 428358: using guessed type char buf[16];

//----- (00000000004284C8) ----------------------------------------------------
int goodB2G2_50()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4284C8: using guessed type char buf[16];

//----- (000000000042862C) ----------------------------------------------------
int goodG2B1_67()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004286CC) ----------------------------------------------------
int goodG2B2_67()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000428760) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B1_67();
  return goodG2B2_67();
}

//----- (000000000042878E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  in_addr_t v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+58h] [rbp-18h]
  int v11; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v15; // [rsp+6Ch] [rbp-4h]

  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v15 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v11 = v15;
  v10 = v15;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v15 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42878E: using guessed type char buf[16];

//----- (00000000004288E2) ----------------------------------------------------
int goodG2B_130()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000428970) ----------------------------------------------------
int goodB2G_81()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  in_addr_t v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+58h] [rbp-18h]
  int v11; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v15; // [rsp+6Ch] [rbp-4h]

  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v12 = recv(fd, buf, 0xDuLL, 0);
      if ( v12 != -1 )
      {
        if ( v12 )
        {
          buf[v12] = 0;
          v15 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v11 = v15;
  v10 = v15;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v15 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 428970: using guessed type char buf[16];

//----- (0000000000428ACA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31_good()
{
  goodG2B_130();
  return goodB2G_81();
}

//----- (0000000000428AE4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_badSink(v9);
}
// 428AE4: using guessed type char buf[16];

//----- (0000000000428C18) ----------------------------------------------------
int goodG2B_131()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodG2BSink(7);
}

//----- (0000000000428C40) ----------------------------------------------------
int goodB2G_82()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodB2GSink(v9);
}
// 428C40: using guessed type char buf[16];

//----- (0000000000428D74) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67_good()
{
  goodG2B_131();
  return goodB2G_82();
}

//----- (0000000000428D8E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000428DF4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000428E5A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000428EFC) ----------------------------------------------------
int goodG2B1_68()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682398: using guessed type int globalFalse;

//----- (0000000000428FAA) ----------------------------------------------------
int goodG2B2_68()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042904C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10_good()
{
  goodG2B1_68();
  return goodG2B2_68();
}

//----- (0000000000429066) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)dword_463DA0;
  v0 = strlen((const char *)dword_463DA0);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_463DA0);
  return printLine((const char *)dest);
}

//----- (0000000000429106) ----------------------------------------------------
int goodB2G1_51()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = dword_463DA0;
  v0 = wcslen(dword_463DA0);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_463DA0);
  return printWLine((__int64)dest);
}

//----- (00000000004291B2) ----------------------------------------------------
int goodB2G2_51()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = dword_463DA0;
  v0 = wcslen(dword_463DA0);
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), dword_463DA0);
  return printWLine((__int64)dest);
}

//----- (0000000000429252) ----------------------------------------------------
int goodG2B1_69()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (00000000004292FA) ----------------------------------------------------
int goodG2B2_69()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (0000000000429396) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_69();
  return goodG2B2_69();
}

//----- (00000000004293C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_badSink(v4);
}

//----- (000000000042942C) ----------------------------------------------------
int goodG2B_132()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodG2BSink(7);
}

//----- (000000000042944E) ----------------------------------------------------
int goodB2G_83()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b_goodB2GSink(v4);
}

//----- (00000000004294B6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53_good()
{
  goodG2B_132();
  return goodB2G_83();
}

//----- (00000000004294D0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042957E) ----------------------------------------------------
int goodG2B1_70()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042962C) ----------------------------------------------------
int goodG2B2_70()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (00000000004296DA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good()
{
  goodG2B1_70();
  return goodG2B2_70();
}

//----- (00000000004296F4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4296F4: using guessed type char buf[16];

//----- (000000000042989A) ----------------------------------------------------
int goodB2G1_52()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42989A: using guessed type char buf[16];

//----- (0000000000429A52) ----------------------------------------------------
int goodB2G2_52()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 429A52: using guessed type char buf[16];

//----- (0000000000429BFE) ----------------------------------------------------
int goodG2B1_71()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000429CA0) ----------------------------------------------------
int goodG2B2_71()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000429D36) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_71();
  return goodG2B2_71();
}

//----- (0000000000429D64) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (0000000000429DB4) ----------------------------------------------------
int good1_14()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000429E0A) ----------------------------------------------------
int good2_8()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000429E60) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03_good()
{
  good1_14();
  return good2_8();
}

//----- (0000000000429E7A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-50h]
  __int64 v7; // [rsp+8h] [rbp-48h]
  __int64 v8; // [rsp+10h] [rbp-40h]
  __int64 v9; // [rsp+18h] [rbp-38h]
  __int64 v10; // [rsp+20h] [rbp-30h]
  int v11; // [rsp+30h] [rbp-20h]
  int v12; // [rsp+34h] [rbp-1Ch]
  int v13; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  v11 = v2;
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000429F50) ----------------------------------------------------
int goodG2B_133()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000429FDE) ----------------------------------------------------
int goodB2G_84()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-50h]
  __int64 v7; // [rsp+8h] [rbp-48h]
  __int64 v8; // [rsp+10h] [rbp-40h]
  __int64 v9; // [rsp+18h] [rbp-38h]
  __int64 v10; // [rsp+20h] [rbp-30h]
  int v11; // [rsp+30h] [rbp-20h]
  int v12; // [rsp+34h] [rbp-1Ch]
  int v13; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  v11 = v2;
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000042A0BA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34_good()
{
  goodG2B_133();
  return goodB2G_84();
}

//----- (000000000042A0D4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_badSink(a1);
}

//----- (000000000042A0EE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d_goodG2BSink(a1);
}

//----- (000000000042A108) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_badSink(a1);
}

//----- (000000000042A11F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodG2BSink(a1);
}

//----- (000000000042A136) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodB2GSink(a1);
}

//----- (000000000042A14D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_badSink(v8);
}
// 42A14D: using guessed type char buf[16];

//----- (000000000042A23B) ----------------------------------------------------
int goodG2B_134()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodG2BSink(7);
}

//----- (000000000042A263) ----------------------------------------------------
int goodB2G_85()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b_goodB2GSink(v8);
}
// 42A263: using guessed type char buf[16];

//----- (000000000042A351) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_good()
{
  goodG2B_134();
  return goodB2G_85();
}

//----- (000000000042A36B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042A3ED) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042A46F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042A4F7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042A5A6) ----------------------------------------------------
int goodG2B_135()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042A655) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18_good()
{
  return goodG2B_135();
}

//----- (000000000042A665) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042A6FD) ----------------------------------------------------
int goodG2B_136()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042A795) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good()
{
  return goodG2B_136();
}

//----- (000000000042A7A5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+28h] [rbp-18h]
  int v7; // [rsp+30h] [rbp-10h]
  int v8; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v9 = 10;
  v7 = 10;
  v8 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042A833) ----------------------------------------------------
int goodG2B_137()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042A8C1) ----------------------------------------------------
int goodB2G_86()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000042A955) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34_good()
{
  goodG2B_137();
  return goodB2G_86();
}

//----- (000000000042A96F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000042A9CA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000042AA25) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_badSink(v3);
}

//----- (000000000042AAB2) ----------------------------------------------------
int goodG2B_138()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b_goodG2BSink(v4);
}

//----- (000000000042AB3F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54_good()
{
  return goodG2B_138();
}

//----- (000000000042AB4F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822D0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal;

//----- (000000000042ABD0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 6822D4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Global;

//----- (000000000042AC63) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822D8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global;

//----- (000000000042ACEA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822DC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal;

//----- (000000000042AD6B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000042ADE6) ----------------------------------------------------
int good1_15()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042AE3C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01_good()
{
  return good1_15();
}

//----- (000000000042AE4C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_badSink((void **)&v2);
}

//----- (000000000042AE9E) ----------------------------------------------------
int goodG2B_139()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink((void **)&v2);
}

//----- (000000000042AEF0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63_good()
{
  return goodG2B_139();
}

//----- (000000000042AF00) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  __int64 v3; // [rsp+0h] [rbp-40h]
  __int64 v4; // [rsp+8h] [rbp-38h]
  __int64 v5; // [rsp+10h] [rbp-30h]
  __int64 v6; // [rsp+18h] [rbp-28h]
  __int64 v7; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v9; // [rsp+38h] [rbp-8h]

  v9 = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v0 = alloca(32LL);
  else
    v1 = alloca(64LL);
  v9 = (unsigned int *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  v7 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v9[i] = *((_DWORD *)&v3 + i);
  return printIntLine(*v9);
}

//----- (000000000042AFF2) ----------------------------------------------------
int goodG2B_140()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  globalReturnsTrueOrFalse();
  v0 = alloca(64LL);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000042B0E4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12_good()
{
  return goodG2B_140();
}

//----- (000000000042B0F4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042B178) ----------------------------------------------------
int goodB2G1_53()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000042B202) ----------------------------------------------------
int goodB2G2_53()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000042B28C) ----------------------------------------------------
int goodG2B1_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042B310) ----------------------------------------------------
int goodG2B2_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042B394) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_72();
  return goodG2B2_72();
}

//----- (000000000042B3C2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_badSink((void **)&v2);
}

//----- (000000000042B414) ----------------------------------------------------
int goodG2B_141()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b_goodG2BSink((void **)&v2);
}

//----- (000000000042B466) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64_good()
{
  return goodG2B_141();
}

//----- (000000000042B476) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042B4FF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042B588) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042B617) ----------------------------------------------------
const char *badSource_3()
{
  return "A";
}

//----- (000000000042B62D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_42_bad()
{
  char *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  v0 = (char *)badSource_3();
  s = v0;
  v1 = strlen(v0);
  v5 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (000000000042B6C1) ----------------------------------------------------
const char *goodG2BSource_3()
{
  return "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
}

//----- (000000000042B6D7) ----------------------------------------------------
int goodG2B_142()
{
  char *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  v0 = (char *)goodG2BSource_3();
  s = v0;
  v1 = strlen(v0);
  v5 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printLine(dest);
}

//----- (000000000042B767) ----------------------------------------------------
const char *goodB2GSource_3()
{
  return "A";
}

//----- (000000000042B77D) ----------------------------------------------------
int goodB2G_87()
{
  wchar_t *v0; // rax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v5; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  v0 = (wchar_t *)goodB2GSource_3();
  s = v0;
  v1 = wcslen(v0);
  v5 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (000000000042B811) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_42_good()
{
  goodB2G_87();
  return goodG2B_142();
}

//----- (000000000042B82B) ----------------------------------------------------
__int64 badSource_4()
{
  return 10LL;
}

//----- (000000000042B83E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource_4();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042B8C6) ----------------------------------------------------
__int64 goodG2BSource_4()
{
  return 7LL;
}

//----- (000000000042B8D9) ----------------------------------------------------
int goodG2B_143()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource_4();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042B961) ----------------------------------------------------
__int64 goodB2GSource_4()
{
  return 10LL;
}

//----- (000000000042B974) ----------------------------------------------------
int goodB2G_88()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource_4();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042BA02) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42_good()
{
  goodB2G_88();
  return goodG2B_143();
}

//----- (000000000042BA1C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000042BA61) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000042BAA6) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (000000000042BAB1) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (000000000042BABC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticReturnsTrue_3();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 42BABC: using guessed type char buf[16];

//----- (000000000042BC24) ----------------------------------------------------
int goodB2G1_54()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsFalse_3() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42BC24: using guessed type char buf[16];

//----- (000000000042BD9E) ----------------------------------------------------
int goodB2G2_54()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticReturnsTrue_3();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 42BD9E: using guessed type char buf[16];

//----- (000000000042BF0C) ----------------------------------------------------
int goodG2B1_73()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue_3();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000042BFB6) ----------------------------------------------------
int goodG2B2_73()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v7 = 7;
  result = staticReturnsTrue_3();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (000000000042C054) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_73();
  return goodG2B2_73();
}

//----- (000000000042C082) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042C124) ----------------------------------------------------
int goodG2B1_74()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042C1D2) ----------------------------------------------------
int goodG2B2_74()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042C274) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09_good()
{
  goodG2B1_74();
  return goodG2B2_74();
}

//----- (000000000042C28E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042C305) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042C37C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042C3F9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_badSink((__int64)&v6);
}

//----- (000000000042C46B) ----------------------------------------------------
int goodG2B_144()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000042C495) ----------------------------------------------------
int goodB2G_89()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b_goodB2GSink((__int64)&v6);
}

//----- (000000000042C507) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66_good()
{
  goodG2B_144();
  return goodB2G_89();
}

//----- (000000000042C521) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(a1);
}

//----- (000000000042C53B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(a1);
}

//----- (000000000042C555) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badSink(v7);
}
// 6822D0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_badGlobal;
// 42C555: using guessed type char buf[16];

//----- (000000000042C647) ----------------------------------------------------
int goodB2G1_55()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Sink(v7);
}
// 6822D4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G1Global;
// 42C647: using guessed type char buf[16];

//----- (000000000042C739) ----------------------------------------------------
int goodB2G2_55()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Sink(v7);
}
// 6822D8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodB2G2Global;
// 42C739: using guessed type char buf[16];

//----- (000000000042C82B) ----------------------------------------------------
int goodG2B_145()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BSink(7);
}
// 6822DC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_goodG2BGlobal;

//----- (000000000042C857) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22_good()
{
  goodB2G1_55();
  goodB2G2_55();
  return goodG2B_145();
}

//----- (000000000042C87B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_badSink(a1);
}

//----- (000000000042C892) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodG2BSink(a1);
}

//----- (000000000042C8A9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodB2GSink(a1);
}

//----- (000000000042C8C0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalTrue )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 42C8C0: using guessed type char buf[16];

//----- (000000000042CA66) ----------------------------------------------------
int goodB2G1_56()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalTrue )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;
// 42CA66: using guessed type char buf[16];

//----- (000000000042CC1E) ----------------------------------------------------
int goodB2G2_56()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( globalTrue )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 42CC1E: using guessed type char buf[16];

//----- (000000000042CDCA) ----------------------------------------------------
int goodG2B1_75()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000042CE6C) ----------------------------------------------------
int goodG2B2_75()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042CF02) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_75();
  return goodG2B2_75();
}

//----- (000000000042CF30) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_badSink(a1);
}

//----- (000000000042CF4A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d_goodG2BSink(a1);
}

//----- (000000000042CF64) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000042D020) ----------------------------------------------------
int goodG2B1_76()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000042D0E8) ----------------------------------------------------
int goodG2B2_76()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (000000000042D1A4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_good()
{
  goodG2B1_76();
  return goodG2B2_76();
}

//----- (000000000042D1BE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042D26C) ----------------------------------------------------
int goodG2B1_77()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042D31A) ----------------------------------------------------
int goodG2B2_77()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042D3C8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02_good()
{
  goodG2B1_77();
  return goodG2B2_77();
}

//----- (000000000042D3E2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = globalReturnsTrue();
  if ( result )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}

//----- (000000000042D440) ----------------------------------------------------
int good1_16()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042D4B0) ----------------------------------------------------
int good2_9()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (000000000042D514) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11_good()
{
  good1_16();
  return good2_9();
}

//----- (000000000042D52E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (000000000042D57E) ----------------------------------------------------
int good1_17()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042D5D4) ----------------------------------------------------
int good2_10()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042D62A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02_good()
{
  good1_17();
  return good2_10();
}

//----- (000000000042D644) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_64_bad()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_badSink((char **)&v1);
}

//----- (000000000042D66A) ----------------------------------------------------
int goodG2B_146()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodG2BSink((char **)&v1);
}

//----- (000000000042D690) ----------------------------------------------------
int goodB2G_90()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodB2GSink((wchar_t **)&v1);
}

//----- (000000000042D6B6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_64_good()
{
  goodG2B_146();
  return goodB2G_90();
}

//----- (000000000042D6D0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_badSink(v4);
}

//----- (000000000042D738) ----------------------------------------------------
int goodG2B_147()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodG2BSink(7);
}

//----- (000000000042D75A) ----------------------------------------------------
int goodB2G_91()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodB2GSink(v4);
}

//----- (000000000042D7C2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52_good()
{
  goodG2B_147();
  return goodB2G_91();
}

//----- (000000000042D7DC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042D877) ----------------------------------------------------
int goodB2G_92()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042D91A) ----------------------------------------------------
int goodG2B_148()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042D99E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_good()
{
  goodB2G_92();
  return goodG2B_148();
}

//----- (000000000042D9B8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_badSink(a1);
}

//----- (000000000042D9CF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodG2BSink(a1);
}

//----- (000000000042D9E6) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e_goodB2GSink(a1);
}

//----- (000000000042D9FD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821C0: using guessed type int globalFive;

//----- (000000000042DAAC) ----------------------------------------------------
int goodB2G1_57()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821C0: using guessed type int globalFive;

//----- (000000000042DB6F) ----------------------------------------------------
int goodB2G2_57()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821C0: using guessed type int globalFive;

//----- (000000000042DC26) ----------------------------------------------------
int goodG2B1_78()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000042DCCA) ----------------------------------------------------
int goodG2B2_78()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000042DD62) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_78();
  return goodG2B2_78();
}

//----- (000000000042DD90) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_badSink(a1);
}

//----- (000000000042DDAA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c_goodG2BSink(a1);
}

//----- (000000000042DDC4) ----------------------------------------------------
int __fastcall badSink_19(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042DE3B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_bad()
{
  return badSink_19(10);
}

//----- (000000000042DE5D) ----------------------------------------------------
int __fastcall goodG2BSink_19(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042DED4) ----------------------------------------------------
int goodG2B_149()
{
  return goodG2BSink_19(7);
}

//----- (000000000042DEF6) ----------------------------------------------------
int __fastcall goodB2GSink_9(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042DF73) ----------------------------------------------------
int goodB2G_93()
{
  return goodB2GSink_9(10);
}

//----- (000000000042DF95) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41_good()
{
  goodB2G_93();
  return goodG2B_149();
}

//----- (000000000042DFAF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v7;
  v9 = &v7;
  v7 = -1;
  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  *v10 = v6;
  v8 = *v9;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v8 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v8;
  *((_DWORD *)&v1 + v8) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E072) ----------------------------------------------------
int goodG2B_150()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042E11F) ----------------------------------------------------
int goodB2G_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v7;
  v9 = &v7;
  v7 = -1;
  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  *v10 = v6;
  v8 = *v9;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v8 < 0 || v8 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v8;
  *((_DWORD *)&v1 + v8) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E1E8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32_good()
{
  goodG2B_150();
  return goodB2G_94();
}

//----- (000000000042E202) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  _BYTE *v4; // [rsp+10h] [rbp-10h]
  int (__fastcall *v5)(char *); // [rsp+18h] [rbp-8h]

  v5 = CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_badSink;
  v0 = alloca(32LL);
  v4 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v4 = 0;
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(16 * (((unsigned __int64)&v3 + 7) >> 4));
}

//----- (000000000042E298) ----------------------------------------------------
__int64 goodG2B_151()
{
  void *v0; // rsp
  void *v1; // rsp
  __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  int (__fastcall *v5)(char *); // [rsp+18h] [rbp-8h]

  v5 = CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b_goodG2BSink;
  v0 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v1 = alloca(32LL);
  HIBYTE(v3) = (16 * (((unsigned __int64)&v3 + 7) >> 4)) >> 56;
  *(_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4)) = 0;
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(16 * (((unsigned __int64)&v3 + 7) >> 4));
}

//----- (000000000042E32E) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65_good()
{
  return goodG2B_151();
}

//----- (000000000042E33E) ----------------------------------------------------
int badSink_20()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822E0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData;

//----- (000000000042E3BB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData = v8;
  return badSink_20();
}
// 6822E0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_badData;
// 42E3BB: using guessed type char buf[16];

//----- (000000000042E4F2) ----------------------------------------------------
int goodG2BSink_20()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822E4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData;

//----- (000000000042E56F) ----------------------------------------------------
int goodG2B_152()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData = 7;
  return goodG2BSink_20();
}
// 6822E4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodG2BData;

//----- (000000000042E59A) ----------------------------------------------------
int goodB2GSink_10()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822E8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData;

//----- (000000000042E61D) ----------------------------------------------------
int goodB2G_95()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData = v8;
  return goodB2GSink_10();
}
// 6822E8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_goodB2GData;
// 42E61D: using guessed type char buf[16];

//----- (000000000042E754) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45_good()
{
  goodG2B_152();
  return goodB2G_95();
}

//----- (000000000042E76E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042E826) ----------------------------------------------------
int goodG2B1_79()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 682398: using guessed type int globalFalse;

//----- (000000000042E8EA) ----------------------------------------------------
int goodG2B2_79()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042E9A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10_good()
{
  goodG2B1_79();
  return goodG2B2_79();
}

//----- (000000000042E9BC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = globalTrue;
  if ( globalTrue )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042EA16) ----------------------------------------------------
int good1_18()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 682398: using guessed type int globalFalse;

//----- (000000000042EA82) ----------------------------------------------------
int good2_11()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000042EAE2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10_good()
{
  good1_18();
  return good2_11();
}

//----- (000000000042EAFC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042EB94) ----------------------------------------------------
int goodG2B1_80()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042EC2C) ----------------------------------------------------
int goodG2B2_80()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000042ECC4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good()
{
  goodG2B1_80();
  return goodG2B2_80();
}

//----- (000000000042ECDE) ----------------------------------------------------
int __fastcall badSink_21(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000042ED39) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = badSink_21;
  v0 = alloca(32LL);
  return badSink_21((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000042ED94) ----------------------------------------------------
int __fastcall goodG2BSink_21(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000042EDEF) ----------------------------------------------------
int goodG2B_153()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = goodG2BSink_21;
  v0 = alloca(64LL);
  return goodG2BSink_21((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000042EE4A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44_good()
{
  return goodG2B_153();
}

//----- (000000000042EE5A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 42EE5A: using guessed type char buf[16];

//----- (000000000042EFBC) ----------------------------------------------------
int goodB2G1_58()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 42EFBC: using guessed type char buf[16];

//----- (000000000042F130) ----------------------------------------------------
int goodB2G2_58()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 42F130: using guessed type char buf[16];

//----- (000000000042F298) ----------------------------------------------------
int goodG2B1_81()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042F33C) ----------------------------------------------------
int goodG2B2_81()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042F3D4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_81();
  return goodG2B2_81();
}

//----- (000000000042F402) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_badSink(a1);
}

//----- (000000000042F41C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_goodG2BSink(a1);
}

//----- (000000000042F436) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042F4E4) ----------------------------------------------------
int goodG2B_154()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (000000000042F592) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good()
{
  return goodG2B_154();
}

//----- (000000000042F5A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (000000000042F5F2) ----------------------------------------------------
int good1_19()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000042F648) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good()
{
  return good1_19();
}

//----- (000000000042F658) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042F6DA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042F75C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000042F7E4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000042F85A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000042F8D0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42F8D0: using guessed type char buf[16];

//----- (000000000042FA1A) ----------------------------------------------------
int goodB2G_96()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 42FA1A: using guessed type char buf[16];

//----- (000000000042FB6A) ----------------------------------------------------
int goodG2B_155()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000042FBEE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16_good()
{
  goodB2G_96();
  return goodG2B_155();
}

//----- (000000000042FC08) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_badSink()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData, src);
  return printLine(dest);
}
// 6823F8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_badData;

//----- (000000000042FC54) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b_goodG2BSink()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData, src);
  return printLine(dest);
}
// 6823F0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68_goodG2BData;

//----- (000000000042FCA0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_badSink(v4);
}

//----- (000000000042FD08) ----------------------------------------------------
int goodG2B_156()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodG2BSink(7);
}

//----- (000000000042FD2A) ----------------------------------------------------
int goodB2G_97()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodB2GSink(v4);
}

//----- (000000000042FD92) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51_good()
{
  goodG2B_156();
  return goodB2G_97();
}

//----- (000000000042FDAC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_464810, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042FE57) ----------------------------------------------------
int goodB2G1_59()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_464810, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042FF16) ----------------------------------------------------
int goodB2G2_59()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, &unk_464810, &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042FFC9) ----------------------------------------------------
int goodG2B1_82()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000430069) ----------------------------------------------------
int goodG2B2_82()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004300FD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_82();
  return goodG2B2_82();
}

//----- (000000000043012B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v8 = v6;
  v7 = v6;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004301CF) ----------------------------------------------------
int goodG2B_157()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043025D) ----------------------------------------------------
int goodB2G_98()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v8 = v6;
  v7 = v6;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000430307) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31_good()
{
  goodG2B_157();
  return goodB2G_98();
}

//----- (0000000000430321) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (000000000043032C) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (0000000000430337) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004303DD) ----------------------------------------------------
int goodG2B1_83()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsFalse_4() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043048F) ----------------------------------------------------
int goodG2B2_83()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000430535) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08_good()
{
  goodG2B1_83();
  return goodG2B2_83();
}

//----- (000000000043054F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43054F: using guessed type char buf[16];

//----- (0000000000430697) ----------------------------------------------------
int goodB2G1_60()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 430697: using guessed type char buf[16];

//----- (00000000004307E5) ----------------------------------------------------
int goodB2G2_60()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4307E5: using guessed type char buf[16];

//----- (0000000000430933) ----------------------------------------------------
int goodG2B1_84()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004309B5) ----------------------------------------------------
int goodG2B2_84()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000430A37) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B1_84();
  return goodG2B2_84();
}

//----- (0000000000430A65) ----------------------------------------------------
int badSink_22()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822EC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData;

//----- (0000000000430AE2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData = v4;
  return badSink_22();
}
// 6822EC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_badData;

//----- (0000000000430B53) ----------------------------------------------------
int goodG2BSink_22()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822F0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData;

//----- (0000000000430BD0) ----------------------------------------------------
int goodG2B_158()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData = 7;
  return goodG2BSink_22();
}
// 6822F0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodG2BData;

//----- (0000000000430BFB) ----------------------------------------------------
int goodB2GSink_11()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6822F4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData;

//----- (0000000000430C7E) ----------------------------------------------------
int goodB2G_99()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData = v4;
  return goodB2GSink_11();
}
// 6822F4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_goodB2GData;

//----- (0000000000430CEF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45_good()
{
  goodG2B_158();
  return goodB2G_99();
}

//----- (0000000000430D09) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000430D47) ----------------------------------------------------
int goodG2B_159()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodG2BSink(7);
}

//----- (0000000000430D6F) ----------------------------------------------------
int goodB2G_100()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodB2GSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000430DAD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_good()
{
  goodG2B_159();
  return goodB2G_100();
}

//----- (0000000000430DC7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_badSink(a1);
}

//----- (0000000000430DE1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c_goodG2BSink(a1);
}

//----- (0000000000430DFB) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000430E06) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (0000000000430E11) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000430ECD) ----------------------------------------------------
int goodG2B1_85()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)staticReturnsFalse_5() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000430F95) ----------------------------------------------------
int goodG2B2_85()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000431051) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08_good()
{
  goodG2B1_85();
  return goodG2B2_85();
}

//----- (000000000043106B) ----------------------------------------------------
int __fastcall badSink_23(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic_3;
  if ( badStatic_3 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6822F8: using guessed type int badStatic_3;

//----- (00000000004310EC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  badStatic_3 = 1;
  return badSink_23(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6822F8: using guessed type int badStatic_3;

//----- (000000000043112E) ----------------------------------------------------
int __fastcall goodB2G1Sink_3(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static_3 )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 6822FC: using guessed type int goodB2G1Static_3;

//----- (00000000004311C1) ----------------------------------------------------
int goodB2G1_61()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  goodB2G1Static_3 = 0;
  return goodB2G1Sink_3(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6822FC: using guessed type int goodB2G1Static_3;

//----- (0000000000431203) ----------------------------------------------------
int __fastcall goodB2G2Sink_3(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static_3;
  if ( goodB2G2Static_3 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682300: using guessed type int goodB2G2Static_3;

//----- (000000000043128A) ----------------------------------------------------
int goodB2G2_61()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  goodB2G2Static_3 = 1;
  return goodB2G2Sink_3(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 682300: using guessed type int goodB2G2Static_3;

//----- (00000000004312CC) ----------------------------------------------------
int __fastcall goodG2BSink_23(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic_3;
  if ( goodG2BStatic_3 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682304: using guessed type int goodG2BStatic_3;

//----- (000000000043134D) ----------------------------------------------------
int goodG2B_160()
{
  goodG2BStatic_3 = 1;
  return goodG2BSink_23(7);
}
// 682304: using guessed type int goodG2BStatic_3;

//----- (0000000000431379) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_good()
{
  goodB2G1_61();
  goodB2G2_61();
  return goodG2B_160();
}

//----- (000000000043139D) ----------------------------------------------------
__int64 staticReturnsTrue_6()
{
  return 1LL;
}

//----- (00000000004313A8) ----------------------------------------------------
__int64 staticReturnsFalse_6()
{
  return 0LL;
}

//----- (00000000004313B3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = staticReturnsTrue_6();
  if ( result )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}

//----- (0000000000431411) ----------------------------------------------------
int good1_20()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( (unsigned int)staticReturnsFalse_6() )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000431481) ----------------------------------------------------
int good2_12()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticReturnsTrue_6();
  if ( result )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (00000000004314E5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08_good()
{
  good1_20();
  return good2_12();
}

//----- (00000000004314FF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004315DB) ----------------------------------------------------
int goodB2G1_62()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004316C9) ----------------------------------------------------
int goodB2G2_62()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004317AB) ----------------------------------------------------
int goodG2B1_86()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043184D) ----------------------------------------------------
int goodG2B2_86()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004318E3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_86();
  return goodG2B2_86();
}

//----- (0000000000431911) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 431911: using guessed type char buf[16];

//----- (0000000000431A5B) ----------------------------------------------------
int goodB2G_101()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 431A5B: using guessed type char buf[16];

//----- (0000000000431BAB) ----------------------------------------------------
int goodG2B_161()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000431C2F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18_good()
{
  goodB2G_101();
  return goodG2B_161();
}

//----- (0000000000431C49) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000431CC0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000431D37) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000431DB4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000431E0F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000431E6A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 10;
  v2 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_badSink((__int64)&v1);
}

//----- (0000000000431E94) ----------------------------------------------------
int goodG2B_162()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000431EBE) ----------------------------------------------------
int goodB2G_102()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 10;
  v2 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000431EE8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66_good()
{
  goodG2B_162();
  return goodB2G_102();
}

//----- (0000000000431F02) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000431F9B) ----------------------------------------------------
int goodG2B_163()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000432034) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16_good()
{
  return goodG2B_163();
}

//----- (0000000000432044) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004320C5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000432146) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004321CD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682308: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal;

//----- (000000000043224E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 68230C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Global;

//----- (00000000004322E1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682310: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global;

//----- (0000000000432368) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682314: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal;

//----- (00000000004323E9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (0000000000432464) ----------------------------------------------------
int good1_21()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (00000000004324BA) ----------------------------------------------------
int good2_13()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000432510) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03_good()
{
  good1_21();
  return good2_13();
}

//----- (000000000043252A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char s[8]; // [rsp+30h] [rbp-30h]
  int v7; // [rsp+38h] [rbp-28h]
  __int16 v8; // [rsp+3Ch] [rbp-24h]
  int v9; // [rsp+40h] [rbp-20h]
  int v10; // [rsp+44h] [rbp-1Ch]
  int *v11; // [rsp+48h] [rbp-18h]
  int *v12; // [rsp+50h] [rbp-10h]
  int i; // [rsp+58h] [rbp-8h]
  int v14; // [rsp+5Ch] [rbp-4h]

  v12 = &v9;
  v11 = &v9;
  v9 = -1;
  v14 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v14 = atoi(s);
  else
    printLine("fgets() failed.");
  *v12 = v14;
  v10 = *v11;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043261D) ----------------------------------------------------
int goodG2B_164()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004326CA) ----------------------------------------------------
int goodB2G_103()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char s[8]; // [rsp+30h] [rbp-30h]
  int v7; // [rsp+38h] [rbp-28h]
  __int16 v8; // [rsp+3Ch] [rbp-24h]
  int v9; // [rsp+40h] [rbp-20h]
  int v10; // [rsp+44h] [rbp-1Ch]
  int *v11; // [rsp+48h] [rbp-18h]
  int *v12; // [rsp+50h] [rbp-10h]
  int i; // [rsp+58h] [rbp-8h]
  int v14; // [rsp+5Ch] [rbp-4h]

  v12 = &v9;
  v11 = &v9;
  v9 = -1;
  v14 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v14 = atoi(s);
  else
    printLine("fgets() failed.");
  *v12 = v14;
  v10 = *v11;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004327C3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_good()
{
  goodG2B_164();
  return goodB2G_103();
}

//----- (00000000004327DD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  in_addr_t v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int j; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    v14 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 4327DD: using guessed type char buf[16];

//----- (00000000004329C2) ----------------------------------------------------
int goodB2G_104()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-90h]
  __int64 v2; // [rsp+8h] [rbp-88h]
  __int64 v3; // [rsp+10h] [rbp-80h]
  __int64 v4; // [rsp+18h] [rbp-78h]
  __int64 v5; // [rsp+20h] [rbp-70h]
  char nptr[16]; // [rsp+30h] [rbp-60h]
  struct sockaddr addr; // [rsp+40h] [rbp-50h]
  char buf[16]; // [rsp+50h] [rbp-40h]
  __int16 s; // [rsp+60h] [rbp-30h]
  uint16_t v10; // [rsp+62h] [rbp-2Eh]
  in_addr_t v11; // [rsp+64h] [rbp-2Ch]
  int v12; // [rsp+74h] [rbp-1Ch]
  int v13; // [rsp+78h] [rbp-18h]
  int v14; // [rsp+7Ch] [rbp-14h]
  int fd; // [rsp+80h] [rbp-10h]
  int j; // [rsp+84h] [rbp-Ch]
  int i; // [rsp+88h] [rbp-8h]
  int v18; // [rsp+8Ch] [rbp-4h]

  v18 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v11 = inet_addr("127.0.0.1");
      v10 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v14 = recv(fd, buf, 0xDuLL, 0);
        if ( v14 != -1 )
        {
          if ( v14 )
          {
            buf[v14] = 0;
            v18 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    v13 = socket(2, 1, 6);
    if ( v13 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = inet_addr("127.0.0.1");
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( connect(v13, &addr, 0x10u) != -1 )
      {
        v12 = recv(v13, nptr, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            nptr[v12] = 0;
            v18 = atoi(nptr);
          }
        }
      }
    }
    if ( v13 != -1 )
      close(v13);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v18 < 0 || v18 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v18;
      *((_DWORD *)&v1 + v18) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v18 < 0 || v18 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v18;
      *((_DWORD *)&v1 + v18) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 4329C2: using guessed type char buf[16];
// 4329C2: using guessed type char nptr[16];

//----- (0000000000432C9C) ----------------------------------------------------
int goodG2B_165()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (0000000000432DAF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_good()
{
  goodB2G_104();
  return goodG2B_165();
}

//----- (0000000000432DC9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000432E46) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000432EC3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000432F46) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_5 == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 68218C: using guessed type int staticFive_5;

//----- (0000000000432FE9) ----------------------------------------------------
int goodG2B1_87()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_5 == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 68218C: using guessed type int staticFive_5;

//----- (0000000000433098) ----------------------------------------------------
int goodG2B2_87()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_5 == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 68218C: using guessed type int staticFive_5;

//----- (000000000043313B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07_good()
{
  goodG2B1_87();
  return goodG2B2_87();
}

//----- (0000000000433155) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_badSink(a1);
}

//----- (000000000043316F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_goodG2BSink(a1);
}

//----- (0000000000433189) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (00000000004331E4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000043323F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004332C8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000433351) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004333E0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_badSink;
  v0 = alloca(32LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000043343B) ----------------------------------------------------
int goodG2B_166()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_goodG2BSink;
  v0 = alloca(64LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000433496) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65_good()
{
  return goodG2B_166();
}

//----- (00000000004334A6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000433580) ----------------------------------------------------
int goodB2G1_63()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043366C) ----------------------------------------------------
int goodB2G2_63()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043374C) ----------------------------------------------------
int goodG2B1_88()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004337EC) ----------------------------------------------------
int goodG2B2_88()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000433880) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04_good()
{
  goodB2G1_63();
  goodB2G2_63();
  goodG2B1_88();
  return goodG2B2_88();
}

//----- (00000000004338AE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 682308: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_badGlobal;

//----- (00000000004338F0) ----------------------------------------------------
int goodB2G1_64()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Sink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68230C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G1Global;

//----- (0000000000433932) ----------------------------------------------------
int goodB2G2_64()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Sink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 682310: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodB2G2Global;

//----- (0000000000433974) ----------------------------------------------------
int goodG2B_167()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BSink(7);
}
// 682314: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_goodG2BGlobal;

//----- (00000000004339A0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22_good()
{
  goodB2G1_64();
  goodB2G2_64();
  return goodG2B_167();
}

//----- (00000000004339C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000433A71) ----------------------------------------------------
int goodB2G1_65()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000433B32) ----------------------------------------------------
int goodB2G2_65()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000433BE7) ----------------------------------------------------
int goodG2B1_89()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000433C89) ----------------------------------------------------
int goodG2B2_89()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000433D1F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_89();
  return goodG2B2_89();
}

//----- (0000000000433D4D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 433D4D: using guessed type char buf[16];

//----- (0000000000433EB5) ----------------------------------------------------
int goodB2G1_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 433EB5: using guessed type char buf[16];

//----- (000000000043402F) ----------------------------------------------------
int goodB2G2_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 43402F: using guessed type char buf[16];

//----- (000000000043419D) ----------------------------------------------------
int goodG2B1_90()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000434247) ----------------------------------------------------
int goodG2B2_90()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (00000000004342E5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_90();
  return goodG2B2_90();
}

//----- (0000000000434313) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 434313: using guessed type char buf[16];

//----- (000000000043445B) ----------------------------------------------------
int goodB2G1_67()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43445B: using guessed type char buf[16];

//----- (00000000004345A9) ----------------------------------------------------
int goodB2G2_67()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4345A9: using guessed type char buf[16];

//----- (00000000004346F7) ----------------------------------------------------
int goodG2B1_91()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000434779) ----------------------------------------------------
int goodG2B2_91()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004347FB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_91();
  return goodG2B2_91();
}

//----- (0000000000434829) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_badSink(a1);
}

//----- (0000000000434840) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodG2BSink(a1);
}

//----- (0000000000434857) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e_goodB2GSink(a1);
}

//----- (000000000043486E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_badSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memcpy((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682420: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData;

//----- (00000000004348D0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_goodG2BSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memcpy((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682418: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData;

//----- (0000000000434932) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_badSink(a1);
}

//----- (0000000000434949) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodG2BSink(a1);
}

//----- (0000000000434960) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c_goodB2GSink(a1);
}

//----- (0000000000434977) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004349C9) ----------------------------------------------------
int goodG2B_168()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000434A1B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54_good()
{
  return goodG2B_168();
}

//----- (0000000000434A2B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_badSink(a1);
}

//----- (0000000000434A45) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c_goodG2BSink(a1);
}

//----- (0000000000434A5F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 434A5F: using guessed type char buf[16];

//----- (0000000000434BBF) ----------------------------------------------------
int goodB2G1_68()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;
// 434BBF: using guessed type char buf[16];

//----- (0000000000434D31) ----------------------------------------------------
int goodB2G2_68()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 434D31: using guessed type char buf[16];

//----- (0000000000434E97) ----------------------------------------------------
int goodG2B1_92()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (0000000000434F39) ----------------------------------------------------
int goodG2B2_92()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000434FCF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_92();
  return goodG2B2_92();
}

//----- (0000000000434FFD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_badSink(&v4);
}

//----- (0000000000435067) ----------------------------------------------------
int goodG2B_169()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodG2BSink(&v1);
}

//----- (000000000043508B) ----------------------------------------------------
int goodB2G_105()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b_goodB2GSink(&v4);
}

//----- (00000000004350F5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64_good()
{
  goodG2B_169();
  return goodB2G_105();
}

//----- (000000000043510F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004351BE) ----------------------------------------------------
int goodB2G1_69()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000435281) ----------------------------------------------------
int goodB2G2_69()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000435338) ----------------------------------------------------
int goodG2B1_93()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004353DC) ----------------------------------------------------
int goodG2B2_93()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000435474) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B1_93();
  return goodG2B2_93();
}

//----- (00000000004354A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000435582) ----------------------------------------------------
int goodB2G1_70()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000435674) ----------------------------------------------------
int goodB2G2_70()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v12 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v12;
      *((_DWORD *)&v6 + v12) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v6 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (000000000043575A) ----------------------------------------------------
int goodG2B1_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (00000000004357FE) ----------------------------------------------------
int goodG2B2_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFive == 5 )
    v7 = 7;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821C0: using guessed type int globalFive;

//----- (0000000000435896) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_94();
  return goodG2B2_94();
}

//----- (00000000004358C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-60h]
  __int64 v7; // [rsp+8h] [rbp-58h]
  __int64 v8; // [rsp+10h] [rbp-50h]
  __int64 v9; // [rsp+18h] [rbp-48h]
  __int64 v10; // [rsp+20h] [rbp-40h]
  int v11; // [rsp+2Ch] [rbp-34h]
  int v12; // [rsp+30h] [rbp-30h]
  int v13; // [rsp+34h] [rbp-2Ch]
  int *v14; // [rsp+38h] [rbp-28h]
  int *v15; // [rsp+40h] [rbp-20h]
  int i; // [rsp+4Ch] [rbp-14h]

  v15 = &v11;
  v14 = &v11;
  v11 = -1;
  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  *v15 = v2;
  v12 = *v14;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (00000000004359B9) ----------------------------------------------------
int goodG2B_170()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000435A66) ----------------------------------------------------
int goodB2G_106()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-60h]
  __int64 v7; // [rsp+8h] [rbp-58h]
  __int64 v8; // [rsp+10h] [rbp-50h]
  __int64 v9; // [rsp+18h] [rbp-48h]
  __int64 v10; // [rsp+20h] [rbp-40h]
  int v11; // [rsp+2Ch] [rbp-34h]
  int v12; // [rsp+30h] [rbp-30h]
  int v13; // [rsp+34h] [rbp-2Ch]
  int *v14; // [rsp+38h] [rbp-28h]
  int *v15; // [rsp+40h] [rbp-20h]
  int i; // [rsp+4Ch] [rbp-14h]

  v15 = &v11;
  v14 = &v11;
  v11 = -1;
  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  *v15 = v2;
  v12 = *v14;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v12 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000435B61) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32_good()
{
  goodG2B_170();
  return goodB2G_106();
}

//----- (0000000000435B7B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_badSink(a1);
}

//----- (0000000000435B92) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodG2BSink(a1);
}

//----- (0000000000435BA9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d_goodB2GSink(a1);
}

//----- (0000000000435BC0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_badSink(a1);
}

//----- (0000000000435BD7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodG2BSink(a1);
}

//----- (0000000000435BEE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d_goodB2GSink(a1);
}

//----- (0000000000435C05) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_63_bad()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_badSink((char **)&v1);
}

//----- (0000000000435C2B) ----------------------------------------------------
int goodG2B_171()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodG2BSink((char **)&v1);
}

//----- (0000000000435C51) ----------------------------------------------------
int goodB2G_107()
{
  const char *v1; // [rsp+8h] [rbp-8h]

  v1 = "A";
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_63b_goodB2GSink((wchar_t **)&v1);
}

//----- (0000000000435C77) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_63_good()
{
  goodG2B_171();
  return goodB2G_107();
}

//----- (0000000000435C91) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 435C91: using guessed type char buf[16];

//----- (0000000000435DD9) ----------------------------------------------------
int goodG2B_172()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000435E5B) ----------------------------------------------------
int goodB2G_108()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 435E5B: using guessed type char buf[16];

//----- (0000000000435FA9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good()
{
  goodG2B_172();
  return goodB2G_108();
}

//----- (0000000000435FC3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_badSink(&v5);
}
// 435FC3: using guessed type char buf[16];

//----- (00000000004360F3) ----------------------------------------------------
int goodG2B_173()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodG2BSink(&v1);
}

//----- (0000000000436117) ----------------------------------------------------
int goodB2G_109()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b_goodB2GSink(&v5);
}
// 436117: using guessed type char buf[16];

//----- (0000000000436247) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63_good()
{
  goodG2B_173();
  return goodB2G_109();
}

//----- (0000000000436261) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (00000000004362D7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000043634D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_badSink(a1);
}

//----- (0000000000436367) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c_goodG2BSink(a1);
}

//----- (0000000000436381) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004363F8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043646F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004364EC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000436547) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (00000000004365A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_badSink();
}
// 682420: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_badData;

//----- (00000000004365FD) ----------------------------------------------------
int goodG2B_174()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b_goodG2BSink();
}
// 682418: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_goodG2BData;

//----- (0000000000436658) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68_good()
{
  return goodG2B_174();
}

//----- (0000000000436668) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_badSink(v3);
}

//----- (00000000004366F5) ----------------------------------------------------
int goodG2B_175()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b_goodG2BSink(v4);
}

//----- (0000000000436782) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52_good()
{
  return goodG2B_175();
}

//----- (0000000000436792) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004367F8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043685E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_badSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_badSink(a1);
}

//----- (0000000000436878) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c_goodG2BSink(unsigned int *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d_goodG2BSink(a1);
}

//----- (0000000000436892) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043692B) ----------------------------------------------------
int goodB2G1_71()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004369CC) ----------------------------------------------------
int goodB2G2_71()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000436A6D) ----------------------------------------------------
int goodG2B1_95()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000436AEF) ----------------------------------------------------
int goodG2B2_95()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000436B71) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_95();
  return goodG2B2_95();
}

//----- (0000000000436B9F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (0000000000436BE4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (0000000000436C29) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000436CC2) ----------------------------------------------------
int goodB2G1_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000436D63) ----------------------------------------------------
int goodB2G2_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  __isoc99_fscanf(stdin, "%d", &v6);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000436E04) ----------------------------------------------------
int goodG2B1_96()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000436E86) ----------------------------------------------------
int goodG2B2_96()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000436F08) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B1_96();
  return goodG2B2_96();
}

//----- (0000000000436F36) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 682190: using guessed type int staticFive_6;

//----- (0000000000436FBC) ----------------------------------------------------
int good1_22()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( staticFive_6 != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 682190: using guessed type int staticFive_6;

//----- (0000000000437029) ----------------------------------------------------
int good2_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 682190: using guessed type int staticFive_6;

//----- (000000000043708A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07_good()
{
  good1_22();
  return good2_14();
}

//----- (00000000004370A4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000437162) ----------------------------------------------------
int goodG2B_176()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (0000000000437220) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16_good()
{
  return goodG2B_176();
}

//----- (0000000000437230) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043730C) ----------------------------------------------------
int goodB2G1_73()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (00000000004373FA) ----------------------------------------------------
int goodB2G2_73()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (00000000004374DC) ----------------------------------------------------
int goodG2B1_97()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043757C) ----------------------------------------------------
int goodG2B2_97()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000437610) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04_good()
{
  goodB2G1_73();
  goodB2G2_73();
  goodG2B1_97();
  return goodG2B2_97();
}

//----- (000000000043763E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-50h]
  __int64 v7; // [rsp+8h] [rbp-48h]
  __int64 v8; // [rsp+10h] [rbp-40h]
  __int64 v9; // [rsp+18h] [rbp-38h]
  __int64 v10; // [rsp+20h] [rbp-30h]
  int v11; // [rsp+30h] [rbp-20h]
  int v12; // [rsp+34h] [rbp-1Ch]
  int v13; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  v12 = v2;
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (0000000000437714) ----------------------------------------------------
int goodG2B_177()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004377A2) ----------------------------------------------------
int goodB2G_110()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-50h]
  __int64 v7; // [rsp+8h] [rbp-48h]
  __int64 v8; // [rsp+10h] [rbp-40h]
  __int64 v9; // [rsp+18h] [rbp-38h]
  __int64 v10; // [rsp+20h] [rbp-30h]
  int v11; // [rsp+30h] [rbp-20h]
  int v12; // [rsp+34h] [rbp-1Ch]
  int v13; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v13 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v13 = v2;
  v12 = v2;
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043787E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31_good()
{
  goodG2B_177();
  return goodB2G_110();
}

//----- (0000000000437898) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 437898: using guessed type char buf[16];

//----- (00000000004379F8) ----------------------------------------------------
int goodB2G1_74()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;
// 4379F8: using guessed type char buf[16];

//----- (0000000000437B6A) ----------------------------------------------------
int goodB2G2_74()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 437B6A: using guessed type char buf[16];

//----- (0000000000437CD0) ----------------------------------------------------
int goodG2B1_98()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000437D72) ----------------------------------------------------
int goodG2B2_98()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000437E08) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09_good()
{
  goodB2G1_74();
  goodB2G2_74();
  goodG2B1_98();
  return goodG2B2_98();
}

//----- (0000000000437E36) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000437E88) ----------------------------------------------------
int goodG2B_178()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000437EDA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53_good()
{
  return goodG2B_178();
}

//----- (0000000000437EEA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( staticTrue_7 )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682194: using guessed type int staticTrue_7;

//----- (0000000000437FB1) ----------------------------------------------------
int goodG2B1_99()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( staticFalse_7 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682318: using guessed type int staticFalse_7;

//----- (0000000000438084) ----------------------------------------------------
int goodG2B2_99()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( staticTrue_7 )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 682194: using guessed type int staticTrue_7;

//----- (000000000043814B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05_good()
{
  goodG2B1_99();
  return goodG2B2_99();
}

//----- (0000000000438165) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004381DC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000438253) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004382D0) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad()
{
  void *v0; // rsp
  size_t v1; // [rsp+8h] [rbp-18h]
  char *s; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  s = 0LL;
  for ( i = 0; i <= 0; ++i )
    s = "A";
  for ( j = 0; j <= 0; ++j )
  {
    v1 = strlen(s);
    v0 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v1 + 7) >> 4)), (const wchar_t *)s);
    printLine((const char *)(16 * (((unsigned __int64)&v1 + 7) >> 4)));
  }
}

//----- (0000000000438382) ----------------------------------------------------
void goodB2G_111()
{
  void *v0; // rsp
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  s = 0LL;
  for ( i = 0; i <= 0; ++i )
    s = (wchar_t *)"A";
  for ( j = 0; j <= 0; ++j )
  {
    v1 = wcslen(s);
    v0 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v1 + 7) >> 4)), s);
    printWLine(16 * (((unsigned __int64)&v1 + 7) >> 4));
  }
}

//----- (0000000000438434) ----------------------------------------------------
void goodG2B_179()
{
  void *v0; // rsp
  size_t v1; // [rsp+8h] [rbp-18h]
  char *s; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  s = 0LL;
  for ( i = 0; i <= 0; ++i )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  for ( j = 0; j <= 0; ++j )
  {
    v1 = strlen(s);
    v0 = alloca(16 * ((v1 + 31) / 0x10));
    strcpy((char *)(16 * (((unsigned __int64)&v1 + 7) >> 4)), s);
    printLine((const char *)(16 * (((unsigned __int64)&v1 + 7) >> 4)));
  }
}

//----- (00000000004384E2) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good()
{
  goodB2G_111();
  goodG2B_179();
}

//----- (00000000004384FC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000438573) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004385EA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000438667) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_bad()
{
  __int64 v0; // [rsp+0h] [rbp-70h]
  __int64 v1; // [rsp+8h] [rbp-68h]
  __int64 v2; // [rsp+10h] [rbp-60h]
  __int64 v3; // [rsp+18h] [rbp-58h]
  __int64 v4; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v7; // [rsp+42h] [rbp-2Eh]
  int v8; // [rsp+44h] [rbp-2Ch]
  int v9; // [rsp+54h] [rbp-1Ch]
  int fd; // [rsp+58h] [rbp-18h]
  int k; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int v13; // [rsp+64h] [rbp-Ch]
  int j; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  v13 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v12 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v12 = accept(fd, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v9 = recv(v12, buf, 0xDuLL, 0);
          if ( v9 != -1 )
          {
            if ( v9 )
            {
              buf[v9] = 0;
              v13 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v12 != -1 )
      close(v12);
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v13 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)&v0 + v13) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}
// 438667: using guessed type char buf[16];

//----- (0000000000438822) ----------------------------------------------------
void goodB2G_112()
{
  __int64 v0; // [rsp+0h] [rbp-70h]
  __int64 v1; // [rsp+8h] [rbp-68h]
  __int64 v2; // [rsp+10h] [rbp-60h]
  __int64 v3; // [rsp+18h] [rbp-58h]
  __int64 v4; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v7; // [rsp+42h] [rbp-2Eh]
  int v8; // [rsp+44h] [rbp-2Ch]
  int v9; // [rsp+54h] [rbp-1Ch]
  int fd; // [rsp+58h] [rbp-18h]
  int k; // [rsp+5Ch] [rbp-14h]
  int v12; // [rsp+60h] [rbp-10h]
  int v13; // [rsp+64h] [rbp-Ch]
  int j; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  v13 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v12 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v12 = accept(fd, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v9 = recv(v12, buf, 0xDuLL, 0);
          if ( v9 != -1 )
          {
            if ( v9 )
            {
              buf[v9] = 0;
              v13 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v12 != -1 )
      close(v12);
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)&v0 + v13) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}
// 438822: using guessed type char buf[16];

//----- (00000000004389E3) ----------------------------------------------------
int goodG2B_180()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (0000000000438A8B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17_good()
{
  goodB2G_112();
  return goodG2B_180();
}

//----- (0000000000438AA5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_badSink(v3);
}

//----- (0000000000438B32) ----------------------------------------------------
int goodG2B_181()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b_goodG2BSink(v4);
}

//----- (0000000000438BBF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51_good()
{
  return goodG2B_181();
}

//----- (0000000000438BCF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%d", &v6);
  else
    v6 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000438D02) ----------------------------------------------------
int goodB2G_113()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v6 = -1;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%d", &v6);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000438E54) ----------------------------------------------------
int goodG2B_182()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (0000000000438F67) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12_good()
{
  goodB2G_113();
  return goodG2B_182();
}

//----- (0000000000438F81) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682200: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_badGlobal;

//----- (0000000000439002) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 682204: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G1Global;

//----- (0000000000439095) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682208: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodB2G2Global;

//----- (000000000043911C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 68220C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22_goodG2BGlobal;

//----- (000000000043919D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_badSink(v2);
}

//----- (0000000000439207) ----------------------------------------------------
int goodG2B_183()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodG2BSink(7);
}

//----- (0000000000439229) ----------------------------------------------------
int goodB2G_114()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodB2GSink(v2);
}

//----- (0000000000439293) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52_good()
{
  goodG2B_183();
  return goodB2G_114();
}

//----- (00000000004392AD) ----------------------------------------------------
int __fastcall badSink_24(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000439324) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_24;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 439324: using guessed type char buf[16];

//----- (000000000043945B) ----------------------------------------------------
int __fastcall goodG2BSink_24(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004394D2) ----------------------------------------------------
int goodG2B_184()
{
  return goodG2BSink_24(7);
}

//----- (00000000004394FD) ----------------------------------------------------
int __fastcall goodB2GSink_12(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043957A) ----------------------------------------------------
__int64 goodB2G_115()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_12;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 43957A: using guessed type char buf[16];

//----- (00000000004396B1) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44_good()
{
  goodG2B_184();
  return goodB2G_115();
}

//----- (00000000004396CB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_badSink()
{
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  unsigned int *v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v6 = (unsigned int *)CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v6[i] = *((_DWORD *)&v1 + i);
  return printIntLine(*v6);
}
// 6823B8: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_badData;

//----- (0000000000439748) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b_goodG2BSink()
{
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  unsigned int *v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v6 = (unsigned int *)CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v6[i] = *((_DWORD *)&v1 + i);
  return printIntLine(*v6);
}
// 6823C0: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68_goodG2BData;

//----- (00000000004397C5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_badSink(a1);
}

//----- (00000000004397DC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodG2BSink(a1);
}

//----- (00000000004397F3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c_goodB2GSink(a1);
}

//----- (000000000043980A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004398A3) ----------------------------------------------------
int goodG2B1_100()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043993C) ----------------------------------------------------
int goodG2B2_100()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004399D5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_good()
{
  goodG2B1_100();
  return goodG2B2_100();
}

//----- (00000000004399EF) ----------------------------------------------------
int badSink_25()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68231C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData;

//----- (0000000000439A6C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData = 10;
  return badSink_25();
}
// 68231C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_badData;

//----- (0000000000439A97) ----------------------------------------------------
int goodG2BSink_25()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682320: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData;

//----- (0000000000439B14) ----------------------------------------------------
int goodG2B_185()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData = 7;
  return goodG2BSink_25();
}
// 682320: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodG2BData;

//----- (0000000000439B3F) ----------------------------------------------------
int goodB2GSink_13()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682324: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData;

//----- (0000000000439BC2) ----------------------------------------------------
int goodB2G_116()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData = 10;
  return goodB2GSink_13();
}
// 682324: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_goodB2GData;

//----- (0000000000439BED) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45_good()
{
  goodG2B_185();
  return goodB2G_116();
}

//----- (0000000000439C07) ----------------------------------------------------
int badSink_26()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData, src);
  return printLine(dest);
}
// 682328: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData;

//----- (0000000000439C53) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  unsigned __int64 v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  *v5 = 0;
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData = v3;
  return badSink_26();
}
// 682328: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_badData;

//----- (0000000000439CE9) ----------------------------------------------------
int goodG2BSink_26()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData, src);
  return printLine(dest);
}
// 682330: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData;

//----- (0000000000439D35) ----------------------------------------------------
int goodG2B_186()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  unsigned __int64 v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  *v2 = 0;
  CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData = v4;
  return goodG2BSink_26();
}
// 682330: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_goodG2BData;

//----- (0000000000439DCB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45_good()
{
  return goodG2B_186();
}

//----- (0000000000439DDB) ----------------------------------------------------
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_badSource()
{
  return "A";
}

//----- (0000000000439DF1) ----------------------------------------------------
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodG2BSource()
{
  return "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
}

//----- (0000000000439E07) ----------------------------------------------------
const char *CWE121_Stack_Based_Buffer_Overflow__CWE135_61b_goodB2GSource()
{
  return "A";
}

//----- (0000000000439E1D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_badSink(a1);
}

//----- (0000000000439E37) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c_goodG2BSink(a1);
}

//----- (0000000000439E51) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000439EDA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000439F63) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000439FF2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_badSink(a1);
}

//----- (000000000043A009) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodG2BSink(a1);
}

//----- (000000000043A020) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c_goodB2GSink(a1);
}

//----- (000000000043A037) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A0B4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A131) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A1B4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043A238) ----------------------------------------------------
int goodB2G_117()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000043A2C2) ----------------------------------------------------
int goodG2B_187()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043A346) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18_good()
{
  goodB2G_117();
  return goodG2B_187();
}

//----- (000000000043A360) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+30h] [rbp-20h]
  int i; // [rsp+3Ch] [rbp-14h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043A40B) ----------------------------------------------------
int goodG2B_188()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  void *dest; // [rsp+30h] [rbp-20h]
  int i; // [rsp+3Ch] [rbp-14h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043A4B6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17_good()
{
  return goodG2B_188();
}

//----- (000000000043A4C6) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A547) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A5C8) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043A64F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_badSink(v3);
}

//----- (000000000043A6DC) ----------------------------------------------------
int goodG2B_189()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b_goodG2BSink(v4);
}

//----- (000000000043A769) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53_good()
{
  return goodG2B_189();
}

//----- (000000000043A779) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043A7FF) ----------------------------------------------------
int good1_23()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043A86C) ----------------------------------------------------
int good2_15()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043A8CD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_good()
{
  good1_23();
  return good2_15();
}

//----- (000000000043A8E7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_badSink(a1);
}

//----- (000000000043A8FE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodG2BSink(a1);
}

//----- (000000000043A915) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c_goodB2GSink(a1);
}

//----- (000000000043A92C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043A9F6) ----------------------------------------------------
int goodB2G_118()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043AAC6) ----------------------------------------------------
int goodG2B_190()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043AB4A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16_good()
{
  goodB2G_118();
  return goodG2B_190();
}

//----- (000000000043AB64) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  _BYTE *v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v7 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000043AC22) ----------------------------------------------------
int goodG2B1_101()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000043ACE0) ----------------------------------------------------
int goodG2B2_101()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *dest; // [rsp+18h] [rbp-28h]
  _BYTE *v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v6 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v6 = 0;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000043AD9E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15_good()
{
  goodG2B1_101();
  return goodG2B2_101();
}

//----- (000000000043ADB8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043AE3A) ----------------------------------------------------
int goodB2G1_75()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000043AEC2) ----------------------------------------------------
int goodB2G2_75()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000043AF4A) ----------------------------------------------------
int goodG2B1_102()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043AFCC) ----------------------------------------------------
int goodG2B2_102()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043B04E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03_good()
{
  goodB2G1_75();
  goodB2G2_75();
  goodG2B1_102();
  return goodG2B2_102();
}

//----- (000000000043B07C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043B0F3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043B16A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043B1E7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43B1E7: using guessed type char buf[16];

//----- (000000000043B38B) ----------------------------------------------------
int goodB2G1_76()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43B38B: using guessed type char buf[16];

//----- (000000000043B541) ----------------------------------------------------
int goodB2G2_76()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43B541: using guessed type char buf[16];

//----- (000000000043B6EB) ----------------------------------------------------
int goodG2B1_103()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043B78B) ----------------------------------------------------
int goodG2B2_103()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043B81F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04_good()
{
  goodB2G1_76();
  goodB2G2_76();
  goodG2B1_103();
  return goodG2B2_103();
}

//----- (000000000043B84D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+54h] [rbp-1Ch]
  int v11; // [rsp+58h] [rbp-18h]
  int v12; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v15; // [rsp+68h] [rbp-8h]
  int v16; // [rsp+6Ch] [rbp-4h]

  v16 = -1;
  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v15 = accept(fd, 0LL, 0LL);
      if ( v15 != -1 )
      {
        v12 = recv(v15, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v16 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v15 != -1 )
    close(v15);
  v11 = v16;
  v10 = v16;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v16 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43B84D: using guessed type char buf[16];

//----- (000000000043B9E7) ----------------------------------------------------
int goodG2B_191()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043BA75) ----------------------------------------------------
int goodB2G_119()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+54h] [rbp-1Ch]
  int v11; // [rsp+58h] [rbp-18h]
  int v12; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v15; // [rsp+68h] [rbp-8h]
  int v16; // [rsp+6Ch] [rbp-4h]

  v16 = -1;
  v15 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v15 = accept(fd, 0LL, 0LL);
      if ( v15 != -1 )
      {
        v12 = recv(v15, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v16 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v15 != -1 )
    close(v15);
  v11 = v16;
  v10 = v16;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v16 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 43BA75: using guessed type char buf[16];

//----- (000000000043BC15) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31_good()
{
  goodG2B_191();
  return goodB2G_119();
}

//----- (000000000043BC2F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043BCD5) ----------------------------------------------------
int goodG2B1_104()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043BD87) ----------------------------------------------------
int goodG2B2_104()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043BE2D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11_good()
{
  goodG2B1_104();
  return goodG2B2_104();
}

//----- (000000000043BE47) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043BEDF) ----------------------------------------------------
int goodG2B1_105()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043BF77) ----------------------------------------------------
int goodG2B2_105()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043C00F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02_good()
{
  goodG2B1_105();
  return goodG2B2_105();
}

//----- (000000000043C029) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(unsigned int *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_badSink;
  v0 = alloca(32LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_badSink((unsigned int *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000043C084) ----------------------------------------------------
int goodG2B_192()
{
  void *v0; // rsp
  int (__fastcall *v2)(unsigned int *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_goodG2BSink;
  v0 = alloca(64LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_goodG2BSink((unsigned int *)(16
                                                                                        * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000043C0DF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65_good()
{
  return goodG2B_192();
}

//----- (000000000043C0EF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_67_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_badSink("A");
}

//----- (000000000043C11D) ----------------------------------------------------
int goodG2B_193()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (000000000043C14B) ----------------------------------------------------
int goodB2G_120()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodB2GSink((wchar_t *)"A");
}

//----- (000000000043C179) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_67_good()
{
  goodG2B_193();
  return goodB2G_120();
}

//----- (000000000043C193) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_13_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    s = "A";
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C235) ----------------------------------------------------
int goodB2G1_77()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    s = (wchar_t *)"A";
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C2E3) ----------------------------------------------------
int goodB2G2_77()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    s = (wchar_t *)"A";
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C385) ----------------------------------------------------
int goodG2B1_106()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C42F) ----------------------------------------------------
int goodG2B2_106()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C4CD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_13_good()
{
  goodB2G1_77();
  goodB2G2_77();
  goodG2B1_106();
  return goodG2B2_106();
}

//----- (000000000043C4FB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043C578) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043C5F5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043C678) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000043C6D7) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000043C6EA) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000043C749) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 10;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (000000000043C7F1) ----------------------------------------------------
int goodB2G_121()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 10;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (000000000043C89F) ----------------------------------------------------
int goodG2B_194()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (000000000043C947) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17_good()
{
  goodB2G_121();
  return goodG2B_194();
}

//----- (000000000043C961) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043CA2D) ----------------------------------------------------
int goodB2G_122()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int v11; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v11 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v11 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v6 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043CAFF) ----------------------------------------------------
int goodG2B_195()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043CB83) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16_good()
{
  goodB2G_122();
  return goodG2B_195();
}

//----- (000000000043CB9D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682348: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal;

//----- (000000000043CC1E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 68234C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Global;

//----- (000000000043CCB1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682350: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global;

//----- (000000000043CD38) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682354: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal;

//----- (000000000043CDB9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(a1);
}

//----- (000000000043CDD3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(a1);
}

//----- (000000000043CDED) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000043CE69) ----------------------------------------------------
int good1_24()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043CEC0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18_good()
{
  return good1_24();
}

//----- (000000000043CED0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_badSink(&v5);
}
// 43CED0: using guessed type char buf[16];

//----- (000000000043CFBA) ----------------------------------------------------
int goodG2B_196()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodG2BSink(&v1);
}

//----- (000000000043CFDE) ----------------------------------------------------
int goodB2G_123()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b_goodB2GSink(&v5);
}
// 43CFDE: using guessed type char buf[16];

//----- (000000000043D0C8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63_good()
{
  goodG2B_196();
  return goodB2G_123();
}

//----- (000000000043D0E2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000043D13D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000043D198) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000043D1DD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_badSink(v3);
}

//----- (000000000043D26A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000043D2AF) ----------------------------------------------------
int goodG2B_197()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_goodG2BSink(v4);
}

//----- (000000000043D33C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41_good()
{
  return goodG2B_197();
}

//----- (000000000043D34C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticFive_7 == 5 )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 682198: using guessed type int staticFive_7;

//----- (000000000043D405) ----------------------------------------------------
int goodG2B1_107()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticFive_7 == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 682198: using guessed type int staticFive_7;

//----- (000000000043D4CA) ----------------------------------------------------
int goodG2B2_107()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticFive_7 == 5 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 682198: using guessed type int staticFive_7;

//----- (000000000043D583) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07_good()
{
  goodG2B1_107();
  return goodG2B2_107();
}

//----- (000000000043D59D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000043D613) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000043D689) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 68219C: using guessed type int staticFive_8;

//----- (000000000043D6E4) ----------------------------------------------------
int good1_25()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( staticFive_8 != 5 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 68219C: using guessed type int staticFive_8;

//----- (000000000043D751) ----------------------------------------------------
int good2_16()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 68219C: using guessed type int staticFive_8;

//----- (000000000043D7B2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07_good()
{
  good1_25();
  return good2_16();
}

//----- (000000000043D7CC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v4; // [rsp+8h] [rbp-38h]
  __int64 v5; // [rsp+10h] [rbp-30h]
  __int64 v6; // [rsp+18h] [rbp-28h]
  __int64 v7; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v0 = alloca(32LL);
  else
    v1 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  src = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  v7 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v4 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043D8A8) ----------------------------------------------------
int goodG2B_198()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  globalReturnsTrueOrFalse();
  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043D984) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_good()
{
  return goodG2B_198();
}

//----- (000000000043D994) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000043DA36) ----------------------------------------------------
int goodG2B1_108()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000043DAE4) ----------------------------------------------------
int goodG2B2_108()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000043DB86) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09_good()
{
  goodG2B1_108();
  return goodG2B2_108();
}

//----- (000000000043DBA0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (000000000043DC20) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (000000000043DC9C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (000000000043DD1C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-50h]
  char v4; // [rsp+Fh] [rbp-41h]
  char *v5; // [rsp+10h] [rbp-40h]
  char *dest; // [rsp+20h] [rbp-30h]
  char *v7; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  _BYTE *v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v8 = 16 * ((unsigned __int64)&v4 >> 4);
  v7 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v9 = 0;
  v5 = v7;
  dest = v7;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v7, src);
  return printLine(dest);
}

//----- (000000000043DDE9) ----------------------------------------------------
int goodG2B_199()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-50h]
  char v4; // [rsp+Fh] [rbp-41h]
  char *v5; // [rsp+10h] [rbp-40h]
  char *dest; // [rsp+20h] [rbp-30h]
  char *v7; // [rsp+28h] [rbp-28h]
  _BYTE *v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v8 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v7 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v8 = 0;
  v5 = v7;
  dest = v7;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v7, src);
  return printLine(dest);
}

//----- (000000000043DEB6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34_good()
{
  return goodG2B_199();
}

//----- (000000000043DEC6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_bad()
{
  char v1[15]; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
  }
  else
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy(v1, "0123456789abcde");
  }
  printLine(v1);
  return printLine(v3);
}

//----- (000000000043DF9D) ----------------------------------------------------
int good1_26()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043E04F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12_good()
{
  return good1_26();
}

//----- (000000000043E05F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badSink("A");
}
// 682338: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal;

//----- (000000000043E08F) ----------------------------------------------------
int goodB2G1_78()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink((wchar_t *)"A");
}
// 68233C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global;

//----- (000000000043E0BF) ----------------------------------------------------
int goodB2G2_78()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink((wchar_t *)"A");
}
// 682340: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global;

//----- (000000000043E0EF) ----------------------------------------------------
int goodG2B_200()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}
// 682344: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal;

//----- (000000000043E11F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_good()
{
  goodB2G1_78();
  goodB2G2_78();
  return goodG2B_200();
}

//----- (000000000043E143) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_bad()
{
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  v3 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
  v2 = 0;
  printLine(&dest);
  return printLine(v3);
}

//----- (000000000043E194) ----------------------------------------------------
int good1_27()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043E1EB) ----------------------------------------------------
int good2_17()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043E242) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15_good()
{
  good1_27();
  return good2_17();
}

//----- (000000000043E25C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  v6 = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043E2E0) ----------------------------------------------------
int goodB2G_124()
{
  return printLine("ERROR: Array index is out-of-bounds");
}

//----- (000000000043E36A) ----------------------------------------------------
int goodG2B_201()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043E3EE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16_good()
{
  goodB2G_124();
  return goodG2B_201();
}

//----- (000000000043E408) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badSink(v8);
}
// 682348: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_badGlobal;
// 43E408: using guessed type char buf[16];

//----- (000000000043E540) ----------------------------------------------------
int goodB2G1_79()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Global = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Sink(v8);
}
// 68234C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G1Global;
// 43E540: using guessed type char buf[16];

//----- (000000000043E678) ----------------------------------------------------
int goodB2G2_79()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Sink(v8);
}
// 682350: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodB2G2Global;
// 43E678: using guessed type char buf[16];

//----- (000000000043E7B0) ----------------------------------------------------
int goodG2B_202()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal = 1;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BSink(7);
}
// 682354: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_goodG2BGlobal;

//----- (000000000043E7DC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22_good()
{
  goodB2G1_79();
  goodB2G2_79();
  return goodG2B_202();
}

//----- (000000000043E800) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_badSink(a1);
}

//----- (000000000043E817) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodG2BSink(a1);
}

//----- (000000000043E82E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c_goodB2GSink(a1);
}

//----- (000000000043E845) ----------------------------------------------------
int badSink_27()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682358: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData;

//----- (000000000043E8C2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData = v2;
  return badSink_27();
}
// 682358: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_badData;

//----- (000000000043E935) ----------------------------------------------------
int goodG2BSink_27()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 68235C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData;

//----- (000000000043E9B2) ----------------------------------------------------
int goodG2B_203()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData = 7;
  return goodG2BSink_27();
}
// 68235C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodG2BData;

//----- (000000000043E9DD) ----------------------------------------------------
int goodB2GSink_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 682360: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData;

//----- (000000000043EA60) ----------------------------------------------------
int goodB2G_125()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData = v2;
  return goodB2GSink_14();
}
// 682360: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_goodB2GData;

//----- (000000000043EAD3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45_good()
{
  goodG2B_203();
  return goodB2G_125();
}

//----- (000000000043EAED) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_18_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (000000000043EB7B) ----------------------------------------------------
int goodB2G_126()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000043EC09) ----------------------------------------------------
int goodG2B_204()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000043EC93) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_18_good()
{
  goodB2G_126();
  return goodG2B_204();
}

//----- (000000000043ECAD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData = v7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_badSink();
}
// 682430: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData;
// 43ECAD: using guessed type char buf[16];

//----- (000000000043ED9E) ----------------------------------------------------
int goodG2B_205()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodG2BSink();
}
// 682428: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodG2BData;

//----- (000000000043EDC9) ----------------------------------------------------
int goodB2G_127()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData = v7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b_goodB2GSink();
}
// 68242C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_goodB2GData;
// 43EDC9: using guessed type char buf[16];

//----- (000000000043EEBA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_good()
{
  goodG2B_205();
  return goodB2G_127();
}

//----- (000000000043EED4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043EFB2) ----------------------------------------------------
int goodB2G1_80()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043F0A2) ----------------------------------------------------
int goodB2G2_80()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __int64 v6; // [rsp+0h] [rbp-40h]
  __int64 v7; // [rsp+8h] [rbp-38h]
  __int64 v8; // [rsp+10h] [rbp-30h]
  __int64 v9; // [rsp+18h] [rbp-28h]
  __int64 v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+28h] [rbp-18h]
  int v12; // [rsp+2Ch] [rbp-14h]

  v12 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v12 = v2;
  v6 = 0LL;
  v7 = 0LL;
  v8 = 0LL;
  v9 = 0LL;
  v10 = 0LL;
  if ( v2 < 0 || v12 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v12;
  *((_DWORD *)&v6 + v12) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v6 + i));
  return result;
}

//----- (000000000043F186) ----------------------------------------------------
int goodG2B1_109()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043F228) ----------------------------------------------------
int goodG2B2_109()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000043F2BE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06_good()
{
  goodB2G1_80();
  goodB2G2_80();
  goodG2B1_109();
  return goodG2B2_109();
}

//----- (000000000043F2EC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_badSink(a1);
}

//----- (000000000043F306) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(a1);
}

//----- (000000000043F320) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(a1);
}

//----- (000000000043F33A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043F3B1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043F428) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000043F4A5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_03_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (000000000043F531) ----------------------------------------------------
int goodB2G1_81()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000043F5BD) ----------------------------------------------------
int goodB2G2_81()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000043F649) ----------------------------------------------------
int goodG2B1_110()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000043F6D1) ----------------------------------------------------
int goodG2B2_110()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000043F759) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_03_good()
{
  goodB2G1_81();
  goodB2G2_81();
  goodG2B1_110();
  return goodG2B2_110();
}

//----- (000000000043F787) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043F820) ----------------------------------------------------
int goodG2B1_111()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043F8B9) ----------------------------------------------------
int goodG2B2_111()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000043F952) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15_good()
{
  goodG2B1_111();
  return goodG2B2_111();
}

//----- (000000000043F96C) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_bad()
{
  __int64 v0; // [rsp+0h] [rbp-70h]
  __int64 v1; // [rsp+8h] [rbp-68h]
  __int64 v2; // [rsp+10h] [rbp-60h]
  __int64 v3; // [rsp+18h] [rbp-58h]
  __int64 v4; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v7; // [rsp+42h] [rbp-2Eh]
  in_addr_t v8; // [rsp+44h] [rbp-2Ch]
  int v9; // [rsp+58h] [rbp-18h]
  int fd; // [rsp+5Ch] [rbp-14h]
  int k; // [rsp+60h] [rbp-10h]
  int v12; // [rsp+64h] [rbp-Ch]
  int j; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  v12 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = inet_addr("127.0.0.1");
      v7 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v9 = recv(fd, buf, 0xDuLL, 0);
        if ( v9 != -1 )
        {
          if ( v9 )
          {
            buf[v9] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v12 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)&v0 + v12) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}
// 43F96C: using guessed type char buf[16];

//----- (000000000043FAE1) ----------------------------------------------------
void goodB2G_128()
{
  __int64 v0; // [rsp+0h] [rbp-70h]
  __int64 v1; // [rsp+8h] [rbp-68h]
  __int64 v2; // [rsp+10h] [rbp-60h]
  __int64 v3; // [rsp+18h] [rbp-58h]
  __int64 v4; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v7; // [rsp+42h] [rbp-2Eh]
  in_addr_t v8; // [rsp+44h] [rbp-2Ch]
  int v9; // [rsp+58h] [rbp-18h]
  int fd; // [rsp+5Ch] [rbp-14h]
  int k; // [rsp+60h] [rbp-10h]
  int v12; // [rsp+64h] [rbp-Ch]
  int j; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  v12 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = inet_addr("127.0.0.1");
      v7 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v9 = recv(fd, buf, 0xDuLL, 0);
        if ( v9 != -1 )
        {
          if ( v9 )
          {
            buf[v9] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    v0 = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    if ( v12 < 0 || v12 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)&v0 + v12) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v0 + k));
    }
  }
}
// 43FAE1: using guessed type char buf[16];

//----- (000000000043FC5C) ----------------------------------------------------
int goodG2B_206()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (000000000043FD04) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17_good()
{
  goodB2G_128();
  return goodG2B_206();
}

//----- (000000000043FD1E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000043FD99) ----------------------------------------------------
int good1_28()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043FDEF) ----------------------------------------------------
int good2_18()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (000000000043FE45) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02_good()
{
  good1_28();
  return good2_18();
}

//----- (000000000043FE5F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_badSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043FE97) ----------------------------------------------------
int goodG2B_207()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodG2BSink(7);
}

//----- (000000000043FEB9) ----------------------------------------------------
int goodB2G_129()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b_goodB2GSink(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043FEF1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54_good()
{
  goodG2B_207();
  return goodB2G_129();
}

//----- (000000000043FF0B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 10;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000043FFA1) ----------------------------------------------------
int goodB2G1_82()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 10;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000440049) ----------------------------------------------------
int goodB2G2_82()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 10;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004400E5) ----------------------------------------------------
int goodG2B1_112()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000440187) ----------------------------------------------------
int goodG2B2_112()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
    v7 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044021D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09_good()
{
  goodB2G1_82();
  goodB2G2_82();
  goodG2B1_112();
  return goodG2B2_112();
}

//----- (000000000044024B) ----------------------------------------------------
int __fastcall badSink_28(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004402C2) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_28;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4402C2: using guessed type char buf[16];

//----- (00000000004403B3) ----------------------------------------------------
int __fastcall goodG2BSink_28(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044042A) ----------------------------------------------------
int goodG2B_208()
{
  return goodG2BSink_28(7);
}

//----- (0000000000440455) ----------------------------------------------------
int __fastcall goodB2GSink_15(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004404D2) ----------------------------------------------------
__int64 goodB2G_130()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_15;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4404D2: using guessed type char buf[16];

//----- (00000000004405C3) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good()
{
  goodG2B_208();
  return goodB2G_130();
}

//----- (00000000004405DD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_badSink(char **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  __int64 v4; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v6; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]
  char **v8; // [rsp+28h] [rbp-8h]

  HIBYTE(v4) = HIBYTE(a1);
  v8 = a1;
  s = *a1;
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&v4 + 7) >> 4)), (const wchar_t *)s);
  return printLine((const char *)dest);
}

//----- (0000000000440670) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(char **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  __int64 v4; // [rsp+8h] [rbp-28h]
  char *dest; // [rsp+10h] [rbp-20h]
  size_t v6; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]
  char **v8; // [rsp+28h] [rbp-8h]

  HIBYTE(v4) = HIBYTE(a1);
  v8 = a1;
  s = *a1;
  v1 = strlen(s);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&v4 + 7) >> 4)), s);
  return printLine(dest);
}

//----- (00000000004406FF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(wchar_t **a1)
{
  size_t v1; // rax
  void *v2; // rsp
  __int64 v4; // [rsp+8h] [rbp-28h]
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v6; // [rsp+18h] [rbp-18h]
  wchar_t *s; // [rsp+20h] [rbp-10h]
  wchar_t **v8; // [rsp+28h] [rbp-8h]

  HIBYTE(v4) = HIBYTE(a1);
  v8 = a1;
  s = *a1;
  v1 = wcslen(s);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&v4 + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (0000000000440792) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 440792: using guessed type char buf[16];

//----- (000000000044093A) ----------------------------------------------------
int goodB2G1_83()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 44093A: using guessed type char buf[16];

//----- (0000000000440AF4) ----------------------------------------------------
int goodB2G2_83()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;
// 440AF4: using guessed type char buf[16];

//----- (0000000000440CA2) ----------------------------------------------------
int goodG2B1_113()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000440D46) ----------------------------------------------------
int goodG2B2_113()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v7 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 467EB0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000440DDE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13_good()
{
  goodB2G1_83();
  goodB2G2_83();
  goodG2B1_113();
  return goodG2B2_113();
}

//----- (0000000000440E0C) ----------------------------------------------------
__int64 staticReturnsTrue_7()
{
  return 1LL;
}

//----- (0000000000440E17) ----------------------------------------------------
__int64 staticReturnsFalse_7()
{
  return 0LL;
}

//----- (0000000000440E22) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000440EC8) ----------------------------------------------------
int goodG2B1_114()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsFalse_7() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000440F7A) ----------------------------------------------------
int goodG2B2_114()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000441020) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08_good()
{
  goodG2B1_114();
  return goodG2B2_114();
}

//----- (000000000044103A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (000000000044107F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(a1);
}

//----- (00000000004410C4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_badSink(10);
}

//----- (00000000004410E6) ----------------------------------------------------
int goodG2B_209()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodG2BSink(7);
}

//----- (0000000000441108) ----------------------------------------------------
int goodB2G_131()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b_goodB2GSink(10);
}

//----- (000000000044112A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52_good()
{
  goodG2B_209();
  return goodB2G_131();
}

//----- (0000000000441144) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char v3; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+10h] [rbp-30h]
  unsigned __int64 v6; // [rsp+28h] [rbp-18h]
  unsigned __int64 v7; // [rsp+30h] [rbp-10h]
  _BYTE *v8; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v8 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  *v8 = 0;
  v5 = v6;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_badSink((__int64)&v3);
}

//----- (00000000004411D9) ----------------------------------------------------
int goodG2B_210()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char v4; // [rsp+0h] [rbp-40h]
  char v5; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v6; // [rsp+10h] [rbp-30h]
  unsigned __int64 v7; // [rsp+28h] [rbp-18h]
  _BYTE *v8; // [rsp+30h] [rbp-10h]
  unsigned __int64 v9; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v9 = 16 * ((unsigned __int64)&v5 >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * ((unsigned __int64)&v5 >> 4));
  v8 = v2;
  v7 = 16 * ((unsigned __int64)&v5 >> 4);
  *v2 = 0;
  v6 = v7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b_goodG2BSink((__int64)&v4);
}

//----- (000000000044126E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66_good()
{
  return goodG2B_210();
}

//----- (000000000044127E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004412F5) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044136C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004413E9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_badSink();
}
// 682440: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData;

//----- (0000000000441444) ----------------------------------------------------
int goodG2B_211()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink();
}
// 682438: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;

//----- (000000000044149F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_good()
{
  return goodG2B_211();
}

//----- (00000000004414AF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = globalTrue;
  if ( globalTrue )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000441534) ----------------------------------------------------
int good1_29()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 682398: using guessed type int globalFalse;

//----- (00000000004415A0) ----------------------------------------------------
int good2_19()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (0000000000441600) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10_good()
{
  good1_29();
  return good2_19();
}

//----- (000000000044161A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  printLine("0123456789abcdef0123456789abcde");
  strcpy(&v1, "0123456789abcdef0123456789abcde");
  v2 = 0;
  printLine(&v1);
  return printLine(v3);
}

//----- (000000000044169E) ----------------------------------------------------
int good1_30()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000441709) ----------------------------------------------------
int good2_20()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000441768) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04_good()
{
  good1_30();
  return good2_20();
}

//----- (0000000000441782) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044180B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441894) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441923) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004419A0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441A1D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441AA0) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 441AA0: using guessed type char buf[16];

//----- (0000000000441B7D) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodG2BSource()
{
  return 7LL;
}

//----- (0000000000441B90) ----------------------------------------------------
__int64 __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 441B90: using guessed type char buf[16];

//----- (0000000000441C6D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = globalReturnsTrue();
  if ( result )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}

//----- (0000000000441CF6) ----------------------------------------------------
int good1_31()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000441D66) ----------------------------------------------------
int good2_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (0000000000441DCA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11_good()
{
  good1_31();
  return good2_21();
}

//----- (0000000000441DE4) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441E65) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441EE6) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000441F6D) ----------------------------------------------------
int __fastcall badSink_29(char *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = badStatic_4;
  if ( badStatic_4 )
  {
    v2 = strlen(s);
    v6 = v2;
    v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 682364: using guessed type int badStatic_4;

//----- (0000000000441FF7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_21_bad()
{
  badStatic_4 = 1;
  return badSink_29("A");
}
// 682364: using guessed type int badStatic_4;

//----- (0000000000442027) ----------------------------------------------------
int __fastcall goodB2G1Sink_4(wchar_t *a1)
{
  size_t v2; // rax
  void *v3; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  if ( goodB2G1Static_4 )
    return printLine("Benign, fixed string");
  v2 = wcslen(s);
  v6 = v2;
  v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 682368: using guessed type int goodB2G1Static_4;

//----- (00000000004420BD) ----------------------------------------------------
int goodB2G1_84()
{
  goodB2G1Static_4 = 0;
  return goodB2G1Sink_4((wchar_t *)"A");
}
// 682368: using guessed type int goodB2G1Static_4;

//----- (00000000004420ED) ----------------------------------------------------
int __fastcall goodB2G2Sink_4(wchar_t *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = goodB2G2Static_4;
  if ( goodB2G2Static_4 )
  {
    v2 = wcslen(s);
    v6 = v2;
    v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 68236C: using guessed type int goodB2G2Static_4;

//----- (0000000000442177) ----------------------------------------------------
int goodB2G2_84()
{
  goodB2G2Static_4 = 1;
  return goodB2G2Sink_4((wchar_t *)"A");
}
// 68236C: using guessed type int goodB2G2Static_4;

//----- (00000000004421A7) ----------------------------------------------------
int __fastcall goodG2BSink_29(char *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = goodG2BStatic_4;
  if ( goodG2BStatic_4 )
  {
    v2 = strlen(s);
    v6 = v2;
    v3 = alloca(16 * ((v2 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682370: using guessed type int goodG2BStatic_4;

//----- (000000000044222D) ----------------------------------------------------
int goodG2B_212()
{
  goodG2BStatic_4 = 1;
  return goodG2BSink_29("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}
// 682370: using guessed type int goodG2BStatic_4;

//----- (000000000044225D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_21_good()
{
  goodB2G1_84();
  goodB2G2_84();
  return goodG2B_212();
}

//----- (0000000000442281) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 442281: using guessed type char buf[16];

//----- (000000000044240F) ----------------------------------------------------
int goodB2G1_85()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44240F: using guessed type char buf[16];

//----- (00000000004425A3) ----------------------------------------------------
int goodB2G2_85()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4425A3: using guessed type char buf[16];

//----- (0000000000442737) ----------------------------------------------------
int goodG2B1_115()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (00000000004427B9) ----------------------------------------------------
int goodG2B2_115()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044283B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03_good()
{
  goodB2G1_85();
  goodB2G2_85();
  goodG2B1_115();
  return goodG2B2_115();
}

//----- (0000000000442869) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticTrue_8 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821A0: using guessed type int staticTrue_8;

//----- (000000000044290B) ----------------------------------------------------
int goodG2B1_116()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFalse_8 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682374: using guessed type int staticFalse_8;

//----- (00000000004429B9) ----------------------------------------------------
int goodG2B2_116()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticTrue_8 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821A0: using guessed type int staticTrue_8;

//----- (0000000000442A5B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05_good()
{
  goodG2B1_116();
  return goodG2B2_116();
}

//----- (0000000000442A75) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-80h]
  __int64 v2; // [rsp+8h] [rbp-78h]
  __int64 v3; // [rsp+10h] [rbp-70h]
  __int64 v4; // [rsp+18h] [rbp-68h]
  __int64 v5; // [rsp+20h] [rbp-60h]
  char buf[16]; // [rsp+30h] [rbp-50h]
  __int16 s; // [rsp+40h] [rbp-40h]
  uint16_t v8; // [rsp+42h] [rbp-3Eh]
  int v9; // [rsp+44h] [rbp-3Ch]
  int v10; // [rsp+50h] [rbp-30h]
  int v11; // [rsp+54h] [rbp-2Ch]
  int v12; // [rsp+58h] [rbp-28h]
  int fd; // [rsp+5Ch] [rbp-24h]
  int *v14; // [rsp+60h] [rbp-20h]
  int *v15; // [rsp+68h] [rbp-18h]
  int i; // [rsp+74h] [rbp-Ch]
  int v17; // [rsp+78h] [rbp-8h]
  int v18; // [rsp+7Ch] [rbp-4h]

  v15 = &v10;
  v14 = &v10;
  v10 = -1;
  v18 = -1;
  fd = -1;
  v17 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v17 = accept(fd, 0LL, 0LL);
      if ( v17 != -1 )
      {
        v12 = recv(v17, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v18 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v17 != -1 )
    close(v17);
  *v15 = v18;
  v11 = *v14;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v11 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 442A75: using guessed type char buf[16];

//----- (0000000000442C2E) ----------------------------------------------------
int goodG2B_213()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int v8; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v10 = &v6;
  v9 = &v6;
  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000442CDB) ----------------------------------------------------
int goodB2G_132()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-80h]
  __int64 v2; // [rsp+8h] [rbp-78h]
  __int64 v3; // [rsp+10h] [rbp-70h]
  __int64 v4; // [rsp+18h] [rbp-68h]
  __int64 v5; // [rsp+20h] [rbp-60h]
  char buf[16]; // [rsp+30h] [rbp-50h]
  __int16 s; // [rsp+40h] [rbp-40h]
  uint16_t v8; // [rsp+42h] [rbp-3Eh]
  int v9; // [rsp+44h] [rbp-3Ch]
  int v10; // [rsp+50h] [rbp-30h]
  int v11; // [rsp+54h] [rbp-2Ch]
  int v12; // [rsp+58h] [rbp-28h]
  int fd; // [rsp+5Ch] [rbp-24h]
  int *v14; // [rsp+60h] [rbp-20h]
  int *v15; // [rsp+68h] [rbp-18h]
  int i; // [rsp+74h] [rbp-Ch]
  int v17; // [rsp+78h] [rbp-8h]
  int v18; // [rsp+7Ch] [rbp-4h]

  v15 = &v10;
  v14 = &v10;
  v10 = -1;
  v18 = -1;
  fd = -1;
  v17 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v17 = accept(fd, 0LL, 0LL);
      if ( v17 != -1 )
      {
        v12 = recv(v17, buf, 0xDuLL, 0);
        if ( v12 != -1 )
        {
          if ( v12 )
          {
            buf[v12] = 0;
            v18 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v17 != -1 )
    close(v17);
  *v15 = v18;
  v11 = *v14;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v11 < 0 || v11 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v11;
  *((_DWORD *)&v1 + v11) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 442CDB: using guessed type char buf[16];

//----- (0000000000442E9A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32_good()
{
  goodG2B_213();
  return goodB2G_132();
}

//----- (0000000000442EB4) ----------------------------------------------------
__int64 staticReturnsTrue_8()
{
  return 1LL;
}

//----- (0000000000442EBF) ----------------------------------------------------
__int64 staticReturnsFalse_8()
{
  return 0LL;
}

//----- (0000000000442ECA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
    v7 = 10;
  result = staticReturnsTrue_8();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000442F68) ----------------------------------------------------
int goodB2G1_86()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
    v7 = 10;
  if ( (unsigned int)staticReturnsFalse_8() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443018) ----------------------------------------------------
int goodB2G2_86()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
    v7 = 10;
  result = staticReturnsTrue_8();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 || v7 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (00000000004430BC) ----------------------------------------------------
int goodG2B1_117()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse_8() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue_8();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000443166) ----------------------------------------------------
int goodG2B2_117()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
    v7 = 7;
  result = staticReturnsTrue_8();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000443204) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08_good()
{
  goodB2G1_86();
  goodB2G2_86();
  goodG2B1_117();
  return goodG2B2_117();
}

//----- (0000000000443232) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v12 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v12 = atoi(s);
  else
    printLine("fgets() failed.");
  v10 = v12;
  v9 = v12;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v12 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v9;
  *((_DWORD *)&v1 + v9) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443306) ----------------------------------------------------
int goodG2B_214()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v7 = 7;
  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443394) ----------------------------------------------------
int goodB2G_133()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v12 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v12 = atoi(s);
  else
    printLine("fgets() failed.");
  v10 = v12;
  v9 = v12;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v12 < 0 || v9 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v9;
  *((_DWORD *)&v1 + v9) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044346E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31_good()
{
  goodG2B_214();
  return goodB2G_133();
}

//----- (0000000000443488) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (00000000004434E3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000443535) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000443590) ----------------------------------------------------
int goodG2B_215()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink((_DWORD *)(16
                                                                                   * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004435E2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41_good()
{
  return goodG2B_215();
}

//----- (00000000004435F2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_badSink(10);
}

//----- (0000000000443614) ----------------------------------------------------
int goodG2B_216()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodG2BSink(7);
}

//----- (0000000000443636) ----------------------------------------------------
int goodB2G_134()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b_goodB2GSink(10);
}

//----- (0000000000443658) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51_good()
{
  goodG2B_216();
  return goodB2G_134();
}

//----- (0000000000443672) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_badSink((_DWORD *)(16
                                                                                 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004436C4) ----------------------------------------------------
int goodG2B_217()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink((_DWORD *)(16
                                                                                     * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000443716) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54_good()
{
  return goodG2B_217();
}

//----- (0000000000443726) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_bad()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_badSink();
}
// 682450: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_badData;

//----- (0000000000443751) ----------------------------------------------------
int goodG2B_218()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodG2BSink();
}
// 682448: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodG2BData;

//----- (000000000044377C) ----------------------------------------------------
int goodB2G_135()
{
  CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b_goodB2GSink();
}
// 68244C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_goodB2GData;

//----- (00000000004437A7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68_good()
{
  goodG2B_218();
  return goodB2G_135();
}

//----- (00000000004437C1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4437C1: using guessed type char buf[16];

//----- (0000000000443951) ----------------------------------------------------
int goodB2G_136()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 443951: using guessed type char buf[16];

//----- (0000000000443AE7) ----------------------------------------------------
int goodG2B_219()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443B6B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18_good()
{
  goodB2G_136();
  return goodG2B_219();
}

//----- (0000000000443B85) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_badSink(&v6);
}

//----- (0000000000443BF1) ----------------------------------------------------
int goodG2B_220()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodG2BSink(&v1);
}

//----- (0000000000443C15) ----------------------------------------------------
int goodB2G_137()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b_goodB2GSink(&v6);
}

//----- (0000000000443C81) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64_good()
{
  goodG2B_220();
  return goodB2G_137();
}

//----- (0000000000443C9B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_badSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443D23) ----------------------------------------------------
int goodG2B_221()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443DAB) ----------------------------------------------------
int goodB2G_138()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b_goodB2GSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000443E39) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61_good()
{
  goodG2B_221();
  return goodB2G_138();
}

//----- (0000000000443E53) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  void *dest; // [rsp+40h] [rbp-20h]
  unsigned __int64 v9; // [rsp+48h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000443EFB) ----------------------------------------------------
int goodG2B_222()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+30h] [rbp-30h]
  void *dest; // [rsp+40h] [rbp-20h]
  unsigned __int64 v9; // [rsp+48h] [rbp-18h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000443FA3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34_good()
{
  return goodG2B_222();
}

//----- (0000000000443FB3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char v4; // [rsp+Fh] [rbp-21h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4 >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4 >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (000000000044403B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char v4; // [rsp+Fh] [rbp-21h]
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  strcpy((char *)(16 * ((unsigned __int64)&v4 >> 4)), a1);
  return printLine(dest);
}

//----- (00000000004440BF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_67b_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char v4; // [rsp+Fh] [rbp-21h]
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v6; // [rsp+20h] [rbp-10h]
  wchar_t *s; // [rsp+28h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * ((unsigned __int64)&v4 >> 4));
  wcscpy((wchar_t *)(16 * ((unsigned __int64)&v4 >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (0000000000444147) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_badSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004441AE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_goodG2BSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000444215) ----------------------------------------------------
__int64 staticReturnsTrue_9()
{
  return 1LL;
}

//----- (0000000000444220) ----------------------------------------------------
__int64 staticReturnsFalse_9()
{
  return 0LL;
}

//----- (000000000044422B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_bad()
{
  int result; // eax
  char v1; // [rsp+0h] [rbp-30h]
  char v2; // [rsp+Fh] [rbp-21h]
  const char *v3; // [rsp+10h] [rbp-20h]

  result = staticReturnsTrue_9();
  if ( result )
  {
    printLine("0123456789abcdef0123456789abcde");
    strcpy(&v1, "0123456789abcdef0123456789abcde");
    v2 = 0;
    printLine(&v1);
    result = printLine(v3);
  }
  return result;
}

//----- (00000000004442B4) ----------------------------------------------------
int good1_32()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( (unsigned int)staticReturnsFalse_9() )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}

//----- (0000000000444324) ----------------------------------------------------
int good2_22()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticReturnsTrue_9();
  if ( result )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}

//----- (0000000000444388) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08_good()
{
  good1_32();
  return good2_22();
}

//----- (00000000004443A2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  int result; // eax
  size_t v3; // rax
  void *v4; // rsp
  wchar_t *v5; // [rsp+8h] [rbp-38h]
  size_t v6; // [rsp+10h] [rbp-30h]
  wchar_t *dest; // [rsp+18h] [rbp-28h]
  size_t v8; // [rsp+20h] [rbp-20h]
  char *s; // [rsp+28h] [rbp-18h]

  s = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    s = "A";
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v0 = strlen(s);
    v8 = v0;
    v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  else
  {
    v3 = wcslen((const wchar_t *)s);
    v6 = v3;
    v4 = alloca(16 * ((4 * (v3 + 1) + 30) / 0x10));
    v5 = (wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), (const wchar_t *)s);
    result = printWLine((__int64)v5);
  }
  return result;
}

//----- (00000000004444CD) ----------------------------------------------------
int goodB2G_139()
{
  size_t v0; // rax
  void *v1; // rsp
  int result; // eax
  size_t v3; // rax
  void *v4; // rsp
  wchar_t *v5; // [rsp+8h] [rbp-38h]
  size_t v6; // [rsp+10h] [rbp-30h]
  wchar_t *dest; // [rsp+18h] [rbp-28h]
  size_t v8; // [rsp+20h] [rbp-20h]
  wchar_t *s; // [rsp+28h] [rbp-18h]

  globalReturnsTrueOrFalse();
  s = (wchar_t *)"A";
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v0 = wcslen(s);
    v8 = v0;
    v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  else
  {
    v3 = wcslen(s);
    v6 = v3;
    v4 = alloca(16 * ((4 * (v3 + 1) + 30) / 0x10));
    v5 = (wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), s);
    result = printWLine((__int64)v5);
  }
  return result;
}

//----- (00000000004445F8) ----------------------------------------------------
int goodG2B_223()
{
  size_t v0; // rax
  void *v1; // rsp
  int result; // eax
  size_t v3; // rax
  void *v4; // rsp
  char *v5; // [rsp+8h] [rbp-38h]
  size_t v6; // [rsp+10h] [rbp-30h]
  char *dest; // [rsp+18h] [rbp-28h]
  size_t v8; // [rsp+20h] [rbp-20h]
  char *s; // [rsp+28h] [rbp-18h]

  globalReturnsTrueOrFalse();
  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v0 = strlen(s);
    v8 = v0;
    v1 = alloca(16 * ((v0 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), s);
    result = printLine(dest);
  }
  else
  {
    v3 = strlen(s);
    v6 = v3;
    v4 = alloca(16 * ((v3 + 31) / 0x10));
    v5 = (char *)(16 * (((unsigned __int64)&v5 + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&v5 + 7) >> 4)), s);
    result = printLine(v5);
  }
  return result;
}

//----- (000000000044471B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good()
{
  goodB2G_139();
  return goodG2B_223();
}

//----- (0000000000444735) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_badSink(&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044476F) ----------------------------------------------------
int goodG2B_224()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodG2BSink(&v1);
}

//----- (0000000000444793) ----------------------------------------------------
int goodB2G_140()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b_goodB2GSink(&v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004447CD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63_good()
{
  goodG2B_224();
  return goodB2G_140();
}

//----- (00000000004447E7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6821E4: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_badGlobal;

//----- (0000000000444868) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 6821E8: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G1Global;

//----- (00000000004448FB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Sink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6821EC: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodB2G2Global;

//----- (0000000000444982) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 6821F0: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22_goodG2BGlobal;

//----- (0000000000444A03) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  result = 10;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000444A99) ----------------------------------------------------
int goodB2G1_87()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000444B41) ----------------------------------------------------
int goodB2G2_87()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 10;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v1 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000444BDD) ----------------------------------------------------
int goodG2B1_118()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000444C7F) ----------------------------------------------------
int goodG2B2_118()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000444D15) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06_good()
{
  goodB2G1_87();
  goodB2G2_87();
  goodG2B1_118();
  return goodG2B2_118();
}

//----- (0000000000444D43) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+58h] [rbp-18h]
  int fd; // [rsp+5Ch] [rbp-14h]
  int j; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v14; // [rsp+68h] [rbp-8h]
  int v15; // [rsp+6Ch] [rbp-4h]

  v15 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v14 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v14 = accept(fd, 0LL, 0LL);
        if ( v14 != -1 )
        {
          v10 = recv(v14, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v15 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v14 != -1 )
      close(v14);
  }
  else
  {
    v15 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v15 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v15;
      *((_DWORD *)&v1 + v15) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v15 < 0 || v15 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v15;
      *((_DWORD *)&v1 + v15) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 444D43: using guessed type char buf[16];

//----- (0000000000444F6E) ----------------------------------------------------
int goodB2G_141()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-A0h]
  __int64 v2; // [rsp+8h] [rbp-98h]
  __int64 v3; // [rsp+10h] [rbp-90h]
  __int64 v4; // [rsp+18h] [rbp-88h]
  __int64 v5; // [rsp+20h] [rbp-80h]
  char nptr[16]; // [rsp+30h] [rbp-70h]
  struct sockaddr addr; // [rsp+40h] [rbp-60h]
  char buf[16]; // [rsp+50h] [rbp-50h]
  __int16 s; // [rsp+60h] [rbp-40h]
  uint16_t v10; // [rsp+62h] [rbp-3Eh]
  int v11; // [rsp+64h] [rbp-3Ch]
  int v12; // [rsp+7Ch] [rbp-24h]
  int v13; // [rsp+80h] [rbp-20h]
  int v14; // [rsp+84h] [rbp-1Ch]
  int fd; // [rsp+88h] [rbp-18h]
  int j; // [rsp+8Ch] [rbp-14h]
  int i; // [rsp+90h] [rbp-10h]
  int v18; // [rsp+94h] [rbp-Ch]
  int v19; // [rsp+98h] [rbp-8h]
  int v20; // [rsp+9Ch] [rbp-4h]

  v20 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v19 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v11 = 0;
      v10 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v19 = accept(fd, 0LL, 0LL);
        if ( v19 != -1 )
        {
          v14 = recv(v19, buf, 0xDuLL, 0);
          if ( v14 != -1 )
          {
            if ( v14 )
            {
              buf[v14] = 0;
              v20 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v19 != -1 )
      close(v19);
  }
  else
  {
    v18 = -1;
    v13 = socket(2, 1, 6);
    if ( v13 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v13, &addr, 0x10u) != -1 && listen(v13, 5) != -1 )
      {
        v18 = accept(v13, 0LL, 0LL);
        if ( v18 != -1 )
        {
          v12 = recv(v18, nptr, 0xDuLL, 0);
          if ( v12 != -1 )
          {
            if ( v12 )
            {
              nptr[v12] = 0;
              v20 = atoi(nptr);
            }
          }
        }
      }
    }
    if ( v13 != -1 )
      close(v13);
    if ( v18 != -1 )
      close(v18);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v20 < 0 || v20 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v20;
      *((_DWORD *)&v1 + v20) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v20 < 0 || v20 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v20;
      *((_DWORD *)&v1 + v20) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}
// 444F6E: using guessed type char buf[16];
// 444F6E: using guessed type char nptr[16];

//----- (00000000004452E3) ----------------------------------------------------
int goodG2B_225()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (00000000004453F6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_good()
{
  goodB2G_141();
  return goodG2B_225();
}

//----- (0000000000445410) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticFive_9 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821A4: using guessed type int staticFive_9;
// 445410: using guessed type char buf[16];

//----- (0000000000445572) ----------------------------------------------------
int goodB2G1_88()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticFive_9 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive_9 != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821A4: using guessed type int staticFive_9;
// 445572: using guessed type char buf[16];

//----- (00000000004456E6) ----------------------------------------------------
int goodB2G2_88()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticFive_9 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821A4: using guessed type int staticFive_9;
// 4456E6: using guessed type char buf[16];

//----- (000000000044584E) ----------------------------------------------------
int goodG2B1_119()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_9 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_9;
  if ( staticFive_9 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821A4: using guessed type int staticFive_9;

//----- (00000000004458F2) ----------------------------------------------------
int goodG2B2_119()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_9 == 5 )
    v7 = 7;
  result = staticFive_9;
  if ( staticFive_9 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821A4: using guessed type int staticFive_9;

//----- (000000000044598A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07_good()
{
  goodB2G1_88();
  goodB2G2_88();
  goodG2B1_119();
  return goodG2B2_119();
}

//----- (00000000004459B8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(32LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000445A67) ----------------------------------------------------
int goodG2B1_120()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000445B16) ----------------------------------------------------
int goodG2B2_120()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v0 = alloca(64LL);
  v7 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000445BC5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15_good()
{
  goodG2B1_120();
  return goodG2B2_120();
}

//----- (0000000000445BDF) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(a1);
}

//----- (0000000000445BF9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(a1);
}

//----- (0000000000445C13) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000445C6E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000445CC9) ----------------------------------------------------
int __fastcall badSink_30(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (0000000000445D49) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_44_bad()
{
  return badSink_30("A");
}

//----- (0000000000445D78) ----------------------------------------------------
int __fastcall goodG2BSink_30(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (0000000000445DF4) ----------------------------------------------------
int goodG2B_226()
{
  return goodG2BSink_30("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (0000000000445E23) ----------------------------------------------------
int __fastcall goodB2GSink_16(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (0000000000445EA3) ----------------------------------------------------
int goodB2G_142()
{
  return goodB2GSink_16((wchar_t *)"A");
}

//----- (0000000000445ED2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_44_good()
{
  goodG2B_226();
  return goodB2G_142();
}

//----- (0000000000445EEC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_09_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_TRUE )
    s = "A";
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000445F8C) ----------------------------------------------------
int goodB2G1_89()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_TRUE )
    s = (wchar_t *)"A";
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000446038) ----------------------------------------------------
int goodB2G2_89()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_TRUE )
    s = (wchar_t *)"A";
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004460D8) ----------------------------------------------------
int goodG2B1_121()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000446180) ----------------------------------------------------
int goodG2B2_121()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( GLOBAL_CONST_TRUE )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044621C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_09_good()
{
  goodB2G1_89();
  goodB2G2_89();
  goodG2B1_121();
  return goodG2B2_121();
}

//----- (000000000044624A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (00000000004462EC) ----------------------------------------------------
int goodG2B1_122()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682398: using guessed type int globalFalse;

//----- (000000000044639A) ----------------------------------------------------
int goodG2B2_122()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalTrue )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044643C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10_good()
{
  goodG2B1_122();
  return goodG2B2_122();
}

//----- (0000000000446456) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_02_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (00000000004464E2) ----------------------------------------------------
int goodB2G1_90()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000044656E) ----------------------------------------------------
int goodB2G2_90()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (00000000004465FA) ----------------------------------------------------
int goodG2B1_123()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (0000000000446682) ----------------------------------------------------
int goodG2B2_123()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000044670A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_02_good()
{
  goodB2G1_90();
  goodB2G2_90();
  goodG2B1_123();
  return goodG2B2_123();
}

//----- (0000000000446738) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_bad()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_badSink((__int64)&v2);
}

//----- (0000000000446792) ----------------------------------------------------
int goodG2B_227()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(64LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b_goodG2BSink((__int64)&v2);
}

//----- (00000000004467EC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66_good()
{
  return goodG2B_227();
}

//----- (00000000004467FC) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_badSink(a1);
}

//----- (0000000000446813) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodG2BSink(a1);
}

//----- (000000000044682A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d_goodB2GSink(a1);
}

//----- (0000000000446841) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 446841: using guessed type char buf[16];

//----- (00000000004469EF) ----------------------------------------------------
int goodB2G1_91()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4469EF: using guessed type char buf[16];

//----- (0000000000446BAF) ----------------------------------------------------
int goodB2G2_91()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 446BAF: using guessed type char buf[16];

//----- (0000000000446D63) ----------------------------------------------------
int goodG2B1_124()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000446E0D) ----------------------------------------------------
int goodG2B2_124()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v7 = 7;
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000446EAB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11_good()
{
  goodB2G1_91();
  goodB2G2_91();
  goodG2B1_124();
  return goodG2B2_124();
}

//----- (0000000000446ED9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 446ED9: using guessed type char buf[16];

//----- (0000000000447067) ----------------------------------------------------
int goodB2G1_92()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 447067: using guessed type char buf[16];

//----- (00000000004471FB) ----------------------------------------------------
int goodB2G2_92()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 4471FB: using guessed type char buf[16];

//----- (000000000044738F) ----------------------------------------------------
int goodG2B1_125()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000447411) ----------------------------------------------------
int goodG2B2_125()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (0000000000447493) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02_good()
{
  goodB2G1_92();
  goodB2G2_92();
  goodG2B1_125();
  return goodG2B2_125();
}

//----- (00000000004474C1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_bad()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_badSink;
  v0 = alloca(32LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_badSink((_DWORD *)(16
                                                                                 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044751C) ----------------------------------------------------
int goodG2B_228()
{
  void *v0; // rsp
  int (__fastcall *v2)(_DWORD *); // [rsp+8h] [rbp-8h]

  v2 = CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink;
  v0 = alloca(64LL);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink((_DWORD *)(16
                                                                                     * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (0000000000447577) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65_good()
{
  return goodG2B_228();
}

//----- (0000000000447587) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447610) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447699) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int *v8; // [rsp+40h] [rbp-10h]
  int i; // [rsp+4Ch] [rbp-4h]

  v8 = a1;
  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447728) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044779F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447816) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447893) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044792B) ----------------------------------------------------
int goodG2B_229()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004479C3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01_good()
{
  return goodG2B_229();
}

//----- (00000000004479D3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_10 == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821A8: using guessed type int staticFive_10;

//----- (0000000000447A76) ----------------------------------------------------
int goodG2B1_126()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_10 == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821A8: using guessed type int staticFive_10;

//----- (0000000000447B25) ----------------------------------------------------
int goodG2B2_126()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( staticFive_10 == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821A8: using guessed type int staticFive_10;

//----- (0000000000447BC8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07_good()
{
  goodG2B1_126();
  return goodG2B2_126();
}

//----- (0000000000447BE2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_badSink(a1);
}

//----- (0000000000447BF9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodG2BSink(a1);
}

//----- (0000000000447C10) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e_goodB2GSink(a1);
}

//----- (0000000000447C27) ----------------------------------------------------
int __fastcall badSink_31(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447C9E) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_31;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000447CDF) ----------------------------------------------------
int __fastcall goodG2BSink_31(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447D56) ----------------------------------------------------
int goodG2B_230()
{
  return goodG2BSink_31(7);
}

//----- (0000000000447D81) ----------------------------------------------------
int __fastcall goodB2GSink_17(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000447DFE) ----------------------------------------------------
__int64 goodB2G_143()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_17;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000447E3F) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44_good()
{
  goodG2B_230();
  return goodB2G_143();
}

//----- (0000000000447E59) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticTrue_9 )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821AC: using guessed type int staticTrue_9;

//----- (0000000000447F11) ----------------------------------------------------
int goodG2B1_127()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticFalse_9 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 682378: using guessed type int staticFalse_9;

//----- (0000000000447FD5) ----------------------------------------------------
int goodG2B2_127()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( staticTrue_9 )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 6821AC: using guessed type int staticTrue_9;

//----- (000000000044808D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_good()
{
  goodG2B1_127();
  return goodG2B2_127();
}

//----- (00000000004480A7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = staticTrue_10;
  if ( staticTrue_10 )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 6821B0: using guessed type int staticTrue_10;

//----- (0000000000448101) ----------------------------------------------------
int good1_33()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( staticFalse_10 )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 68237C: using guessed type int staticFalse_10;

//----- (000000000044816D) ----------------------------------------------------
int good2_23()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = staticTrue_10;
  if ( staticTrue_10 )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 6821B0: using guessed type int staticTrue_10;

//----- (00000000004481CD) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05_good()
{
  good1_33();
  return good2_23();
}

//----- (00000000004481E7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_badSink(a1);
}

//----- (0000000000448201) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(a1);
}

//----- (000000000044821B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(a1);
}

//----- (0000000000448235) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (00000000004482AB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_badSink((unsigned int *)(16
                                                                                   * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004482FD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (0000000000448373) ----------------------------------------------------
int goodG2B_231()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_goodG2BSink((unsigned int *)(16
                                                                                       * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (00000000004483C5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41_good()
{
  return goodG2B_231();
}

//----- (00000000004483D5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_badSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682440: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_badData;

//----- (0000000000448437) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove((void *)CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 682438: using guessed type __int64 CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;

//----- (0000000000448499) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_badSink(a1);
}

//----- (00000000004484B0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodG2BSink(a1);
}

//----- (00000000004484C7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d_goodB2GSink(a1);
}

//----- (00000000004484DE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_badSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)a1);
  return printLine((const char *)dest);
}

//----- (000000000044855E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(char *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = strlen(a1);
  v6 = v1;
  v2 = alloca(16 * ((v1 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printLine(dest);
}

//----- (00000000004485DA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(wchar_t *a1)
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  v1 = wcslen(a1);
  v6 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), a1);
  return printWLine((__int64)dest);
}

//----- (000000000044865A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44865A: using guessed type char buf[16];

//----- (00000000004487E8) ----------------------------------------------------
int goodG2B_232()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044886A) ----------------------------------------------------
int goodB2G_144()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = 0;
    v8 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v13 = accept(fd, 0LL, 0LL);
      if ( v13 != -1 )
      {
        v10 = recv(v13, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v13 != -1 )
    close(v13);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44886A: using guessed type char buf[16];

//----- (00000000004489FE) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01_good()
{
  goodG2B_232();
  return goodB2G_144();
}

//----- (0000000000448A18) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000448A8F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000448B06) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (0000000000448B83) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_badSink(&v1);
}

//----- (0000000000448BA7) ----------------------------------------------------
int goodG2B_233()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodG2BSink(&v1);
}

//----- (0000000000448BCB) ----------------------------------------------------
int goodB2G_145()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 10;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b_goodB2GSink(&v1);
}

//----- (0000000000448BEF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64_good()
{
  goodG2B_233();
  return goodB2G_145();
}

//----- (0000000000448C09) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  unsigned __int64 v7; // [rsp+30h] [rbp-20h]
  unsigned int *v8; // [rsp+38h] [rbp-18h]
  unsigned __int64 v9; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000448CC7) ----------------------------------------------------
int goodG2B_234()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-50h]
  __int64 v3; // [rsp+8h] [rbp-48h]
  __int64 v4; // [rsp+10h] [rbp-40h]
  __int64 v5; // [rsp+18h] [rbp-38h]
  __int64 v6; // [rsp+20h] [rbp-30h]
  unsigned __int64 v7; // [rsp+30h] [rbp-20h]
  unsigned int *v8; // [rsp+38h] [rbp-18h]
  unsigned __int64 v9; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}

//----- (0000000000448D85) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34_good()
{
  return goodG2B_234();
}

//----- (0000000000448D95) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_badSink(__int64 a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = *(unsigned int **)(a1 + 16);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000448E17) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(__int64 a1)
{
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  __int64 v6; // [rsp+30h] [rbp-20h]
  unsigned int *v7; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v7 = *(unsigned int **)(a1 + 16);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v7[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v7);
}

//----- (0000000000448E99) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(a1);
}

//----- (0000000000448EB3) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(a1);
}

//----- (0000000000448ECD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badSink(char *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal )
  {
    v2 = strlen(s);
    v6 = v2;
    v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 682338: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal;

//----- (0000000000448F57) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(wchar_t *a1)
{
  size_t v2; // rax
  void *v3; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  v2 = wcslen(s);
  v6 = v2;
  v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 68233C: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global;

//----- (0000000000448FED) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(wchar_t *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  wchar_t *s; // [rsp+8h] [rbp-18h]
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global )
  {
    v2 = wcslen(s);
    v6 = v2;
    v3 = alloca(16 * ((4 * (v2 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 682340: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global;

//----- (0000000000449077) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BSink(char *a1)
{
  int result; // eax
  size_t v2; // rax
  void *v3; // rsp
  char *s; // [rsp+8h] [rbp-18h]
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v6; // [rsp+18h] [rbp-8h]

  s = a1;
  result = CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal;
  if ( CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal )
  {
    v2 = strlen(s);
    v6 = v2;
    v3 = alloca(16 * ((v2 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&s + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&s + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 682344: using guessed type int CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal;

//----- (00000000004490FD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (0000000000449158) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (00000000004491B3) ----------------------------------------------------
__int64 staticReturnsTrue_10()
{
  return 1LL;
}

//----- (00000000004491BE) ----------------------------------------------------
__int64 staticReturnsFalse_10()
{
  return 0LL;
}

//----- (00000000004491C9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)staticReturnsTrue_10() )
    s = "A";
  result = staticReturnsTrue_10();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}

//----- (0000000000449271) ----------------------------------------------------
int goodB2G1_93()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)staticReturnsTrue_10() )
    s = (wchar_t *)"A";
  if ( (unsigned int)staticReturnsFalse_10() )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (0000000000449325) ----------------------------------------------------
int goodB2G2_93()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)staticReturnsTrue_10() )
    s = (wchar_t *)"A";
  result = staticReturnsTrue_10();
  if ( result )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}

//----- (00000000004493CD) ----------------------------------------------------
int goodG2B1_128()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)staticReturnsFalse_10() )
    printLine("Benign, fixed string");
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = staticReturnsTrue_10();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}

//----- (000000000044947D) ----------------------------------------------------
int goodG2B2_128()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)staticReturnsTrue_10() )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = staticReturnsTrue_10();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}

//----- (0000000000449521) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good()
{
  goodB2G1_93();
  goodB2G2_93();
  goodG2B1_128();
  return goodG2B2_128();
}

//----- (000000000044954F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (00000000004495F0) ----------------------------------------------------
int goodG2B1_129()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044969D) ----------------------------------------------------
int goodG2B2_129()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(64LL);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044973E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04_good()
{
  goodG2B1_129();
  return goodG2B2_129();
}

//----- (0000000000449758) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004497D9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044985A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (00000000004498E1) ----------------------------------------------------
__int64 staticReturnsTrue_11()
{
  return 1LL;
}

//----- (00000000004498EC) ----------------------------------------------------
__int64 staticReturnsFalse_11()
{
  return 0LL;
}

//----- (00000000004498F7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)staticReturnsTrue_11() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticReturnsTrue_11();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 4498F7: using guessed type char buf[16];

//----- (0000000000449AA5) ----------------------------------------------------
int goodB2G1_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)staticReturnsTrue_11() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  if ( (unsigned int)staticReturnsFalse_11() )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v14 < 0 || v14 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v14;
  *((_DWORD *)&v1 + v14) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 449AA5: using guessed type char buf[16];

//----- (0000000000449C65) ----------------------------------------------------
int goodB2G2_94()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-70h]
  __int64 v2; // [rsp+8h] [rbp-68h]
  __int64 v3; // [rsp+10h] [rbp-60h]
  __int64 v4; // [rsp+18h] [rbp-58h]
  __int64 v5; // [rsp+20h] [rbp-50h]
  char buf[16]; // [rsp+30h] [rbp-40h]
  __int16 s; // [rsp+40h] [rbp-30h]
  uint16_t v8; // [rsp+42h] [rbp-2Eh]
  int v9; // [rsp+44h] [rbp-2Ch]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int i; // [rsp+64h] [rbp-Ch]
  int v13; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)staticReturnsTrue_11() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v14 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  result = staticReturnsTrue_11();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 449C65: using guessed type char buf[16];

//----- (0000000000449E19) ----------------------------------------------------
int goodG2B1_130()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsFalse_11() )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticReturnsTrue_11();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000449EC3) ----------------------------------------------------
int goodG2B2_130()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_11() )
    v7 = 7;
  result = staticReturnsTrue_11();
  if ( result )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}

//----- (0000000000449F61) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08_good()
{
  goodB2G1_94();
  goodB2G2_94();
  goodG2B1_130();
  return goodG2B2_130();
}

//----- (0000000000449F8F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  unsigned __int64 v5; // [rsp+18h] [rbp-28h]
  char *v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v4 >> 4);
  if ( globalFive == 5 )
  {
    dest = v6;
    *v6 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044A057) ----------------------------------------------------
int goodG2B1_131()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( globalFive == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044A12B) ----------------------------------------------------
int goodG2B2_131()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-40h]
  char v4; // [rsp+Fh] [rbp-31h]
  char *v5; // [rsp+18h] [rbp-28h]
  unsigned __int64 v6; // [rsp+20h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-18h]

  v0 = alloca(32LL);
  v6 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v5 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  if ( globalFive == 5 )
  {
    dest = v5;
    *v5 = 0;
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044A1F3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14_good()
{
  goodG2B1_131();
  return goodG2B2_131();
}

//----- (000000000044A20D) ----------------------------------------------------
int __fastcall badSink_32(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = badStatic_5;
  if ( badStatic_5 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682380: using guessed type int badStatic_5;

//----- (000000000044A28E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  badStatic_5 = 1;
  return badSink_32(v4);
}
// 682380: using guessed type int badStatic_5;

//----- (000000000044A300) ----------------------------------------------------
int __fastcall goodB2G1Sink_5(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  if ( goodB2G1Static_5 )
    return printLine("Benign, fixed string");
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}
// 682384: using guessed type int goodB2G1Static_5;

//----- (000000000044A393) ----------------------------------------------------
int goodB2G1_95()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  goodB2G1Static_5 = 0;
  return goodB2G1Sink_5(v4);
}
// 682384: using guessed type int goodB2G1Static_5;

//----- (000000000044A405) ----------------------------------------------------
int __fastcall goodB2G2Sink_5(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodB2G2Static_5;
  if ( goodB2G2Static_5 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 || a1 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 682388: using guessed type int goodB2G2Static_5;

//----- (000000000044A48C) ----------------------------------------------------
int goodB2G2_95()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  goodB2G2Static_5 = 1;
  return goodB2G2Sink_5(v4);
}
// 682388: using guessed type int goodB2G2Static_5;

//----- (000000000044A4FE) ----------------------------------------------------
int __fastcall goodG2BSink_32(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  result = goodG2BStatic_5;
  if ( goodG2BStatic_5 )
  {
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    if ( a1 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = a1;
      *((_DWORD *)&v2 + a1) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v2 + i));
    }
  }
  return result;
}
// 68238C: using guessed type int goodG2BStatic_5;

//----- (000000000044A57F) ----------------------------------------------------
int goodG2B_235()
{
  goodG2BStatic_5 = 1;
  return goodG2BSink_32(7);
}
// 68238C: using guessed type int goodG2BStatic_5;

//----- (000000000044A5AB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21_good()
{
  goodB2G1_95();
  goodB2G2_95();
  return goodG2B_235();
}

//----- (000000000044A5CF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044A697) ----------------------------------------------------
int goodB2G1_96()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044A765) ----------------------------------------------------
int goodB2G2_96()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044A833) ----------------------------------------------------
int goodG2B1_132()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044A8B5) ----------------------------------------------------
int goodG2B2_132()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044A937) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03_good()
{
  goodB2G1_96();
  goodB2G2_96();
  goodG2B1_132();
  return goodG2B2_132();
}

//----- (000000000044A965) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-60h]
  char v4; // [rsp+Fh] [rbp-51h]
  char v5; // [rsp+18h] [rbp-48h]
  char *dest; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  unsigned __int64 v8; // [rsp+30h] [rbp-30h]
  _BYTE *v9; // [rsp+38h] [rbp-28h]
  char **v10; // [rsp+40h] [rbp-20h]
  char *v11; // [rsp+48h] [rbp-18h]

  v11 = &v5;
  v10 = (char **)&v5;
  v0 = alloca(32LL);
  v9 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v8 = 16 * ((unsigned __int64)&v4 >> 4);
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  *v9 = 0;
  *(_QWORD *)v11 = v7;
  dest = *v10;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000044AA53) ----------------------------------------------------
int goodG2B_236()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-60h]
  char v4; // [rsp+Fh] [rbp-51h]
  char v5; // [rsp+18h] [rbp-48h]
  char *dest; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  _BYTE *v8; // [rsp+30h] [rbp-30h]
  unsigned __int64 v9; // [rsp+38h] [rbp-28h]
  char **v10; // [rsp+40h] [rbp-20h]
  char *v11; // [rsp+48h] [rbp-18h]

  v11 = &v5;
  v10 = (char **)&v5;
  v0 = alloca(32LL);
  v9 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v8 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v7 = 16 * ((unsigned __int64)&v4 >> 4);
  *v8 = 0;
  *(_QWORD *)v11 = v7;
  dest = *v10;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  return printLine(dest);
}

//----- (000000000044AB41) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32_good()
{
  return goodG2B_236();
}

//----- (000000000044AB51) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_badSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044ABD9) ----------------------------------------------------
int goodG2B_237()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044AC61) ----------------------------------------------------
int goodB2G_146()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b_goodB2GSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044ACEF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61_good()
{
  goodG2B_237();
  return goodB2G_146();
}

//----- (000000000044AD09) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044ADD3) ----------------------------------------------------
int goodB2G_147()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044AEA3) ----------------------------------------------------
int goodG2B_238()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044AF27) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18_good()
{
  goodB2G_147();
  return goodG2B_238();
}

//----- (000000000044AF41) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_badSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000044AFB7) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_goodG2BSink(unsigned int *a1)
{
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    a1[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*a1);
}

//----- (000000000044B02D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_bad()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_badSink((__int64)&v2);
}

//----- (000000000044B087) ----------------------------------------------------
int goodG2B_239()
{
  void *v0; // rsp
  char v2; // [rsp+0h] [rbp-30h]
  char v3; // [rsp+Fh] [rbp-21h]
  unsigned __int64 v4; // [rsp+10h] [rbp-20h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v0 = alloca(64LL);
  v5 = 16 * ((unsigned __int64)&v3 >> 4);
  v4 = 16 * ((unsigned __int64)&v3 >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink((__int64)&v2);
}

//----- (000000000044B0E1) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66_good()
{
  return goodG2B_239();
}

//----- (000000000044B0F1) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(dest);
}

//----- (000000000044B13E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  return printLine(dest);
}

//----- (000000000044B18B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044B202) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044B279) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044B2F6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_badSink((_DWORD *)(16
                                                                                 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044B348) ----------------------------------------------------
int goodG2B_240()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink((_DWORD *)(16
                                                                                     * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044B39A) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53_good()
{
  return goodG2B_240();
}

//----- (000000000044B3AA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticFive_11 == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticFive_11;
  if ( staticFive_11 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821B4: using guessed type int staticFive_11;

//----- (000000000044B459) ----------------------------------------------------
int goodB2G1_97()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticFive_11 == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  if ( staticFive_11 != 5 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821B4: using guessed type int staticFive_11;

//----- (000000000044B51C) ----------------------------------------------------
int goodB2G2_97()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  if ( staticFive_11 == 5 )
    __isoc99_fscanf(stdin, "%d", &v6);
  result = staticFive_11;
  if ( staticFive_11 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v6 < 0 || v6 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v6;
      *((_DWORD *)&v1 + v6) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 400DD0: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6821B4: using guessed type int staticFive_11;

//----- (000000000044B5D3) ----------------------------------------------------
int goodG2B1_133()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_11 == 5 )
    v7 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_11;
  if ( staticFive_11 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B4: using guessed type int staticFive_11;

//----- (000000000044B677) ----------------------------------------------------
int goodG2B2_133()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFive_11 == 5 )
    v7 = 7;
  result = staticFive_11;
  if ( staticFive_11 == 5 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B4: using guessed type int staticFive_11;

//----- (000000000044B70F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07_good()
{
  goodB2G1_97();
  goodB2G2_97();
  goodG2B1_133();
  return goodG2B2_133();
}

//----- (000000000044B73D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_badSink(a1);
}

//----- (000000000044B757) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(a1);
}

//----- (000000000044B771) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(a1);
}

//----- (000000000044B78B) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_badSink(a1);
}

//----- (000000000044B7A2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodG2BSink(a1);
}

//----- (000000000044B7B9) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c_goodB2GSink(a1);
}

//----- (000000000044B7D0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_badSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044B858) ----------------------------------------------------
int goodG2B_241()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodG2BSource();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044B8E0) ----------------------------------------------------
int goodB2G_148()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b_goodB2GSource(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044B96E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61_good()
{
  goodG2B_241();
  return goodB2G_148();
}

//----- (000000000044B988) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_badSink(&v6);
}

//----- (000000000044B9F4) ----------------------------------------------------
int goodG2B_242()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodG2BSink(&v1);
}

//----- (000000000044BA18) ----------------------------------------------------
int goodB2G_149()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b_goodB2GSink(&v6);
}

//----- (000000000044BA84) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63_good()
{
  goodG2B_242();
  return goodB2G_149();
}

//----- (000000000044BA9E) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int j; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v11 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  else
  {
    v11 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v11 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v11;
      *((_DWORD *)&v1 + v11) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v11 < 0 || v11 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v11;
      *((_DWORD *)&v1 + v11) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (000000000044BBFD) ----------------------------------------------------
int goodB2G_150()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char nptr[8]; // [rsp+30h] [rbp-30h]
  int v7; // [rsp+38h] [rbp-28h]
  __int16 v8; // [rsp+3Ch] [rbp-24h]
  char s[8]; // [rsp+40h] [rbp-20h]
  int v10; // [rsp+48h] [rbp-18h]
  __int16 v11; // [rsp+4Ch] [rbp-14h]
  int j; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v14; // [rsp+5Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v10 = 0;
    v11 = 0;
    if ( fgets(s, 14, stdin) )
      v14 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  else
  {
    *(_QWORD *)nptr = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(nptr, 14, stdin) )
      v14 = atoi(nptr);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v14 < 0 || v14 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v14;
      *((_DWORD *)&v1 + v14) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (000000000044BDA9) ----------------------------------------------------
int goodG2B_243()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  globalReturnsTrueOrFalse();
  v8 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  else
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v8 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v8;
      *((_DWORD *)&v1 + v8) = 1;
      for ( j = 0; j <= 9; ++j )
        result = printIntLine(*((_DWORD *)&v1 + j));
    }
  }
  return result;
}

//----- (000000000044BEBC) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12_good()
{
  goodB2G_150();
  return goodG2B_243();
}

//----- (000000000044BED6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44BED6: using guessed type char buf[16];

//----- (000000000044C020) ----------------------------------------------------
int goodB2G1_98()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44C020: using guessed type char buf[16];

//----- (000000000044C170) ----------------------------------------------------
int goodB2G2_98()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v9 = inet_addr("127.0.0.1");
    v8 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v10 = recv(fd, buf, 0xDuLL, 0);
      if ( v10 != -1 )
      {
        if ( v10 )
        {
          buf[v10] = 0;
          v13 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 44C170: using guessed type char buf[16];

//----- (000000000044C2C0) ----------------------------------------------------
int goodG2B1_134()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C344) ----------------------------------------------------
int goodG2B2_134()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C3C8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15_good()
{
  goodB2G1_98();
  goodB2G2_98();
  goodG2B1_134();
  return goodG2B2_134();
}

//----- (000000000044C3F6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v12 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v12 = atoi(s);
  else
    printLine("fgets() failed.");
  v9 = v12;
  v10 = v12;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v12 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C4CA) ----------------------------------------------------
int goodG2B_244()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = 7;
  v6 = 7;
  v7 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C558) ----------------------------------------------------
int goodB2G_151()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v12 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v12 = atoi(s);
  else
    printLine("fgets() failed.");
  v9 = v12;
  v10 = v12;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v12 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C632) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34_good()
{
  goodG2B_244();
  return goodB2G_151();
}

//----- (000000000044C64C) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-50h]
  char v4; // [rsp+Fh] [rbp-41h]
  char *dest; // [rsp+18h] [rbp-38h]
  char *v6; // [rsp+20h] [rbp-30h]
  char *v7; // [rsp+28h] [rbp-28h]
  unsigned __int64 v8; // [rsp+30h] [rbp-20h]
  _BYTE *v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v1 = alloca(32LL);
  v8 = 16 * ((unsigned __int64)&v4 >> 4);
  v7 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v9 = 0;
  v6 = v7;
  dest = v7;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v7, src);
  return printLine(dest);
}

//----- (000000000044C719) ----------------------------------------------------
int goodG2B_245()
{
  void *v0; // rsp
  void *v1; // rsp
  char src[8]; // [rsp+0h] [rbp-50h]
  char v4; // [rsp+Fh] [rbp-41h]
  char *dest; // [rsp+18h] [rbp-38h]
  char *v6; // [rsp+20h] [rbp-30h]
  char *v7; // [rsp+28h] [rbp-28h]
  _BYTE *v8; // [rsp+30h] [rbp-20h]
  unsigned __int64 v9; // [rsp+38h] [rbp-18h]

  v0 = alloca(32LL);
  v9 = 16 * ((unsigned __int64)&v4 >> 4);
  v1 = alloca(32LL);
  v8 = (_BYTE *)(16 * ((unsigned __int64)&v4 >> 4));
  v7 = (char *)(16 * ((unsigned __int64)&v4 >> 4));
  *v8 = 0;
  v6 = v7;
  dest = v7;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v7, src);
  return printLine(dest);
}

//----- (000000000044C7E6) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31_good()
{
  return goodG2B_245();
}

//----- (000000000044C7F6) ----------------------------------------------------
__int64 __fastcall badSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 44C7F6: using guessed type char buf[16];

//----- (000000000044C8D3) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = badSource_5(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C95B) ----------------------------------------------------
__int64 goodG2BSource_5()
{
  return 7LL;
}

//----- (000000000044C96E) ----------------------------------------------------
int goodG2B_246()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodG2BSource_5();
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044C9F6) ----------------------------------------------------
__int64 __fastcall goodB2GSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 44C9F6: using guessed type char buf[16];

//----- (000000000044CAD3) ----------------------------------------------------
int goodB2G_152()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = goodB2GSource_5(0xFFFFFFFF);
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v6 < 0 || v6 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v6;
  *((_DWORD *)&v1 + v6) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044CB61) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42_good()
{
  goodB2G_152();
  return goodG2B_246();
}

//----- (000000000044CB7B) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalTrue )
    s = "A";
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044CC1B) ----------------------------------------------------
int goodB2G1_99()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalTrue )
    s = (wchar_t *)"A";
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000044CCC7) ----------------------------------------------------
int goodB2G2_99()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalTrue )
    s = (wchar_t *)"A";
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044CD67) ----------------------------------------------------
int goodG2B1_135()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000044CE0F) ----------------------------------------------------
int goodG2B2_135()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( globalTrue )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044CEAB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good()
{
  goodB2G1_99();
  goodB2G2_99();
  goodG2B1_135();
  return goodG2B2_135();
}

//----- (000000000044CED9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_bad()
{
  void *v0; // rsp
  void *v1; // rsp
  char *v3; // [rsp+8h] [rbp-18h]
  unsigned __int64 v4; // [rsp+10h] [rbp-10h]
  _BYTE *v5; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v5 = (_BYTE *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  v1 = alloca(32LL);
  v4 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v3 = (char *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  *v5 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_badSink(v3);
}

//----- (000000000044CF6E) ----------------------------------------------------
int goodG2B_247()
{
  void *v0; // rsp
  void *v1; // rsp
  _BYTE *v2; // rax
  char *v4; // [rsp+8h] [rbp-18h]
  _BYTE *v5; // [rsp+10h] [rbp-10h]
  unsigned __int64 v6; // [rsp+18h] [rbp-8h]

  v0 = alloca(32LL);
  v6 = 16 * (((unsigned __int64)&v4 + 7) >> 4);
  v1 = alloca(32LL);
  v2 = (_BYTE *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  v5 = v2;
  v4 = (char *)(16 * (((unsigned __int64)&v4 + 7) >> 4));
  *v2 = 0;
  return CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b_goodG2BSink(v4);
}

//----- (000000000044D003) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67_good()
{
  return goodG2B_247();
}

//----- (000000000044D013) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_badSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(a1);
}

//----- (000000000044D02D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink(_DWORD *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(a1);
}

//----- (000000000044D047) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_01_bad()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "A";
  v0 = strlen("A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printLine((const char *)dest);
}

//----- (000000000044D0D3) ----------------------------------------------------
int goodG2B_248()
{
  size_t v0; // rax
  void *v1; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  v0 = strlen("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  v4 = v0;
  v1 = alloca(16 * ((v0 + 31) / 0x10));
  dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
  return printLine(dest);
}

//----- (000000000044D15B) ----------------------------------------------------
int goodB2G_153()
{
  size_t v0; // rax
  void *v1; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)"A";
  v0 = wcslen((const wchar_t *)"A");
  v4 = v0;
  v1 = alloca(16 * ((4 * (v0 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)"A");
  return printWLine((__int64)dest);
}

//----- (000000000044D1E7) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_01_good()
{
  goodG2B_248();
  return goodB2G_153();
}

//----- (000000000044D201) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_54_bad()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_badSink("A");
}

//----- (000000000044D227) ----------------------------------------------------
int goodG2B_249()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodG2BSink("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
}

//----- (000000000044D24D) ----------------------------------------------------
int goodB2G_154()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_54b_goodB2GSink((wchar_t *)"A");
}

//----- (000000000044D273) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_54_good()
{
  goodG2B_249();
  return goodB2G_154();
}

//----- (000000000044D28D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    s = "A";
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), (const wchar_t *)s);
    result = printLine((const char *)dest);
  }
  return result;
}

//----- (000000000044D335) ----------------------------------------------------
int goodB2G1_100()
{
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    s = (wchar_t *)"A";
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v1 = wcslen(s);
  v4 = v1;
  v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
  dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
  wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
  return printWLine((__int64)dest);
}

//----- (000000000044D3E9) ----------------------------------------------------
int goodB2G2_100()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    s = (wchar_t *)"A";
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = wcslen(s);
    v4 = v1;
    v2 = alloca(16 * ((4 * (v1 + 1) + 30) / 0x10));
    dest = (wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    wcscpy((wchar_t *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printWLine((__int64)dest);
  }
  return result;
}

//----- (000000000044D491) ----------------------------------------------------
int goodG2B1_136()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}

//----- (000000000044D541) ----------------------------------------------------
int goodG2B2_136()
{
  int result; // eax
  size_t v1; // rax
  void *v2; // rsp
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v4; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    s = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
  result = globalReturnsTrue();
  if ( result )
  {
    v1 = strlen(s);
    v4 = v1;
    v2 = alloca(16 * ((v1 + 31) / 0x10));
    dest = (char *)(16 * (((unsigned __int64)&dest + 7) >> 4));
    strcpy((char *)(16 * (((unsigned __int64)&dest + 7) >> 4)), s);
    result = printLine(dest);
  }
  return result;
}

//----- (000000000044D5E5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good()
{
  goodB2G1_100();
  goodB2G2_100();
  goodG2B1_136();
  return goodG2B2_136();
}

//----- (000000000044D613) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_bad()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(32LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044D6CB) ----------------------------------------------------
int goodG2B1_137()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000044D78F) ----------------------------------------------------
int goodG2B2_137()
{
  void *v0; // rsp
  __int64 v2; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]
  unsigned int *v8; // [rsp+38h] [rbp-8h]

  v8 = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v0 = alloca(64LL);
    v8 = (unsigned int *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  for ( i = 0LL; i <= 9; ++i )
    v8[i] = *((_DWORD *)&v2 + i);
  return printIntLine(*v8);
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044D847) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09_good()
{
  goodG2B1_137();
  return goodG2B2_137();
}

//----- (000000000044D861) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_badSink(v8);
}
// 44D861: using guessed type char buf[16];

//----- (000000000044D98F) ----------------------------------------------------
int goodG2B_250()
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodG2BSink(7);
}

//----- (000000000044D9B1) ----------------------------------------------------
int goodB2G_155()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b_goodB2GSink(v8);
}
// 44D9B1: using guessed type char buf[16];

//----- (000000000044DADF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54_good()
{
  goodG2B_250();
  return goodB2G_155();
}

//----- (000000000044DAF9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044DBC1) ----------------------------------------------------
int goodB2G1_101()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044DC8F) ----------------------------------------------------
int goodB2G2_101()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044DD5D) ----------------------------------------------------
int goodG2B1_138()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044DDDF) ----------------------------------------------------
int goodG2B2_138()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044DE61) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02_good()
{
  goodB2G1_101();
  goodB2G2_101();
  goodG2B1_138();
  return goodG2B2_138();
}

//----- (000000000044DE8F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_bad()
{
  int result; // eax
  char dest; // [rsp+0h] [rbp-20h]
  char v2; // [rsp+Fh] [rbp-11h]
  const char *v3; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v3 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    memcpy(&dest, "0123456789abcdef0123456789abcde", 0x20uLL);
    v2 = 0;
    printLine(&dest);
    result = printLine(v3);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044DEE9) ----------------------------------------------------
int good1_34()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v2 = "0123456789abcdef0123456789abcde";
  printLine("0123456789abcdef0123456789abcde");
  strcpy((char *)&v1, "0123456789abcde");
  printLine((const char *)&v1);
  return printLine(v2);
}
// 467EAC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000044DF55) ----------------------------------------------------
int good2_24()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  const char *v2; // [rsp+10h] [rbp-10h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = "0123456789abcdef0123456789abcde";
    printLine("0123456789abcdef0123456789abcde");
    strcpy((char *)&v1, "0123456789abcde");
    printLine((const char *)&v1);
    result = printLine(v2);
  }
  return result;
}
// 467EA8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044DFB5) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09_good()
{
  good1_34();
  return good2_24();
}

//----- (000000000044DFCF) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticTrue_11 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticTrue_11;
  if ( staticTrue_11 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B8: using guessed type int staticTrue_11;
// 44DFCF: using guessed type char buf[16];

//----- (000000000044E12F) ----------------------------------------------------
int goodB2G1_102()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticTrue_11 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFalse_11 )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v13 < 0 || v13 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v13;
  *((_DWORD *)&v1 + v13) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821B8: using guessed type int staticTrue_11;
// 682390: using guessed type int staticFalse_11;
// 44E12F: using guessed type char buf[16];

//----- (000000000044E2A1) ----------------------------------------------------
int goodB2G2_102()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-60h]
  __int64 v2; // [rsp+8h] [rbp-58h]
  __int64 v3; // [rsp+10h] [rbp-50h]
  __int64 v4; // [rsp+18h] [rbp-48h]
  __int64 v5; // [rsp+20h] [rbp-40h]
  char buf[16]; // [rsp+30h] [rbp-30h]
  __int16 s; // [rsp+40h] [rbp-20h]
  uint16_t v8; // [rsp+42h] [rbp-1Eh]
  in_addr_t v9; // [rsp+44h] [rbp-1Ch]
  int v10; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  int i; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( staticTrue_11 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = inet_addr("127.0.0.1");
      v8 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  result = staticTrue_11;
  if ( staticTrue_11 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v13 < 0 || v13 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v13;
      *((_DWORD *)&v1 + v13) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B8: using guessed type int staticTrue_11;
// 44E2A1: using guessed type char buf[16];

//----- (000000000044E407) ----------------------------------------------------
int goodG2B1_139()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticFalse_11 )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = staticTrue_11;
  if ( staticTrue_11 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B8: using guessed type int staticTrue_11;
// 682390: using guessed type int staticFalse_11;

//----- (000000000044E4A9) ----------------------------------------------------
int goodG2B2_139()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( staticTrue_11 )
    v7 = 7;
  result = staticTrue_11;
  if ( staticTrue_11 )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821B8: using guessed type int staticTrue_11;

//----- (000000000044E53F) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05_good()
{
  goodB2G1_102();
  goodB2G2_102();
  goodG2B1_139();
  return goodG2B2_139();
}

//----- (000000000044E56D) ----------------------------------------------------
int __fastcall badSink_33(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044E5E4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return badSink_33(v7);
}
// 44E5E4: using guessed type char buf[16];

//----- (000000000044E6CC) ----------------------------------------------------
int __fastcall goodG2BSink_33(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044E743) ----------------------------------------------------
int goodG2B_251()
{
  return goodG2BSink_33(7);
}

//----- (000000000044E765) ----------------------------------------------------
int __fastcall goodB2GSink_18(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044E7E2) ----------------------------------------------------
int goodB2G_156()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return goodB2GSink_18(v7);
}
// 44E7E2: using guessed type char buf[16];

//----- (000000000044E8CA) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good()
{
  goodB2G_156();
  return goodG2B_251();
}

//----- (000000000044E8E4) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044E9C0) ----------------------------------------------------
int goodB2G1_103()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000044EAAE) ----------------------------------------------------
int goodB2G2_103()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v7 = 0;
    v8 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v10 < 0 || v10 > 9 )
    {
      result = printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      result = v10;
      *((_DWORD *)&v1 + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044EB90) ----------------------------------------------------
int goodG2B1_140()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;
// 682398: using guessed type int globalFalse;

//----- (000000000044EC32) ----------------------------------------------------
int goodG2B2_140()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( globalTrue )
    v7 = 7;
  result = globalTrue;
  if ( globalTrue )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        result = printIntLine(*((_DWORD *)&v1 + i));
    }
  }
  return result;
}
// 6821BC: using guessed type int globalTrue;

//----- (000000000044ECC8) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good()
{
  goodB2G1_103();
  goodB2G2_103();
  goodG2B1_140();
  return goodG2B2_140();
}

//----- (000000000044ECF6) ----------------------------------------------------
void CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 v5; // [rsp+0h] [rbp-50h]
  __int64 v6; // [rsp+8h] [rbp-48h]
  __int64 v7; // [rsp+10h] [rbp-40h]
  __int64 v8; // [rsp+18h] [rbp-38h]
  __int64 v9; // [rsp+20h] [rbp-30h]
  int k; // [rsp+30h] [rbp-20h]
  int v11; // [rsp+34h] [rbp-1Ch]
  int j; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v11 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v11 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    v5 = 0LL;
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    if ( v11 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)&v5 + v11) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v5 + k));
    }
  }
}

//----- (000000000044EDE6) ----------------------------------------------------
void goodB2G_157()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 v5; // [rsp+0h] [rbp-50h]
  __int64 v6; // [rsp+8h] [rbp-48h]
  __int64 v7; // [rsp+10h] [rbp-40h]
  __int64 v8; // [rsp+18h] [rbp-38h]
  __int64 v9; // [rsp+20h] [rbp-30h]
  int k; // [rsp+30h] [rbp-20h]
  int v11; // [rsp+34h] [rbp-1Ch]
  int j; // [rsp+38h] [rbp-18h]
  int i; // [rsp+3Ch] [rbp-14h]

  v11 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v11 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    v5 = 0LL;
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    if ( v11 < 0 || v11 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)&v5 + v11) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)&v5 + k));
    }
  }
}

//----- (000000000044EEDC) ----------------------------------------------------
int goodG2B_252()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+8h] [rbp-38h]
  __int64 v3; // [rsp+10h] [rbp-30h]
  __int64 v4; // [rsp+18h] [rbp-28h]
  __int64 v5; // [rsp+20h] [rbp-20h]
  int k; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
    v7 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0LL;
    v4 = 0LL;
    v5 = 0LL;
    if ( v7 < 0 )
    {
      result = printLine("ERROR: Array index is negative.");
    }
    else
    {
      result = v7;
      *((_DWORD *)&v1 + v7) = 1;
      for ( k = 0; k <= 9; ++k )
        result = printIntLine(*((_DWORD *)&v1 + k));
    }
  }
  return result;
}

//----- (000000000044EF84) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17_good()
{
  goodB2G_157();
  return goodG2B_252();
}

//----- (000000000044EF9E) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_badSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F01F) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodG2BSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F0A0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b_goodB2GSink(int *a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *a1;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F127) ----------------------------------------------------
int __fastcall badSink_34(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F19E) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_34)(v2);
}

//----- (000000000044F211) ----------------------------------------------------
int __fastcall goodG2BSink_34(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F288) ----------------------------------------------------
int goodG2B_253()
{
  return goodG2BSink_34(7);
}

//----- (000000000044F2B3) ----------------------------------------------------
int __fastcall goodB2GSink_19(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F330) ----------------------------------------------------
__int64 goodB2G_158()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_19)(v2);
}

//----- (000000000044F3A3) ----------------------------------------------------
__int64 CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44_good()
{
  goodG2B_253();
  return goodB2G_158();
}

//----- (000000000044F3BD) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_badSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F434) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodG2BSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F4AB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b_goodB2GSink(int a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( a1 < 0 || a1 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = a1;
  *((_DWORD *)&v2 + a1) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044F528) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(32LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044F5CB) ----------------------------------------------------
int goodG2B1_141()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044F67A) ----------------------------------------------------
int goodG2B2_141()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v3; // [rsp+8h] [rbp-38h]
  __int64 v4; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    v0 = alloca(64LL);
    dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  }
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(dest, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}
// 6821C0: using guessed type int globalFive;

//----- (000000000044F71D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14_good()
{
  goodG2B1_141();
  return goodG2B2_141();
}

//----- (000000000044F737) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_badSink((_DWORD *)(16
                                                                                 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044F789) ----------------------------------------------------
int goodG2B_254()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink((_DWORD *)(16
                                                                                     * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044F7DB) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52_good()
{
  return goodG2B_254();
}

//----- (000000000044F7EB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_badSink(a1);
}

//----- (000000000044F802) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodG2BSink(a1);
}

//----- (000000000044F819) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d_goodB2GSink(a1);
}

//----- (000000000044F830) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_bad()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  void *dest; // [rsp+30h] [rbp-30h]
  unsigned __int64 v9; // [rsp+38h] [rbp-28h]
  unsigned __int64 *v10; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v11; // [rsp+48h] [rbp-18h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(32LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044F8F9) ----------------------------------------------------
int goodG2B_255()
{
  void *v0; // rsp
  __int64 src; // [rsp+0h] [rbp-60h]
  __int64 v3; // [rsp+8h] [rbp-58h]
  __int64 v4; // [rsp+10h] [rbp-50h]
  __int64 v5; // [rsp+18h] [rbp-48h]
  __int64 v6; // [rsp+20h] [rbp-40h]
  unsigned __int64 v7; // [rsp+28h] [rbp-38h]
  void *dest; // [rsp+30h] [rbp-30h]
  unsigned __int64 v9; // [rsp+38h] [rbp-28h]
  unsigned __int64 *v10; // [rsp+40h] [rbp-20h]
  unsigned __int64 *v11; // [rsp+48h] [rbp-18h]

  v11 = &v7;
  v10 = &v7;
  v0 = alloca(64LL);
  v9 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  v7 = 16 * (((unsigned __int64)&v3 + 7) >> 4);
  dest = (void *)(16 * (((unsigned __int64)&v3 + 7) >> 4));
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy((void *)(16 * (((unsigned __int64)&v3 + 7) >> 4)), &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044F9C2) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_good()
{
  return goodG2B_255();
}

//----- (000000000044F9D2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000044FA2D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memmove(a1, &src, 0x28uLL);
  return printIntLine(*a1);
}

//----- (000000000044FA88) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044FB50) ----------------------------------------------------
int goodG2B_256()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = 7;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0x100000000LL;
  v5 = 0LL;
  result = 7;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044FBD2) ----------------------------------------------------
int goodB2G_159()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-50h]
  __int64 v2; // [rsp+8h] [rbp-48h]
  __int64 v3; // [rsp+10h] [rbp-40h]
  __int64 v4; // [rsp+18h] [rbp-38h]
  __int64 v5; // [rsp+20h] [rbp-30h]
  char s[8]; // [rsp+30h] [rbp-20h]
  int v7; // [rsp+38h] [rbp-18h]
  __int16 v8; // [rsp+3Ch] [rbp-14h]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  *(_QWORD *)s = 0LL;
  v7 = 0;
  v8 = 0;
  if ( fgets(s, 14, stdin) )
    v10 = atoi(s);
  else
    printLine("fgets() failed.");
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  if ( v10 < 0 || v10 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v10;
  *((_DWORD *)&v1 + v10) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v1 + i));
  return result;
}

//----- (000000000044FCA0) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good()
{
  goodG2B_256();
  return goodB2G_159();
}

//----- (000000000044FCBA) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_badSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044FD3C) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 )
    return printLine("ERROR: Array index is negative.");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044FDBE) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = *(_DWORD *)(a1 + 8);
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  if ( v7 < 0 || v7 > 9 )
    return printLine("ERROR: Array index is out-of-bounds");
  result = v7;
  *((_DWORD *)&v2 + v7) = 1;
  for ( i = 0; i <= 9; ++i )
    result = printIntLine(*((_DWORD *)&v2 + i));
  return result;
}

//----- (000000000044FE46) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_badSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_badSink(a1);
}

//----- (000000000044FE60) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(char *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(a1);
}

//----- (000000000044FE7A) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(wchar_t *a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(a1);
}

//----- (000000000044FE94) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_badSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_badSink(a1);
}

//----- (000000000044FEAB) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodG2BSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodG2BSink(a1);
}

//----- (000000000044FEC2) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c_goodB2GSink(int a1)
{
  return CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d_goodB2GSink(a1);
}

//----- (000000000044FED9) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_bad()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(32LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_badSink((_DWORD *)(16 * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044FF2B) ----------------------------------------------------
int goodG2B_257()
{
  void *v0; // rsp
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v0 = alloca(64LL);
  v2 = 16 * (((unsigned __int64)&v2 + 7) >> 4);
  return CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b_goodG2BSink((_DWORD *)(16
                                                                                    * (((unsigned __int64)&v2 + 7) >> 4)));
}

//----- (000000000044FF7D) ----------------------------------------------------
int CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52_good()
{
  return goodG2B_257();
}

//----- (000000000044FF8D) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_badSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (000000000044FFF0) ----------------------------------------------------
int __fastcall CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b_goodG2BSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  __int64 v5; // [rsp+28h] [rbp-18h]
  __int64 v6; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  memcpy(a1, &src, 0x28uLL);
  return printIntLine(*(_DWORD *)dest);
}

//----- (0000000000450053) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (0000000000450074) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000045009F) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (00000000004500C0) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (00000000004500E5) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000045010B) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000045012F) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000450153) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (0000000000450177) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000045019B) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (00000000004501CB) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (00000000004501EC) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (0000000000450210) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000045023B) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (0000000000450267) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (00000000004502BE) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400E00: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000450397) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400F30: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000045044B) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (0000000000450456) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000450461) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (0000000000450477) ----------------------------------------------------
void good1_35()
{
  ;
}

//----- (000000000045047D) ----------------------------------------------------
void good2_25()
{
  ;
}

//----- (0000000000450483) ----------------------------------------------------
void good3()
{
  ;
}

//----- (0000000000450489) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000045048F) ----------------------------------------------------
void good5()
{
  ;
}

//----- (0000000000450495) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000045049B) ----------------------------------------------------
void good7()
{
  ;
}

//----- (00000000004504A1) ----------------------------------------------------
void good8()
{
  ;
}

//----- (00000000004504A7) ----------------------------------------------------
void good9()
{
  ;
}

//----- (00000000004504AD) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (00000000004504B3) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (00000000004504B9) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (00000000004504BF) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (00000000004504C5) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (00000000004504CB) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (00000000004504D1) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (00000000004504D7) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (00000000004504DD) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (00000000004504E3) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (0000000000450516) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (00000000004505BA) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (00000000004505EE) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000045060D) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (0000000000450682) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000045069C) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (00000000004506B6) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (00000000004506E0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 681DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 681DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (0000000000450754) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 2585 function(s) have been successfully decompiled
