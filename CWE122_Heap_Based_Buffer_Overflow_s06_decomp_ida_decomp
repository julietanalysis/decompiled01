/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400E00();
// wchar_t *wcscpy(wchar_t *dest, const wchar_t *src);
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// size_t wcslen(const wchar_t *s);
// int close(int fd);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void __noreturn exit(int status);
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// size_t strlen(const char *s);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int atoi(const char *nptr);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
// void *memmove(void *dest, const void *src, size_t n);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// char *strcpy(char *dest, const char *src);
// void srand(unsigned int seed);
// void *calloc(size_t nmemb, size_t size);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// void *memcpy(void *dest, const void *src, size_t n);
// time_t time(time_t *timer);
// wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n);
// in_addr_t inet_addr(const char *cp);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_bad();
void goodG2B();
void goodB2G();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_bad();
void goodG2B_0();
void goodB2G_0();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_bad();
void goodB2G1();
void goodB2G2();
void goodG2B1();
void goodG2B2();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad();
void goodG2B1_0();
void goodG2B2_0();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_good();
void __fastcall badSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad();
void __fastcall goodG2BSink(int a1);
void goodG2B_1();
void __fastcall goodB2GSink(int a1);
void goodB2G_1();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_bad();
void goodB2G1_0();
void goodB2G2_0();
void goodG2B1_1();
void goodG2B2_1();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_bad();
void goodG2B_2();
void goodB2G_2();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_good();
void badSink_0();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_bad();
void goodG2BSink_0();
void goodG2B_3();
void goodB2GSink_0();
void goodB2G_3();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_bad();
void goodG2B_4();
void goodB2G_4();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_good();
void *badSource();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_bad();
void *goodG2BSource();
void goodG2B_5();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad();
void goodB2G1_1();
void goodB2G2_1();
void goodG2B1_2();
void goodG2B2_2();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_bad();
void goodB2G1_2();
void goodB2G2_2();
void goodG2B1_3();
void goodG2B2_3();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_good();
void *__fastcall badSource_0(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad();
void *__fastcall goodG2B1Source(void *a1);
void goodG2B1_4();
void *__fastcall goodG2B2Source(void *a1);
void goodG2B2_4();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_bad();
void goodG2B_6();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad();
void goodG2B_7();
void goodB2G_5();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_bad();
void goodG2B_8();
void goodB2G_6();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodB2GSink(__int64 a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad();
void goodG2B_9();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad();
void goodG2B1_5();
void goodG2B2_5();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(const wchar_t *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad();
void goodG2B1_6();
void goodG2B2_6();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad();
__int64 goodG2B_10();
__int64 goodB2G_7();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_badSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_bad();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(void *a1);
void goodG2B_11();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_bad();
void goodG2B_12();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_good();
__int64 badSource_1();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_bad();
__int64 goodG2BSource_0();
void goodG2B_13();
__int64 goodB2GSource();
void goodB2G_8();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_bad();
void goodG2B_14();
void goodB2G_9();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad();
void goodG2B_15();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad();
void goodB2G1_3();
void goodB2G2_3();
void goodG2B1_7();
void goodG2B2_7();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_bad();
void goodB2G1_4();
void goodB2G2_4();
void goodG2B_16();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_goodG2BSink(__int64 a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink();
void badSink_1();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_bad();
void goodG2BSink_1();
void goodG2B_17();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad();
void goodB2G1_5();
void goodB2G2_5();
void goodG2B1_8();
void goodG2B2_8();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad();
void goodG2B1_9();
void goodG2B2_9();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_bad();
void goodG2B_18();
void goodB2G_10();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_bad();
void goodG2B_19();
void goodB2G_11();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_10_bad();
void goodB2G1_6();
void goodB2G2_6();
void goodG2B1_10();
void goodG2B2_10();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_10_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad();
void goodG2B1_11();
void goodG2B2_11();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_bad();
void goodB2G1_7();
void goodB2G2_7();
void goodG2B1_12();
void goodG2B2_12();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_bad();
void goodB2G1_8();
void goodB2G2_8();
void goodG2B1_13();
void goodG2B2_13();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_good();
void __fastcall badSink_2(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_bad();
void __fastcall goodG2BSink_2(int a1);
void goodG2B_20();
void __fastcall goodB2GSink_1(int a1);
void goodB2G_12();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_bad();
void goodG2B_21();
void goodB2G_13();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad();
void goodB2G_14();
void goodG2B_22();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodB2GSink(int a1);
void *badSource_2();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad();
void *goodG2BSource_1();
void goodG2B_23();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad();
void goodG2B1_14();
void goodG2B2_14();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad();
void goodG2B1_15();
void goodG2B2_15();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad();
void goodG2B_24();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_goodG2BSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_bad();
void goodG2B_25();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_bad();
void goodG2B_26();
void goodB2G_15();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_bad();
void goodB2G1_9();
void goodB2G2_9();
void goodG2B1_16();
void goodG2B2_16();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad();
void goodG2B_27();
void goodB2G_16();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodB2GSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_bad();
void goodG2B_28();
void goodB2G_17();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_good();
void __fastcall badSink_3(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_bad();
void __fastcall goodG2BSink_3(int a1);
void goodG2B_29();
void __fastcall goodB2GSink_2(int a1);
void goodB2G_18();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_bad();
void goodB2G_19();
void goodG2B_30();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad();
void goodG2B_31();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_bad();
void goodB2G1_10();
void goodB2G2_10();
void goodG2B1_17();
void goodG2B2_17();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad();
void goodG2B1_18();
void goodG2B2_18();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_goodG2BSink(void **a1);
__int64 __fastcall badSource_3(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_bad();
__int64 goodG2BSource_2();
void goodG2B_32();
__int64 __fastcall goodB2GSource_0(unsigned int a1);
void goodB2G_20();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_22_bad();
void goodB2G1_11();
void goodB2G2_11();
void goodG2B_33();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_bad();
void goodG2B_34();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad();
void goodG2B1_19();
void goodG2B2_19();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad();
void goodB2G1_12();
void goodB2G2_12();
void goodG2B1_20();
void goodG2B2_20();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_bad();
void goodB2G1_13();
void goodB2G2_13();
void goodG2B1_21();
void goodG2B2_21();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_bad();
void goodB2G1_14();
void goodB2G2_14();
void goodG2B1_22();
void goodG2B2_22();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_bad();
void goodG2B_35();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_bad();
void goodB2G1_15();
void goodB2G2_15();
void goodG2B1_23();
void goodG2B2_23();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_good();
void __fastcall badSink_4(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_bad();
void __fastcall goodG2BSink_4(int a1);
void goodG2B_36();
void __fastcall goodB2GSink_3(int a1);
void goodB2G_21();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_bad();
void goodB2G1_16();
void goodB2G2_16();
void goodG2B1_24();
void goodG2B2_24();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad();
void goodB2G_22();
void goodG2B_37();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_bad();
void goodB2G1_17();
void goodB2G2_17();
void goodG2B1_25();
void goodG2B2_25();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodB2GSink(int *a1);
void __fastcall badSink_5(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad();
void __fastcall goodG2BSink_5(int a1);
void goodG2B_38();
void __fastcall goodB2GSink_4(int a1);
__int64 goodB2G_23();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodB2GSink(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_bad();
void goodG2B_39();
__int64 goodB2G_24();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_51_bad();
void goodG2B_40();
void goodB2G_25();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_51_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_bad();
void goodG2B_41();
void goodB2G_26();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad();
void goodG2B_42();
void goodB2G_27();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad();
void goodG2B_43();
void goodB2G_28();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad();
void goodB2G_29();
void goodG2B_44();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good();
void *__fastcall badSource_4(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_bad();
void *__fastcall goodG2B1Source_0(void *a1);
void goodG2B1_26();
void *__fastcall goodG2B2Source_0(void *a1);
void goodG2B2_26();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_bad();
void goodG2B_45();
void goodB2G_30();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_13_bad();
void goodB2G1_18();
void goodB2G2_18();
void goodG2B1_27();
void goodG2B2_27();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_13_good();
void __fastcall badSink_6(const char *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad();
void __fastcall goodB2G1Sink(const wchar_t *a1);
void goodB2G1_19();
void __fastcall goodB2G2Sink(const wchar_t *a1);
void goodB2G2_19();
void __fastcall goodG2BSink_6(const char *a1);
void goodG2B_46();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_03_bad();
void goodB2G1_20();
void goodB2G2_20();
void goodG2B1_28();
void goodG2B2_28();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_bad();
void goodG2B_47();
void goodB2G_31();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_goodG2BSink(void **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad();
void goodG2B_48();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_bad();
void goodB2G1_21();
void goodB2G2_21();
void goodG2B1_29();
void goodG2B2_29();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_good();
void __fastcall badSink_7(void *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_bad();
void __fastcall goodG2BSink_7(void *a1);
__int64 goodG2B_49();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_bad();
void goodG2B_50();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_bad();
void goodG2B_51();
void goodB2G_32();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_bad();
void goodG2B_52();
void goodB2G_33();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodB2GSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_12_bad();
void goodB2G_34();
void goodG2B_53();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_12_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad();
void goodB2G1_22();
void goodB2G2_22();
void goodG2B1_30();
void goodG2B2_30();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_good();
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_badSource();
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_goodG2BSource();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_bad();
void goodB2G1_23();
void goodB2G2_23();
void goodG2B1_31();
void goodG2B2_31();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_bad();
void goodG2B_54();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodB2GSink(int a1);
__int64 __fastcall badSource_5(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad();
__int64 goodG2BSource_3();
void goodG2B_55();
__int64 __fastcall goodB2GSource_1(unsigned int a1);
void goodB2G_35();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad();
void goodG2B1_32();
void goodG2B2_32();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_bad();
void goodG2B_56();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad();
void goodB2G_36();
void goodG2B_57();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad();
void goodG2B1_33();
void goodG2B2_33();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad();
void goodB2G_37();
void goodG2B_58();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(_DWORD *a1);
void __fastcall badSink_8(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_bad();
void __fastcall goodG2BSink_8(int a1);
void goodG2B_59();
void __fastcall goodB2GSink_5(int a1);
void goodB2G_38();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_good();
void *badSource_6();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_bad();
void *goodG2BSource_4();
void goodG2B_60();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad();
void goodB2G1_24();
void goodB2G2_24();
void goodG2B1_34();
void goodG2B2_34();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_02_bad();
void goodB2G1_25();
void goodB2G2_25();
void goodG2B1_35();
void goodG2B2_35();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_bad();
void goodG2B_61();
void goodB2G_39();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_bad();
__int64 goodG2B_62();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_bad();
void goodB2G1_26();
void goodB2G2_26();
void goodG2B1_36();
void goodG2B2_36();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_badSource();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodG2BSource();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodB2GSource();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_bad();
void goodG2B_63();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad();
void goodG2B1_37();
void goodG2B2_37();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad();
void goodG2B1_38();
void goodG2B2_38();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_bad();
void goodG2B_64();
void goodB2G_40();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_badSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_bad();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_goodG2BSink(char *a1);
void goodG2B_65();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad();
void goodG2B_66();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad();
void goodG2B_67();
void goodB2G_41();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad();
void goodG2B1_39();
void goodG2B2_39();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_good();
void __fastcall badSink_9(char *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad();
void __fastcall goodG2BSink_9(char *a1);
__int64 goodG2B_68();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad();
void goodG2B_69();
void goodB2G_42();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodB2GSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad();
void goodG2B_70();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_bad();
void goodG2B_71();
void goodB2G_43();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_good();
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badSource(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Source(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Source(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad();
void goodG2B1_40();
void goodG2B2_40();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink(__int64 a1);
void badSink_10();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad();
void goodG2BSink_10();
void goodG2B_72();
void goodB2GSink_6();
void goodB2G_44();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_bad();
void goodB2G1_27();
void goodB2G2_27();
void goodG2B1_41();
void goodG2B2_41();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_good();
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource();
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_goodG2BSource();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_bad();
void goodB2G1_28();
void goodB2G2_28();
void goodG2B1_42();
void goodG2B2_42();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_09_bad();
void goodB2G1_29();
void goodB2G2_29();
void goodG2B1_43();
void goodG2B2_43();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_09_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_bad();
void goodG2B_73();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodB2GSink(const wchar_t *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_bad();
void goodG2B_74();
__int64 goodB2G_45();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_bad();
void goodG2B_75();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_good();
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badSource(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Source(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Source(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_bad();
void goodG2B_76();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_bad();
void goodG2B_77();
void goodB2G_46();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodB2GSink(const wchar_t *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad();
void goodG2B_78();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad();
void goodG2B1_44();
void goodG2B2_44();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_bad();
void goodB2G1_30();
void goodB2G2_30();
void goodG2B1_45();
void goodG2B2_45();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_bad();
void goodB2G_47();
void goodG2B_79();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad();
void goodG2B_80();
void goodB2G_48();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_bad();
void goodG2B_81();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_bad();
void goodG2B_82();
void goodB2G_49();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_good();
__int64 badSource_7();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad();
__int64 goodG2BSource_5();
void goodG2B_83();
__int64 goodB2GSource_2();
void goodB2G_50();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_bad();
void goodB2G1_31();
void goodB2G2_31();
void goodG2B1_46();
void goodG2B2_46();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad();
void goodG2B_84();
void goodB2G_51();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_54_bad();
void goodG2B_85();
void goodB2G_52();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_54_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad();
void goodG2B1_47();
void goodG2B2_47();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad();
void goodG2B1_48();
void goodG2B2_48();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_good();
void *__fastcall badSource_8(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_bad();
void *__fastcall goodG2B1Source_1(void *a1);
void goodG2B1_49();
void *__fastcall goodG2B2Source_1(void *a1);
void goodG2B2_49();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad();
void goodG2B1_50();
void goodG2B2_50();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodB2GSink(int *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_bad();
__int64 goodG2B_86();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_badSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_bad();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_goodG2BSink(char *a1);
void goodG2B_87();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad();
void goodG2B_88();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad();
void goodG2B_89();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_bad();
void goodB2G1_32();
void goodB2G2_32();
void goodG2B1_51();
void goodG2B2_51();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_goodG2BSink(void *a1);
void __fastcall badSink_11(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad();
void __fastcall goodG2BSink_11(int a1);
void goodG2B_90();
void __fastcall goodB2GSink_7(int a1);
void goodB2G_53();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodB2GSink();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad();
void goodB2G_54();
void goodG2B_91();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_bad();
void goodB2G1_33();
void goodB2G2_33();
void goodG2B1_52();
void goodG2B2_52();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_good();
void __fastcall badSink_12(const char *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad();
void __fastcall goodG2BSink_12(const char *a1);
__int64 goodG2B_92();
void __fastcall goodB2GSink_8(const wchar_t *a1);
__int64 goodB2G_55();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_bad();
void goodB2G1_34();
void goodB2G2_34();
void goodG2B1_53();
void goodG2B2_53();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_bad();
void goodB2G1_35();
void goodB2G2_35();
void goodG2B_93();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_bad();
void goodB2G1_36();
void goodB2G2_36();
void goodG2B1_54();
void goodG2B2_54();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_goodG2BSink();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_bad();
void goodG2B_94();
void goodB2G_56();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_bad();
void goodG2B_95();
void goodB2G_57();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_bad();
void goodG2B_96();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad();
void goodG2B1_55();
void goodG2B2_55();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_good();
void __fastcall badSink_13(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad();
void __fastcall goodG2BSink_13(int a1);
void goodG2B_97();
void __fastcall goodB2GSink_9(int a1);
__int64 goodB2G_58();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad();
void goodB2G1_37();
void goodB2G2_37();
void goodG2B1_56();
void goodG2B2_56();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodB2GSink(int a1);
wchar_t *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_badSource();
_BYTE *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodG2BSource();
wchar_t *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodB2GSource();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad();
void goodG2B1_57();
void goodG2B2_57();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_bad();
void goodG2B_98();
void goodB2G_59();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_bad();
void goodG2B_99();
void goodB2G_60();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad();
void goodG2B1_58();
void goodG2B2_58();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad();
void goodG2B1_59();
void goodG2B2_59();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad();
void goodG2B1_60();
void goodG2B2_60();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_bad();
void goodG2B_100();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_bad();
void goodG2B_101();
void goodB2G_61();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_bad();
void goodG2B_102();
void goodB2G_62();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_bad();
void goodG2B_103();
void goodB2G_63();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_61_bad();
void goodG2B_104();
void goodB2G_64();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_61_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad();
void goodG2B1_61();
void goodG2B2_61();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_badSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_bad();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(_DWORD *a1);
void goodG2B_105();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_good();
void badSink_14();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_bad();
void goodG2BSink_14();
void goodG2B_106();
void goodB2GSink_10();
void goodB2G_65();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_bad();
void goodG2B_107();
void goodB2G_66();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_good();
__int64 staticReturnsTrue_6();
__int64 staticReturnsFalse_6();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad();
void goodB2G1_38();
void goodB2G2_38();
void goodG2B1_62();
void goodG2B2_62();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_bad();
void goodG2B_108();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_bad();
void goodB2G1_39();
void goodB2G2_39();
void goodG2B1_63();
void goodG2B2_63();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad();
void goodB2G1_40();
void goodB2G2_40();
void goodG2B1_64();
void goodG2B2_64();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_07_bad();
void goodB2G1_41();
void goodB2G2_41();
void goodG2B1_65();
void goodG2B2_65();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_07_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad();
void goodG2B_109();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad();
void goodG2B_110();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodB2GSink(__int64 a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_bad();
void goodB2G1_42();
void goodB2G2_42();
void goodG2B1_66();
void goodG2B2_66();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodB2GSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_bad();
void goodG2B_111();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_good();
__int64 __fastcall badSource_9(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad();
__int64 goodG2BSource_6();
void goodG2B_112();
__int64 __fastcall goodB2GSource_3(unsigned int a1);
void goodB2G_67();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodB2GSink(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_bad();
void goodG2B_113();
__int64 goodB2G_68();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad();
void goodG2B1_67();
void goodG2B2_67();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad();
void goodB2G1_43();
void goodB2G2_43();
void goodG2B1_68();
void goodG2B2_68();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_bad();
void goodG2B_114();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad();
void goodB2G1_44();
void goodB2G2_44();
void goodG2B1_69();
void goodG2B2_69();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good();
void __fastcall badSink_15(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad();
void __fastcall goodG2BSink_15(int a1);
void goodG2B_115();
void __fastcall goodB2GSink_11(int a1);
void goodB2G_69();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_bad();
void goodG2B_116();
void goodB2G_70();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_bad();
void goodG2B_117();
void goodB2G_71();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad();
void goodB2G_72();
void goodG2B_118();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad();
void goodG2B1_70();
void goodG2B2_70();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_bad();
void goodG2B_119();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad();
void goodG2B_120();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodB2GSink(__int64 a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_bad();
__int64 goodG2B_121();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_good();
void __fastcall badSink_16(_DWORD *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_bad();
void __fastcall goodG2BSink_16(_DWORD *a1);
__int64 goodG2B_122();
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_bad();
void goodG2B_123();
void goodB2G_73();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_bad();
void goodG2B_124();
void goodB2G_74();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_bad();
void goodG2B_125();
void goodB2G_75();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_bad();
void goodG2B_126();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_bad();
void goodG2B_127();
__int64 goodB2G_76();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodB2GSink(int a1);
void badSink_17();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_bad();
void goodG2BSink_17();
void goodG2B_128();
void goodB2GSink_12();
void goodB2G_77();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_bad();
void goodG2B_129();
void goodB2G_78();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_bad();
void goodG2B_130();
void goodB2G_79();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_bad();
void goodB2G1_45();
void goodB2G2_45();
void goodG2B1_71();
void goodG2B2_71();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_bad();
void goodG2B_131();
void goodB2G_80();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_good();
void badSink_18();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_bad();
void goodG2BSink_18();
void goodG2B_132();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad();
void goodG2B1_72();
void goodG2B2_72();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_06_bad();
void goodB2G1_46();
void goodB2G2_46();
void goodG2B1_73();
void goodG2B2_73();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_06_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodB2GSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_goodG2BSink(void *a1);
wchar_t *badSource_10();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad();
_BYTE *goodG2BSource_7();
void goodG2B_133();
wchar_t *goodB2GSource_4();
void goodB2G_81();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_bad();
void goodG2B_134();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad();
void goodG2B1_74();
void goodG2B2_74();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_bad();
void goodB2G1_47();
void goodB2G2_47();
void goodG2B1_75();
void goodG2B2_75();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_bad();
void goodG2B_135();
void goodB2G_82();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodB2GSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_bad();
void goodB2G1_48();
void goodB2G2_48();
void goodG2B1_76();
void goodG2B2_76();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_bad();
__int64 goodG2B_136();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_badSink(char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_goodG2BSink(char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad();
void goodB2G1_49();
void goodB2G2_49();
void goodG2B1_77();
void goodG2B2_77();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_good();
void __fastcall badSink_19(const char *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad();
void __fastcall goodG2BSink_19(const char *a1);
void goodG2B_137();
void __fastcall goodB2GSink_13(const wchar_t *a1);
void goodB2G_83();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_bad();
void goodG2B_138();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_bad();
void goodB2G1_50();
void goodB2G2_50();
void goodG2B1_78();
void goodG2B2_78();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_bad();
void goodG2B_139();
void goodB2G_84();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_bad();
void goodG2B_140();
void goodB2G_85();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_bad();
void goodG2B_141();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_bad();
void goodG2B_142();
void goodB2G_86();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_bad();
void goodG2B_143();
void goodB2G_87();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad();
void goodG2B_144();
void goodB2G_88();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad();
void goodG2B1_79();
void goodG2B2_79();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_bad();
void goodG2B_145();
void goodB2G_89();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_bad();
void goodB2G_90();
void goodG2B_146();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad();
void goodG2B_147();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad();
void goodG2B1_80();
void goodG2B2_80();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_bad();
void goodB2G1_51();
void goodB2G2_51();
void goodG2B1_81();
void goodG2B2_81();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_bad();
void goodG2B_148();
void goodB2G_91();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_bad();
void goodG2B_149();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_bad();
void goodG2B_150();
void goodB2G_92();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_bad();
void goodB2G1_52();
void goodB2G2_52();
void goodG2B_151();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_bad();
void goodG2B_152();
void goodB2G_93();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad();
void goodG2B1_82();
void goodG2B2_82();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_bad();
void goodG2B_153();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(const wchar_t *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_bad();
void goodG2B_154();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_bad();
void goodB2G_94();
void goodG2B_155();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_bad();
void goodB2G1_53();
void goodB2G2_53();
void goodG2B1_83();
void goodG2B2_83();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_bad();
void goodG2B_156();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(const wchar_t *a1);
void __fastcall badSink_20(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_bad();
void __fastcall goodG2BSink_20(int a1);
void goodG2B_157();
void __fastcall goodB2GSink_14(int a1);
__int64 goodB2G_95();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad();
void goodB2G1_54();
void goodB2G2_54();
void goodG2B1_84();
void goodG2B2_84();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad();
void goodG2B_158();
void goodB2G_96();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad();
void goodG2B1_85();
void goodG2B2_85();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_bad();
void goodB2G_97();
void goodG2B_159();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad();
void goodG2B_160();
void goodB2G_98();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad();
void goodG2B_161();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodB2GSink(int a1);
void badSink_21();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_bad();
void goodG2BSink_21();
void goodG2B_162();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_good();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_badSource(unsigned int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodG2BSource();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodB2GSource(unsigned int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_bad();
void goodB2G1_55();
void goodB2G2_55();
void goodG2B1_86();
void goodG2B2_86();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_bad();
void goodG2B1_87();
void goodG2B2_87();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_bad();
void goodB2G1_56();
void goodB2G2_56();
void goodG2B1_88();
void goodG2B2_88();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad();
void goodG2B_163();
void goodB2G_99();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_bad();
void goodG2B_164();
void goodB2G_100();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_badSink(char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_goodG2BSink(char **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_bad();
void goodG2B_165();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_bad();
void goodB2G_101();
void goodG2B_166();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_bad();
void goodG2B_167();
void goodB2G_102();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_bad();
void goodG2B_168();
void goodB2G_103();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_bad();
void goodG2B_169();
void goodB2G_104();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(_DWORD *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(_DWORD *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad();
void goodG2B_170();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good();
void badSink_22();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_bad();
void goodG2BSink_22();
void goodG2B_171();
void goodB2GSink_15();
void goodB2G_105();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_goodG2BSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(__int64 a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_bad();
void goodG2B_172();
void goodB2G_106();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad();
void goodB2G_107();
void goodG2B_173();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad();
void goodG2B1_89();
void goodG2B2_89();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_bad();
void goodB2G1_57();
void goodB2G2_57();
void goodG2B1_90();
void goodG2B2_90();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad();
void goodG2B_174();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_bad();
void goodG2B_175();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_bad();
void goodG2B_176();
void goodB2G_108();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_bad();
void goodG2B_177();
void goodB2G_109();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_bad();
void goodG2B_178();
void goodB2G_110();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad();
void goodG2B_179();
void goodB2G_111();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_bad();
void goodG2B_180();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_bad();
void goodB2G1_58();
void goodB2G2_58();
void goodG2B1_91();
void goodG2B2_91();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_bad();
void goodB2G1_59();
void goodB2G2_59();
void goodG2B1_92();
void goodG2B2_92();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad();
void goodG2B1_93();
void goodG2B2_93();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_good();
void badSink_23();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_bad();
void goodG2BSink_23();
void goodG2B_181();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_good();
void __fastcall badSink_24(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_bad();
void __fastcall goodB2G1Sink_0(int a1);
void goodB2G1_60();
void __fastcall goodB2G2Sink_0(int a1);
void goodB2G2_60();
void __fastcall goodG2BSink_24(int a1);
void goodG2B_182();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad();
void goodG2B1_94();
void goodG2B2_94();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad();
void goodG2B_183();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_bad();
void goodB2G_112();
void goodG2B_184();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_bad();
void goodB2G1_61();
void goodB2G2_61();
void goodG2B1_95();
void goodG2B2_95();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodB2GSink(int a1);
void __fastcall badSink_25(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_bad();
void __fastcall goodG2BSink_25(int a1);
void goodG2B_185();
void __fastcall goodB2GSink_16(int a1);
__int64 goodB2G_113();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_14_bad();
void goodB2G1_62();
void goodB2G2_62();
void goodG2B1_96();
void goodG2B2_96();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_14_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_32_bad();
void goodG2B_186();
void goodB2G_114();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad();
void goodG2B_187();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_good();
void __fastcall badSink_26(char *a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_bad();
void __fastcall goodG2BSink_26(char *a1);
__int64 goodG2B_188();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_bad();
void goodG2B_189();
void goodB2G_115();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_bad();
void goodB2G1_63();
void goodB2G2_63();
void goodG2B1_97();
void goodG2B2_97();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_bad();
void goodG2B_190();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_bad();
void goodG2B_191();
void goodB2G_116();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_good();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_badSource(unsigned int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodG2BSource();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodB2GSource(unsigned int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_goodG2BSink(void **a1);
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource();
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_goodG2BSource();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad();
void goodB2G1_64();
void goodB2G2_64();
void goodG2B1_98();
void goodG2B2_98();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad();
void goodG2B_192();
void goodB2G_117();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_bad();
void goodB2G1_65();
void goodB2G2_65();
void goodG2B1_99();
void goodG2B2_99();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(int *a1);
__int64 staticReturnsTrue_7();
__int64 staticReturnsFalse_7();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_bad();
void goodB2G1_66();
void goodB2G2_66();
void goodG2B1_100();
void goodG2B2_100();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad();
void goodG2B1_101();
void goodG2B2_101();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_bad();
void goodG2B_193();
void goodB2G_118();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_bad();
void goodG2B_194();
void goodB2G_119();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_67_bad();
void goodG2B_195();
void goodB2G_120();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_67_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad();
void goodB2G_121();
void goodG2B_196();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad();
void goodB2G_122();
void goodG2B_197();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_bad();
void goodG2B_198();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad();
void goodG2B1_102();
void goodG2B2_102();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_bad();
void goodG2B_199();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(const wchar_t *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(const wchar_t *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(const char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad();
void goodB2G1_67();
void goodB2G2_67();
void goodG2B1_103();
void goodG2B2_103();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink(void **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_bad();
void goodG2B_200();
void goodB2G_123();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_bad();
void goodB2G1_68();
void goodB2G2_68();
void goodG2B1_104();
void goodG2B2_104();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_bad();
void goodG2B_201();
void goodB2G_124();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad();
void goodG2B1_105();
void goodG2B2_105();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_53_bad();
void goodG2B_202();
void goodB2G_125();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_53_good();
void __fastcall badSink_27(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_bad();
void __fastcall goodB2G1Sink_1(int a1);
void goodB2G1_69();
void __fastcall goodB2G2Sink_1(int a1);
void goodB2G2_69();
void __fastcall goodG2BSink_27(int a1);
void goodG2B_203();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_bad();
void goodB2G1_70();
void goodB2G2_70();
void goodG2B1_106();
void goodG2B2_106();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad();
void goodG2B1_107();
void goodG2B2_107();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad();
void goodG2B_204();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_bad();
void goodG2B_205();
void goodB2G_126();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_bad();
void goodB2G1_71();
void goodB2G2_71();
void goodG2B1_108();
void goodG2B2_108();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad();
void goodB2G_127();
void goodG2B_206();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_bad();
void goodG2B_207();
void goodB2G_128();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_bad();
void goodG2B_208();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_goodG2BSink(__int64 a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_bad();
void goodG2B_209();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad();
void goodB2G_129();
void goodG2B_210();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodB2GSink(const wchar_t *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad();
void goodG2B1_109();
void goodG2B2_109();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_bad();
void goodB2G1_72();
void goodB2G2_72();
void goodG2B_211();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_bad();
void goodG2B_212();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_bad();
void goodG2B1_110();
void goodG2B2_110();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_bad();
void goodB2G1_73();
void goodB2G2_73();
void goodG2B1_111();
void goodG2B2_111();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad();
void goodB2G1_74();
void goodB2G2_74();
void goodG2B1_112();
void goodG2B2_112();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_52_bad();
void goodG2B_213();
void goodB2G_130();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_52_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_badSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodG2BSink(const char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodB2GSink(const wchar_t *a1);
void badSink_28();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_bad();
void goodG2BSink_28();
void goodG2B_214();
void goodB2GSink_17();
void goodB2G_131();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad();
void goodB2G_132();
void goodG2B_215();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_bad();
void goodB2G1_75();
void goodB2G2_75();
void goodG2B1_113();
void goodG2B2_113();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_bad();
void goodB2G1_76();
void goodB2G2_76();
void goodG2B1_114();
void goodG2B2_114();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodB2GSink();
void __fastcall badSink_29(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_bad();
void __fastcall goodB2G1Sink_2(int a1);
void goodB2G1_77();
void __fastcall goodB2G2Sink_2(int a1);
void goodB2G2_77();
void __fastcall goodG2BSink_29(int a1);
void goodG2B_216();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_bad();
void goodG2B_217();
void goodB2G_133();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodB2GSink();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodB2GSink(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_badSource();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodG2BSource();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodB2GSource();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad();
void goodB2G1_78();
void goodB2G2_78();
void goodG2B1_115();
void goodG2B2_115();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_bad();
void goodG2B_218();
void goodB2G_134();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_good();
void badSink_30();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_45_bad();
void goodG2BSink_30();
void goodG2B_219();
void goodB2GSink_18();
void goodB2G_135();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_45_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_bad();
void goodB2G_136();
void goodG2B_220();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_good();
__int64 staticReturnsTrue_8();
__int64 staticReturnsFalse_8();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad();
void goodB2G1_79();
void goodB2G2_79();
void goodG2B1_116();
void goodG2B2_116();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_badSink(void **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink(void **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_bad();
void goodB2G_137();
void goodG2B_221();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_good();
void *__fastcall badSource_11(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_bad();
void *__fastcall goodG2B1Source_2(void *a1);
void goodG2B1_117();
void *__fastcall goodG2B2Source_2(void *a1);
void goodG2B2_117();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad();
void goodG2B1_118();
void goodG2B2_118();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_bad();
void goodG2B_222();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_bad();
void goodG2B_223();
void goodB2G_138();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_bad();
void goodB2G1_80();
void goodB2G2_80();
void goodG2B1_119();
void goodG2B2_119();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_bad();
void goodG2B_224();
void goodB2G_139();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad();
void goodG2B_225();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad();
void goodG2B1_120();
void goodG2B2_120();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_bad();
void goodB2G_140();
void goodG2B_226();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_good();
void __fastcall badSink_31(int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad();
void __fastcall goodG2BSink_31(int a1);
void goodG2B_227();
void __fastcall goodB2GSink_19(int a1);
__int64 goodB2G_141();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_bad();
void goodB2G_142();
void goodG2B_228();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_bad();
void goodG2B_229();
void goodB2G_143();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_bad();
void goodG2B_230();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_good();
void *badSource_12();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_bad();
void *goodG2BSource_8();
void goodG2B_231();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad();
void goodG2B_232();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(const char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(const char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(const wchar_t **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad();
void goodG2B_233();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_bad();
void goodB2G1_81();
void goodB2G2_81();
void goodG2B1_121();
void goodG2B2_121();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_good();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_badSource(unsigned int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodG2BSource();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodB2GSource(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad();
void goodG2B_234();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_bad();
void goodB2G1_82();
void goodB2G2_82();
void goodG2B1_122();
void goodG2B2_122();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_bad();
void goodB2G1_83();
void goodB2G2_83();
void goodG2B1_123();
void goodG2B2_123();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_bad();
void goodG2B_235();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad();
void goodG2B1_124();
void goodG2B2_124();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_bad();
void goodG2B_236();
void goodB2G_144();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_good();
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badSource(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Source(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Source(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad();
void goodB2G1_84();
void goodB2G2_84();
void goodG2B1_125();
void goodG2B2_125();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_bad();
void goodB2G1_85();
void goodB2G2_85();
void goodG2B1_126();
void goodG2B2_126();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_bad();
void goodG2B_237();
void goodB2G_145();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_bad();
void goodG2B_238();
void goodB2G_146();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_bad();
void goodB2G1_86();
void goodB2G2_86();
void goodG2B1_127();
void goodG2B2_127();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_bad();
void goodG2B_239();
void goodB2G_147();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad();
void goodG2B_240();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_bad();
void goodG2B_241();
void goodB2G_148();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_bad();
void goodB2G1_87();
void goodB2G2_87();
void goodG2B1_128();
void goodG2B2_128();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_bad();
void goodG2B_242();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_badSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodG2BSink();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodB2GSink();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad();
void goodB2G1_88();
void goodB2G2_88();
void goodG2B1_129();
void goodG2B2_129();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_bad();
void goodB2G1_89();
void goodB2G2_89();
void goodG2B1_130();
void goodG2B2_130();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_bad();
void goodG2B_243();
void goodB2G_149();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_bad();
void goodG2B_244();
void goodB2G_150();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_goodG2BSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_goodG2BSink(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_bad();
void goodB2G1_90();
void goodB2G2_90();
void goodG2B1_131();
void goodG2B2_131();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Sink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BSink(int a1);
void *CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource();
void *CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_goodG2BSource();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_bad();
void goodB2G1_91();
void goodB2G2_91();
void goodG2B1_132();
void goodG2B2_132();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_badSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_goodG2BSink(void *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodG2BSink(__int64 a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodB2GSink(__int64 a1);
void __fastcall badSink_32(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_bad();
void __fastcall goodB2G1Sink_3(int a1);
void goodB2G1_92();
void __fastcall goodB2G2Sink_3(int a1);
void goodB2G2_92();
void __fastcall goodG2BSink_32(int a1);
void goodG2B_245();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_bad();
void goodB2G1_93();
void goodB2G2_93();
void goodG2B1_133();
void goodG2B2_133();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad();
void goodG2B1_134();
void goodG2B2_134();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad();
void goodG2B_246();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_bad();
void goodG2B_247();
__int64 goodB2G_151();
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_good();
__int64 staticReturnsTrue_9();
__int64 staticReturnsFalse_9();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad();
void goodG2B1_135();
void goodG2B2_135();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad();
void goodG2B1_136();
void goodG2B2_136();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_bad();
void goodB2G_152();
void goodG2B_248();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_bad();
void goodG2B_249();
void goodB2G_153();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_bad();
void goodB2G1_94();
void goodB2G2_94();
void goodG2B1_137();
void goodG2B2_137();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_bad();
void goodG2B_250();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_bad();
void goodB2G1_95();
void goodB2G2_95();
void goodG2B_251();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodB2GSink(int a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badSource(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Source(void *a1);
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Source(void *a1);
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad();
void goodG2B1_138();
void goodG2B2_138();
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_bad();
void goodG2B1_139();
void goodG2B2_139();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_bad();
void goodG2B_252();
void goodB2G_154();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_bad();
void goodB2G1_96();
void goodB2G2_96();
void goodG2B1_140();
void goodG2B2_140();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_bad();
void goodB2G1_97();
void goodB2G2_97();
void goodG2B_253();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_good();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_badSource(unsigned int a1);
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodG2BSource();
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodB2GSource(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad();
void goodG2B_254();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink(const char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(const char **a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(const wchar_t **a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_bad();
void goodG2B1_141();
void goodG2B2_141();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_bad();
void goodB2G1_98();
void goodB2G2_98();
void goodG2B1_142();
void goodG2B2_142();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_bad();
void goodB2G1_99();
void goodB2G2_99();
void goodG2B1_143();
void goodG2B2_143();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_bad();
void goodG2B_255();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_bad();
void goodG2B_256();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_goodG2BSink(char *a1);
void __fastcall badSink_33(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_bad();
void __fastcall goodB2G1Sink_4(int a1);
void goodB2G1_100();
void __fastcall goodB2G2Sink_4(int a1);
void goodB2G2_100();
void __fastcall goodG2BSink_33(int a1);
void goodG2B_257();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad();
void goodG2B1_144();
void goodG2B2_144();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_bad();
void goodG2B_258();
void goodB2G_155();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_good();
void __fastcall badSink_34(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_bad();
void __fastcall goodB2G1Sink_5(int a1);
void goodB2G1_101();
void __fastcall goodB2G2Sink_5(int a1);
void goodB2G2_101();
void __fastcall goodG2BSink_34(int a1);
void goodG2B_259();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad();
void goodG2B1_145();
void goodG2B2_145();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_good();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_63_bad();
void goodG2B_260();
void goodB2G_156();
void CWE122_Heap_Based_Buffer_Overflow__CWE135_63_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_bad();
void goodG2B_261();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_bad();
void goodB2G_157();
void goodG2B_262();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodB2GSink(int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_bad();
void goodB2G1_102();
void goodB2G2_102();
void goodG2B1_146();
void goodG2B2_146();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad();
void goodG2B_263();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad();
void goodB2G1_103();
void goodB2G2_103();
void goodG2B1_147();
void goodG2B2_147();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_badSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodG2BSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodB2GSink(int a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_badSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodG2BSink(int *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodB2GSink(int *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad();
void goodG2B1_148();
void goodG2B2_148();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_good();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad();
void goodG2B1_149();
void goodG2B2_149();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_good();
__int64 __fastcall badSource_13(unsigned int a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad();
__int64 goodG2BSource_9();
void goodG2B_264();
__int64 __fastcall goodB2GSource_5(unsigned int a1);
void goodB2G_158();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good();
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_badSink(char *a1);
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_goodG2BSink(char *a1);
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_bad();
void goodB2G_159();
void goodG2B_265();
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_470D8C; // weak
_UNKNOWN unk_471FB0; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_68D010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue_2 = 1; // weak
int staticFive_1 = 5; // weak
int staticTrue_3 = 1; // weak
int staticFive_2 = 5; // weak
int staticTrue_4 = 1; // weak
int staticFive_3 = 5; // weak
int staticFive_4 = 5; // weak
int staticTrue_5 = 1; // weak
int staticTrue_6 = 1; // weak
int staticFive_5 = 5; // weak
int staticTrue_7 = 1; // weak
int staticTrue_8 = 1; // weak
int staticFive_6 = 5; // weak
int staticFive_7 = 5; // weak
int staticTrue_9 = 1; // weak
int staticFive_8 = 5; // weak
int staticFive_9 = 5; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int staticFalse; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodB2GData; // weak
int badStatic; // weak
int goodG2B1Static; // weak
int goodG2B2Static; // weak
int staticFalse_0; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BGlobal; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData; // weak
int staticFalse_1; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal; // weak
int staticFalse_2; // weak
int badStatic_0; // weak
int goodG2B1Static_0; // weak
int goodG2B2Static_0; // weak
int badStatic_1; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
int staticFalse_3; // weak
int staticFalse_4; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData; // weak
int badStatic_2; // weak
int goodG2B1Static_1; // weak
int goodG2B2Static_1; // weak
int staticFalse_5; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal; // weak
int staticFalse_6; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodB2GData; // weak
int staticFalse_7; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData; // weak
int staticFalse_8; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BGlobal; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodB2GData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_goodG2BData; // weak
int badStatic_3; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
int staticFalse_9; // weak
int badStatic_4; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData; // weak
int badStatic_5; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData; // weak
int badStatic_6; // weak
int goodG2B1Static_2; // weak
int goodG2B2Static_2; // weak
int badStatic_7; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badGlobal; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Global; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Global; // weak
int badStatic_8; // weak
int goodB2G1Static_4; // weak
int goodB2G2Static_4; // weak
int goodG2BStatic_4; // weak
int badStatic_9; // weak
int goodB2G1Static_5; // weak
int goodB2G2Static_5; // weak
int goodG2BStatic_5; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodG2BData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_badData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodG2BData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodB2GData; // weak
int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_badData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_goodG2BData; // weak
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_badData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400DE0) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 4010B0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400E00) ----------------------------------------------------
__int64 sub_400E00()
{
  return qword_68D010();
}
// 68D010: using guessed type __int64 (*qword_68D010)(void);

//----- (00000000004010C0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 4010C6: positive sp value 8 has been found

//----- (00000000004010F0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6869463LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6869463LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000401120) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000401160) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 68D1D8: using guessed type char completed_6355;

//----- (0000000000401180) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 401180: could not find valid save-restore pair for rbp

//----- (00000000004011AD) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_54_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_good();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_good();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_54_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_bad();
  printLine("Calling CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_bad();");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_bad();
  return 0;
}
// 68D3FC: using guessed type int globalArgc;
// 68D400: using guessed type __int64 globalArgv;

//----- (0000000000405338) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_bad()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 10;
  v0 = 10;
  v2 = 10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000040542F) ----------------------------------------------------
void goodG2B()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000405526) ----------------------------------------------------
void goodB2G()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 10;
  v0 = 10;
  v2 = 10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000405623) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32_good()
{
  goodG2B();
  goodB2G();
}

//----- (000000000040563D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData = v3;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink();
}
// 68D410: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;

//----- (00000000004056AE) ----------------------------------------------------
void goodG2B_0()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodG2BSink();
}
// 68D408: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData;

//----- (00000000004056D9) ----------------------------------------------------
void goodB2G_0()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData = v3;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodB2GSink();
}
// 68D40C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData;

//----- (000000000040574A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_good()
{
  goodG2B_0();
  goodB2G_0();
}

//----- (0000000000405764) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D16C: using guessed type int staticTrue;

//----- (0000000000405890) ----------------------------------------------------
void goodB2G1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D16C: using guessed type int staticTrue;
// 68D1DC: using guessed type int staticFalse;

//----- (00000000004059CD) ----------------------------------------------------
void goodB2G2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D16C: using guessed type int staticTrue;

//----- (0000000000405AFF) ----------------------------------------------------
void goodG2B1()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D16C: using guessed type int staticTrue;
// 68D1DC: using guessed type int staticFalse;

//----- (0000000000405BEF) ----------------------------------------------------
void goodG2B2()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue )
    v3 = 7;
  if ( staticTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D16C: using guessed type int staticTrue;

//----- (0000000000405CD3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  goodG2B2();
}

//----- (0000000000405D01) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000405D86) ----------------------------------------------------
void goodG2B1_0()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000405E0B) ----------------------------------------------------
void goodG2B2_0()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000405E90) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_good()
{
  goodG2B1_0();
  goodG2B2_0();
}

//----- (0000000000405EAA) ----------------------------------------------------
void __fastcall badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000405F6B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badSink(v2);
}

//----- (0000000000405FD5) ----------------------------------------------------
void __fastcall goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000406096) ----------------------------------------------------
void goodG2B_1()
{
  goodG2BSink(7);
}

//----- (00000000004060B8) ----------------------------------------------------
void __fastcall goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040617F) ----------------------------------------------------
void goodB2G_1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2GSink(v2);
}

//----- (00000000004061E9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41_good()
{
  goodB2G_1();
  goodG2B_1();
}

//----- (0000000000406203) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (0000000000406254) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (00000000004062A5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4062A5: using guessed type char buf[16];

//----- (0000000000406451) ----------------------------------------------------
void goodB2G1_0()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 406451: using guessed type char buf[16];

//----- (000000000040660E) ----------------------------------------------------
void goodB2G2_0()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 40660E: using guessed type char buf[16];

//----- (00000000004067C0) ----------------------------------------------------
void goodG2B1_1()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004068AE) ----------------------------------------------------
void goodG2B2_1()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000406990) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_1();
  goodG2B2_1();
}

//----- (00000000004069BE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v10 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v10;
  v5 = v10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4069BE: using guessed type char buf[16];

//----- (0000000000406B5C) ----------------------------------------------------
void goodG2B_2()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000406C34) ----------------------------------------------------
void goodB2G_2()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v10 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v10;
  v5 = v10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 406C34: using guessed type char buf[16];

//----- (0000000000406DD8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31_good()
{
  goodG2B_2();
  goodB2G_2();
}

//----- (0000000000406DF2) ----------------------------------------------------
void badSink_0()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D1E0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_badData;

//----- (0000000000406EB9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_badData = v7;
  badSink_0();
}
// 68D1E0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_badData;
// 406EB9: using guessed type char buf[16];

//----- (0000000000406FF0) ----------------------------------------------------
void goodG2BSink_0()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D1E4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodG2BData;

//----- (00000000004070B7) ----------------------------------------------------
void goodG2B_3()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodG2BData = 7;
  goodG2BSink_0();
}
// 68D1E4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodG2BData;

//----- (00000000004070E2) ----------------------------------------------------
void goodB2GSink_0()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D1E8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodB2GData;

//----- (00000000004071AF) ----------------------------------------------------
void goodB2G_3()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodB2GData = v7;
  goodB2GSink_0();
}
// 68D1E8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_goodB2GData;
// 4071AF: using guessed type char buf[16];

//----- (00000000004072E6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45_good()
{
  goodG2B_3();
  goodB2G_3();
}

//----- (0000000000407300) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000407373) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (00000000004073E6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000407459) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_badSink(v3);
}

//----- (00000000004074C1) ----------------------------------------------------
void goodG2B_4()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodG2BSink(7);
}

//----- (00000000004074E3) ----------------------------------------------------
void goodB2G_4()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodB2GSink(v3);
}

//----- (000000000040754B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53_good()
{
  goodG2B_4();
  goodB2G_4();
}

//----- (0000000000407565) ----------------------------------------------------
void *badSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000407596) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = badSource();
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000040760B) ----------------------------------------------------
void *goodG2BSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000040763C) ----------------------------------------------------
void goodG2B_5()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = goodG2BSource();
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004076B1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42_good()
{
  goodG2B_5();
}

//----- (00000000004076C1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004077A5) ----------------------------------------------------
void goodB2G1_1()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000040789A) ----------------------------------------------------
void goodB2G2_1()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000407984) ----------------------------------------------------
void goodG2B1_2()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000407A74) ----------------------------------------------------
void goodG2B2_2()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000407B58) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_2();
  goodG2B2_2();
}

//----- (0000000000407B86) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 407B86: using guessed type char buf[16];

//----- (0000000000407D7A) ----------------------------------------------------
void goodB2G1_2()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 407D7A: using guessed type char buf[16];

//----- (0000000000407F7F) ----------------------------------------------------
void goodB2G2_2()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 407F7F: using guessed type char buf[16];

//----- (0000000000408179) ----------------------------------------------------
void goodG2B1_3()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000408269) ----------------------------------------------------
void goodG2B2_3()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040834D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_3();
  goodG2B2_3();
}

//----- (000000000040837B) ----------------------------------------------------
void *__fastcall badSource_0(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( badStatic )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D1EC: using guessed type int badStatic;

//----- (00000000004083B6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  badStatic = 1;
  dest = badSource_0(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1EC: using guessed type int badStatic;

//----- (0000000000408435) ----------------------------------------------------
void *__fastcall goodG2B1Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B1Static )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D1F0: using guessed type int goodG2B1Static;

//----- (000000000040847C) ----------------------------------------------------
void goodG2B1_4()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  goodG2B1Static = 0;
  dest = goodG2B1Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1F0: using guessed type int goodG2B1Static;

//----- (00000000004084FB) ----------------------------------------------------
void *__fastcall goodG2B2Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B2Static )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D1F4: using guessed type int goodG2B2Static;

//----- (0000000000408536) ----------------------------------------------------
void goodG2B2_4()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  goodG2B2Static = 1;
  dest = goodG2B2Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1F4: using guessed type int goodG2B2Static;

//----- (00000000004085B5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21_good()
{
  goodG2B1_4();
  goodG2B2_4();
}

//----- (00000000004085CF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_bad()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_badSink(v0);
}

//----- (000000000040860C) ----------------------------------------------------
void goodG2B_6()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink(v0);
}

//----- (0000000000408649) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52_good()
{
  goodG2B_6();
}

//----- (0000000000408659) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  int i; // [rsp+1Ch] [rbp-14h]
  int j; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000408779) ----------------------------------------------------
void goodG2B_7()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000408851) ----------------------------------------------------
void goodB2G_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  int i; // [rsp+1Ch] [rbp-14h]
  int j; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000408977) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34_good()
{
  goodG2B_7();
  goodB2G_5();
}

//----- (0000000000408991) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (00000000004089F8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (0000000000408A5F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_badSink(v7);
}
// 408A5F: using guessed type char buf[16];

//----- (0000000000408B4D) ----------------------------------------------------
void goodG2B_8()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodG2BSink(7);
}

//----- (0000000000408B75) ----------------------------------------------------
void goodB2G_6()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodB2GSink(v7);
}
// 408B75: using guessed type char buf[16];

//----- (0000000000408C63) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_good()
{
  goodG2B_8();
  goodB2G_6();
}

//----- (0000000000408C7D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000408D49) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000408E15) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000408EE7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000408F72) ----------------------------------------------------
void goodG2B_9()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000408FFD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_good()
{
  goodG2B_9();
}

//----- (000000000040900D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004090A1) ----------------------------------------------------
void goodG2B1_5()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000409141) ----------------------------------------------------
void goodG2B2_5()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004091D5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_good()
{
  goodG2B1_5();
  goodG2B2_5();
}

//----- (00000000004091EF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_badSink(a1);
}

//----- (0000000000409209) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(a1);
}

//----- (0000000000409223) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(a1);
}

//----- (000000000040923D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1FC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badGlobal;

//----- (000000000040930C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D200: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Global;

//----- (00000000004093EC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D204: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Global;

//----- (00000000004094C1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D208: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BGlobal;

//----- (0000000000409590) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_0 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D170: using guessed type int staticTrue_0;

//----- (000000000040961E) ----------------------------------------------------
void goodG2B1_6()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFalse_0 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1F8: using guessed type int staticFalse_0;

//----- (00000000004096B8) ----------------------------------------------------
void goodG2B2_6()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_0 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D170: using guessed type int staticTrue_0;

//----- (0000000000409746) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_good()
{
  goodG2B1_6();
  goodG2B2_6();
}

//----- (0000000000409760) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad()
{
  wchar_t *s; // [rsp+8h] [rbp-18h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(wchar_t *))CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink)(s);
}

//----- (00000000004097D4) ----------------------------------------------------
__int64 goodG2B_10()
{
  _BYTE *s; // [rsp+8h] [rbp-18h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(_BYTE *))CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink)(s);
}

//----- (0000000000409843) ----------------------------------------------------
__int64 goodB2G_7()
{
  wchar_t *s; // [rsp+8h] [rbp-18h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(wchar_t *))CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink)(s);
}

//----- (00000000004098B7) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good()
{
  goodG2B_10();
  return goodB2G_7();
}

//----- (00000000004098D1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (0000000000409932) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_badSink(v0);
}

//----- (000000000040996F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (00000000004099D0) ----------------------------------------------------
void goodG2B_11()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(v0);
}

//----- (0000000000409A0D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_good()
{
  goodG2B_11();
}

//----- (0000000000409A1D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_badSink(a1);
}

//----- (0000000000409A34) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodG2BSink(a1);
}

//----- (0000000000409A4B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodB2GSink(a1);
}

//----- (0000000000409A62) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000409B35) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000409C08) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000409CE1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_bad()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_badSink(v0);
}

//----- (0000000000409D1E) ----------------------------------------------------
void goodG2B_12()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b_goodG2BSink(v0);
}

//----- (0000000000409D5B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51_good()
{
  goodG2B_12();
}

//----- (0000000000409D6B) ----------------------------------------------------
__int64 badSource_1()
{
  return 10LL;
}

//----- (0000000000409D7E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_1();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000409E50) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 7LL;
}

//----- (0000000000409E63) ----------------------------------------------------
void goodG2B_13()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_0();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000409F35) ----------------------------------------------------
__int64 goodB2GSource()
{
  return 10LL;
}

//----- (0000000000409F48) ----------------------------------------------------
void goodB2G_8()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040A020) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_good()
{
  goodB2G_8();
  goodG2B_13();
}

//----- (000000000040A03A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040A0FB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040A1BC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040A283) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v5; // [rsp+0h] [rbp-30h]
  int v6; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+1Ch] [rbp-14h]

  v7 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  v6 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_badSink((__int64)&v5);
}

//----- (000000000040A2F5) ----------------------------------------------------
void goodG2B_14()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000040A31F) ----------------------------------------------------
void goodB2G_9()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v5; // [rsp+0h] [rbp-30h]
  int v6; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+1Ch] [rbp-14h]

  v7 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  v6 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b_goodB2GSink((__int64)&v5);
}

//----- (000000000040A391) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66_good()
{
  goodG2B_14();
  goodB2G_9();
}

//----- (000000000040A3AB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-30h]
  void *v2; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+20h] [rbp-10h]
  void *v4; // [rsp+28h] [rbp-8h]

  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  v2 = v4;
  dest = v4;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000040A43F) ----------------------------------------------------
void goodG2B_15()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-30h]
  void *v2; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+20h] [rbp-10h]
  void *v4; // [rsp+28h] [rbp-8h]

  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  v2 = v4;
  dest = v4;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000040A4D3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_good()
{
  goodG2B_15();
}

//----- (000000000040A4E3) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (000000000040A4EE) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (000000000040A4F9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_08_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}

//----- (000000000040A5D9) ----------------------------------------------------
void goodB2G1_3()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)staticReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}

//----- (000000000040A6C5) ----------------------------------------------------
void goodB2G2_3()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}

//----- (000000000040A7A5) ----------------------------------------------------
void goodG2B1_7()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)staticReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}

//----- (000000000040A88C) ----------------------------------------------------
void goodG2B2_7()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}

//----- (000000000040A967) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_08_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_7();
  goodG2B2_7();
}

//----- (000000000040A995) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badSink(v6);
}
// 68D1FC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_badGlobal;
// 40A995: using guessed type char buf[16];

//----- (000000000040AA87) ----------------------------------------------------
void goodB2G1_4()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Sink(v6);
}
// 68D200: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G1Global;
// 40AA87: using guessed type char buf[16];

//----- (000000000040AB79) ----------------------------------------------------
void goodB2G2_4()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Sink(v6);
}
// 68D204: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodB2G2Global;
// 40AB79: using guessed type char buf[16];

//----- (000000000040AC6B) ----------------------------------------------------
void goodG2B_16()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BSink(7);
}
// 68D208: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_goodG2BGlobal;

//----- (000000000040AC97) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B_16();
}

//----- (000000000040ACBB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_badSink(__int64 a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000040AD28) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_goodG2BSink(__int64 a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000040AD95) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData;
  v1 = strlen((const char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}
// 68D420: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData;

//----- (000000000040AE0F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink()
{
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData;
  v1 = strlen((const char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}
// 68D418: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData;

//----- (000000000040AE89) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData;
  v1 = wcslen((const wchar_t *)CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}
// 68D428: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData;

//----- (000000000040AF03) ----------------------------------------------------
void badSink_1()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove((void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D210: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData;

//----- (000000000040AF71) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData = (__int64)v0;
  badSink_1();
}
// 68D210: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_badData;

//----- (000000000040AFB7) ----------------------------------------------------
void goodG2BSink_1()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove((void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D218: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;

//----- (000000000040B025) ----------------------------------------------------
void goodG2B_17()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData = (__int64)v0;
  goodG2BSink_1();
}
// 68D218: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;

//----- (000000000040B06B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_good()
{
  goodG2B_17();
}

//----- (000000000040B07B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040B1A7) ----------------------------------------------------
void goodB2G1_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040B2E4) ----------------------------------------------------
void goodB2G2_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040B416) ----------------------------------------------------
void goodG2B1_8()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040B506) ----------------------------------------------------
void goodG2B2_8()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040B5EA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_8();
  goodG2B2_8();
}

//----- (000000000040B618) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000040B6AC) ----------------------------------------------------
void goodG2B1_9()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000040B74C) ----------------------------------------------------
void goodG2B2_9()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000040B7E0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good()
{
  goodG2B1_9();
  goodG2B2_9();
}

//----- (000000000040B7FA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_badSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040B8CC) ----------------------------------------------------
void goodG2B_18()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040B99E) ----------------------------------------------------
void goodB2G_10()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodB2GSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040BA76) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61_good()
{
  goodG2B_18();
  goodB2G_10();
}

//----- (000000000040BA90) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_badSink(v3);
}

//----- (000000000040BAF8) ----------------------------------------------------
void goodG2B_19()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodG2BSink(7);
}

//----- (000000000040BB1A) ----------------------------------------------------
void goodB2G_11()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b_goodB2GSink(v3);
}

//----- (000000000040BB82) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52_good()
{
  goodG2B_19();
  goodB2G_11();
}

//----- (000000000040BB9C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_10_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalTrue )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalTrue )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000040BC74) ----------------------------------------------------
void goodB2G1_6()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalTrue )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000040BD58) ----------------------------------------------------
void goodB2G2_6()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalTrue )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalTrue )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000040BE30) ----------------------------------------------------
void goodG2B1_10()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalTrue )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000040BF0F) ----------------------------------------------------
void goodG2B2_10()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalTrue )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalTrue )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000040BFE2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_10_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B1_10();
  goodG2B2_10();
}

//----- (000000000040C010) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_badSink(a1);
}

//----- (000000000040C027) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodG2BSink(a1);
}

//----- (000000000040C03E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodB2GSink(a1);
}

//----- (000000000040C055) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040C116) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040C1D7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040C29E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040C348) ----------------------------------------------------
void goodG2B1_11()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040C3F2) ----------------------------------------------------
void goodG2B2_11()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040C49C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good()
{
  goodG2B1_11();
  goodG2B2_11();
}

//----- (000000000040C4B6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C8: using guessed type int globalFive;

//----- (000000000040C5B3) ----------------------------------------------------
void goodB2G1_7()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C8: using guessed type int globalFive;

//----- (000000000040C6C3) ----------------------------------------------------
void goodB2G2_7()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C8: using guessed type int globalFive;

//----- (000000000040C7C8) ----------------------------------------------------
void goodG2B1_12()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000040C8BA) ----------------------------------------------------
void goodG2B2_12()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000040C9A0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_12();
  goodG2B2_12();
}

//----- (000000000040C9CE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_1 )
    v3 = 10;
  if ( staticTrue_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D174: using guessed type int staticTrue_1;

//----- (000000000040CAB2) ----------------------------------------------------
void goodB2G1_8()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( staticFalse_1 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D174: using guessed type int staticTrue_1;
// 68D220: using guessed type int staticFalse_1;

//----- (000000000040CBA7) ----------------------------------------------------
void goodB2G2_8()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( staticTrue_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D174: using guessed type int staticTrue_1;

//----- (000000000040CC91) ----------------------------------------------------
void goodG2B1_13()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D174: using guessed type int staticTrue_1;
// 68D220: using guessed type int staticFalse_1;

//----- (000000000040CD81) ----------------------------------------------------
void goodG2B2_13()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_1 )
    v3 = 7;
  if ( staticTrue_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D174: using guessed type int staticTrue_1;

//----- (000000000040CE65) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_13();
  goodG2B2_13();
}

//----- (000000000040CE93) ----------------------------------------------------
void __fastcall badSink_2(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040CF54) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_bad()
{
  badSink_2(10);
}

//----- (000000000040CF76) ----------------------------------------------------
void __fastcall goodG2BSink_2(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040D037) ----------------------------------------------------
void goodG2B_20()
{
  goodG2BSink_2(7);
}

//----- (000000000040D059) ----------------------------------------------------
void __fastcall goodB2GSink_1(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040D120) ----------------------------------------------------
void goodB2G_12()
{
  goodB2GSink_1(10);
}

//----- (000000000040D142) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41_good()
{
  goodB2G_12();
  goodG2B_20();
}

//----- (000000000040D15C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_bad()
{
  int v0; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v1;
  v4 = &v1;
  v1 = -1;
  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  *v5 = v0;
  v3 = *v4;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v3 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v3) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D269) ----------------------------------------------------
void goodG2B_21()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000040D360) ----------------------------------------------------
void goodB2G_13()
{
  int v0; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v1;
  v4 = &v1;
  v1 = -1;
  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  *v5 = v0;
  v3 = *v4;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v3 < 0 || v3 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v3) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D473) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32_good()
{
  goodG2B_21();
  goodB2G_13();
}

//----- (000000000040D48D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000040D5A1) ----------------------------------------------------
void goodB2G_14()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000040D6BB) ----------------------------------------------------
void goodG2B_22()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040D789) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good()
{
  goodB2G_14();
  goodG2B_22();
}

//----- (000000000040D7A3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_badSink(a1);
}

//----- (000000000040D7BA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodG2BSink(a1);
}

//----- (000000000040D7D1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodB2GSink(a1);
}

//----- (000000000040D7E8) ----------------------------------------------------
void *badSource_2()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000040D819) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = badSource_2();
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040D8B3) ----------------------------------------------------
void *goodG2BSource_1()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000040D8E4) ----------------------------------------------------
void goodG2B_23()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = goodG2BSource_1();
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040D97E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_good()
{
  goodG2B_23();
}

//----- (000000000040D98E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000040DA0D) ----------------------------------------------------
void goodG2B1_14()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000040DA98) ----------------------------------------------------
void goodG2B2_14()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000040DB17) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_good()
{
  goodG2B1_14();
  goodG2B2_14();
}

//----- (000000000040DB31) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040DB3C) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040DB47) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040DBFE) ----------------------------------------------------
void goodG2B1_15()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)staticReturnsFalse_0() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040DCC1) ----------------------------------------------------
void goodG2B2_15()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000040DD78) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_good()
{
  goodG2B1_15();
  goodG2B2_15();
}

//----- (000000000040DD92) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_bad()
{
  char src[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+18h] [rbp-28h]
  char *dest; // [rsp+20h] [rbp-20h]
  void *v3; // [rsp+28h] [rbp-18h]
  char **v4; // [rsp+30h] [rbp-10h]
  __int64 *v5; // [rsp+38h] [rbp-8h]

  v5 = &v1;
  v4 = (char **)&v1;
  v1 = 0LL;
  v3 = 0LL;
  v3 = malloc(0xAuLL);
  if ( !v3 )
    exit(-1);
  *v5 = (__int64)v3;
  dest = *v4;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000040DE37) ----------------------------------------------------
void goodG2B_24()
{
  char src[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+18h] [rbp-28h]
  char *dest; // [rsp+20h] [rbp-20h]
  void *v3; // [rsp+28h] [rbp-18h]
  char **v4; // [rsp+30h] [rbp-10h]
  __int64 *v5; // [rsp+38h] [rbp-8h]

  v5 = &v1;
  v4 = (char **)&v1;
  v1 = 0LL;
  v3 = 0LL;
  v3 = malloc(0xBuLL);
  if ( !v3 )
    exit(-1);
  *v5 = (__int64)v3;
  dest = *v4;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000040DEDC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32_good()
{
  goodG2B_24();
}

//----- (000000000040DEEC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000040DF4D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000040DFAE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040E075) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040E13C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040E209) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_bad()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xAuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_badSink((__int64)&v0);
}

//----- (000000000040E24E) ----------------------------------------------------
void goodG2B_25()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xBuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000040E293) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66_good()
{
  goodG2B_25();
}

//----- (000000000040E2A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_bad()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040E37B) ----------------------------------------------------
void goodG2B_26()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000040E453) ----------------------------------------------------
void goodB2G_15()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000040E531) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34_good()
{
  goodG2B_26();
  goodB2G_15();
}

//----- (000000000040E54B) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (000000000040E556) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000040E561) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000040E695) ----------------------------------------------------
void goodB2G1_9()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)staticReturnsFalse_1() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000040E7DA) ----------------------------------------------------
void goodB2G2_9()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000040E914) ----------------------------------------------------
void goodG2B1_16()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000040EA0C) ----------------------------------------------------
void goodG2B2_16()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000040EAF8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_16();
  goodG2B2_16();
}

//----- (000000000040EB26) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData = (__int64)s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink();
}
// 68D420: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData;

//----- (000000000040EB9A) ----------------------------------------------------
void goodG2B_27()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData = (__int64)s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink();
}
// 68D418: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData;

//----- (000000000040EC09) ----------------------------------------------------
void goodB2G_16()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData = (__int64)s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink();
}
// 68D428: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData;

//----- (000000000040EC7D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good()
{
  goodG2B_27();
  goodB2G_16();
}

//----- (000000000040EC97) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040ED63) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040EE2F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040EF01) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(a1);
}

//----- (000000000040EF1B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(a1);
}

//----- (000000000040EF35) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v5 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(&v5);
}

//----- (000000000040EFA1) ----------------------------------------------------
void goodG2B_28()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(&v0);
}

//----- (000000000040EFC5) ----------------------------------------------------
void goodB2G_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v5 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(&v5);
}

//----- (000000000040F031) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63_good()
{
  goodG2B_28();
  goodB2G_17();
}

//----- (000000000040F04B) ----------------------------------------------------
void __fastcall badSink_3(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040F10C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  badSink_3(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040F144) ----------------------------------------------------
void __fastcall goodG2BSink_3(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040F205) ----------------------------------------------------
void goodG2B_29()
{
  goodG2BSink_3(7);
}

//----- (000000000040F227) ----------------------------------------------------
void __fastcall goodB2GSink_2(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000040F2EE) ----------------------------------------------------
void goodB2G_18()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  goodB2GSink_2(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040F326) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41_good()
{
  goodB2G_18();
  goodG2B_29();
}

//----- (000000000040F340) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  void *v3; // [rsp+10h] [rbp-20h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int j; // [rsp+24h] [rbp-Ch]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v7 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  else
  {
    v7 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v7 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v7) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v3 = malloc(0x28uLL);
    if ( !v3 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v3 + j) = 0;
    if ( v7 < 0 || v7 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v3 + v7) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v3 + j));
    }
    free(v3);
  }
}

//----- (000000000040F53A) ----------------------------------------------------
void goodB2G_19()
{
  char nptr[8]; // [rsp+0h] [rbp-40h]
  int v1; // [rsp+8h] [rbp-38h]
  __int16 v2; // [rsp+Ch] [rbp-34h]
  char s[8]; // [rsp+10h] [rbp-30h]
  int v4; // [rsp+18h] [rbp-28h]
  __int16 v5; // [rsp+1Ch] [rbp-24h]
  void *v6; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  int j; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v4 = 0;
    v5 = 0;
    if ( fgets(s, 14, stdin) )
      v10 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  else
  {
    *(_QWORD *)nptr = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(nptr, 14, stdin) )
      v10 = atoi(nptr);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v10 < 0 || v10 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v6 = malloc(0x28uLL);
    if ( !v6 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v6 + j) = 0;
    if ( v10 < 0 || v10 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v6 + v10) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v6 + j));
    }
    free(v6);
  }
}

//----- (000000000040F780) ----------------------------------------------------
void goodG2B_30()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (000000000040F92E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12_good()
{
  goodB2G_19();
  goodG2B_30();
}

//----- (000000000040F948) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000040F9D2) ----------------------------------------------------
void goodG2B_31()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000040FA5C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_good()
{
  goodG2B_31();
}

//----- (000000000040FA6C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_badSink(a1);
}

//----- (000000000040FA86) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c_goodG2BSink(a1);
}

//----- (000000000040FAA0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 40FAA0: using guessed type char buf[16];

//----- (000000000040FC34) ----------------------------------------------------
void goodB2G1_10()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 40FC34: using guessed type char buf[16];

//----- (000000000040FDCE) ----------------------------------------------------
void goodB2G2_10()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 40FDCE: using guessed type char buf[16];

//----- (000000000040FF68) ----------------------------------------------------
void goodG2B1_17()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000410036) ----------------------------------------------------
void goodG2B2_17()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000410104) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_17();
  goodG2B2_17();
}

//----- (0000000000410132) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive == 5 )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D178: using guessed type int staticFive;

//----- (00000000004101B1) ----------------------------------------------------
void goodG2B1_18()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D178: using guessed type int staticFive;

//----- (000000000041023C) ----------------------------------------------------
void goodG2B2_18()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D178: using guessed type int staticFive;

//----- (00000000004102BB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_good()
{
  goodG2B1_18();
  goodG2B2_18();
}

//----- (00000000004102D5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_badSink(void **a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000410341) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_goodG2BSink(void **a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004103AD) ----------------------------------------------------
__int64 __fastcall badSource_3(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 4103AD: using guessed type char buf[16];

//----- (000000000041048A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_3(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041055C) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 7LL;
}

//----- (000000000041056F) ----------------------------------------------------
void goodG2B_32()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_2();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000410641) ----------------------------------------------------
__int64 __fastcall goodB2GSource_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 410641: using guessed type char buf[16];

//----- (000000000041071E) ----------------------------------------------------
void goodB2G_20()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_0(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004107F6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_good()
{
  goodB2G_20();
  goodG2B_32();
}

//----- (0000000000410810) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_22_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink((const char *)s);
}
// 68D224: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal;

//----- (0000000000410885) ----------------------------------------------------
void goodB2G1_11()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(s);
}
// 68D228: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global;

//----- (00000000004108FA) ----------------------------------------------------
void goodB2G2_11()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(s);
}
// 68D22C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global;

//----- (000000000041096F) ----------------------------------------------------
void goodG2B_33()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(s);
}
// 68D230: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal;

//----- (00000000004109DF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_22_good()
{
  goodB2G1_11();
  goodB2G2_11();
  goodG2B_33();
}

//----- (0000000000410A03) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_badSink(v0);
}

//----- (0000000000410A40) ----------------------------------------------------
void goodG2B_34()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_goodG2BSink(v0);
}

//----- (0000000000410A7D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52_good()
{
  goodG2B_34();
}

//----- (0000000000410A8D) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000410A98) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (0000000000410AA3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000410B3B) ----------------------------------------------------
void goodG2B1_19()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsFalse_2() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000410BDF) ----------------------------------------------------
void goodG2B2_19()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000410C77) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_good()
{
  goodG2B1_19();
  goodG2B2_19();
}

//----- (0000000000410C91) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000410DA3) ----------------------------------------------------
void goodB2G1_12()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000410EBB) ----------------------------------------------------
void goodB2G2_12()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000410FD3) ----------------------------------------------------
void goodG2B1_20()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041109F) ----------------------------------------------------
void goodG2B2_20()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041116B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_20();
  goodG2B2_20();
}

//----- (0000000000411199) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 411199: using guessed type char buf[16];

//----- (0000000000411395) ----------------------------------------------------
void goodB2G1_13()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 411395: using guessed type char buf[16];

//----- (00000000004115A2) ----------------------------------------------------
void goodB2G2_13()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4115A2: using guessed type char buf[16];

//----- (00000000004117A4) ----------------------------------------------------
void goodG2B1_21()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000041189C) ----------------------------------------------------
void goodG2B2_21()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000411988) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_21();
  goodG2B2_21();
}

//----- (00000000004119B6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticFive_0 == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticFive_0 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D17C: using guessed type int staticFive_0;
// 4119B6: using guessed type char buf[16];

//----- (0000000000411BAC) ----------------------------------------------------
void goodB2G1_14()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticFive_0 == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticFive_0 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D17C: using guessed type int staticFive_0;
// 411BAC: using guessed type char buf[16];

//----- (0000000000411DB3) ----------------------------------------------------
void goodB2G2_14()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticFive_0 == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticFive_0 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D17C: using guessed type int staticFive_0;
// 411DB3: using guessed type char buf[16];

//----- (0000000000411FAF) ----------------------------------------------------
void goodG2B1_22()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_0 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_0 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D17C: using guessed type int staticFive_0;

//----- (00000000004120A1) ----------------------------------------------------
void goodG2B2_22()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_0 == 5 )
    v3 = 7;
  if ( staticFive_0 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D17C: using guessed type int staticFive_0;

//----- (0000000000412187) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_22();
  goodG2B2_22();
}

//----- (00000000004121B5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_badSink(a1);
}

//----- (00000000004121CF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(a1);
}

//----- (00000000004121E9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(a1);
}

//----- (0000000000412203) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_badSink(&v0);
}

//----- (0000000000412242) ----------------------------------------------------
void goodG2B_35()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b_goodG2BSink(&v0);
}

//----- (0000000000412281) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63_good()
{
  goodG2B_35();
}

//----- (0000000000412291) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticTrue_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D180: using guessed type int staticTrue_2;
// 412291: using guessed type char buf[16];

//----- (000000000041243F) ----------------------------------------------------
void goodB2G1_15()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFalse_2 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D180: using guessed type int staticTrue_2;
// 68D234: using guessed type int staticFalse_2;
// 41243F: using guessed type char buf[16];

//----- (00000000004125FE) ----------------------------------------------------
void goodB2G2_15()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticTrue_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D180: using guessed type int staticTrue_2;
// 4125FE: using guessed type char buf[16];

//----- (00000000004127B2) ----------------------------------------------------
void goodG2B1_23()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D180: using guessed type int staticTrue_2;
// 68D234: using guessed type int staticFalse_2;

//----- (00000000004128A2) ----------------------------------------------------
void goodG2B2_23()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_2 )
    v3 = 7;
  if ( staticTrue_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D180: using guessed type int staticTrue_2;

//----- (0000000000412986) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_23();
  goodG2B2_23();
}

//----- (00000000004129B4) ----------------------------------------------------
void __fastcall badSink_4(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000412A75) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  badSink_4(v6);
}
// 412A75: using guessed type char buf[16];

//----- (0000000000412B5D) ----------------------------------------------------
void __fastcall goodG2BSink_4(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000412C1E) ----------------------------------------------------
void goodG2B_36()
{
  goodG2BSink_4(7);
}

//----- (0000000000412C40) ----------------------------------------------------
void __fastcall goodB2GSink_3(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000412D07) ----------------------------------------------------
void goodB2G_21()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2GSink_3(v6);
}
// 412D07: using guessed type char buf[16];

//----- (0000000000412DEF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_good()
{
  goodB2G_21();
  goodG2B_36();
}

//----- (0000000000412E09) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000412F33) ----------------------------------------------------
void goodB2G1_16()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000041306E) ----------------------------------------------------
void goodB2G2_16()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000041319E) ----------------------------------------------------
void goodG2B1_24()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000041328E) ----------------------------------------------------
void goodG2B2_24()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000413372) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_24();
  goodG2B2_24();
}

//----- (00000000004133A0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int k; // [rsp+10h] [rbp-20h]
  int l; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+14h] [rbp-1Ch]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (00000000004134E1) ----------------------------------------------------
void goodB2G_22()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int k; // [rsp+10h] [rbp-20h]
  int l; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+14h] [rbp-1Ch]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (0000000000413628) ----------------------------------------------------
void goodG2B_37()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (0000000000413721) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good()
{
  goodB2G_22();
  goodG2B_37();
}

//----- (000000000041373B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413838) ----------------------------------------------------
void goodB2G1_17()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413948) ----------------------------------------------------
void goodB2G2_17()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413A4D) ----------------------------------------------------
void goodG2B1_25()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413B3F) ----------------------------------------------------
void goodG2B2_25()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413C25) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_25();
  goodG2B2_25();
}

//----- (0000000000413C53) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000413D1E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000413DE9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000413EBA) ----------------------------------------------------
void __fastcall badSink_5(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000413F7B) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_5)(v2);
}

//----- (0000000000413FEE) ----------------------------------------------------
void __fastcall goodG2BSink_5(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004140AF) ----------------------------------------------------
void goodG2B_38()
{
  goodG2BSink_5(7);
}

//----- (00000000004140DA) ----------------------------------------------------
void __fastcall goodB2GSink_4(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004141A1) ----------------------------------------------------
__int64 goodB2G_23()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_4)(v2);
}

//----- (0000000000414214) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good()
{
  goodG2B_38();
  return goodB2G_23();
}

//----- (000000000041422E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004142EF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004143B0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000414477) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 414477: using guessed type char buf[16];

//----- (00000000004145AE) ----------------------------------------------------
void goodG2B_39()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodG2BSink(7);
}

//----- (00000000004145D9) ----------------------------------------------------
__int64 goodB2G_24()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodB2GSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 4145D9: using guessed type char buf[16];

//----- (0000000000414710) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_good()
{
  goodG2B_39();
  return goodB2G_24();
}

//----- (000000000041472A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_badSink(a1);
}

//----- (0000000000414741) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodG2BSink(a1);
}

//----- (0000000000414758) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodB2GSink(a1);
}

//----- (000000000041476F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_51_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_badSink((const char *)s);
}

//----- (00000000004147DA) ----------------------------------------------------
void goodG2B_40()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodG2BSink(s);
}

//----- (0000000000414840) ----------------------------------------------------
void goodB2G_25()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodB2GSink(s);
}

//----- (00000000004148AB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_51_good()
{
  goodG2B_40();
  goodB2G_25();
}

//----- (00000000004148C5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  v3 = v4;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_badSink(v4);
}

//----- (0000000000414933) ----------------------------------------------------
void goodG2B_41()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodG2BSink(7);
}

//----- (000000000041495B) ----------------------------------------------------
void goodB2G_26()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  v3 = v4;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodB2GSink(v4);
}

//----- (00000000004149C9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_good()
{
  goodG2B_41();
  goodB2G_26();
}

//----- (00000000004149E3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000414AA4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000414B65) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000414C2C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  in_addr_t v3; // [rsp+14h] [rbp-3Ch]
  int v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+3Ch] [rbp-14h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v10 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v10;
  v6 = v10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 414C2C: using guessed type char buf[16];

//----- (0000000000414DCA) ----------------------------------------------------
void goodG2B_42()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000414EA2) ----------------------------------------------------
void goodB2G_27()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  in_addr_t v3; // [rsp+14h] [rbp-3Ch]
  int v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+3Ch] [rbp-14h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v10 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v10;
  v6 = v10;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 414EA2: using guessed type char buf[16];

//----- (0000000000415046) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good()
{
  goodG2B_42();
  goodB2G_27();
}

//----- (0000000000415060) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000415172) ----------------------------------------------------
void goodG2B_43()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041523E) ----------------------------------------------------
void goodB2G_28()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000415356) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good()
{
  goodG2B_43();
  goodB2G_28();
}

//----- (0000000000415370) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000415431) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004154F2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004155B9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_badSink(a1);
}

//----- (00000000004155D0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodG2BSink(a1);
}

//----- (00000000004155E7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodB2GSink(a1);
}

//----- (00000000004155FE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4155FE: using guessed type char buf[16];

//----- (0000000000415792) ----------------------------------------------------
void goodB2G_29()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 415792: using guessed type char buf[16];

//----- (000000000041592C) ----------------------------------------------------
void goodG2B_44()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004159FA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good()
{
  goodB2G_29();
  goodG2B_44();
}

//----- (0000000000415A14) ----------------------------------------------------
void *__fastcall badSource_4(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( badStatic_0 )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D238: using guessed type int badStatic_0;

//----- (0000000000415A4F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  badStatic_0 = 1;
  dest = badSource_4(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D238: using guessed type int badStatic_0;

//----- (0000000000415AD4) ----------------------------------------------------
void *__fastcall goodG2B1Source_0(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B1Static_0 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0x28uLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D23C: using guessed type int goodG2B1Static_0;

//----- (0000000000415B1B) ----------------------------------------------------
void goodG2B1_26()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  goodG2B1Static_0 = 0;
  dest = goodG2B1Source_0(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D23C: using guessed type int goodG2B1Static_0;

//----- (0000000000415BA0) ----------------------------------------------------
void *__fastcall goodG2B2Source_0(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B2Static_0 )
  {
    v2 = malloc(0x28uLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D240: using guessed type int goodG2B2Static_0;

//----- (0000000000415BDB) ----------------------------------------------------
void goodG2B2_26()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  goodG2B2Static_0 = 1;
  dest = goodG2B2Source_0(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D240: using guessed type int goodG2B2Static_0;

//----- (0000000000415C60) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21_good()
{
  goodG2B1_26();
  goodG2B2_26();
}

//----- (0000000000415C7A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_badSink(&v0);
}

//----- (0000000000415C9E) ----------------------------------------------------
void goodG2B_45()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodG2BSink(&v0);
}

//----- (0000000000415CC2) ----------------------------------------------------
void goodB2G_30()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodB2GSink(&v0);
}

//----- (0000000000415CE6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63_good()
{
  goodG2B_45();
  goodB2G_30();
}

//----- (0000000000415D00) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_13_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000415DDA) ----------------------------------------------------
void goodB2G1_18()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000415EC0) ----------------------------------------------------
void goodB2G2_18()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000415F9A) ----------------------------------------------------
void goodG2B1_27()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041607B) ----------------------------------------------------
void goodG2B2_27()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416150) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_13_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_27();
  goodG2B2_27();
}

//----- (000000000041617E) ----------------------------------------------------
void __fastcall badSink_6(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( badStatic_1 )
  {
    v2 = strlen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, (const wchar_t *)a1);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D244: using guessed type int badStatic_1;

//----- (00000000004161FB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  badStatic_1 = 1;
  badSink_6((const char *)s);
}
// 68D244: using guessed type int badStatic_1;

//----- (0000000000416270) ----------------------------------------------------
void __fastcall goodB2G1Sink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = wcslen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, a1);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D248: using guessed type int goodB2G1Static;

//----- (00000000004162F9) ----------------------------------------------------
void goodB2G1_19()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  goodB2G1Static = 0;
  goodB2G1Sink(s);
}
// 68D248: using guessed type int goodB2G1Static;

//----- (000000000041636E) ----------------------------------------------------
void __fastcall goodB2G2Sink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static )
  {
    v2 = wcslen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, a1);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D24C: using guessed type int goodB2G2Static;

//----- (00000000004163EB) ----------------------------------------------------
void goodB2G2_19()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  goodB2G2Static = 1;
  goodB2G2Sink(s);
}
// 68D24C: using guessed type int goodB2G2Static;

//----- (0000000000416460) ----------------------------------------------------
void __fastcall goodG2BSink_6(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic )
  {
    v2 = strlen(a1);
    dest = (char *)calloc(v2 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, a1);
    printLine(dest);
    free(dest);
  }
}
// 68D250: using guessed type int goodG2BStatic;

//----- (00000000004164DD) ----------------------------------------------------
void goodG2B_46()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  goodG2BStatic = 1;
  goodG2BSink_6(s);
}
// 68D250: using guessed type int goodG2BStatic;

//----- (000000000041654D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B_46();
}

//----- (0000000000416571) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_03_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000416635) ----------------------------------------------------
void goodB2G1_20()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004166F9) ----------------------------------------------------
void goodB2G2_20()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004167BD) ----------------------------------------------------
void goodG2B1_28()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000041687C) ----------------------------------------------------
void goodG2B2_28()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000041693B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_03_good()
{
  goodB2G1_20();
  goodB2G2_20();
  goodG2B1_28();
  goodG2B2_28();
}

//----- (0000000000416969) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_badSink(10);
}

//----- (000000000041698B) ----------------------------------------------------
void goodG2B_47()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodG2BSink(7);
}

//----- (00000000004169AD) ----------------------------------------------------
void goodB2G_31()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodB2GSink(10);
}

//----- (00000000004169CF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52_good()
{
  goodG2B_47();
  goodB2G_31();
}

//----- (00000000004169E9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_badSink(void **a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = *a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000416A7A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_goodG2BSink(void **a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = *a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000416B0B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000416BA2) ----------------------------------------------------
void goodG2B_48()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000416C39) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_good()
{
  goodG2B_48();
}

//----- (0000000000416C49) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (0000000000416C54) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (0000000000416C5F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (0000000000416D91) ----------------------------------------------------
void goodB2G1_21()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsFalse_3() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (0000000000416ED4) ----------------------------------------------------
void goodB2G2_21()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (000000000041700C) ----------------------------------------------------
void goodG2B1_29()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000417104) ----------------------------------------------------
void goodG2B2_29()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (00000000004171F0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_29();
  goodG2B2_29();
}

//----- (000000000041721E) ----------------------------------------------------
void __fastcall badSink_7(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000041727F) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))badSink_7)(v1);
}

//----- (00000000004172C5) ----------------------------------------------------
void __fastcall goodG2BSink_7(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (0000000000417326) ----------------------------------------------------
__int64 goodG2B_49()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))goodG2BSink_7)(v1);
}

//----- (000000000041736C) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44_good()
{
  return goodG2B_49();
}

//----- (000000000041737C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_bad()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_badSink(v0);
}

//----- (00000000004173B9) ----------------------------------------------------
void goodG2B_50()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b_goodG2BSink(v0);
}

//----- (00000000004173F6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54_good()
{
  goodG2B_50();
}

//----- (0000000000417406) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004174C7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000417588) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041764F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  char v4; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink((__int64)&v4);
}
// 41764F: using guessed type char buf[16];

//----- (000000000041773F) ----------------------------------------------------
void goodG2B_51()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000417769) ----------------------------------------------------
void goodB2G_32()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  char v4; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodB2GSink((__int64)&v4);
}
// 417769: using guessed type char buf[16];

//----- (0000000000417859) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66_good()
{
  goodG2B_51();
  goodB2G_32();
}

//----- (0000000000417873) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_badSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000417945) ----------------------------------------------------
void goodG2B_52()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000417A17) ----------------------------------------------------
void goodB2G_33()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodB2GSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000417AEF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61_good()
{
  goodG2B_52();
  goodB2G_33();
}

//----- (0000000000417B09) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D430: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData;

//----- (0000000000417BD0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D438: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData;

//----- (0000000000417C97) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D434: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData;

//----- (0000000000417D64) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_12_bad()
{
  wchar_t *v0; // [rsp+8h] [rbp-38h]
  size_t v1; // [rsp+10h] [rbp-30h]
  wchar_t *dest; // [rsp+18h] [rbp-28h]
  size_t v3; // [rsp+20h] [rbp-20h]
  _BYTE *v4; // [rsp+28h] [rbp-18h]
  wchar_t *s; // [rsp+30h] [rbp-10h]
  wchar_t *src; // [rsp+38h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    v4 = malloc(0x32uLL);
    if ( !v4 )
      exit(-1);
    memset(v4, 65, 0x31uLL);
    v4[49] = 0;
    src = (wchar_t *)v4;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v3 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
  else
  {
    v1 = wcslen(src);
    v0 = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !v0 )
      exit(-1);
    wcscpy(v0, src);
    printWLine((__int64)v0);
    free(v0);
  }
}

//----- (0000000000417EF5) ----------------------------------------------------
void goodB2G_34()
{
  wchar_t *v0; // [rsp+8h] [rbp-38h]
  size_t v1; // [rsp+10h] [rbp-30h]
  wchar_t *dest; // [rsp+18h] [rbp-28h]
  size_t v3; // [rsp+20h] [rbp-20h]
  wchar_t *v4; // [rsp+28h] [rbp-18h]
  wchar_t *s; // [rsp+30h] [rbp-10h]
  wchar_t *src; // [rsp+38h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    v4 = (wchar_t *)malloc(0xC8uLL);
    if ( !v4 )
      exit(-1);
    wmemset(v4, 65, 0x31uLL);
    v4[49] = 0;
    src = v4;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = wcslen(src);
    dest = (wchar_t *)calloc(v3 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
  else
  {
    v1 = wcslen(src);
    v0 = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !v0 )
      exit(-1);
    wcscpy(v0, src);
    printWLine((__int64)v0);
    free(v0);
  }
}

//----- (000000000041808B) ----------------------------------------------------
void goodG2B_53()
{
  char *v0; // [rsp+8h] [rbp-38h]
  size_t v1; // [rsp+10h] [rbp-30h]
  char *dest; // [rsp+18h] [rbp-28h]
  size_t v3; // [rsp+20h] [rbp-20h]
  _BYTE *v4; // [rsp+28h] [rbp-18h]
  _BYTE *s; // [rsp+30h] [rbp-10h]
  char *src; // [rsp+38h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    v4 = malloc(0x32uLL);
    if ( !v4 )
      exit(-1);
    memset(v4, 65, 0x31uLL);
    v4[49] = 0;
    src = v4;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = strlen(src);
    dest = (char *)calloc(v3 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
  else
  {
    v1 = strlen(src);
    v0 = (char *)calloc(v1 + 1, 1uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, src);
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000418217) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_12_good()
{
  goodB2G_34();
  goodG2B_53();
}

//----- (0000000000418231) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000418316) ----------------------------------------------------
void goodB2G1_22()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000418403) ----------------------------------------------------
void goodB2G2_22()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004184F0) ----------------------------------------------------
void goodG2B1_30()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004185BE) ----------------------------------------------------
void goodG2B2_30()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041868C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_30();
  goodG2B2_30();
}

//----- (00000000004186BA) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_badSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (00000000004186EB) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_goodG2BSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000041871C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (0000000000418783) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (00000000004187EA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticFive_1 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D184: using guessed type int staticFive_1;

//----- (0000000000418918) ----------------------------------------------------
void goodB2G1_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticFive_1 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D184: using guessed type int staticFive_1;

//----- (0000000000418A57) ----------------------------------------------------
void goodB2G2_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( staticFive_1 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D184: using guessed type int staticFive_1;

//----- (0000000000418B8B) ----------------------------------------------------
void goodG2B1_31()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_1 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_1 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D184: using guessed type int staticFive_1;

//----- (0000000000418C7D) ----------------------------------------------------
void goodG2B2_31()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_1 == 5 )
    v3 = 7;
  if ( staticFive_1 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D184: using guessed type int staticFive_1;

//----- (0000000000418D63) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_31();
  goodG2B2_31();
}

//----- (0000000000418D91) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_badSink(&v0);
}

//----- (0000000000418DD0) ----------------------------------------------------
void goodG2B_54()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b_goodG2BSink(&v0);
}

//----- (0000000000418E0F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63_good()
{
  goodG2B_54();
}

//----- (0000000000418E1F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_badSink(a1);
}

//----- (0000000000418E36) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodG2BSink(a1);
}

//----- (0000000000418E4D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c_goodB2GSink(a1);
}

//----- (0000000000418E64) ----------------------------------------------------
__int64 __fastcall badSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000418E91) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_5(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000418F63) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 7LL;
}

//----- (0000000000418F76) ----------------------------------------------------
void goodG2B_55()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_3();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000419048) ----------------------------------------------------
__int64 __fastcall goodB2GSource_1(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000419075) ----------------------------------------------------
void goodB2G_35()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_1(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041914D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good()
{
  goodB2G_35();
  goodG2B_55();
}

//----- (0000000000419167) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (00000000004191DC) ----------------------------------------------------
void goodG2B1_32()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000419251) ----------------------------------------------------
void goodG2B2_32()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (00000000004192C6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_good()
{
  goodG2B1_32();
  goodG2B2_32();
}

//----- (00000000004192E0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_badSink(&v0);
}

//----- (000000000041931F) ----------------------------------------------------
void goodG2B_56()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink(&v0);
}

//----- (000000000041935E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64_good()
{
  goodG2B_56();
}

//----- (000000000041936E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 10;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (0000000000419467) ----------------------------------------------------
void goodB2G_36()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    ;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}

//----- (0000000000419566) ----------------------------------------------------
void goodG2B_57()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (000000000041965F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_good()
{
  goodB2G_36();
  goodG2B_57();
}

//----- (0000000000419679) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000419707) ----------------------------------------------------
void goodG2B1_33()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004197A1) ----------------------------------------------------
void goodG2B2_33()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041982F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_good()
{
  goodG2B1_33();
  goodG2B2_33();
}

//----- (0000000000419849) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041990F) ----------------------------------------------------
void goodB2G_37()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004199D5) ----------------------------------------------------
void goodG2B_58()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (0000000000419A96) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good()
{
  goodB2G_37();
  goodG2B_58();
}

//----- (0000000000419AB0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(a1);
}

//----- (0000000000419ACA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(a1);
}

//----- (0000000000419AE4) ----------------------------------------------------
void __fastcall badSink_8(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000419BA5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_bad()
{
  badSink_8(10);
}

//----- (0000000000419BD0) ----------------------------------------------------
void __fastcall goodG2BSink_8(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000419C91) ----------------------------------------------------
void goodG2B_59()
{
  goodG2BSink_8(7);
}

//----- (0000000000419CBC) ----------------------------------------------------
void __fastcall goodB2GSink_5(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000419D83) ----------------------------------------------------
void goodB2G_38()
{
  goodB2GSink_5(10);
}

//----- (0000000000419DAE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44_good()
{
  goodG2B_59();
  goodB2G_38();
}

//----- (0000000000419DC8) ----------------------------------------------------
void *badSource_6()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000419DF9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)badSource_6();
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000419E5E) ----------------------------------------------------
void *goodG2BSource_4()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000419E8F) ----------------------------------------------------
void goodG2B_60()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)goodG2BSource_4();
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000419EF4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42_good()
{
  goodG2B_60();
}

//----- (0000000000419F04) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000419FC5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041A086) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041A14D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_11_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}

//----- (000000000041A22D) ----------------------------------------------------
void goodB2G1_24()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}

//----- (000000000041A319) ----------------------------------------------------
void goodB2G2_24()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}

//----- (000000000041A3F9) ----------------------------------------------------
void goodG2B1_34()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}

//----- (000000000041A4E0) ----------------------------------------------------
void goodG2B2_34()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}

//----- (000000000041A5BB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_11_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_34();
  goodG2B2_34();
}

//----- (000000000041A5E9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_02_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041A6AD) ----------------------------------------------------
void goodB2G1_25()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000041A771) ----------------------------------------------------
void goodB2G2_25()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000041A835) ----------------------------------------------------
void goodG2B1_35()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000041A8F4) ----------------------------------------------------
void goodG2B2_35()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000041A9B3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_02_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B1_35();
  goodG2B2_35();
}

//----- (000000000041A9E1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData = v7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_badSink();
}
// 68D430: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_badData;
// 41A9E1: using guessed type char buf[16];

//----- (000000000041AB18) ----------------------------------------------------
void goodG2B_61()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodG2BSink();
}
// 68D438: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodG2BData;

//----- (000000000041AB43) ----------------------------------------------------
void goodB2G_39()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData = v7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b_goodB2GSink();
}
// 68D434: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_goodB2GData;
// 41AB43: using guessed type char buf[16];

//----- (000000000041AC7A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68_good()
{
  goodG2B_61();
  goodB2G_39();
}

//----- (000000000041AC94) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_badSink)(v1);
}

//----- (000000000041ACDA) ----------------------------------------------------
__int64 goodG2B_62()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0x28uLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b_goodG2BSink)(v1);
}

//----- (000000000041AD20) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65_good()
{
  return goodG2B_62();
}

//----- (000000000041AD30) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticTrue_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D188: using guessed type int staticTrue_3;

//----- (000000000041AE2B) ----------------------------------------------------
void goodB2G1_26()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticFalse_3 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D188: using guessed type int staticTrue_3;
// 68D254: using guessed type int staticFalse_3;

//----- (000000000041AF39) ----------------------------------------------------
void goodB2G2_26()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticTrue_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D188: using guessed type int staticTrue_3;

//----- (000000000041B03C) ----------------------------------------------------
void goodG2B1_36()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D188: using guessed type int staticTrue_3;
// 68D254: using guessed type int staticFalse_3;

//----- (000000000041B12C) ----------------------------------------------------
void goodG2B2_36()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_3 )
    v3 = 7;
  if ( staticTrue_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D188: using guessed type int staticTrue_3;

//----- (000000000041B210) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_good()
{
  goodB2G1_26();
  goodB2G2_26();
  goodG2B1_36();
  goodG2B2_36();
}

//----- (000000000041B23E) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_badSource()
{
  return 10LL;
}

//----- (000000000041B251) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000041B264) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodB2GSource()
{
  return 10LL;
}

//----- (000000000041B277) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_badSink(v0);
}

//----- (000000000041B2B4) ----------------------------------------------------
void goodG2B_63()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_goodG2BSink(v0);
}

//----- (000000000041B2F1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53_good()
{
  goodG2B_63();
}

//----- (000000000041B301) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_2 == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D18C: using guessed type int staticFive_2;

//----- (000000000041B390) ----------------------------------------------------
void goodG2B1_37()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_2 == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D18C: using guessed type int staticFive_2;

//----- (000000000041B42B) ----------------------------------------------------
void goodG2B2_37()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_2 == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D18C: using guessed type int staticFive_2;

//----- (000000000041B4BA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_good()
{
  goodG2B1_37();
  goodG2B2_37();
}

//----- (000000000041B4D4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_4 )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D190: using guessed type int staticTrue_4;

//----- (000000000041B552) ----------------------------------------------------
void goodG2B1_38()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticFalse_4 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D258: using guessed type int staticFalse_4;

//----- (000000000041B5DC) ----------------------------------------------------
void goodG2B2_38()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_4 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D190: using guessed type int staticTrue_4;

//----- (000000000041B65A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_good()
{
  goodG2B1_38();
  goodG2B2_38();
}

//----- (000000000041B674) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_badSink(v7);
}
// 41B674: using guessed type char buf[16];

//----- (000000000041B7A2) ----------------------------------------------------
void goodG2B_64()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodG2BSink(7);
}

//----- (000000000041B7C4) ----------------------------------------------------
void goodB2G_40()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodB2GSink(v7);
}
// 41B7C4: using guessed type char buf[16];

//----- (000000000041B8F2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53_good()
{
  goodG2B_64();
  goodB2G_40();
}

//----- (000000000041B90C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000041B95D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_badSink(v0);
}

//----- (000000000041B99A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000041B9EB) ----------------------------------------------------
void goodG2B_65()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_goodG2BSink(v0);
}

//----- (000000000041BA28) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_good()
{
  goodG2B_65();
}

//----- (000000000041BA38) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+10h] [rbp-20h]
  unsigned __int64 j; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  ptr = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( j = 0LL; v1 + 1 > j; ++j )
    *((_BYTE *)ptr + j) = s[j];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041BAF4) ----------------------------------------------------
void goodG2B_66()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+10h] [rbp-20h]
  unsigned __int64 j; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  ptr = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( j = 0LL; v1 + 1 > j; ++j )
    *((_BYTE *)ptr + j) = s[j];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041BBB0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_good()
{
  goodG2B_66();
}

//----- (000000000041BBC0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_badSink(a1);
}

//----- (000000000041BBDA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodG2BSink(a1);
}

//----- (000000000041BBF4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54d_goodB2GSink(a1);
}

//----- (000000000041BC0E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  v2 = v0;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041BCFC) ----------------------------------------------------
void goodG2B_67()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041BDD4) ----------------------------------------------------
void goodB2G_41()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  v2 = v0;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041BEC8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_good()
{
  goodG2B_67();
  goodB2G_41();
}

//----- (000000000041BEE2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_badSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove((void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D440: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData;

//----- (000000000041BF50) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove((void *)CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D448: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;

//----- (000000000041BFBE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000041C048) ----------------------------------------------------
void goodG2B1_39()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000041C0D2) ----------------------------------------------------
void goodG2B2_39()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000041C15C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_good()
{
  goodG2B1_39();
  goodG2B2_39();
}

//----- (000000000041C176) ----------------------------------------------------
void __fastcall badSink_9(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000041C1FC) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))badSink_9)(v1);
}

//----- (000000000041C242) ----------------------------------------------------
void __fastcall goodG2BSink_9(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000041C2C8) ----------------------------------------------------
__int64 goodG2B_68()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))goodG2BSink_9)(v1);
}

//----- (000000000041C30E) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44_good()
{
  return goodG2B_68();
}

//----- (000000000041C31E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_01_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041C3E2) ----------------------------------------------------
void goodG2B_69()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000041C4A1) ----------------------------------------------------
void goodB2G_42()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000041C565) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_01_good()
{
  goodG2B_69();
  goodB2G_42();
}

//----- (000000000041C57F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041C64B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041C717) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041C7E9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041C8AA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041C96B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041CA32) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad()
{
  char src[8]; // [rsp+0h] [rbp-30h]
  char *v1; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char *v3; // [rsp+28h] [rbp-8h]

  v3 = (char *)malloc(0xAuLL);
  if ( !v3 )
    exit(-1);
  v1 = v3;
  dest = v3;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v3, src);
  printLine(dest);
  free(dest);
}

//----- (000000000041CAB6) ----------------------------------------------------
void goodG2B_70()
{
  char src[8]; // [rsp+0h] [rbp-30h]
  char *v1; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char *v3; // [rsp+28h] [rbp-8h]

  v3 = (char *)malloc(0xBuLL);
  if ( !v3 )
    exit(-1);
  v1 = v3;
  dest = v3;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v3, src);
  printLine(dest);
  free(dest);
}

//----- (000000000041CB3A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_good()
{
  goodG2B_70();
}

//----- (000000000041CB4A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_badSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041CC1C) ----------------------------------------------------
void goodG2B_71()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041CCEE) ----------------------------------------------------
void goodB2G_43()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodB2GSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041CDC6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_good()
{
  goodG2B_71();
  goodB2G_43();
}

//----- (000000000041CDE0) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badSource(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badGlobal )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D2E0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badGlobal;

//----- (000000000041CE1B) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0x28uLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D2E4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Global;

//----- (000000000041CE62) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Global )
  {
    v2 = malloc(0x28uLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D2E8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Global;

//----- (000000000041CE9D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041CF2A) ----------------------------------------------------
void goodG2B1_40()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041CFC3) ----------------------------------------------------
void goodG2B2_40()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041D050) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_good()
{
  goodG2B1_40();
  goodG2B2_40();
}

//----- (000000000041D06A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink(__int64 a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *(char **)(a1 + 16);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000041D0C7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink(__int64 a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *(char **)(a1 + 16);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000041D124) ----------------------------------------------------
void badSink_10()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D25C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;

//----- (000000000041D1EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData = v2;
  badSink_10();
}
// 68D25C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;

//----- (000000000041D25E) ----------------------------------------------------
void goodG2BSink_10()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D260: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData;

//----- (000000000041D325) ----------------------------------------------------
void goodG2B_72()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData = 7;
  goodG2BSink_10();
}
// 68D260: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData;

//----- (000000000041D350) ----------------------------------------------------
void goodB2GSink_6()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D264: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData;

//----- (000000000041D41D) ----------------------------------------------------
void goodB2G_44()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData = v2;
  goodB2GSink_6();
}
// 68D264: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData;

//----- (000000000041D490) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good()
{
  goodG2B_72();
  goodB2G_44();
}

//----- (000000000041D4AA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000041D5D2) ----------------------------------------------------
void goodB2G1_27()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000041D70B) ----------------------------------------------------
void goodB2G2_27()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000041D839) ----------------------------------------------------
void goodG2B1_41()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041D927) ----------------------------------------------------
void goodG2B2_41()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000041DA09) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_41();
  goodG2B2_41();
}

//----- (000000000041DA37) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000041DA68) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_goodG2BSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (000000000041DA99) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_badSink(a1);
}

//----- (000000000041DAB3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c_goodG2BSink(a1);
}

//----- (000000000041DACD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_3 == 5 )
    v3 = 10;
  if ( staticFive_3 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D194: using guessed type int staticFive_3;

//----- (000000000041DBB3) ----------------------------------------------------
void goodB2G1_28()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( staticFive_3 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D194: using guessed type int staticFive_3;

//----- (000000000041DCAA) ----------------------------------------------------
void goodB2G2_28()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( staticFive_3 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D194: using guessed type int staticFive_3;

//----- (000000000041DD96) ----------------------------------------------------
void goodG2B1_42()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_3 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_3 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D194: using guessed type int staticFive_3;

//----- (000000000041DE88) ----------------------------------------------------
void goodG2B2_42()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_3 == 5 )
    v3 = 7;
  if ( staticFive_3 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D194: using guessed type int staticFive_3;

//----- (000000000041DF6E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07_good()
{
  goodB2G1_28();
  goodB2G2_28();
  goodG2B1_42();
  goodG2B2_42();
}

//----- (000000000041DF9C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000041E003) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000041E06A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_badSink(a1);
}

//----- (000000000041E081) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodG2BSink(a1);
}

//----- (000000000041E098) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c_goodB2GSink(a1);
}

//----- (000000000041E0AF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_09_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041E187) ----------------------------------------------------
void goodB2G1_29()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041E26B) ----------------------------------------------------
void goodB2G2_29()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041E343) ----------------------------------------------------
void goodG2B1_43()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041E422) ----------------------------------------------------
void goodG2B2_43()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041E4F5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_09_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_43();
  goodG2B2_43();
}

//----- (000000000041E523) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_badSink();
}
// 68D440: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_badData;

//----- (000000000041E569) ----------------------------------------------------
void goodG2B_73()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b_goodG2BSink();
}
// 68D448: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_goodG2BData;

//----- (000000000041E5AF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68_good()
{
  goodG2B_73();
}

//----- (000000000041E5BF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041E680) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041E741) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041E808) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000041E883) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (000000000041E8FE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000041E979) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_badSink;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (000000000041E9EA) ----------------------------------------------------
void goodG2B_74()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodG2BSink(7);
}

//----- (000000000041EA15) ----------------------------------------------------
__int64 goodB2G_45()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b_goodB2GSink;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (000000000041EA86) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65_good()
{
  goodG2B_74();
  return goodB2G_45();
}

//----- (000000000041EAA0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000041EAF1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000041EB42) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource();
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041EBDC) ----------------------------------------------------
void goodG2B_75()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_goodG2BSource();
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041EC76) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61_good()
{
  goodG2B_75();
}

//----- (000000000041EC86) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badSource(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badGlobal )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D33C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badGlobal;

//----- (000000000041ECC1) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D340: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Global;

//----- (000000000041ED08) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Global )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D344: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Global;

//----- (000000000041ED43) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_bad()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_badSink(v0);
}

//----- (000000000041ED80) ----------------------------------------------------
void goodG2B_76()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b_goodG2BSink(v0);
}

//----- (000000000041EDBD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53_good()
{
  goodG2B_76();
}

//----- (000000000041EDCD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_badSink(v7);
}
// 41EDCD: using guessed type char buf[16];

//----- (000000000041EEFB) ----------------------------------------------------
void goodG2B_77()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodG2BSink(7);
}

//----- (000000000041EF1D) ----------------------------------------------------
void goodB2G_46()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b_goodB2GSink(v7);
}
// 41EF1D: using guessed type char buf[16];

//----- (000000000041F04B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52_good()
{
  goodG2B_77();
  goodB2G_46();
}

//----- (000000000041F065) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_badSink(a1);
}

//----- (000000000041F07F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodG2BSink(a1);
}

//----- (000000000041F099) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54c_goodB2GSink(a1);
}

//----- (000000000041F0B3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041F174) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041F235) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000041F2FC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041F3D2) ----------------------------------------------------
void goodG2B_78()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041F4A8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12_good()
{
  goodG2B_78();
}

//----- (000000000041F4B8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticFive_4 == 5 )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D198: using guessed type int staticFive_4;

//----- (000000000041F56C) ----------------------------------------------------
void goodG2B1_44()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticFive_4 == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D198: using guessed type int staticFive_4;

//----- (000000000041F62C) ----------------------------------------------------
void goodG2B2_44()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticFive_4 == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D198: using guessed type int staticFive_4;

//----- (000000000041F6E0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good()
{
  goodG2B1_44();
  goodG2B2_44();
}

//----- (000000000041F6FA) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (000000000041F705) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (000000000041F710) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F813) ----------------------------------------------------
void goodB2G1_30()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)staticReturnsFalse_4() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F929) ----------------------------------------------------
void goodB2G2_30()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041FA34) ----------------------------------------------------
void goodG2B1_45()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_4() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000041FB2C) ----------------------------------------------------
void goodG2B2_45()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_4() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000041FC18) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_45();
  goodG2B2_45();
}

//----- (000000000041FC46) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 41FC46: using guessed type char buf[16];

//----- (000000000041FE20) ----------------------------------------------------
void goodB2G_47()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 41FE20: using guessed type char buf[16];

//----- (0000000000420000) ----------------------------------------------------
void goodG2B_79()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004200CE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16_good()
{
  goodB2G_47();
  goodG2B_79();
}

//----- (00000000004200E8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64_bad()
{
  wchar_t *v0; // [rsp+0h] [rbp-10h]
  wchar_t *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink((const char **)&v0);
}

//----- (0000000000420153) ----------------------------------------------------
void goodG2B_80()
{
  void *v0; // [rsp+0h] [rbp-10h]
  void *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  *((_BYTE *)s + 49) = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink((const char **)&v0);
}

//----- (00000000004201B9) ----------------------------------------------------
void goodB2G_48()
{
  wchar_t *v0; // [rsp+0h] [rbp-10h]
  wchar_t *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink((const wchar_t **)&v0);
}

//----- (0000000000420224) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_64_good()
{
  goodG2B_80();
  goodB2G_48();
}

//----- (000000000042023E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_badSink(&v0);
}

//----- (000000000042027D) ----------------------------------------------------
void goodG2B_81()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink(&v0);
}

//----- (00000000004202BC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63_good()
{
  goodG2B_81();
}

//----- (00000000004202CC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_badSink(&v4);
}
// 4202CC: using guessed type char buf[16];

//----- (00000000004203FC) ----------------------------------------------------
void goodG2B_82()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodG2BSink(&v0);
}

//----- (0000000000420420) ----------------------------------------------------
void goodB2G_49()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodB2GSink(&v4);
}
// 420420: using guessed type char buf[16];

//----- (0000000000420550) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63_good()
{
  goodG2B_82();
  goodB2G_49();
}

//----- (000000000042056A) ----------------------------------------------------
__int64 badSource_7()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004205C9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_7();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042069B) ----------------------------------------------------
__int64 goodG2BSource_5()
{
  return 7LL;
}

//----- (00000000004206AE) ----------------------------------------------------
void goodG2B_83()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_5();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000420780) ----------------------------------------------------
__int64 goodB2GSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004207DF) ----------------------------------------------------
void goodB2G_50()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_2();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004208B7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42_good()
{
  goodB2G_50();
  goodG2B_83();
}

//----- (00000000004208D1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;
// 4208D1: using guessed type char buf[16];

//----- (0000000000420A81) ----------------------------------------------------
void goodB2G1_31()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;
// 420A81: using guessed type char buf[16];

//----- (0000000000420C42) ----------------------------------------------------
void goodB2G2_31()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;
// 420C42: using guessed type char buf[16];

//----- (0000000000420DF8) ----------------------------------------------------
void goodG2B1_46()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000420EEA) ----------------------------------------------------
void goodG2B2_46()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000420FD0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_46();
  goodG2B2_46();
}

//----- (0000000000420FFE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_bad()
{
  char buf[16]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+10h] [rbp-50h]
  uint16_t v2; // [rsp+12h] [rbp-4Eh]
  in_addr_t v3; // [rsp+14h] [rbp-4Ch]
  int v4; // [rsp+2Ch] [rbp-34h]
  void *ptr; // [rsp+30h] [rbp-30h]
  int v6; // [rsp+3Ch] [rbp-24h]
  int v7; // [rsp+40h] [rbp-20h]
  int fd; // [rsp+44h] [rbp-1Ch]
  int *v9; // [rsp+48h] [rbp-18h]
  int *v10; // [rsp+50h] [rbp-10h]
  int i; // [rsp+58h] [rbp-8h]
  int v12; // [rsp+5Ch] [rbp-4h]

  v10 = &v4;
  v9 = &v4;
  v4 = -1;
  v12 = -1;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v12 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v10 = v12;
  v6 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 420FFE: using guessed type char buf[16];

//----- (00000000004211BB) ----------------------------------------------------
void goodG2B_84()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (00000000004212B2) ----------------------------------------------------
void goodB2G_51()
{
  char buf[16]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+10h] [rbp-50h]
  uint16_t v2; // [rsp+12h] [rbp-4Eh]
  in_addr_t v3; // [rsp+14h] [rbp-4Ch]
  int v4; // [rsp+2Ch] [rbp-34h]
  void *ptr; // [rsp+30h] [rbp-30h]
  int v6; // [rsp+3Ch] [rbp-24h]
  int v7; // [rsp+40h] [rbp-20h]
  int fd; // [rsp+44h] [rbp-1Ch]
  int *v9; // [rsp+48h] [rbp-18h]
  int *v10; // [rsp+50h] [rbp-10h]
  int i; // [rsp+58h] [rbp-8h]
  int v12; // [rsp+5Ch] [rbp-4h]

  v10 = &v4;
  v9 = &v4;
  v4 = -1;
  v12 = -1;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v12 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v10 = v12;
  v6 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4212B2: using guessed type char buf[16];

//----- (0000000000421475) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32_good()
{
  goodG2B_84();
  goodB2G_51();
}

//----- (000000000042148F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_badSink(a1);
}

//----- (00000000004214A6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodG2BSink(a1);
}

//----- (00000000004214BD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodB2GSink(a1);
}

//----- (00000000004214D4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000421595) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000421656) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042171D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (0000000000421784) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (00000000004217EB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_badSink(a1);
}

//----- (0000000000421805) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c_goodG2BSink(a1);
}

//----- (000000000042181F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004218E6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004219AD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000421A7A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_54_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_badSink((const char *)s);
}

//----- (0000000000421AE5) ----------------------------------------------------
void goodG2B_85()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodG2BSink(s);
}

//----- (0000000000421B4B) ----------------------------------------------------
void goodB2G_52()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_54b_goodB2GSink(s);
}

//----- (0000000000421BB6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_54_good()
{
  goodG2B_85();
  goodB2G_52();
}

//----- (0000000000421BD0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000421C4F) ----------------------------------------------------
void goodG2B1_47()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000421CDA) ----------------------------------------------------
void goodG2B2_47()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000421D59) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_good()
{
  goodG2B1_47();
  goodG2B2_47();
}

//----- (0000000000421D73) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_badSink(a1);
}

//----- (0000000000421D8A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodG2BSink(a1);
}

//----- (0000000000421DA1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodB2GSink(a1);
}

//----- (0000000000421DB8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000421E46) ----------------------------------------------------
void goodG2B1_48()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D3F8: using guessed type int globalFalse;

//----- (0000000000421EE0) ----------------------------------------------------
void goodG2B2_48()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000421F6E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_good()
{
  goodG2B1_48();
  goodG2B2_48();
}

//----- (0000000000421F88) ----------------------------------------------------
void *__fastcall badSource_8(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( badStatic_2 )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D268: using guessed type int badStatic_2;

//----- (0000000000421FC3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  badStatic_2 = 1;
  ptr = badSource_8(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D268: using guessed type int badStatic_2;

//----- (0000000000422067) ----------------------------------------------------
void *__fastcall goodG2B1Source_1(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B1Static_1 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D26C: using guessed type int goodG2B1Static_1;

//----- (00000000004220AE) ----------------------------------------------------
void goodG2B1_49()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  goodG2B1Static_1 = 0;
  ptr = goodG2B1Source_1(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D26C: using guessed type int goodG2B1Static_1;

//----- (0000000000422152) ----------------------------------------------------
void *__fastcall goodG2B2Source_1(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B2Static_1 )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D270: using guessed type int goodG2B2Static_1;

//----- (000000000042218D) ----------------------------------------------------
void goodG2B2_49()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  goodG2B2Static_1 = 1;
  ptr = goodG2B2Source_1(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D270: using guessed type int goodG2B2Static_1;

//----- (0000000000422231) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21_good()
{
  goodG2B1_49();
  goodG2B2_49();
}

//----- (000000000042224B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004222F4) ----------------------------------------------------
void goodG2B1_50()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042239D) ----------------------------------------------------
void goodG2B2_50()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000422446) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_good()
{
  goodG2B1_50();
  goodG2B2_50();
}

//----- (0000000000422460) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000422533) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000422606) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004226DF) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_badSink)(v1);
}

//----- (0000000000422725) ----------------------------------------------------
__int64 goodG2B_86()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b_goodG2BSink)(v1);
}

//----- (000000000042276B) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65_good()
{
  return goodG2B_86();
}

//----- (000000000042277B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (0000000000422801) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_badSink(v0);
}

//----- (000000000042283E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (00000000004228C4) ----------------------------------------------------
void goodG2B_87()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_goodG2BSink(v0);
}

//----- (0000000000422901) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41_good()
{
  goodG2B_87();
}

//----- (0000000000422911) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_badSink(a1);
}

//----- (000000000042292B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_goodG2BSink(a1);
}

//----- (0000000000422945) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004229EF) ----------------------------------------------------
void goodG2B_88()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000422A99) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good()
{
  goodG2B_88();
}

//----- (0000000000422AA9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000422B2D) ----------------------------------------------------
void goodG2B_89()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000422BB1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_good()
{
  goodG2B_89();
}

//----- (0000000000422BC1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticTrue_5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticTrue_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D19C: using guessed type int staticTrue_5;
// 422BC1: using guessed type char buf[16];

//----- (0000000000422DB5) ----------------------------------------------------
void goodB2G1_32()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticTrue_5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticFalse_5 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D19C: using guessed type int staticTrue_5;
// 68D274: using guessed type int staticFalse_5;
// 422DB5: using guessed type char buf[16];

//----- (0000000000422FBA) ----------------------------------------------------
void goodB2G2_32()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( staticTrue_5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( staticTrue_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D19C: using guessed type int staticTrue_5;
// 422FBA: using guessed type char buf[16];

//----- (00000000004231B4) ----------------------------------------------------
void goodG2B1_51()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_5 )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D19C: using guessed type int staticTrue_5;
// 68D274: using guessed type int staticFalse_5;

//----- (00000000004232A4) ----------------------------------------------------
void goodG2B2_51()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_5 )
    v3 = 7;
  if ( staticTrue_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D19C: using guessed type int staticTrue_5;

//----- (0000000000423388) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_51();
  goodG2B2_51();
}

//----- (00000000004233B6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (0000000000423417) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (0000000000423478) ----------------------------------------------------
void __fastcall badSink_11(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000423539) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  badSink_11(v7);
}
// 423539: using guessed type char buf[16];

//----- (0000000000423667) ----------------------------------------------------
void __fastcall goodG2BSink_11(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000423728) ----------------------------------------------------
void goodG2B_90()
{
  goodG2BSink_11(7);
}

//----- (000000000042374A) ----------------------------------------------------
void __fastcall goodB2GSink_7(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000423811) ----------------------------------------------------
void goodB2G_53()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2GSink_7(v7);
}
// 423811: using guessed type char buf[16];

//----- (000000000042393F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good()
{
  goodB2G_53();
  goodG2B_90();
}

//----- (0000000000423959) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D450: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_badData;

//----- (0000000000423A20) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D458: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodG2BData;

//----- (0000000000423AE7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D454: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodB2GData;

//----- (0000000000423BB4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad()
{
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  wchar_t *s; // [rsp+18h] [rbp-18h]
  wchar_t *src; // [rsp+20h] [rbp-10h]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  src = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  for ( j = 0; j <= 0; ++j )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}

//----- (0000000000423C9E) ----------------------------------------------------
void goodB2G_54()
{
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  wchar_t *s; // [rsp+18h] [rbp-18h]
  wchar_t *src; // [rsp+20h] [rbp-10h]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  src = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  for ( j = 0; j <= 0; ++j )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}

//----- (0000000000423D88) ----------------------------------------------------
void goodG2B_91()
{
  char *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  _BYTE *s; // [rsp+18h] [rbp-18h]
  char *src; // [rsp+20h] [rbp-10h]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  src = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  for ( j = 0; j <= 0; ++j )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}

//----- (0000000000423E6D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good()
{
  goodB2G_54();
  goodG2B_91();
}

//----- (0000000000423E87) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 423E87: using guessed type char buf[16];

//----- (0000000000424035) ----------------------------------------------------
void goodB2G1_33()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;
// 424035: using guessed type char buf[16];

//----- (00000000004241F4) ----------------------------------------------------
void goodB2G2_33()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4241F4: using guessed type char buf[16];

//----- (00000000004243A8) ----------------------------------------------------
void goodG2B1_52()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000424498) ----------------------------------------------------
void goodG2B2_52()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042457C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_52();
  goodG2B2_52();
}

//----- (00000000004245AA) ----------------------------------------------------
void __fastcall badSink_12(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000042461D) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad()
{
  wchar_t *s; // [rsp+8h] [rbp-18h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(wchar_t *))badSink_12)(s);
}

//----- (0000000000424691) ----------------------------------------------------
void __fastcall goodG2BSink_12(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (0000000000424704) ----------------------------------------------------
__int64 goodG2B_92()
{
  _BYTE *s; // [rsp+8h] [rbp-18h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(_BYTE *))goodG2BSink_12)(s);
}

//----- (0000000000424773) ----------------------------------------------------
void __fastcall goodB2GSink_8(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004247E6) ----------------------------------------------------
__int64 goodB2G_55()
{
  wchar_t *s; // [rsp+8h] [rbp-18h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return ((__int64 (__fastcall *)(wchar_t *))goodB2GSink_8)(s);
}

//----- (000000000042485A) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good()
{
  goodG2B_92();
  return goodB2G_55();
}

//----- (0000000000424874) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000424940) ----------------------------------------------------
void goodB2G1_34()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000424A12) ----------------------------------------------------
void goodB2G2_34()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000424AE4) ----------------------------------------------------
void goodG2B1_53()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000424BB0) ----------------------------------------------------
void goodG2B2_53()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000424C7C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_53();
  goodG2B2_53();
}

//----- (0000000000424CAA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badSink(v2);
}
// 68D278: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal;

//----- (0000000000424D1E) ----------------------------------------------------
void goodB2G1_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Sink(v2);
}
// 68D27C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global;

//----- (0000000000424D92) ----------------------------------------------------
void goodB2G2_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Sink(v2);
}
// 68D280: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global;

//----- (0000000000424E06) ----------------------------------------------------
void goodG2B_93()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BSink(7);
}
// 68D284: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal;

//----- (0000000000424E32) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B_93();
}

//----- (0000000000424E56) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000424F22) ----------------------------------------------------
void goodB2G1_36()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000424FF4) ----------------------------------------------------
void goodB2G2_36()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (00000000004250C6) ----------------------------------------------------
void goodG2B1_54()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000425192) ----------------------------------------------------
void goodG2B2_54()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042525E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_54();
  goodG2B2_54();
}

//----- (000000000042528C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_badSink()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData, src);
  printLine(dest);
  free(dest);
}
// 68D460: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData;

//----- (00000000004252E4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_goodG2BSink()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData, src);
  printLine(dest);
  free(dest);
}
// 68D468: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData;

//----- (000000000042533C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_badSink(a1);
}

//----- (0000000000425353) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodG2BSink(a1);
}

//----- (000000000042536A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c_goodB2GSink(a1);
}

//----- (0000000000425381) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_badSink(v6);
}
// 425381: using guessed type char buf[16];

//----- (0000000000425469) ----------------------------------------------------
void goodG2B_94()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodG2BSink(7);
}

//----- (000000000042548B) ----------------------------------------------------
void goodB2G_56()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b_goodB2GSink(v6);
}
// 42548B: using guessed type char buf[16];

//----- (0000000000425573) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52_good()
{
  goodG2B_94();
  goodB2G_56();
}

//----- (000000000042558D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  int v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+38h] [rbp-18h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int i; // [rsp+44h] [rbp-Ch]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v7 = recv(v10, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  v4 = v11;
  v6 = v11;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 42558D: using guessed type char buf[16];

//----- (0000000000425771) ----------------------------------------------------
void goodG2B_95()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000425849) ----------------------------------------------------
void goodB2G_57()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  int v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+38h] [rbp-18h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int i; // [rsp+44h] [rbp-Ch]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v7 = recv(v10, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  v4 = v11;
  v6 = v11;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 425849: using guessed type char buf[16];

//----- (0000000000425A33) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34_good()
{
  goodG2B_95();
  goodB2G_57();
}

//----- (0000000000425A4D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000425B0E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000425BCF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000425C96) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_badSink((char **)&v0);
}

//----- (0000000000425CD5) ----------------------------------------------------
void goodG2B_96()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_goodG2BSink((char **)&v0);
}

//----- (0000000000425D14) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64_good()
{
  goodG2B_96();
}

//----- (0000000000425D24) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000425DAF) ----------------------------------------------------
void goodG2B1_55()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000425E3A) ----------------------------------------------------
void goodG2B2_55()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000425EC5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_good()
{
  goodG2B1_55();
  goodG2B2_55();
}

//----- (0000000000425EDF) ----------------------------------------------------
void __fastcall badSink_13(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000425FA0) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_13;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 425FA0: using guessed type char buf[16];

//----- (00000000004260D7) ----------------------------------------------------
void __fastcall goodG2BSink_13(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000426198) ----------------------------------------------------
void goodG2B_97()
{
  goodG2BSink_13(7);
}

//----- (00000000004261C3) ----------------------------------------------------
void __fastcall goodB2GSink_9(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042628A) ----------------------------------------------------
__int64 goodB2G_58()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_9;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 42628A: using guessed type char buf[16];

//----- (00000000004263C1) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good()
{
  goodG2B_97();
  return goodB2G_58();
}

//----- (00000000004263DB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 10;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (00000000004264BF) ----------------------------------------------------
void goodB2G1_37()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (00000000004265B4) ----------------------------------------------------
void goodB2G2_37()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000042669E) ----------------------------------------------------
void goodG2B1_56()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000042678E) ----------------------------------------------------
void goodG2B2_56()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000426872) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_56();
  goodG2B2_56();
}

//----- (00000000004268A0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_badSink(a1);
}

//----- (00000000004268B7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodG2BSink(a1);
}

//----- (00000000004268CE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodB2GSink(a1);
}

//----- (00000000004268E5) ----------------------------------------------------
wchar_t *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_badSource()
{
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (0000000000426944) ----------------------------------------------------
_BYTE *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodG2BSource()
{
  _BYTE *s; // [rsp+18h] [rbp-8h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (000000000042699E) ----------------------------------------------------
wchar_t *CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodB2GSource()
{
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (00000000004269FD) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000426A08) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (0000000000426A13) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000426AA5) ----------------------------------------------------
void goodG2B1_57()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsFalse_5() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000426B43) ----------------------------------------------------
void goodG2B2_57()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000426BD5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_good()
{
  goodG2B1_57();
  goodG2B2_57();
}

//----- (0000000000426BEF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000426CB0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000426D71) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000426E38) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_badSink(a1);
}

//----- (0000000000426E4F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodG2BSink(a1);
}

//----- (0000000000426E66) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodB2GSink(a1);
}

//----- (0000000000426E7D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_badData = v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_badSink();
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D450: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_badData;

//----- (0000000000426EBE) ----------------------------------------------------
void goodG2B_98()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodG2BSink();
}
// 68D458: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodG2BData;

//----- (0000000000426EE9) ----------------------------------------------------
void goodB2G_59()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodB2GData = v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b_goodB2GSink();
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D454: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_goodB2GData;

//----- (0000000000426F2A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68_good()
{
  goodG2B_98();
  goodB2G_59();
}

//----- (0000000000426F44) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000427010) ----------------------------------------------------
void goodG2B_99()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004270DC) ----------------------------------------------------
void goodB2G_60()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (00000000004271AE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01_good()
{
  goodG2B_99();
  goodB2G_60();
}

//----- (00000000004271C8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000427289) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042734A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000427411) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (0000000000427462) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (00000000004274B3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000427527) ----------------------------------------------------
void goodG2B1_58()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042759B) ----------------------------------------------------
void goodG2B2_58()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042760F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_good()
{
  goodG2B1_58();
  goodG2B2_58();
}

//----- (0000000000427629) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004276E0) ----------------------------------------------------
void goodG2B1_59()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004277A3) ----------------------------------------------------
void goodG2B2_59()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042785A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_good()
{
  goodG2B1_59();
  goodG2B2_59();
}

//----- (0000000000427874) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042791D) ----------------------------------------------------
void goodG2B1_60()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004279C6) ----------------------------------------------------
void goodG2B2_60()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000427A6F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_good()
{
  goodG2B1_60();
  goodG2B2_60();
}

//----- (0000000000427A89) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_badSink();
}
// 68D460: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_badData;

//----- (0000000000427ACF) ----------------------------------------------------
void goodG2B_100()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b_goodG2BSink();
}
// 68D468: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_goodG2BData;

//----- (0000000000427B15) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68_good()
{
  goodG2B_100();
}

//----- (0000000000427B25) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_badSink(v2);
}

//----- (0000000000427B8F) ----------------------------------------------------
void goodG2B_101()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodG2BSink(7);
}

//----- (0000000000427BB1) ----------------------------------------------------
void goodB2G_61()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodB2GSink(v2);
}

//----- (0000000000427C1B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54_good()
{
  goodG2B_101();
  goodB2G_61();
}

//----- (0000000000427C35) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000427CF6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000427DB7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000427E7E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  char v4; // [rsp+20h] [rbp-30h]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v8; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_badSink((__int64)&v4);
}
// 427E7E: using guessed type char buf[16];

//----- (0000000000427FB4) ----------------------------------------------------
void goodG2B_102()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000427FDE) ----------------------------------------------------
void goodB2G_62()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  char v4; // [rsp+20h] [rbp-30h]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v8; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodB2GSink((__int64)&v4);
}
// 427FDE: using guessed type char buf[16];

//----- (0000000000428114) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66_good()
{
  goodG2B_102();
  goodB2G_62();
}

//----- (000000000042812E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000428166) ----------------------------------------------------
void goodG2B_103()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodG2BSink(7);
}

//----- (0000000000428188) ----------------------------------------------------
void goodB2G_63()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b_goodB2GSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004281C0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53_good()
{
  goodG2B_103();
  goodB2G_63();
}

//----- (00000000004281DA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_badSink(a1);
}

//----- (00000000004281F4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c_goodG2BSink(a1);
}

//----- (000000000042820E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_61_bad()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_badSource();
  v1 = strlen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000428295) ----------------------------------------------------
void goodG2B_104()
{
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodG2BSource();
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000042831C) ----------------------------------------------------
void goodB2G_64()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  const wchar_t *s; // [rsp+18h] [rbp-8h]

  s = CWE122_Heap_Based_Buffer_Overflow__CWE135_61b_goodB2GSource();
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004283A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_61_good()
{
  goodG2B_104();
  goodB2G_64();
}

//----- (00000000004283BD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_6 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1A0: using guessed type int staticTrue_6;

//----- (0000000000428451) ----------------------------------------------------
void goodG2B1_61()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticFalse_6 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D288: using guessed type int staticFalse_6;

//----- (00000000004284F1) ----------------------------------------------------
void goodG2B2_61()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticTrue_6 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1A0: using guessed type int staticTrue_6;

//----- (0000000000428585) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_good()
{
  goodG2B1_61();
  goodG2B2_61();
}

//----- (000000000042859F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (0000000000428606) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_bad()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_badSink(v0);
}

//----- (0000000000428643) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (00000000004286AA) ----------------------------------------------------
void goodG2B_105()
{
  _DWORD *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(v0);
}

//----- (00000000004286E7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_good()
{
  goodG2B_105();
}

//----- (00000000004286F7) ----------------------------------------------------
void badSink_14()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D28C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_badData;

//----- (00000000004287BE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_badData = v6;
  badSink_14();
}
// 68D28C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_badData;
// 4287BE: using guessed type char buf[16];

//----- (00000000004288AF) ----------------------------------------------------
void goodG2BSink_14()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D290: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodG2BData;

//----- (0000000000428976) ----------------------------------------------------
void goodG2B_106()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodG2BData = 7;
  goodG2BSink_14();
}
// 68D290: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodG2BData;

//----- (00000000004289A1) ----------------------------------------------------
void goodB2GSink_10()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D294: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodB2GData;

//----- (0000000000428A6E) ----------------------------------------------------
void goodB2G_65()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodB2GData = v6;
  goodB2GSink_10();
}
// 68D294: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_goodB2GData;
// 428A6E: using guessed type char buf[16];

//----- (0000000000428B5F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45_good()
{
  goodG2B_106();
  goodB2G_65();
}

//----- (0000000000428B79) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000428BB1) ----------------------------------------------------
void goodG2B_107()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodG2BSink(7);
}

//----- (0000000000428BD3) ----------------------------------------------------
void goodB2G_66()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodB2GSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000428C0B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54_good()
{
  goodG2B_107();
  goodB2G_66();
}

//----- (0000000000428C25) ----------------------------------------------------
__int64 staticReturnsTrue_6()
{
  return 1LL;
}

//----- (0000000000428C30) ----------------------------------------------------
__int64 staticReturnsFalse_6()
{
  return 0LL;
}

//----- (0000000000428C3B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_6() )
    v3 = 10;
  if ( (unsigned int)staticReturnsTrue_6() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000428D27) ----------------------------------------------------
void goodB2G1_38()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  staticReturnsTrue_6();
  if ( (unsigned int)staticReturnsFalse_6() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}

//----- (0000000000428E24) ----------------------------------------------------
void goodB2G2_38()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  staticReturnsTrue_6();
  if ( (unsigned int)staticReturnsTrue_6() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}

//----- (0000000000428F16) ----------------------------------------------------
void goodG2B1_62()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_6() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_6() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000042900E) ----------------------------------------------------
void goodG2B2_62()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_6() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_6() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (00000000004290FA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_62();
  goodG2B2_62();
}

//----- (0000000000429128) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_badSink(v0);
}

//----- (0000000000429165) ----------------------------------------------------
void goodG2B_108()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_goodG2BSink(v0);
}

//----- (00000000004291A2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53_good()
{
  goodG2B_108();
}

//----- (00000000004291B2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 10;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000429296) ----------------------------------------------------
void goodB2G1_39()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042938B) ----------------------------------------------------
void goodB2G2_39()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000429475) ----------------------------------------------------
void goodG2B1_63()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000429565) ----------------------------------------------------
void goodG2B2_63()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000429649) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_63();
  goodG2B2_63();
}

//----- (0000000000429677) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000429738) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004297F9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004298C0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4298C0: using guessed type char buf[16];

//----- (0000000000429A6E) ----------------------------------------------------
void goodB2G1_40()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 429A6E: using guessed type char buf[16];

//----- (0000000000429C2D) ----------------------------------------------------
void goodB2G2_40()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 429C2D: using guessed type char buf[16];

//----- (0000000000429DE1) ----------------------------------------------------
void goodG2B1_64()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000429ED1) ----------------------------------------------------
void goodG2B2_64()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000429FB5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_64();
  goodG2B2_64();
}

//----- (0000000000429FE3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_07_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFive_5 == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticFive_5 == 5 )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D1A4: using guessed type int staticFive_5;

//----- (000000000042A0BD) ----------------------------------------------------
void goodB2G1_41()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFive_5 == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticFive_5 == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1A4: using guessed type int staticFive_5;

//----- (000000000042A1A3) ----------------------------------------------------
void goodB2G2_41()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFive_5 == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticFive_5 == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1A4: using guessed type int staticFive_5;

//----- (000000000042A27D) ----------------------------------------------------
void goodG2B1_65()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFive_5 == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  if ( staticFive_5 == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1A4: using guessed type int staticFive_5;

//----- (000000000042A35E) ----------------------------------------------------
void goodG2B2_65()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFive_5 == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticFive_5 == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1A4: using guessed type int staticFive_5;

//----- (000000000042A433) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_07_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_65();
  goodG2B2_65();
}

//----- (000000000042A461) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042A50A) ----------------------------------------------------
void goodG2B_109()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042A5B3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_good()
{
  goodG2B_109();
}

//----- (000000000042A5C3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad()
{
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  void *v5; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void *v7; // [rsp+48h] [rbp-8h]

  v7 = malloc(0xAuLL);
  if ( !v7 )
    exit(-1);
  v5 = v7;
  dest = v7;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(v7, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000042A65D) ----------------------------------------------------
void goodG2B_110()
{
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  void *v5; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void *v7; // [rsp+48h] [rbp-8h]

  v7 = malloc(0x28uLL);
  if ( !v7 )
    exit(-1);
  v5 = v7;
  dest = v7;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(v7, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000042A6F7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_good()
{
  goodG2B_110();
}

//----- (000000000042A707) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000042A78D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000042A813) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042A8DF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042A9AB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042AA7D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000042AB91) ----------------------------------------------------
void goodB2G1_42()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000042ACAB) ----------------------------------------------------
void goodB2G2_42()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000042ADC5) ----------------------------------------------------
void goodG2B1_66()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042AE93) ----------------------------------------------------
void goodG2B2_66()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042AF61) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B1_66();
  goodG2B2_66();
}

//----- (000000000042AF8F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_badSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000042B002) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink(__int64 a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *(void **)(a1 + 16);
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000042B075) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_badSink(a1);
}

//----- (000000000042B08C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodG2BSink(a1);
}

//----- (000000000042B0A3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodB2GSink(a1);
}

//----- (000000000042B0BA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D484: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData;

//----- (000000000042B181) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D480: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData;

//----- (000000000042B248) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D47C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData;

//----- (000000000042B315) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_badSink(v0);
}

//----- (000000000042B352) ----------------------------------------------------
void goodG2B_111()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b_goodG2BSink(v0);
}

//----- (000000000042B38F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54_good()
{
  goodG2B_111();
}

//----- (000000000042B39F) ----------------------------------------------------
__int64 __fastcall badSource_9(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000042B3FC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_9(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042B4CE) ----------------------------------------------------
__int64 goodG2BSource_6()
{
  return 7LL;
}

//----- (000000000042B4E1) ----------------------------------------------------
void goodG2B_112()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_6();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042B5B3) ----------------------------------------------------
__int64 __fastcall goodB2GSource_3(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000042B610) ----------------------------------------------------
void goodB2G_67()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_3(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042B6E8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good()
{
  goodB2G_67();
  goodG2B_112();
}

//----- (000000000042B702) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_badSink(a1);
}

//----- (000000000042B719) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodG2BSink(a1);
}

//----- (000000000042B730) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c_goodB2GSink(a1);
}

//----- (000000000042B747) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_badSink(a1);
}

//----- (000000000042B75E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodG2BSink(a1);
}

//----- (000000000042B775) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c_goodB2GSink(a1);
}

//----- (000000000042B78C) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_badSink)(v2);
}

//----- (000000000042B7FF) ----------------------------------------------------
void goodG2B_113()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodG2BSink(7);
}

//----- (000000000042B82A) ----------------------------------------------------
__int64 goodB2G_68()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b_goodB2GSink)(v2);
}

//----- (000000000042B89D) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65_good()
{
  goodG2B_113();
  return goodB2G_68();
}

//----- (000000000042B8B7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_badSink(a1);
}

//----- (000000000042B8D1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c_goodG2BSink(a1);
}

//----- (000000000042B8EB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042B9BE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042BA91) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042BB6A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042BC1D) ----------------------------------------------------
void goodG2B1_67()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042BCDC) ----------------------------------------------------
void goodG2B2_67()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042BD8F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_good()
{
  goodG2B1_67();
  goodG2B2_67();
}

//----- (000000000042BDA9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000042BE0A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000042BE6B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042BF81) ----------------------------------------------------
void goodB2G1_43()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042C09D) ----------------------------------------------------
void goodB2G2_43()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042C1B9) ----------------------------------------------------
void goodG2B1_68()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042C287) ----------------------------------------------------
void goodG2B2_68()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042C355) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_68();
  goodG2B2_68();
}

//----- (000000000042C383) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000042C3EA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000042C451) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_bad()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xAuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_badSink((__int64)&v0);
}

//----- (000000000042C496) ----------------------------------------------------
void goodG2B_114()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0x28uLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000042C4DB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66_good()
{
  goodG2B_114();
}

//----- (000000000042C4EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticTrue_7 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticTrue_7 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1A8: using guessed type int staticTrue_7;

//----- (000000000042C615) ----------------------------------------------------
void goodB2G1_44()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticTrue_7 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFalse_7 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1A8: using guessed type int staticTrue_7;
// 68D298: using guessed type int staticFalse_7;

//----- (000000000042C750) ----------------------------------------------------
void goodB2G2_44()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticTrue_7 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticTrue_7 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1A8: using guessed type int staticTrue_7;

//----- (000000000042C880) ----------------------------------------------------
void goodG2B1_69()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_7 )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( staticTrue_7 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1A8: using guessed type int staticTrue_7;
// 68D298: using guessed type int staticFalse_7;

//----- (000000000042C970) ----------------------------------------------------
void goodG2B2_69()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_7 )
    v3 = 7;
  if ( staticTrue_7 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1A8: using guessed type int staticTrue_7;

//----- (000000000042CA54) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_69();
  goodG2B2_69();
}

//----- (000000000042CA82) ----------------------------------------------------
void __fastcall badSink_15(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042CB43) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  badSink_15(v3);
}

//----- (000000000042CBAB) ----------------------------------------------------
void __fastcall goodG2BSink_15(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042CC6C) ----------------------------------------------------
void goodG2B_115()
{
  goodG2BSink_15(7);
}

//----- (000000000042CC8E) ----------------------------------------------------
void __fastcall goodB2GSink_11(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042CD55) ----------------------------------------------------
void goodB2G_69()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  goodB2GSink_11(v3);
}

//----- (000000000042CDBD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good()
{
  goodB2G_69();
  goodG2B_115();
}

//----- (000000000042CDD7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042CE0F) ----------------------------------------------------
void goodG2B_116()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodG2BSink(7);
}

//----- (000000000042CE31) ----------------------------------------------------
void goodB2G_70()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b_goodB2GSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042CE69) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52_good()
{
  goodG2B_116();
  goodB2G_70();
}

//----- (000000000042CE83) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042CF44) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042D005) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042D0CC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_badSink(a1);
}

//----- (000000000042D0E6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d_goodG2BSink(a1);
}

//----- (000000000042D100) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_badSink(10);
}

//----- (000000000042D122) ----------------------------------------------------
void goodG2B_117()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodG2BSink(7);
}

//----- (000000000042D144) ----------------------------------------------------
void goodB2G_71()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b_goodB2GSink(10);
}

//----- (000000000042D166) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54_good()
{
  goodG2B_117();
  goodB2G_71();
}

//----- (000000000042D180) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042D265) ----------------------------------------------------
void goodB2G_72()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042D352) ----------------------------------------------------
void goodG2B_118()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042D420) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16_good()
{
  goodB2G_72();
  goodG2B_118();
}

//----- (000000000042D43A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042D4B8) ----------------------------------------------------
void goodG2B1_70()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042D542) ----------------------------------------------------
void goodG2B2_70()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042D5C0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_good()
{
  goodG2B1_70();
  goodG2B2_70();
}

//----- (000000000042D5DA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_badSink(v0);
}

//----- (000000000042D617) ----------------------------------------------------
void goodG2B_119()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b_goodG2BSink(v0);
}

//----- (000000000042D654) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52_good()
{
  goodG2B_119();
}

//----- (000000000042D664) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_badSink(a1);
}

//----- (000000000042D67E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_goodG2BSink(a1);
}

//----- (000000000042D698) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000042D6E9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (000000000042D73A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042D7AF) ----------------------------------------------------
void goodG2B_120()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042D824) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_good()
{
  goodG2B_120();
}

//----- (000000000042D834) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042D900) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042D9CC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042DA9E) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_badSink)(v1);
}

//----- (000000000042DAE4) ----------------------------------------------------
__int64 goodG2B_121()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b_goodG2BSink)(v1);
}

//----- (000000000042DB2A) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65_good()
{
  return goodG2B_121();
}

//----- (000000000042DB3A) ----------------------------------------------------
void __fastcall badSink_16(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000042DBA1) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))badSink_16)(v1);
}

//----- (000000000042DBE7) ----------------------------------------------------
void __fastcall goodG2BSink_16(_DWORD *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]

  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*a1);
  free(a1);
}

//----- (000000000042DC4E) ----------------------------------------------------
__int64 goodG2B_122()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0x28uLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))goodG2BSink_16)(v1);
}

//----- (000000000042DC94) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44_good()
{
  return goodG2B_122();
}

//----- (000000000042DCA4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_badSink(a1);
}

//----- (000000000042DCBB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodG2BSink(a1);
}

//----- (000000000042DCD2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c_goodB2GSink(a1);
}

//----- (000000000042DCE9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042DDAA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042DE6B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042DF32) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042DF6A) ----------------------------------------------------
void goodG2B_123()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodG2BSink(7);
}

//----- (000000000042DF8C) ----------------------------------------------------
void goodB2G_73()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b_goodB2GSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042DFC4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51_good()
{
  goodG2B_123();
  goodB2G_73();
}

//----- (000000000042DFDE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_badData = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_badSink();
}
// 68D470: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_badData;

//----- (000000000042E051) ----------------------------------------------------
void goodG2B_124()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodG2BSink();
}
// 68D478: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodG2BData;

//----- (000000000042E07C) ----------------------------------------------------
void goodB2G_74()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodB2GData = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodB2GSink();
}
// 68D474: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodB2GData;

//----- (000000000042E0EF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_good()
{
  goodG2B_124();
  goodB2G_74();
}

//----- (000000000042E109) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData = v6;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_badSink();
}
// 68D484: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData;
// 42E109: using guessed type char buf[16];

//----- (000000000042E1FA) ----------------------------------------------------
void goodG2B_125()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodG2BSink();
}
// 68D480: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData;

//----- (000000000042E225) ----------------------------------------------------
void goodB2G_75()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData = v6;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodB2GSink();
}
// 68D47C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData;
// 42E225: using guessed type char buf[16];

//----- (000000000042E316) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_good()
{
  goodG2B_125();
  goodB2G_75();
}

//----- (000000000042E330) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_badSink(a1);
}

//----- (000000000042E347) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodG2BSink(a1);
}

//----- (000000000042E35E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d_goodB2GSink(a1);
}

//----- (000000000042E375) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_badSink()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_badData;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D488: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_badData;

//----- (000000000042E3DD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_goodG2BSink()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_goodG2BData;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D490: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_goodG2BData;

//----- (000000000042E445) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_badSink(v0);
}

//----- (000000000042E482) ----------------------------------------------------
void goodG2B_126()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b_goodG2BSink(v0);
}

//----- (000000000042E4BF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54_good()
{
  goodG2B_126();
}

//----- (000000000042E4CF) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E510) ----------------------------------------------------
void goodG2B_127()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodG2BSink(7);
}

//----- (000000000042E53B) ----------------------------------------------------
__int64 goodB2G_76()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodB2GSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E57C) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65_good()
{
  goodG2B_127();
  return goodB2G_76();
}

//----- (000000000042E596) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042E657) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042E718) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042E7DF) ----------------------------------------------------
void badSink_17()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D29C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData;

//----- (000000000042E8A6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData = v0;
  badSink_17();
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D29C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData;

//----- (000000000042E8E7) ----------------------------------------------------
void goodG2BSink_17()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D2A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData;

//----- (000000000042E9AE) ----------------------------------------------------
void goodG2B_128()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData = 7;
  goodG2BSink_17();
}
// 68D2A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData;

//----- (000000000042E9D9) ----------------------------------------------------
void goodB2GSink_12()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D2A4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData;

//----- (000000000042EAA6) ----------------------------------------------------
void goodB2G_77()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData = v0;
  goodB2GSink_12();
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D2A4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData;

//----- (000000000042EAE7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_good()
{
  goodG2B_128();
  goodB2G_77();
}

//----- (000000000042EB01) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  char v3; // [rsp+10h] [rbp-20h]
  int v4; // [rsp+18h] [rbp-18h]
  int v5; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v5;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink((__int64)&v3);
}

//----- (000000000042EB71) ----------------------------------------------------
void goodG2B_129()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000042EB9B) ----------------------------------------------------
void goodB2G_78()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  char v3; // [rsp+10h] [rbp-20h]
  int v4; // [rsp+18h] [rbp-18h]
  int v5; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v5;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_goodB2GSink((__int64)&v3);
}

//----- (000000000042EC0B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66_good()
{
  goodG2B_129();
  goodB2G_78();
}

//----- (000000000042EC25) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_badSink(v2);
}

//----- (000000000042EC8F) ----------------------------------------------------
void goodG2B_130()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodG2BSink(7);
}

//----- (000000000042ECB1) ----------------------------------------------------
void goodB2G_79()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b_goodB2GSink(v2);
}

//----- (000000000042ED1B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53_good()
{
  goodG2B_130();
  goodB2G_79();
}

//----- (000000000042ED35) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_470D8C, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042EE30) ----------------------------------------------------
void goodB2G1_45()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_470D8C, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042EF3E) ----------------------------------------------------
void goodB2G2_45()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_470D8C, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042F041) ----------------------------------------------------
void goodG2B1_71()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042F131) ----------------------------------------------------
void goodG2B2_71()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000042F215) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_71();
  goodG2B2_71();
}

//----- (000000000042F243) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_badSink(10);
}

//----- (000000000042F26E) ----------------------------------------------------
void goodG2B_131()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodG2BSink(7);
}

//----- (000000000042F299) ----------------------------------------------------
void goodB2G_80()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b_goodB2GSink(10);
}

//----- (000000000042F2C4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65_good()
{
  goodG2B_131();
  goodB2G_80();
}

//----- (000000000042F2DE) ----------------------------------------------------
void badSink_18()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData, src);
  printLine(dest);
  free(dest);
}
// 68D2A8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData;

//----- (000000000042F336) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData = (__int64)v0;
  badSink_18();
}
// 68D2A8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_badData;

//----- (000000000042F37C) ----------------------------------------------------
void goodG2BSink_18()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData;
  strcpy(src, "AAAAAAAAAA");
  strcpy((char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData, src);
  printLine(dest);
  free(dest);
}
// 68D2B0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData;

//----- (000000000042F3D4) ----------------------------------------------------
void goodG2B_132()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData = (__int64)v0;
  goodG2BSink_18();
}
// 68D2B0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData;

//----- (000000000042F41A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_good()
{
  goodG2B_132();
}

//----- (000000000042F42A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000042F4B0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000042F536) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_badSink(a1);
}

//----- (000000000042F550) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c_goodG2BSink(a1);
}

//----- (000000000042F56A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042F5E8) ----------------------------------------------------
void goodG2B1_72()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042F672) ----------------------------------------------------
void goodG2B2_72()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000042F6F0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_good()
{
  goodG2B1_72();
  goodG2B2_72();
}

//----- (000000000042F70A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_06_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000042F7E2) ----------------------------------------------------
void goodB2G1_46()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000042F8C6) ----------------------------------------------------
void goodB2G2_46()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000042F99E) ----------------------------------------------------
void goodG2B1_73()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000042FA7D) ----------------------------------------------------
void goodG2B2_73()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000042FB50) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_06_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_73();
  goodG2B2_73();
}

//----- (000000000042FB7E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042FC49) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042FD14) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000042FDE5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000042FE46) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (000000000042FEA7) ----------------------------------------------------
wchar_t *badSource_10()
{
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (000000000042FF06) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)badSource_10();
  v1 = strlen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000042FF8D) ----------------------------------------------------
_BYTE *goodG2BSource_7()
{
  _BYTE *s; // [rsp+18h] [rbp-8h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (000000000042FFE7) ----------------------------------------------------
void goodG2B_133()
{
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = goodG2BSource_7();
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000043006E) ----------------------------------------------------
wchar_t *goodB2GSource_4()
{
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  return s;
}

//----- (00000000004300CD) ----------------------------------------------------
void goodB2G_81()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  const wchar_t *s; // [rsp+18h] [rbp-8h]

  s = goodB2GSource_4();
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000430154) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_good()
{
  goodB2G_81();
  goodG2B_133();
}

//----- (000000000043016E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_badData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_badSink();
}
// 68D488: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_badData;

//----- (00000000004301B4) ----------------------------------------------------
void goodG2B_134()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_goodG2BData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b_goodG2BSink();
}
// 68D490: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_goodG2BData;

//----- (00000000004301FA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68_good()
{
  goodG2B_134();
}

//----- (000000000043020A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000043028C) ----------------------------------------------------
void goodG2B1_74()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000043031A) ----------------------------------------------------
void goodG2B2_74()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000043039C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_good()
{
  goodG2B1_74();
  goodG2B2_74();
}

//----- (00000000004303B6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalFive == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;
// 4303B6: using guessed type char buf[16];

//----- (00000000004305AC) ----------------------------------------------------
void goodB2G1_47()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalFive == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;
// 4305AC: using guessed type char buf[16];

//----- (00000000004307B3) ----------------------------------------------------
void goodB2G2_47()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalFive == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;
// 4307B3: using guessed type char buf[16];

//----- (00000000004309AF) ----------------------------------------------------
void goodG2B1_75()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000430AA1) ----------------------------------------------------
void goodG2B2_75()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000430B87) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B1_75();
  goodG2B2_75();
}

//----- (0000000000430BB5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_badSink(a1);
}

//----- (0000000000430BCF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d_goodG2BSink(a1);
}

//----- (0000000000430BE9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_bad()
{
  char buf[16]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+10h] [rbp-50h]
  uint16_t v2; // [rsp+12h] [rbp-4Eh]
  int v3; // [rsp+14h] [rbp-4Ch]
  int v4; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-38h]
  int v6; // [rsp+34h] [rbp-2Ch]
  int v7; // [rsp+38h] [rbp-28h]
  int fd; // [rsp+3Ch] [rbp-24h]
  int *v9; // [rsp+40h] [rbp-20h]
  int *v10; // [rsp+48h] [rbp-18h]
  int i; // [rsp+54h] [rbp-Ch]
  int v12; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v10 = &v4;
  v9 = &v4;
  v4 = -1;
  v13 = -1;
  fd = -1;
  v12 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v12 = accept(fd, 0LL, 0LL);
      if ( v12 != -1 )
      {
        v7 = recv(v12, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v12 != -1 )
    close(v12);
  *v10 = v13;
  v6 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 430BE9: using guessed type char buf[16];

//----- (0000000000430DEC) ----------------------------------------------------
void goodG2B_135()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000430EE3) ----------------------------------------------------
void goodB2G_82()
{
  char buf[16]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+10h] [rbp-50h]
  uint16_t v2; // [rsp+12h] [rbp-4Eh]
  int v3; // [rsp+14h] [rbp-4Ch]
  int v4; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-38h]
  int v6; // [rsp+34h] [rbp-2Ch]
  int v7; // [rsp+38h] [rbp-28h]
  int fd; // [rsp+3Ch] [rbp-24h]
  int *v9; // [rsp+40h] [rbp-20h]
  int *v10; // [rsp+48h] [rbp-18h]
  int i; // [rsp+54h] [rbp-Ch]
  int v12; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v10 = &v4;
  v9 = &v4;
  v4 = -1;
  v13 = -1;
  fd = -1;
  v12 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v12 = accept(fd, 0LL, 0LL);
      if ( v12 != -1 )
      {
        v7 = recv(v12, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v13 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v12 != -1 )
    close(v12);
  *v10 = v13;
  v6 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v6) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 430EE3: using guessed type char buf[16];

//----- (00000000004310EC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32_good()
{
  goodG2B_135();
  goodB2G_82();
}

//----- (0000000000431106) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004311D9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004312AC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000431385) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_badSink(a1);
}

//----- (000000000043139C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodG2BSink(a1);
}

//----- (00000000004313B3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c_goodB2GSink(a1);
}

//----- (00000000004313CA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000431491) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000431558) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000431625) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000043174F) ----------------------------------------------------
void goodB2G1_48()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000043188A) ----------------------------------------------------
void goodB2G2_48()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004319BA) ----------------------------------------------------
void goodG2B1_76()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000431AAA) ----------------------------------------------------
void goodG2B2_76()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000431B8E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_76();
  goodG2B2_76();
}

//----- (0000000000431BBC) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_badSink)(v1);
}

//----- (0000000000431C02) ----------------------------------------------------
__int64 goodG2B_136()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b_goodG2BSink)(v1);
}

//----- (0000000000431C48) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65_good()
{
  return goodG2B_136();
}

//----- (0000000000431C58) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_badSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char **v3; // [rsp+28h] [rbp-8h]

  v3 = a1;
  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000431CBC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b_goodG2BSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+20h] [rbp-10h]
  char **v3; // [rsp+28h] [rbp-8h]

  v3 = a1;
  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000431D20) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_badSink(a1);
}

//----- (0000000000431D37) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodG2BSink(a1);
}

//----- (0000000000431D4E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c_goodB2GSink(a1);
}

//----- (0000000000431D65) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticTrue_8 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticTrue_8 )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D1AC: using guessed type int staticTrue_8;

//----- (0000000000431E3D) ----------------------------------------------------
void goodB2G1_49()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticTrue_8 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticFalse_8 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1AC: using guessed type int staticTrue_8;
// 68D2B8: using guessed type int staticFalse_8;

//----- (0000000000431F21) ----------------------------------------------------
void goodB2G2_49()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticTrue_8 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticTrue_8 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1AC: using guessed type int staticTrue_8;

//----- (0000000000431FF9) ----------------------------------------------------
void goodG2B1_77()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticFalse_8 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticTrue_8 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1AC: using guessed type int staticTrue_8;
// 68D2B8: using guessed type int staticFalse_8;

//----- (00000000004320D8) ----------------------------------------------------
void goodG2B2_77()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( staticTrue_8 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( staticTrue_8 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1AC: using guessed type int staticTrue_8;

//----- (00000000004321AB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_05_good()
{
  goodB2G1_49();
  goodB2G2_49();
  goodG2B1_77();
  goodG2B2_77();
}

//----- (00000000004321D9) ----------------------------------------------------
void __fastcall badSink_19(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043224C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  badSink_19((const char *)s);
}

//----- (00000000004322B7) ----------------------------------------------------
void __fastcall goodG2BSink_19(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (000000000043232A) ----------------------------------------------------
void goodG2B_137()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  goodG2BSink_19(s);
}

//----- (0000000000432390) ----------------------------------------------------
void __fastcall goodB2GSink_13(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000432403) ----------------------------------------------------
void goodB2G_83()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  goodB2GSink_13(s);
}

//----- (000000000043246E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good()
{
  goodB2G_83();
  goodG2B_137();
}

//----- (0000000000432488) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000432549) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043260A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004326D1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_bad()
{
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  void *dest; // [rsp+30h] [rbp-20h]
  void *v7; // [rsp+38h] [rbp-18h]
  void **v8; // [rsp+40h] [rbp-10h]
  __int64 *v9; // [rsp+48h] [rbp-8h]

  v9 = &v5;
  v8 = (void **)&v5;
  v5 = 0LL;
  v7 = 0LL;
  v7 = malloc(0xAuLL);
  if ( !v7 )
    exit(-1);
  *v9 = (__int64)v7;
  dest = *v8;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043278C) ----------------------------------------------------
void goodG2B_138()
{
  __int64 src; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int64 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  __int64 v5; // [rsp+28h] [rbp-28h]
  void *dest; // [rsp+30h] [rbp-20h]
  void *v7; // [rsp+38h] [rbp-18h]
  void **v8; // [rsp+40h] [rbp-10h]
  __int64 *v9; // [rsp+48h] [rbp-8h]

  v9 = &v5;
  v8 = (void **)&v5;
  v5 = 0LL;
  v7 = 0LL;
  v7 = malloc(0x28uLL);
  if ( !v7 )
    exit(-1);
  *v9 = (__int64)v7;
  dest = *v8;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000432847) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32_good()
{
  goodG2B_138();
}

//----- (0000000000432857) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 432857: using guessed type char buf[16];

//----- (0000000000432A49) ----------------------------------------------------
void goodB2G1_50()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 432A49: using guessed type char buf[16];

//----- (0000000000432C4C) ----------------------------------------------------
void goodB2G2_50()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 432C4C: using guessed type char buf[16];

//----- (0000000000432E44) ----------------------------------------------------
void goodG2B1_78()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000432F32) ----------------------------------------------------
void goodG2B2_78()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000433014) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B1_78();
  goodG2B2_78();
}

//----- (0000000000433042) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-28h]
  int v5; // [rsp+34h] [rbp-1Ch]
  int v6; // [rsp+38h] [rbp-18h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int i; // [rsp+44h] [rbp-Ch]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v7 = recv(v10, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  v6 = v11;
  v5 = v11;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 433042: using guessed type char buf[16];

//----- (0000000000433226) ----------------------------------------------------
void goodG2B_139()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004332FE) ----------------------------------------------------
void goodB2G_84()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-28h]
  int v5; // [rsp+34h] [rbp-1Ch]
  int v6; // [rsp+38h] [rbp-18h]
  int v7; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int i; // [rsp+44h] [rbp-Ch]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v7 = recv(v10, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  v6 = v11;
  v5 = v11;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4332FE: using guessed type char buf[16];

//----- (00000000004334E8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31_good()
{
  goodG2B_139();
  goodB2G_84();
}

//----- (0000000000433502) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_badData = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_badSink();
}
// 68D4A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_badData;

//----- (000000000043352D) ----------------------------------------------------
void goodG2B_140()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodG2BData = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodG2BSink();
}
// 68D498: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodG2BData;

//----- (0000000000433558) ----------------------------------------------------
void goodB2G_85()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodB2GData = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodB2GSink();
}
// 68D49C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodB2GData;

//----- (0000000000433583) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_good()
{
  goodG2B_140();
  goodB2G_85();
}

//----- (000000000043359D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_badSource();
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000433612) ----------------------------------------------------
void goodG2B_141()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_goodG2BSource();
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000433687) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61_good()
{
  goodG2B_141();
}

//----- (0000000000433697) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_badSink()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_badData;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D4B0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_badData;

//----- (0000000000433724) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_goodG2BSink()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_goodG2BData;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D4A8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_goodG2BData;

//----- (00000000004337B1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_badSink(v2);
}

//----- (000000000043381B) ----------------------------------------------------
void goodG2B_142()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodG2BSink(7);
}

//----- (000000000043383D) ----------------------------------------------------
void goodB2G_86()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b_goodB2GSink(v2);
}

//----- (00000000004338A7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52_good()
{
  goodG2B_142();
  goodB2G_86();
}

//----- (00000000004338C1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_badSink(&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004338FB) ----------------------------------------------------
void goodG2B_143()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodG2BSink(&v0);
}

//----- (000000000043391F) ----------------------------------------------------
void goodB2G_87()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodB2GSink(&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000433959) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64_good()
{
  goodG2B_143();
  goodB2G_87();
}

//----- (0000000000433973) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad()
{
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  wchar_t *s; // [rsp+20h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000433A47) ----------------------------------------------------
void goodG2B_144()
{
  char *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  _BYTE *s; // [rsp+20h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (0000000000433B16) ----------------------------------------------------
void goodB2G_88()
{
  wchar_t *dest; // [rsp+8h] [rbp-28h]
  size_t v1; // [rsp+10h] [rbp-20h]
  wchar_t *s; // [rsp+20h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000433BEA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good()
{
  goodG2B_144();
  goodB2G_88();
}

//----- (0000000000433C04) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000433CC5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000433D86) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000433E4D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000433ECB) ----------------------------------------------------
void goodG2B1_79()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D3F8: using guessed type int globalFalse;

//----- (0000000000433F55) ----------------------------------------------------
void goodG2B2_79()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000433FD3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_good()
{
  goodG2B1_79();
  goodG2B2_79();
}

//----- (0000000000433FED) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  v4 = v8;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_badSink(v8);
}
// 433FED: using guessed type char buf[16];

//----- (0000000000434121) ----------------------------------------------------
void goodG2B_145()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodG2BSink(7);
}

//----- (0000000000434149) ----------------------------------------------------
void goodB2G_89()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  v4 = v8;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b_goodB2GSink(v8);
}
// 434149: using guessed type char buf[16];

//----- (000000000043427D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67_good()
{
  goodG2B_145();
  goodB2G_89();
}

//----- (0000000000434297) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004343AD) ----------------------------------------------------
void goodB2G_90()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004344C9) ----------------------------------------------------
void goodG2B_146()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000434597) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16_good()
{
  goodB2G_90();
  goodG2B_146();
}

//----- (00000000004345B1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_badSink(a1);
}

//----- (00000000004345CB) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c_goodG2BSink(a1);
}

//----- (00000000004345E5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000434659) ----------------------------------------------------
void goodG2B_147()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (00000000004346CD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_good()
{
  goodG2B_147();
}

//----- (00000000004346DD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D2BC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal;

//----- (00000000004347AC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D2C0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Global;

//----- (000000000043488C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D2C4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Global;

//----- (0000000000434961) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D2C8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BGlobal;

//----- (0000000000434A30) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000434AC5) ----------------------------------------------------
void goodG2B1_80()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000434B66) ----------------------------------------------------
void goodG2B2_80()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000434BFB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_good()
{
  goodG2B1_80();
  goodG2B2_80();
}

//----- (0000000000434C15) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 10;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000434D01) ----------------------------------------------------
void goodB2G1_51()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  globalReturnsTrue();
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}

//----- (0000000000434DFE) ----------------------------------------------------
void goodB2G2_51()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  globalReturnsTrue();
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}

//----- (0000000000434EF0) ----------------------------------------------------
void goodG2B1_81()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000434FE8) ----------------------------------------------------
void goodG2B2_81()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (00000000004350D4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_81();
  goodG2B2_81();
}

//----- (0000000000435102) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000435175) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (00000000004351E8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000043525B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int v5; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_badSink(&v4);
}
// 43525B: using guessed type char buf[16];

//----- (0000000000435345) ----------------------------------------------------
void goodG2B_148()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodG2BSink(&v0);
}

//----- (0000000000435369) ----------------------------------------------------
void goodB2G_91()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int v5; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b_goodB2GSink(&v4);
}
// 435369: using guessed type char buf[16];

//----- (0000000000435453) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63_good()
{
  goodG2B_148();
  goodB2G_91();
}

//----- (000000000043546D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (00000000004354F3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (0000000000435579) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_badData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_badSink();
}
// 68D4B0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_badData;

//----- (00000000004355BF) ----------------------------------------------------
void goodG2B_149()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_goodG2BData = (__int64)v0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b_goodG2BSink();
}
// 68D4A8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_goodG2BData;

//----- (0000000000435605) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68_good()
{
  goodG2B_149();
}

//----- (0000000000435615) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_badSink(a1);
}

//----- (000000000043562F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodG2BSink(a1);
}

//----- (0000000000435649) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53c_goodB2GSink(a1);
}

//----- (0000000000435663) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_badSink(v2);
}

//----- (00000000004356CD) ----------------------------------------------------
void goodG2B_150()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodG2BSink(7);
}

//----- (00000000004356EF) ----------------------------------------------------
void goodB2G_92()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodB2GSink(v2);
}

//----- (0000000000435759) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51_good()
{
  goodG2B_150();
  goodB2G_92();
}

//----- (0000000000435773) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (00000000004357D4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-10h]

  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(a1, s, v1 + 1);
  printLine((const char *)a1);
  free(a1);
}

//----- (0000000000435835) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badSink(v7);
}
// 68D2BC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal;
// 435835: using guessed type char buf[16];

//----- (000000000043596D) ----------------------------------------------------
void goodB2G1_52()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Sink(v7);
}
// 68D2C0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G1Global;
// 43596D: using guessed type char buf[16];

//----- (0000000000435AA5) ----------------------------------------------------
void goodB2G2_52()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Sink(v7);
}
// 68D2C4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodB2G2Global;
// 435AA5: using guessed type char buf[16];

//----- (0000000000435BDD) ----------------------------------------------------
void goodG2B_151()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BSink(7);
}
// 68D2C8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_goodG2BGlobal;

//----- (0000000000435C09) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B_151();
}

//----- (0000000000435C2D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_badSink(v7);
}
// 435C2D: using guessed type char buf[16];

//----- (0000000000435D5B) ----------------------------------------------------
void goodG2B_152()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodG2BSink(7);
}

//----- (0000000000435D7D) ----------------------------------------------------
void goodB2G_93()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b_goodB2GSink(v7);
}
// 435D7D: using guessed type char buf[16];

//----- (0000000000435EAB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51_good()
{
  goodG2B_152();
  goodB2G_93();
}

//----- (0000000000435EC5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_badSink(a1);
}

//----- (0000000000435EDC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodG2BSink(a1);
}

//----- (0000000000435EF3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c_goodB2GSink(a1);
}

//----- (0000000000435F0A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000435FDD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004360B0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000436189) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043621C) ----------------------------------------------------
void goodG2B1_82()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (00000000004362BB) ----------------------------------------------------
void goodG2B2_82()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043634E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_good()
{
  goodG2B1_82();
  goodG2B2_82();
}

//----- (0000000000436368) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_badSink(v0);
}

//----- (00000000004363A5) ----------------------------------------------------
void goodG2B_153()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_goodG2BSink(v0);
}

//----- (00000000004363E2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53_good()
{
  goodG2B_153();
}

//----- (00000000004363F2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_badSink(a1);
}

//----- (0000000000436409) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodG2BSink(a1);
}

//----- (0000000000436420) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodB2GSink(a1);
}

//----- (0000000000436437) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_badSink(a1);
}

//----- (000000000043644E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodG2BSink(a1);
}

//----- (0000000000436465) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e_goodB2GSink(a1);
}

//----- (000000000043647C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004364EF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (0000000000436562) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_53d_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004365D5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_badSink(v0);
}

//----- (000000000043661A) ----------------------------------------------------
void goodG2B_154()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0x28uLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink(v0);
}

//----- (000000000043665F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67_good()
{
  goodG2B_154();
}

//----- (000000000043666F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_badSink(a1);
}

//----- (0000000000436689) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c_goodG2BSink(a1);
}

//----- (00000000004366A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int k; // [rsp+30h] [rbp-10h]
  int v8; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 4366A3: using guessed type char buf[16];

//----- (0000000000436869) ----------------------------------------------------
void goodB2G_94()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int k; // [rsp+30h] [rbp-10h]
  int v8; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 436869: using guessed type char buf[16];

//----- (0000000000436A35) ----------------------------------------------------
void goodG2B_155()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (0000000000436B2E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17_good()
{
  goodB2G_94();
  goodG2B_155();
}

//----- (0000000000436B48) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 436B48: using guessed type char buf[16];

//----- (0000000000436D3E) ----------------------------------------------------
void goodB2G1_53()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 436D3E: using guessed type char buf[16];

//----- (0000000000436F45) ----------------------------------------------------
void goodB2G2_53()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 436F45: using guessed type char buf[16];

//----- (0000000000437141) ----------------------------------------------------
void goodG2B1_83()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000437233) ----------------------------------------------------
void goodG2B2_83()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000437319) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_83();
  goodG2B2_83();
}

//----- (0000000000437347) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_badSink(v0);
}

//----- (0000000000437384) ----------------------------------------------------
void goodG2B_156()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b_goodG2BSink(v0);
}

//----- (00000000004373C1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51_good()
{
  goodG2B_156();
}

//----- (00000000004373D1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000437444) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (00000000004374B7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_54e_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000043752A) ----------------------------------------------------
void __fastcall badSink_20(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004375EB) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_20;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4375EB: using guessed type char buf[16];

//----- (00000000004376DC) ----------------------------------------------------
void __fastcall goodG2BSink_20(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043779D) ----------------------------------------------------
void goodG2B_157()
{
  goodG2BSink_20(7);
}

//----- (00000000004377C8) ----------------------------------------------------
void __fastcall goodB2GSink_14(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043788F) ----------------------------------------------------
__int64 goodB2G_95()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_14;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 43788F: using guessed type char buf[16];

//----- (0000000000437980) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44_good()
{
  goodG2B_157();
  return goodB2G_95();
}

//----- (000000000043799A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000437AC6) ----------------------------------------------------
void goodB2G1_54()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000437C03) ----------------------------------------------------
void goodB2G2_54()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000437D35) ----------------------------------------------------
void goodG2B1_84()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000437E27) ----------------------------------------------------
void goodG2B2_84()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000437F0D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_84();
  goodG2B2_84();
}

//----- (0000000000437F3B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  int v1; // [rsp+8h] [rbp-38h]
  __int16 v2; // [rsp+Ch] [rbp-34h]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+18h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-1Ch]
  int *v6; // [rsp+28h] [rbp-18h]
  int *v7; // [rsp+30h] [rbp-10h]
  int i; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v7 = &v3;
  v6 = &v3;
  v3 = -1;
  v9 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v9 = atoi(s);
  else
    printLine("fgets() failed.");
  *v7 = v9;
  v5 = *v6;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000438078) ----------------------------------------------------
void goodG2B_158()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000043816F) ----------------------------------------------------
void goodB2G_96()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  int v1; // [rsp+8h] [rbp-38h]
  __int16 v2; // [rsp+Ch] [rbp-34h]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+18h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-1Ch]
  int *v6; // [rsp+28h] [rbp-18h]
  int *v7; // [rsp+30h] [rbp-10h]
  int i; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v7 = &v3;
  v6 = &v3;
  v3 = -1;
  v9 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v9 = atoi(s);
  else
    printLine("fgets() failed.");
  *v7 = v9;
  v5 = *v6;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (00000000004382B2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good()
{
  goodG2B_158();
  goodB2G_96();
}

//----- (00000000004382CC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043838D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043844E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000438515) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalFive == 5 )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004385C9) ----------------------------------------------------
void goodG2B1_85()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalFive == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000438689) ----------------------------------------------------
void goodG2B2_85()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalFive == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000043873D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_good()
{
  goodG2B1_85();
  goodG2B2_85();
}

//----- (0000000000438757) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_badSink(a1);
}

//----- (0000000000438771) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c_goodG2BSink(a1);
}

//----- (000000000043878B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000438859) ----------------------------------------------------
void goodB2G_97()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000043892D) ----------------------------------------------------
void goodG2B_159()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004389FB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16_good()
{
  goodB2G_97();
  goodG2B_159();
}

//----- (0000000000438A15) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-3Ch]
  void *ptr; // [rsp+8h] [rbp-38h]
  int v7; // [rsp+10h] [rbp-30h]
  int v8; // [rsp+14h] [rbp-2Ch]
  int *v9; // [rsp+18h] [rbp-28h]
  int *v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-14h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  v7 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v7 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v7) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000438B54) ----------------------------------------------------
void goodG2B_160()
{
  int v0; // [rsp+4h] [rbp-2Ch]
  void *ptr; // [rsp+8h] [rbp-28h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = &v0;
  v4 = &v0;
  v3 = 7;
  v0 = 7;
  v2 = 7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000438C4B) ----------------------------------------------------
void goodB2G_98()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-3Ch]
  void *ptr; // [rsp+8h] [rbp-38h]
  int v7; // [rsp+10h] [rbp-30h]
  int v8; // [rsp+14h] [rbp-2Ch]
  int *v9; // [rsp+18h] [rbp-28h]
  int *v10; // [rsp+20h] [rbp-20h]
  int i; // [rsp+2Ch] [rbp-14h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  v7 = *v9;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v7 < 0 || v7 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v7) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000438D90) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good()
{
  goodG2B_160();
  goodB2G_98();
}

//----- (0000000000438DAA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad()
{
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]
  void *v6; // [rsp+30h] [rbp-10h]
  void *v7; // [rsp+38h] [rbp-8h]

  v7 = malloc(0xAuLL);
  if ( !v7 )
    exit(-1);
  v6 = v7;
  dest = v7;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(v7, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000438E44) ----------------------------------------------------
void goodG2B_161()
{
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-18h]
  void *v6; // [rsp+30h] [rbp-10h]
  void *v7; // [rsp+38h] [rbp-8h]

  v7 = malloc(0x28uLL);
  if ( !v7 )
    exit(-1);
  v6 = v7;
  dest = v7;
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(v7, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000438EDE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good()
{
  goodG2B_161();
}

//----- (0000000000438EEE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000438FB5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043907C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000439149) ----------------------------------------------------
void badSink_21()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D2D0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;

//----- (00000000004391B1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData = (__int64)v0;
  badSink_21();
}
// 68D2D0: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_badData;

//----- (00000000004391F7) ----------------------------------------------------
void goodG2BSink_21()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D2D8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;

//----- (000000000043925F) ----------------------------------------------------
void goodG2B_162()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData = (__int64)v0;
  goodG2BSink_21();
}
// 68D2D8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;

//----- (00000000004392A5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_good()
{
  goodG2B_162();
}

//----- (00000000004392B5) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 4392B5: using guessed type char buf[16];

//----- (0000000000439392) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodG2BSource()
{
  return 7LL;
}

//----- (00000000004393A5) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 4393A5: using guessed type char buf[16];

//----- (0000000000439482) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043954D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000439618) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004396E9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000439813) ----------------------------------------------------
void goodB2G1_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043994E) ----------------------------------------------------
void goodB2G2_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v8] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000439A7E) ----------------------------------------------------
void goodG2B1_86()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000439B6C) ----------------------------------------------------
void goodG2B2_86()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000439C4E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04_good()
{
  goodB2G1_55();
  goodB2G2_55();
  goodG2B1_86();
  goodG2B2_86();
}

//----- (0000000000439C7C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badGlobal = 1;
  dest = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badSource(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D2E0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_badGlobal;

//----- (0000000000439D01) ----------------------------------------------------
void goodG2B1_87()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Global = 0;
  dest = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Source(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D2E4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B1Global;

//----- (0000000000439D86) ----------------------------------------------------
void goodG2B2_87()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Global = 1;
  dest = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Source(0LL);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D2E8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_goodG2B2Global;

//----- (0000000000439E0B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22_good()
{
  goodG2B1_87();
  goodG2B2_87();
}

//----- (0000000000439E25) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 439E25: using guessed type char buf[16];

//----- (0000000000439FFD) ----------------------------------------------------
void goodB2G1_56()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 439FFD: using guessed type char buf[16];

//----- (000000000043A1DB) ----------------------------------------------------
void goodB2G2_56()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43A1DB: using guessed type char buf[16];

//----- (000000000043A3B9) ----------------------------------------------------
void goodG2B1_88()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043A485) ----------------------------------------------------
void goodG2B2_88()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043A551) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_88();
  goodG2B2_88();
}

//----- (000000000043A57F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v7 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v7;
  v4 = v7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v4 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v4) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000043A69D) ----------------------------------------------------
void goodG2B_163()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043A775) ----------------------------------------------------
void goodB2G_99()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v7 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v7;
  v4 = v7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v4 < 0 || v4 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v4) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000043A899) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good()
{
  goodG2B_163();
  goodB2G_99();
}

//----- (000000000043A8B3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_badSink(10);
}

//----- (000000000043A8D5) ----------------------------------------------------
void goodG2B_164()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodG2BSink(7);
}

//----- (000000000043A8F7) ----------------------------------------------------
void goodB2G_100()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b_goodB2GSink(10);
}

//----- (000000000043A919) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51_good()
{
  goodG2B_164();
  goodB2G_100();
}

//----- (000000000043A933) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_badSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000043A98F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_goodG2BSink(char **a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = *a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000043A9EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_badSink(v0);
}

//----- (000000000043AA28) ----------------------------------------------------
void goodG2B_165()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b_goodG2BSink(v0);
}

//----- (000000000043AA65) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52_good()
{
  goodG2B_165();
}

//----- (000000000043AA75) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43AA75: using guessed type char buf[16];

//----- (000000000043AC4F) ----------------------------------------------------
void goodB2G_101()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43AC4F: using guessed type char buf[16];

//----- (000000000043AE2F) ----------------------------------------------------
void goodG2B_166()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043AEFD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18_good()
{
  goodB2G_101();
  goodG2B_166();
}

//----- (000000000043AF17) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000043AF9D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (000000000043B023) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  int v3; // [rsp+10h] [rbp-20h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int v5; // [rsp+24h] [rbp-Ch]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v7 = atoi(s);
  else
    printLine("fgets() failed.");
  v3 = v7;
  v5 = v7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000043B141) ----------------------------------------------------
void goodG2B_167()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043B219) ----------------------------------------------------
void goodB2G_102()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  int v3; // [rsp+10h] [rbp-20h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int v5; // [rsp+24h] [rbp-Ch]
  int i; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v7 = atoi(s);
  else
    printLine("fgets() failed.");
  v3 = v7;
  v5 = v7;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000043B33D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34_good()
{
  goodG2B_167();
  goodB2G_102();
}

//----- (000000000043B357) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v5 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(&v5);
}

//----- (000000000043B3C3) ----------------------------------------------------
void goodG2B_168()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodG2BSink(&v0);
}

//----- (000000000043B3E7) ----------------------------------------------------
void goodB2G_103()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v5 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodB2GSink(&v5);
}

//----- (000000000043B453) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64_good()
{
  goodG2B_168();
  goodB2G_103();
}

//----- (000000000043B46D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_bad()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = -1;
  __isoc99_fscanf(stdin, "%d", &v2);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_badSink((__int64)&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043B4AD) ----------------------------------------------------
void goodG2B_169()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000043B4D7) ----------------------------------------------------
void goodB2G_104()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = -1;
  __isoc99_fscanf(stdin, "%d", &v2);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b_goodB2GSink((__int64)&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043B517) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66_good()
{
  goodG2B_169();
  goodB2G_104();
}

//----- (000000000043B531) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_badSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_badSink(a1);
}

//----- (000000000043B54B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d_goodG2BSink(_DWORD *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e_goodG2BSink(a1);
}

//----- (000000000043B565) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000043B60F) ----------------------------------------------------
void goodG2B_170()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000043B6B9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_good()
{
  goodG2B_170();
}

//----- (000000000043B6C9) ----------------------------------------------------
void badSink_22()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D2EC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_badData;

//----- (000000000043B790) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_badData = 10;
  badSink_22();
}
// 68D2EC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_badData;

//----- (000000000043B7BB) ----------------------------------------------------
void goodG2BSink_22()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D2F0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodG2BData;

//----- (000000000043B882) ----------------------------------------------------
void goodG2B_171()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodG2BData = 7;
  goodG2BSink_22();
}
// 68D2F0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodG2BData;

//----- (000000000043B8AD) ----------------------------------------------------
void goodB2GSink_15()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D2F4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodB2GData;

//----- (000000000043B97A) ----------------------------------------------------
void goodB2G_105()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodB2GData = 10;
  goodB2GSink_15();
}
// 68D2F4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_goodB2GData;

//----- (000000000043B9A5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45_good()
{
  goodG2B_171();
  goodB2G_105();
}

//----- (000000000043B9BF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_badSink(void **a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+20h] [rbp-10h]
  void **v4; // [rsp+28h] [rbp-8h]

  v4 = a1;
  dest = *a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043BA33) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_goodG2BSink(void **a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+20h] [rbp-10h]
  void **v4; // [rsp+28h] [rbp-8h]

  v4 = a1;
  dest = *a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043BAA7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(__int64 a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = *(char **)(a1 + 16);
  v2 = strlen(*(const char **)(a1 + 16));
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043BB26) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(__int64 a1)
{
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = *(char **)(a1 + 16);
  v2 = strlen(*(const char **)(a1 + 16));
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000043BBA5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(__int64 a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  wchar_t *s; // [rsp+28h] [rbp-8h]

  s = *(wchar_t **)(a1 + 16);
  v2 = wcslen(*(const wchar_t **)(a1 + 16));
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000043BC24) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_badSink(&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043BC5E) ----------------------------------------------------
void goodG2B_172()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodG2BSink(&v0);
}

//----- (000000000043BC82) ----------------------------------------------------
void goodB2G_106()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b_goodB2GSink(&v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043BCBC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63_good()
{
  goodG2B_172();
  goodB2G_106();
}

//----- (000000000043BCD6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3B8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badGlobal;

//----- (000000000043BDA5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3BC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Global;

//----- (000000000043BE85) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3C0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Global;

//----- (000000000043BF5A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3C4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BGlobal;

//----- (000000000043C029) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  void *v4; // [rsp+28h] [rbp-28h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  int j; // [rsp+40h] [rbp-10h]
  int i; // [rsp+44h] [rbp-Ch]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v11 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v10 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v10 = accept(fd, 0LL, 0LL);
        if ( v10 != -1 )
        {
          v6 = recv(v10, buf, 0xDuLL, 0);
          if ( v6 != -1 )
          {
            if ( v6 )
            {
              buf[v6] = 0;
              v11 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v10 != -1 )
      close(v10);
  }
  else
  {
    v11 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v11 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v11) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v4 = malloc(0x28uLL);
    if ( !v4 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v4 + j) = 0;
    if ( v11 < 0 || v11 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v4 + v11) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v4 + j));
    }
    free(v4);
  }
}
// 43C029: using guessed type char buf[16];

//----- (000000000043C2EF) ----------------------------------------------------
void goodB2G_107()
{
  char nptr[16]; // [rsp+0h] [rbp-80h]
  struct sockaddr addr; // [rsp+10h] [rbp-70h]
  char buf[16]; // [rsp+20h] [rbp-60h]
  __int16 s; // [rsp+30h] [rbp-50h]
  uint16_t v4; // [rsp+32h] [rbp-4Eh]
  int v5; // [rsp+34h] [rbp-4Ch]
  void *v6; // [rsp+48h] [rbp-38h]
  void *ptr; // [rsp+50h] [rbp-30h]
  int v8; // [rsp+5Ch] [rbp-24h]
  int v9; // [rsp+60h] [rbp-20h]
  int v10; // [rsp+64h] [rbp-1Ch]
  int fd; // [rsp+68h] [rbp-18h]
  int j; // [rsp+6Ch] [rbp-14h]
  int i; // [rsp+70h] [rbp-10h]
  int v14; // [rsp+74h] [rbp-Ch]
  int v15; // [rsp+78h] [rbp-8h]
  int v16; // [rsp+7Ch] [rbp-4h]

  v16 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v15 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = 0;
      v4 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v15 = accept(fd, 0LL, 0LL);
        if ( v15 != -1 )
        {
          v10 = recv(v15, buf, 0xDuLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              v16 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v15 != -1 )
      close(v15);
  }
  else
  {
    v14 = -1;
    v9 = socket(2, 1, 6);
    if ( v9 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v9, &addr, 0x10u) != -1 && listen(v9, 5) != -1 )
      {
        v14 = accept(v9, 0LL, 0LL);
        if ( v14 != -1 )
        {
          v8 = recv(v14, nptr, 0xDuLL, 0);
          if ( v8 != -1 )
          {
            if ( v8 )
            {
              nptr[v8] = 0;
              v16 = atoi(nptr);
            }
          }
        }
      }
    }
    if ( v9 != -1 )
      close(v9);
    if ( v14 != -1 )
      close(v14);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v16 < 0 || v16 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v16) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v6 = malloc(0x28uLL);
    if ( !v6 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v6 + j) = 0;
    if ( v16 < 0 || v16 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v6 + v16) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v6 + j));
    }
    free(v6);
  }
}
// 43C2EF: using guessed type char buf[16];
// 43C2EF: using guessed type char nptr[16];

//----- (000000000043C6CD) ----------------------------------------------------
void goodG2B_173()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (000000000043C87B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12_good()
{
  goodB2G_107();
  goodG2B_173();
}

//----- (000000000043C895) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C92A) ----------------------------------------------------
void goodG2B1_89()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043C9CB) ----------------------------------------------------
void goodG2B2_89()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000043CA60) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_good()
{
  goodG2B1_89();
  goodG2B2_89();
}

//----- (000000000043CA7A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_6 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive_6 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1B0: using guessed type int staticFive_6;
// 43CA7A: using guessed type char buf[16];

//----- (000000000043CC2A) ----------------------------------------------------
void goodB2G1_57()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_6 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive_6 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1B0: using guessed type int staticFive_6;
// 43CC2A: using guessed type char buf[16];

//----- (000000000043CDEB) ----------------------------------------------------
void goodB2G2_57()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_6 == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive_6 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1B0: using guessed type int staticFive_6;
// 43CDEB: using guessed type char buf[16];

//----- (000000000043CFA1) ----------------------------------------------------
void goodG2B1_90()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_6 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_6 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1B0: using guessed type int staticFive_6;

//----- (000000000043D093) ----------------------------------------------------
void goodG2B2_90()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_6 == 5 )
    v3 = 7;
  if ( staticFive_6 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1B0: using guessed type int staticFive_6;

//----- (000000000043D179) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_90();
  goodG2B2_90();
}

//----- (000000000043D1A7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043D22C) ----------------------------------------------------
void goodG2B_174()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000043D2B1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_good()
{
  goodG2B_174();
}

//----- (000000000043D2C1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_badSink((char **)&v0);
}

//----- (000000000043D300) ----------------------------------------------------
void goodG2B_175()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b_goodG2BSink((char **)&v0);
}

//----- (000000000043D33F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63_good()
{
  goodG2B_175();
}

//----- (000000000043D34F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_badSink(10);
}

//----- (000000000043D371) ----------------------------------------------------
void goodG2B_176()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodG2BSink(7);
}

//----- (000000000043D393) ----------------------------------------------------
void goodB2G_108()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b_goodB2GSink(10);
}

//----- (000000000043D3B5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53_good()
{
  goodG2B_176();
  goodB2G_108();
}

//----- (000000000043D3CF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043D490) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043D551) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000043D618) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_badSink(v7);
}
// 43D618: using guessed type char buf[16];

//----- (000000000043D746) ----------------------------------------------------
void goodG2B_177()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodG2BSink(7);
}

//----- (000000000043D768) ----------------------------------------------------
void goodB2G_109()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodB2GSink(v7);
}
// 43D768: using guessed type char buf[16];

//----- (000000000043D896) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54_good()
{
  goodG2B_177();
  goodB2G_109();
}

//----- (000000000043D8B0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_badSink(a1);
}

//----- (000000000043D8C7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodG2BSink(a1);
}

//----- (000000000043D8DE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d_goodB2GSink(a1);
}

//----- (000000000043D8F5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_badSink(v3);
}

//----- (000000000043D95D) ----------------------------------------------------
void goodG2B_178()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodG2BSink(7);
}

//----- (000000000043D97F) ----------------------------------------------------
void goodB2G_110()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b_goodB2GSink(v3);
}

//----- (000000000043D9E7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54_good()
{
  goodG2B_178();
  goodB2G_110();
}

//----- (000000000043DA01) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad()
{
  char v0; // [rsp+0h] [rbp-40h]
  wchar_t *v1; // [rsp+10h] [rbp-30h]
  wchar_t *s; // [rsp+30h] [rbp-10h]
  wchar_t *v3; // [rsp+38h] [rbp-8h]

  v3 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v3 = s;
  v1 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink((__int64)&v0);
}

//----- (000000000043DA74) ----------------------------------------------------
void goodG2B_179()
{
  char v0; // [rsp+0h] [rbp-40h]
  void *v1; // [rsp+10h] [rbp-30h]
  void *s; // [rsp+30h] [rbp-10h]
  void *v3; // [rsp+38h] [rbp-8h]

  v3 = 0LL;
  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  *((_BYTE *)s + 49) = 0;
  v3 = s;
  v1 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000043DAE2) ----------------------------------------------------
void goodB2G_111()
{
  char v0; // [rsp+0h] [rbp-40h]
  wchar_t *v1; // [rsp+10h] [rbp-30h]
  wchar_t *s; // [rsp+30h] [rbp-10h]
  wchar_t *v3; // [rsp+38h] [rbp-8h]

  v3 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v3 = s;
  v1 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink((__int64)&v0);
}

//----- (000000000043DB55) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good()
{
  goodG2B_179();
  goodB2G_111();
}

//----- (000000000043DB6F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_badSink(&v0);
}

//----- (000000000043DBAE) ----------------------------------------------------
void goodG2B_180()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b_goodG2BSink(&v0);
}

//----- (000000000043DBED) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64_good()
{
  goodG2B_180();
}

//----- (000000000043DBFD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43DBFD: using guessed type char buf[16];

//----- (000000000043DDD5) ----------------------------------------------------
void goodB2G1_58()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43DDD5: using guessed type char buf[16];

//----- (000000000043DFB3) ----------------------------------------------------
void goodB2G2_58()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 43DFB3: using guessed type char buf[16];

//----- (000000000043E191) ----------------------------------------------------
void goodG2B1_91()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043E25D) ----------------------------------------------------
void goodG2B2_91()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043E329) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_91();
  goodG2B2_91();
}

//----- (000000000043E357) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043E425) ----------------------------------------------------
void goodB2G1_59()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000043E4F9) ----------------------------------------------------
void goodB2G2_59()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000043E5CD) ----------------------------------------------------
void goodG2B1_92()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043E69B) ----------------------------------------------------
void goodG2B2_92()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000043E769) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_92();
  goodG2B2_92();
}

//----- (000000000043E797) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043E821) ----------------------------------------------------
void goodG2B1_93()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043E8AB) ----------------------------------------------------
void goodG2B2_93()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043E935) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_good()
{
  goodG2B1_93();
  goodG2B2_93();
}

//----- (000000000043E94F) ----------------------------------------------------
void badSink_23()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_badData;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D2F8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_badData;

//----- (000000000043E9DC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_badData = (__int64)v0;
  badSink_23();
}
// 68D2F8: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_badData;

//----- (000000000043EA22) ----------------------------------------------------
void goodG2BSink_23()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  ptr = (void *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_goodG2BData;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D300: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_goodG2BData;

//----- (000000000043EAAF) ----------------------------------------------------
void goodG2B_181()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_goodG2BData = (__int64)v0;
  goodG2BSink_23();
}
// 68D300: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_goodG2BData;

//----- (000000000043EAF5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45_good()
{
  goodG2B_181();
}

//----- (000000000043EB05) ----------------------------------------------------
void __fastcall badSink_24(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D308: using guessed type int badStatic_3;

//----- (000000000043EBD4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  badStatic_3 = 1;
  badSink_24(v7);
}
// 68D308: using guessed type int badStatic_3;
// 43EBD4: using guessed type char buf[16];

//----- (000000000043ED0C) ----------------------------------------------------
void __fastcall goodB2G1Sink_0(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_0 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D30C: using guessed type int goodB2G1Static_0;

//----- (000000000043EDEC) ----------------------------------------------------
void goodB2G1_60()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2G1Static_0 = 0;
  goodB2G1Sink_0(v7);
}
// 68D30C: using guessed type int goodB2G1Static_0;
// 43EDEC: using guessed type char buf[16];

//----- (000000000043EF24) ----------------------------------------------------
void __fastcall goodB2G2Sink_0(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_0 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D310: using guessed type int goodB2G2Static_0;

//----- (000000000043EFF9) ----------------------------------------------------
void goodB2G2_60()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2G2Static_0 = 1;
  goodB2G2Sink_0(v7);
}
// 68D310: using guessed type int goodB2G2Static_0;
// 43EFF9: using guessed type char buf[16];

//----- (000000000043F131) ----------------------------------------------------
void __fastcall goodG2BSink_24(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_0 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D314: using guessed type int goodG2BStatic_0;

//----- (000000000043F200) ----------------------------------------------------
void goodG2B_182()
{
  goodG2BStatic_0 = 1;
  goodG2BSink_24(7);
}
// 68D314: using guessed type int goodG2BStatic_0;

//----- (000000000043F22C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B_182();
}

//----- (000000000043F250) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000043F303) ----------------------------------------------------
void goodG2B1_94()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000043F3C2) ----------------------------------------------------
void goodG2B2_94()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000043F475) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good()
{
  goodG2B1_94();
  goodG2B2_94();
}

//----- (000000000043F48F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043F51A) ----------------------------------------------------
void goodG2B_183()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = malloc(0x28uLL);
  if ( !dest )
    exit(-1);
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000043F5A5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_good()
{
  goodG2B_183();
}

//----- (000000000043F5B5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_bad()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    __isoc99_fscanf(stdin, "%d", &v0);
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043F6C5) ----------------------------------------------------
void goodB2G_112()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    __isoc99_fscanf(stdin, "%d", &v0);
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043F7DD) ----------------------------------------------------
void goodG2B_184()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (000000000043F8D6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17_good()
{
  goodB2G_112();
  goodG2B_184();
}

//----- (000000000043F8F0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalTrue )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 43F8F0: using guessed type char buf[16];

//----- (000000000043FAE4) ----------------------------------------------------
void goodB2G1_61()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalTrue )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;
// 43FAE4: using guessed type char buf[16];

//----- (000000000043FCE9) ----------------------------------------------------
void goodB2G2_61()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( globalTrue )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 43FCE9: using guessed type char buf[16];

//----- (000000000043FEE3) ----------------------------------------------------
void goodG2B1_95()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000043FFD3) ----------------------------------------------------
void goodG2B2_95()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (00000000004400B7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10_good()
{
  goodB2G1_61();
  goodB2G2_61();
  goodG2B1_95();
  goodG2B2_95();
}

//----- (00000000004400E5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_badSink(a1);
}

//----- (00000000004400FC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodG2BSink(a1);
}

//----- (0000000000440113) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e_goodB2GSink(a1);
}

//----- (000000000044012A) ----------------------------------------------------
void __fastcall badSink_25(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004401EB) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_25;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044022C) ----------------------------------------------------
void __fastcall goodG2BSink_25(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004402ED) ----------------------------------------------------
void goodG2B_185()
{
  goodG2BSink_25(7);
}

//----- (0000000000440318) ----------------------------------------------------
void __fastcall goodB2GSink_16(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004403DF) ----------------------------------------------------
__int64 goodB2G_113()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_16;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000440420) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44_good()
{
  goodG2B_185();
  return goodB2G_113();
}

//----- (000000000044043A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_14_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFive == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalFive == 5 )
  {
    v1 = strlen((const char *)src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (0000000000440514) ----------------------------------------------------
void goodB2G1_62()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFive == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalFive == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004405FA) ----------------------------------------------------
void goodB2G2_62()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]
  wchar_t *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFive == 5 )
  {
    s = (wchar_t *)malloc(0xC8uLL);
    if ( !s )
      exit(-1);
    wmemset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalFive == 5 )
  {
    v1 = wcslen(src);
    dest = (wchar_t *)calloc(v1 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, src);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004406D4) ----------------------------------------------------
void goodG2B1_96()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFive == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  else
  {
    printLine("Benign, fixed string");
  }
  if ( globalFive == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004407B5) ----------------------------------------------------
void goodG2B2_96()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]
  char *src; // [rsp+18h] [rbp-8h]

  src = 0LL;
  if ( globalFive == 5 )
  {
    s = malloc(0x32uLL);
    if ( !s )
      exit(-1);
    memset(s, 65, 0x31uLL);
    s[49] = 0;
    src = s;
  }
  if ( globalFive == 5 )
  {
    v1 = strlen(src);
    dest = (char *)calloc(v1 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, src);
    printLine(dest);
    free(dest);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044088A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_14_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_96();
  goodG2B2_96();
}

//----- (00000000004408B8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_badSink(a1);
}

//----- (00000000004408CF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodG2BSink(a1);
}

//----- (00000000004408E6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d_goodB2GSink(a1);
}

//----- (00000000004408FD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_32_bad()
{
  __int64 v0; // [rsp+0h] [rbp-40h]
  wchar_t *dest; // [rsp+8h] [rbp-38h]
  size_t v2; // [rsp+10h] [rbp-30h]
  wchar_t *src; // [rsp+18h] [rbp-28h]
  wchar_t *s; // [rsp+20h] [rbp-20h]
  wchar_t *v5; // [rsp+28h] [rbp-18h]
  wchar_t **v6; // [rsp+30h] [rbp-10h]
  __int64 *v7; // [rsp+38h] [rbp-8h]

  v7 = &v0;
  v6 = (wchar_t **)&v0;
  v0 = 0LL;
  v5 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v5 = s;
  *v7 = (__int64)s;
  src = *v6;
  v2 = strlen((const char *)src);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, src);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004409F2) ----------------------------------------------------
void goodG2B_186()
{
  __int64 v0; // [rsp+0h] [rbp-40h]
  char *dest; // [rsp+8h] [rbp-38h]
  size_t v2; // [rsp+10h] [rbp-30h]
  char *src; // [rsp+18h] [rbp-28h]
  void *s; // [rsp+20h] [rbp-20h]
  void *v5; // [rsp+28h] [rbp-18h]
  char **v6; // [rsp+30h] [rbp-10h]
  __int64 *v7; // [rsp+38h] [rbp-8h]

  v7 = &v0;
  v6 = (char **)&v0;
  v0 = 0LL;
  v5 = 0LL;
  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  *((_BYTE *)s + 49) = 0;
  v5 = s;
  *v7 = (__int64)s;
  src = *v6;
  v2 = strlen(src);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000440AE2) ----------------------------------------------------
void goodB2G_114()
{
  __int64 v0; // [rsp+0h] [rbp-40h]
  wchar_t *dest; // [rsp+8h] [rbp-38h]
  size_t v2; // [rsp+10h] [rbp-30h]
  wchar_t *src; // [rsp+18h] [rbp-28h]
  wchar_t *s; // [rsp+20h] [rbp-20h]
  wchar_t *v5; // [rsp+28h] [rbp-18h]
  wchar_t **v6; // [rsp+30h] [rbp-10h]
  __int64 *v7; // [rsp+38h] [rbp-8h]

  v7 = &v0;
  v6 = (wchar_t **)&v0;
  v0 = 0LL;
  v5 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v5 = s;
  *v7 = (__int64)s;
  src = *v6;
  v2 = wcslen(src);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, src);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000440BD7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_32_good()
{
  goodG2B_186();
  goodB2G_114();
}

//----- (0000000000440BF1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000440C78) ----------------------------------------------------
void goodG2B_187()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000440CFF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_good()
{
  goodG2B_187();
}

//----- (0000000000440D0F) ----------------------------------------------------
void __fastcall badSink_26(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (0000000000440D60) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_bad()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))badSink_26)(v1);
}

//----- (0000000000440DA6) ----------------------------------------------------
void __fastcall goodG2BSink_26(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (0000000000440DF7) ----------------------------------------------------
__int64 goodG2B_188()
{
  void *v1; // [rsp+0h] [rbp-10h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return ((__int64 (__fastcall *)(void *))goodG2BSink_26)(v1);
}

//----- (0000000000440E3D) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44_good()
{
  return goodG2B_188();
}

//----- (0000000000440E4D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 440E4D: using guessed type char buf[16];

//----- (0000000000441025) ----------------------------------------------------
void goodG2B_189()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004410F1) ----------------------------------------------------
void goodB2G_115()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4410F1: using guessed type char buf[16];

//----- (00000000004412CF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01_good()
{
  goodG2B_189();
  goodB2G_115();
}

//----- (00000000004412E9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000441415) ----------------------------------------------------
void goodB2G1_63()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000441552) ----------------------------------------------------
void goodB2G2_63()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000441684) ----------------------------------------------------
void goodG2B1_97()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000441776) ----------------------------------------------------
void goodG2B2_97()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000044185C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13_good()
{
  goodB2G1_63();
  goodB2G2_63();
  goodG2B1_97();
  goodG2B2_97();
}

//----- (000000000044188A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000441941) ----------------------------------------------------
void goodG2B_190()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (00000000004419F8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12_good()
{
  goodG2B_190();
}

//----- (0000000000441A08) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000441AC9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000441B8A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000441C51) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_badSink(&v0);
}

//----- (0000000000441C75) ----------------------------------------------------
void goodG2B_191()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodG2BSink(&v0);
}

//----- (0000000000441C99) ----------------------------------------------------
void goodB2G_116()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b_goodB2GSink(&v0);
}

//----- (0000000000441CBD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64_good()
{
  goodG2B_191();
  goodB2G_116();
}

//----- (0000000000441CD7) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000441D04) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodG2BSource()
{
  return 7LL;
}

//----- (0000000000441D17) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000441D44) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_badSink(void **a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  void **v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = a1;
  ptr = *a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000441DDD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_goodG2BSink(void **a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  void **v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = a1;
  ptr = *a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000441E76) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000441EA7) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_goodG2BSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xBuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000441ED8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000441FAE) ----------------------------------------------------
void goodB2G1_64()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000442090) ----------------------------------------------------
void goodB2G2_64()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000442166) ----------------------------------------------------
void goodG2B1_98()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (0000000000442243) ----------------------------------------------------
void goodG2B2_98()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (0000000000442314) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good()
{
  goodB2G1_64();
  goodB2G2_64();
  goodG2B1_98();
  goodG2B2_98();
}

//----- (0000000000442342) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+8h] [rbp-28h]
  wchar_t *s; // [rsp+20h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000442416) ----------------------------------------------------
void goodG2B_192()
{
  char *dest; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+8h] [rbp-28h]
  _BYTE *s; // [rsp+20h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (00000000004424E5) ----------------------------------------------------
void goodB2G_117()
{
  wchar_t *dest; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+8h] [rbp-28h]
  wchar_t *s; // [rsp+20h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004425B9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good()
{
  goodG2B_192();
  goodB2G_117();
}

//----- (00000000004425D3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4425D3: using guessed type char buf[16];

//----- (00000000004427C7) ----------------------------------------------------
void goodB2G1_65()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;
// 4427C7: using guessed type char buf[16];

//----- (00000000004429CC) ----------------------------------------------------
void goodB2G2_65()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4429CC: using guessed type char buf[16];

//----- (0000000000442BC6) ----------------------------------------------------
void goodG2B1_99()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000442CB6) ----------------------------------------------------
void goodG2B2_99()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000442D9A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_99();
  goodG2B2_99();
}

//----- (0000000000442DC8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000442E93) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000442F5E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044302F) ----------------------------------------------------
__int64 staticReturnsTrue_7()
{
  return 1LL;
}

//----- (000000000044303A) ----------------------------------------------------
__int64 staticReturnsFalse_7()
{
  return 0LL;
}

//----- (0000000000443045) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 443045: using guessed type char buf[16];

//----- (0000000000443241) ----------------------------------------------------
void goodB2G1_66()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)staticReturnsFalse_7() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 443241: using guessed type char buf[16];

//----- (000000000044344E) ----------------------------------------------------
void goodB2G2_66()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 44344E: using guessed type char buf[16];

//----- (0000000000443650) ----------------------------------------------------
void goodG2B1_100()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_7() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000443748) ----------------------------------------------------
void goodG2B2_100()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_7() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_7() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000443834) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_100();
  goodG2B2_100();
}

//----- (0000000000443862) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (00000000004438FA) ----------------------------------------------------
void goodG2B1_101()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000044399E) ----------------------------------------------------
void goodG2B2_101()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000443A36) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_good()
{
  goodG2B1_101();
  goodG2B2_101();
}

//----- (0000000000443A50) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_badSink(&v4);
}
// 443A50: using guessed type char buf[16];

//----- (0000000000443B80) ----------------------------------------------------
void goodG2B_193()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodG2BSink(&v0);
}

//----- (0000000000443BA4) ----------------------------------------------------
void goodB2G_118()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b_goodB2GSink(&v4);
}
// 443BA4: using guessed type char buf[16];

//----- (0000000000443CD4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64_good()
{
  goodG2B_193();
  goodB2G_118();
}

//----- (0000000000443CEE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_badSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000443DC0) ----------------------------------------------------
void goodG2B_194()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000443E92) ----------------------------------------------------
void goodB2G_119()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b_goodB2GSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000443F6A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61_good()
{
  goodG2B_194();
  goodB2G_119();
}

//----- (0000000000443F84) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_67_bad()
{
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_badSink((const char *)s);
}

//----- (0000000000443FF7) ----------------------------------------------------
void goodG2B_195()
{
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodG2BSink(s);
}

//----- (0000000000444065) ----------------------------------------------------
void goodB2G_120()
{
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_67b_goodB2GSink(s);
}

//----- (00000000004440D8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_67_good()
{
  goodG2B_195();
  goodB2G_120();
}

//----- (00000000004440F2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004441B8) ----------------------------------------------------
void goodB2G_121()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000044427E) ----------------------------------------------------
void goodG2B_196()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000044433F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_good()
{
  goodB2G_121();
  goodG2B_196();
}

//----- (0000000000444359) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000044446D) ----------------------------------------------------
void goodB2G_122()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000444587) ----------------------------------------------------
void goodG2B_197()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000444655) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good()
{
  goodB2G_122();
  goodG2B_197();
}

//----- (000000000044466F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_badSink(&v0);
}

//----- (00000000004446AE) ----------------------------------------------------
void goodG2B_198()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b_goodG2BSink(&v0);
}

//----- (00000000004446ED) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64_good()
{
  goodG2B_198();
}

//----- (00000000004446FD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000444791) ----------------------------------------------------
void goodG2B1_102()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D3F8: using guessed type int globalFalse;

//----- (0000000000444831) ----------------------------------------------------
void goodG2B2_102()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( globalTrue )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1C4: using guessed type int globalTrue;

//----- (00000000004448C5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_good()
{
  goodG2B1_102();
  goodG2B2_102();
}

//----- (00000000004448DF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_badSource();
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000444944) ----------------------------------------------------
void goodG2B_199()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b_goodG2BSource();
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (00000000004449A9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61_good()
{
  goodG2B_199();
}

//----- (00000000004449B9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal )
  {
    v2 = strlen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, (const wchar_t *)a1);
    printLine((const char *)dest);
    free(dest);
  }
}
// 68D224: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal;

//----- (0000000000444A36) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = wcslen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, a1);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D228: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global;

//----- (0000000000444ABF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global )
  {
    v2 = wcslen(a1);
    dest = (wchar_t *)calloc(v2 + 1, 4uLL);
    if ( !dest )
      exit(-1);
    wcscpy(dest, a1);
    printWLine((__int64)dest);
    free(dest);
  }
}
// 68D22C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global;

//----- (0000000000444B3C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  if ( CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal )
  {
    v2 = strlen(a1);
    dest = (char *)calloc(v2 + 1, 1uLL);
    if ( !dest )
      exit(-1);
    strcpy(dest, a1);
    printLine(dest);
    free(dest);
  }
}
// 68D230: using guessed type int CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal;

//----- (0000000000444BB9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticFive_7 == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticFive_7 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1B4: using guessed type int staticFive_7;

//----- (0000000000444CB6) ----------------------------------------------------
void goodB2G1_67()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticFive_7 == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticFive_7 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1B4: using guessed type int staticFive_7;

//----- (0000000000444DC6) ----------------------------------------------------
void goodB2G2_67()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( staticFive_7 == 5 )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( staticFive_7 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1B4: using guessed type int staticFive_7;

//----- (0000000000444ECB) ----------------------------------------------------
void goodG2B1_103()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_7 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_7 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1B4: using guessed type int staticFive_7;

//----- (0000000000444FBD) ----------------------------------------------------
void goodG2B2_103()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_7 == 5 )
    v3 = 7;
  if ( staticFive_7 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1B4: using guessed type int staticFive_7;

//----- (00000000004450A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_103();
  goodG2B2_103();
}

//----- (00000000004450D1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(dest);
  free(dest);
}

//----- (000000000044512A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-20h]
  char *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000445183) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v2; // [rsp+18h] [rbp-38h]
  __int64 v3; // [rsp+20h] [rbp-30h]
  __int64 v4; // [rsp+28h] [rbp-28h]
  __int64 v5; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v7; // [rsp+48h] [rbp-8h]

  v7 = a1;
  dest = *a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (00000000004451FD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-40h]
  __int64 v2; // [rsp+18h] [rbp-38h]
  __int64 v3; // [rsp+20h] [rbp-30h]
  __int64 v4; // [rsp+28h] [rbp-28h]
  __int64 v5; // [rsp+30h] [rbp-20h]
  void *dest; // [rsp+40h] [rbp-10h]
  void **v7; // [rsp+48h] [rbp-8h]

  v7 = a1;
  dest = *a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000445277) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_badSink(v3);
}

//----- (00000000004452DF) ----------------------------------------------------
void goodG2B_200()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodG2BSink(7);
}

//----- (0000000000445301) ----------------------------------------------------
void goodB2G_123()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b_goodB2GSink(v3);
}

//----- (0000000000445369) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51_good()
{
  goodG2B_200();
  goodB2G_123();
}

//----- (0000000000445383) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_471FB0, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044547C) ----------------------------------------------------
void goodB2G1_68()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_471FB0, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000445588) ----------------------------------------------------
void goodB2G2_68()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, &unk_471FB0, &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000445689) ----------------------------------------------------
void goodG2B1_104()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000445777) ----------------------------------------------------
void goodG2B2_104()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000445859) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_104();
  goodG2B2_104();
}

//----- (0000000000445887) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_bad()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *ptr; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  int v3; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  v3 = v0;
  v2 = v0;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000445975) ----------------------------------------------------
void goodG2B_201()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000445A4D) ----------------------------------------------------
void goodB2G_124()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *ptr; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  int v3; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  v3 = v0;
  v2 = v0;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v2) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000445B41) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31_good()
{
  goodG2B_201();
  goodB2G_124();
}

//----- (0000000000445B5B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticTrue_9 )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1B8: using guessed type int staticTrue_9;

//----- (0000000000445C0E) ----------------------------------------------------
void goodG2B1_105()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticFalse_9 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D318: using guessed type int staticFalse_9;

//----- (0000000000445CCD) ----------------------------------------------------
void goodG2B2_105()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( staticTrue_9 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1B8: using guessed type int staticTrue_9;

//----- (0000000000445D80) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_good()
{
  goodG2B1_105();
  goodG2B2_105();
}

//----- (0000000000445D9A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_53_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_badSink((const char *)s);
}

//----- (0000000000445E05) ----------------------------------------------------
void goodG2B_202()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodG2BSink(s);
}

//----- (0000000000445E6B) ----------------------------------------------------
void goodB2G_125()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_53b_goodB2GSink(s);
}

//----- (0000000000445ED6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_53_good()
{
  goodG2B_202();
  goodB2G_125();
}

//----- (0000000000445EF0) ----------------------------------------------------
void __fastcall badSink_27(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_4 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D31C: using guessed type int badStatic_4;

//----- (0000000000445FBF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  badStatic_4 = 1;
  badSink_27(v6);
}
// 68D31C: using guessed type int badStatic_4;
// 445FBF: using guessed type char buf[16];

//----- (00000000004460B1) ----------------------------------------------------
void __fastcall goodB2G1Sink_1(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_1 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D320: using guessed type int goodB2G1Static_1;

//----- (0000000000446191) ----------------------------------------------------
void goodB2G1_69()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G1Static_1 = 0;
  goodB2G1Sink_1(v6);
}
// 68D320: using guessed type int goodB2G1Static_1;
// 446191: using guessed type char buf[16];

//----- (0000000000446283) ----------------------------------------------------
void __fastcall goodB2G2Sink_1(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D324: using guessed type int goodB2G2Static_1;

//----- (0000000000446358) ----------------------------------------------------
void goodB2G2_69()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G2Static_1 = 1;
  goodB2G2Sink_1(v6);
}
// 68D324: using guessed type int goodB2G2Static_1;
// 446358: using guessed type char buf[16];

//----- (000000000044644A) ----------------------------------------------------
void __fastcall goodG2BSink_27(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_1 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D328: using guessed type int goodG2BStatic_1;

//----- (0000000000446519) ----------------------------------------------------
void goodG2B_203()
{
  goodG2BStatic_1 = 1;
  goodG2BSink_27(7);
}
// 68D328: using guessed type int goodG2BStatic_1;

//----- (0000000000446545) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B_203();
}

//----- (0000000000446569) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 446569: using guessed type char buf[16];

//----- (00000000004466FB) ----------------------------------------------------
void goodB2G1_70()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4466FB: using guessed type char buf[16];

//----- (0000000000446893) ----------------------------------------------------
void goodB2G2_70()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 446893: using guessed type char buf[16];

//----- (0000000000446A2B) ----------------------------------------------------
void goodG2B1_106()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000446AF7) ----------------------------------------------------
void goodG2B2_106()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000446BC3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_106();
  goodG2B2_106();
}

//----- (0000000000446BF1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000446C6E) ----------------------------------------------------
void goodG2B1_107()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000446CF7) ----------------------------------------------------
void goodG2B2_107()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000446D74) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_good()
{
  goodG2B1_107();
  goodG2B2_107();
}

//----- (0000000000446D8E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad()
{
  char src[8]; // [rsp+0h] [rbp-30h]
  char *dest; // [rsp+18h] [rbp-18h]
  char *v2; // [rsp+20h] [rbp-10h]
  char *v3; // [rsp+28h] [rbp-8h]

  v3 = (char *)malloc(0xAuLL);
  if ( !v3 )
    exit(-1);
  v2 = v3;
  dest = v3;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v3, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000446E12) ----------------------------------------------------
void goodG2B_204()
{
  char src[8]; // [rsp+0h] [rbp-30h]
  char *dest; // [rsp+18h] [rbp-18h]
  char *v2; // [rsp+20h] [rbp-10h]
  char *v3; // [rsp+28h] [rbp-8h]

  v3 = (char *)malloc(0xBuLL);
  if ( !v3 )
    exit(-1);
  v2 = v3;
  dest = v3;
  strcpy(src, "AAAAAAAAAA");
  strcpy(v3, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000446E96) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_good()
{
  goodG2B_204();
}

//----- (0000000000446EA6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000446EE4) ----------------------------------------------------
void goodG2B_205()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodG2BSink(7);
}

//----- (0000000000446F0C) ----------------------------------------------------
void goodB2G_126()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b_goodB2GSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000446F4A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67_good()
{
  goodG2B_205();
  goodB2G_126();
}

//----- (0000000000446F64) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000044708E) ----------------------------------------------------
void goodB2G1_71()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (00000000004471C9) ----------------------------------------------------
void goodB2G2_71()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (00000000004472F9) ----------------------------------------------------
void goodG2B1_108()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004473E9) ----------------------------------------------------
void goodG2B2_108()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004474CD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_108();
  goodG2B2_108();
}

//----- (00000000004474FB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 4474FB: using guessed type char buf[16];

//----- (000000000044768F) ----------------------------------------------------
void goodB2G_127()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 44768F: using guessed type char buf[16];

//----- (0000000000447829) ----------------------------------------------------
void goodG2B_206()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004478F7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good()
{
  goodB2G_127();
  goodG2B_206();
}

//----- (0000000000447911) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004479D2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000447A93) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000447B5A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_bad()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 10;
  v1 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_badSink((__int64)&v0);
}

//----- (0000000000447B84) ----------------------------------------------------
void goodG2B_207()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 7;
  v1 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000447BAE) ----------------------------------------------------
void goodB2G_128()
{
  char v0; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = 10;
  v1 = 10;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b_goodB2GSink((__int64)&v0);
}

//----- (0000000000447BD8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66_good()
{
  goodG2B_207();
  goodB2G_128();
}

//----- (0000000000447BF2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_badSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000447C61) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b_goodG2BSink(void *a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(a1, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000447CD0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D32C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal;

//----- (0000000000447D9F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D330: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global;

//----- (0000000000447E7F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D334: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global;

//----- (0000000000447F54) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D338: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal;

//----- (0000000000448023) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_badSink(v0);
}

//----- (0000000000448068) ----------------------------------------------------
void goodG2B_208()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b_goodG2BSink(v0);
}

//----- (00000000004480AD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67_good()
{
  goodG2B_208();
}

//----- (00000000004480BD) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_badSink(__int64 a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = *(void **)(a1 + 16);
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000044814F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_goodG2BSink(__int64 a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = *(void **)(a1 + 16);
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004481E1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_badSink(v0);
}

//----- (000000000044821E) ----------------------------------------------------
void goodG2B_209()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b_goodG2BSink(v0);
}

//----- (000000000044825B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51_good()
{
  goodG2B_209();
}

//----- (000000000044826B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  in_addr_t v3; // [rsp+14h] [rbp-3Ch]
  void *v4; // [rsp+28h] [rbp-28h]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v6; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int j; // [rsp+44h] [rbp-Ch]
  int i; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v6 = recv(fd, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    v10 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v10 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v10) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v4 = malloc(0x28uLL);
    if ( !v4 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v4 + j) = 0;
    if ( v10 < 0 || v10 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v4 + v10) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v4 + j));
    }
    free(v4);
  }
}
// 44826B: using guessed type char buf[16];

//----- (00000000004484EB) ----------------------------------------------------
void goodB2G_129()
{
  char nptr[16]; // [rsp+0h] [rbp-70h]
  struct sockaddr addr; // [rsp+10h] [rbp-60h]
  char buf[16]; // [rsp+20h] [rbp-50h]
  __int16 s; // [rsp+30h] [rbp-40h]
  uint16_t v4; // [rsp+32h] [rbp-3Eh]
  in_addr_t v5; // [rsp+34h] [rbp-3Ch]
  void *v6; // [rsp+40h] [rbp-30h]
  void *ptr; // [rsp+48h] [rbp-28h]
  int v8; // [rsp+54h] [rbp-1Ch]
  int v9; // [rsp+58h] [rbp-18h]
  int v10; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int j; // [rsp+64h] [rbp-Ch]
  int i; // [rsp+68h] [rbp-8h]
  int v14; // [rsp+6Ch] [rbp-4h]

  v14 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = inet_addr("127.0.0.1");
      v4 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0xDuLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            v14 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    v9 = socket(2, 1, 6);
    if ( v9 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = inet_addr("127.0.0.1");
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( connect(v9, &addr, 0x10u) != -1 )
      {
        v8 = recv(v9, nptr, 0xDuLL, 0);
        if ( v8 != -1 )
        {
          if ( v8 )
          {
            nptr[v8] = 0;
            v14 = atoi(nptr);
          }
        }
      }
    }
    if ( v9 != -1 )
      close(v9);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v14 < 0 || v14 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v14) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v6 = malloc(0x28uLL);
    if ( !v6 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v6 + j) = 0;
    if ( v14 < 0 || v14 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v6 + v14) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v6 + j));
    }
    free(v6);
  }
}
// 4484EB: using guessed type char buf[16];
// 4484EB: using guessed type char nptr[16];

//----- (000000000044883D) ----------------------------------------------------
void goodG2B_210()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (00000000004489EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12_good()
{
  goodB2G_129();
  goodG2B_210();
}

//----- (0000000000448A05) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_badSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_badSink(a1);
}

//----- (0000000000448A1F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodG2BSink(const char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(a1);
}

//----- (0000000000448A39) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodB2GSink(const wchar_t *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(a1);
}

//----- (0000000000448A53) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_badSink(a1);
}

//----- (0000000000448A6D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_goodG2BSink(a1);
}

//----- (0000000000448A87) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000448B0B) ----------------------------------------------------
void goodG2B1_109()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000448B8F) ----------------------------------------------------
void goodG2B2_109()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000448C13) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_good()
{
  goodG2B1_109();
  goodG2B2_109();
}

//----- (0000000000448C2D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000448D00) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000448DD3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-20h]
  int v2; // [rsp+1Ch] [rbp-14h]
  int i; // [rsp+2Ch] [rbp-4h]
  int j; // [rsp+2Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000448EAC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badSink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D32C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_badGlobal;

//----- (0000000000448EEE) ----------------------------------------------------
void goodB2G1_72()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Sink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D330: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G1Global;

//----- (0000000000448F30) ----------------------------------------------------
void goodB2G2_72()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Sink(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D334: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodB2G2Global;

//----- (0000000000448F72) ----------------------------------------------------
void goodG2B_211()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BSink(7);
}
// 68D338: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_goodG2BGlobal;

//----- (0000000000448F9E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B_211();
}

//----- (0000000000448FC2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_badSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (0000000000449048) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_goodG2BSink(char *a1)
{
  char s[8]; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    a1[i] = s[i];
  printLine(a1);
  free(a1);
}

//----- (00000000004490CE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_bad()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xAuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_badSink((__int64)&v0);
}

//----- (0000000000449113) ----------------------------------------------------
void goodG2B_212()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xBuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000449158) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66_good()
{
  goodG2B_212();
}

//----- (0000000000449168) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000449233) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004492FE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004493CF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badGlobal = 1;
  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badSource(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D33C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_badGlobal;

//----- (000000000044943E) ----------------------------------------------------
void goodG2B1_110()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Global = 0;
  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Source(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D340: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B1Global;

//----- (00000000004494AD) ----------------------------------------------------
void goodG2B2_110()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Global = 1;
  dest = (char *)CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Source(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D344: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_goodG2B2Global;

//----- (000000000044951C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22_good()
{
  goodG2B1_110();
  goodG2B2_110();
}

//----- (0000000000449536) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 449536: using guessed type char buf[16];

//----- (00000000004496EC) ----------------------------------------------------
void goodB2G1_73()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4496EC: using guessed type char buf[16];

//----- (00000000004498B3) ----------------------------------------------------
void goodB2G2_73()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4498B3: using guessed type char buf[16];

//----- (0000000000449A6F) ----------------------------------------------------
void goodG2B1_111()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000449B67) ----------------------------------------------------
void goodG2B2_111()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000449C53) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11_good()
{
  goodB2G1_73();
  goodB2G2_73();
  goodG2B1_111();
  goodG2B2_111();
}

//----- (0000000000449C81) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 449C81: using guessed type char buf[16];

//----- (0000000000449E13) ----------------------------------------------------
void goodB2G1_74()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 449E13: using guessed type char buf[16];

//----- (0000000000449FAB) ----------------------------------------------------
void goodB2G2_74()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 449FAB: using guessed type char buf[16];

//----- (000000000044A143) ----------------------------------------------------
void goodG2B1_112()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044A20F) ----------------------------------------------------
void goodG2B2_112()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044A2DB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_good()
{
  goodB2G1_74();
  goodB2G2_74();
  goodG2B1_112();
  goodG2B2_112();
}

//----- (000000000044A309) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_52_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_badSink((const char *)s);
}

//----- (000000000044A374) ----------------------------------------------------
void goodG2B_213()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodG2BSink(s);
}

//----- (000000000044A3DA) ----------------------------------------------------
void goodB2G_130()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_52b_goodB2GSink(s);
}

//----- (000000000044A445) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_52_good()
{
  goodG2B_213();
  goodB2G_130();
}

//----- (000000000044A45F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_badSink(a1);
}

//----- (000000000044A476) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodG2BSink(a1);
}

//----- (000000000044A48D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e_goodB2GSink(a1);
}

//----- (000000000044A4A4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_badSink(const char *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)a1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000044A517) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodG2BSink(const char *a1)
{
  char *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = strlen(a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, a1);
  printLine(dest);
  free(dest);
}

//----- (000000000044A58A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_51b_goodB2GSink(const wchar_t *a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-10h]
  size_t v2; // [rsp+18h] [rbp-8h]

  v2 = wcslen(a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, a1);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000044A5FD) ----------------------------------------------------
void badSink_28()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D348: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData;

//----- (000000000044A6C4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData = v3;
  badSink_28();
}
// 68D348: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData;

//----- (000000000044A735) ----------------------------------------------------
void goodG2BSink_28()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D34C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData;

//----- (000000000044A7FC) ----------------------------------------------------
void goodG2B_214()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData = 7;
  goodG2BSink_28();
}
// 68D34C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData;

//----- (000000000044A827) ----------------------------------------------------
void goodB2GSink_17()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D350: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData;

//----- (000000000044A8F4) ----------------------------------------------------
void goodB2G_131()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData = v3;
  goodB2GSink_17();
}
// 68D350: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData;

//----- (000000000044A965) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_good()
{
  goodG2B_214();
  goodB2G_131();
}

//----- (000000000044A97F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int k; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}

//----- (000000000044AABE) ----------------------------------------------------
void goodB2G_132()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v1; // [rsp+8h] [rbp-28h]
  __int16 v2; // [rsp+Ch] [rbp-24h]
  void *ptr; // [rsp+18h] [rbp-18h]
  int k; // [rsp+20h] [rbp-10h]
  int v5; // [rsp+24h] [rbp-Ch]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}

//----- (000000000044AC03) ----------------------------------------------------
void goodG2B_215()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (000000000044ACFC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good()
{
  goodB2G_132();
  goodG2B_215();
}

//----- (000000000044AD16) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 44AD16: using guessed type char buf[16];

//----- (000000000044AEC4) ----------------------------------------------------
void goodB2G1_75()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;
// 44AEC4: using guessed type char buf[16];

//----- (000000000044B083) ----------------------------------------------------
void goodB2G2_75()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 44B083: using guessed type char buf[16];

//----- (000000000044B237) ----------------------------------------------------
void goodG2B1_113()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000044B327) ----------------------------------------------------
void goodG2B2_113()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000044B40B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10_good()
{
  goodB2G1_75();
  goodB2G2_75();
  goodG2B1_113();
  goodG2B2_113();
}

//----- (000000000044B439) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_badSink(a1);
}

//----- (000000000044B453) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e_goodG2BSink(a1);
}

//----- (000000000044B46D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044B59B) ----------------------------------------------------
void goodB2G1_76()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044B6DA) ----------------------------------------------------
void goodB2G2_76()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044B80E) ----------------------------------------------------
void goodG2B1_114()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044B900) ----------------------------------------------------
void goodG2B2_114()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044B9E6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14_good()
{
  goodB2G1_76();
  goodB2G2_76();
  goodG2B1_114();
  goodG2B2_114();
}

//----- (000000000044BA14) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D470: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_badData;

//----- (000000000044BADB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D478: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodG2BData;

//----- (000000000044BBA2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D474: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68_goodB2GData;

//----- (000000000044BC6F) ----------------------------------------------------
void __fastcall badSink_29(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D354: using guessed type int badStatic_5;

//----- (000000000044BD3E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  badStatic_5 = 1;
  badSink_29(v3);
}
// 68D354: using guessed type int badStatic_5;

//----- (000000000044BDB0) ----------------------------------------------------
void __fastcall goodB2G1Sink_2(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_2 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D358: using guessed type int goodB2G1Static_2;

//----- (000000000044BE90) ----------------------------------------------------
void goodB2G1_77()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  goodB2G1Static_2 = 0;
  goodB2G1Sink_2(v3);
}
// 68D358: using guessed type int goodB2G1Static_2;

//----- (000000000044BF02) ----------------------------------------------------
void __fastcall goodB2G2Sink_2(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D35C: using guessed type int goodB2G2Static_2;

//----- (000000000044BFD7) ----------------------------------------------------
void goodB2G2_77()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  goodB2G2Static_2 = 1;
  goodB2G2Sink_2(v3);
}
// 68D35C: using guessed type int goodB2G2Static_2;

//----- (000000000044C049) ----------------------------------------------------
void __fastcall goodG2BSink_29(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_2 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D360: using guessed type int goodG2BStatic_2;

//----- (000000000044C118) ----------------------------------------------------
void goodG2B_216()
{
  goodG2BStatic_2 = 1;
  goodG2BSink_29(7);
}
// 68D360: using guessed type int goodG2BStatic_2;

//----- (000000000044C144) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21_good()
{
  goodB2G1_77();
  goodB2G2_77();
  goodG2B_216();
}

//----- (000000000044C168) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 44C168: using guessed type char buf[16];

//----- (000000000044C2FA) ----------------------------------------------------
void goodG2B_217()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044C3C6) ----------------------------------------------------
void goodB2G_133()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v8 < 0 || v8 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v8) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 44C3C6: using guessed type char buf[16];

//----- (000000000044C55E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01_good()
{
  goodG2B_217();
  goodB2G_133();
}

//----- (000000000044C578) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D410: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;

//----- (000000000044C63F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D408: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodG2BData;

//----- (000000000044C706) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D40C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_goodB2GData;

//----- (000000000044C7D3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044C89A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044C961) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044CA2E) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000044CA8D) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000044CAA0) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000044CAFF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044CBE2) ----------------------------------------------------
void goodB2G1_78()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044CCCD) ----------------------------------------------------
void goodB2G2_78()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044CDB8) ----------------------------------------------------
void goodG2B1_115()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044CE84) ----------------------------------------------------
void goodG2B2_115()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044CF50) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_good()
{
  goodB2G1_78();
  goodB2G2_78();
  goodG2B1_115();
  goodG2B2_115();
}

//----- (000000000044CF7E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_badSink(a1);
}

//----- (000000000044CF95) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodG2BSink(a1);
}

//----- (000000000044CFAC) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c_goodB2GSink(a1);
}

//----- (000000000044CFC3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+10h] [rbp-20h]
  int i; // [rsp+1Ch] [rbp-14h]
  int j; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044D0E3) ----------------------------------------------------
void goodG2B_218()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044D1BB) ----------------------------------------------------
void goodB2G_134()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+10h] [rbp-20h]
  int i; // [rsp+1Ch] [rbp-14h]
  int j; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044D2E1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31_good()
{
  goodG2B_218();
  goodB2G_134();
}

//----- (000000000044D2FB) ----------------------------------------------------
void badSink_30()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData;
  v1 = strlen((const char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}
// 68D368: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData;

//----- (000000000044D375) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_45_bad()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData = (__int64)s;
  badSink_30();
}
// 68D368: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_badData;

//----- (000000000044D3E9) ----------------------------------------------------
void goodG2BSink_30()
{
  char *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  char *s; // [rsp+18h] [rbp-8h]

  s = (char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData;
  v1 = strlen((const char *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}
// 68D370: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData;

//----- (000000000044D463) ----------------------------------------------------
void goodG2B_219()
{
  _BYTE *s; // [rsp+0h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData = (__int64)s;
  goodG2BSink_30();
}
// 68D370: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodG2BData;

//----- (000000000044D4D2) ----------------------------------------------------
void goodB2GSink_18()
{
  wchar_t *dest; // [rsp+8h] [rbp-18h]
  size_t v1; // [rsp+10h] [rbp-10h]
  wchar_t *s; // [rsp+18h] [rbp-8h]

  s = (wchar_t *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData;
  v1 = wcslen((const wchar_t *)CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}
// 68D378: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData;

//----- (000000000044D54C) ----------------------------------------------------
void goodB2G_135()
{
  wchar_t *s; // [rsp+0h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData = (__int64)s;
  goodB2GSink_18();
}
// 68D378: using guessed type __int64 CWE122_Heap_Based_Buffer_Overflow__CWE135_45_goodB2GData;

//----- (000000000044D5C0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_45_good()
{
  goodG2B_219();
  goodB2G_135();
}

//----- (000000000044D5DA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *v5; // [rsp+0h] [rbp-30h]
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int k; // [rsp+14h] [rbp-1Ch]
  int l; // [rsp+14h] [rbp-1Ch]
  int i; // [rsp+18h] [rbp-18h]
  int j; // [rsp+18h] [rbp-18h]
  int v11; // [rsp+1Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v11 = v2;
  }
  else
  {
    v11 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v11 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v11] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
  else
  {
    v5 = malloc(0x28uLL);
    if ( !v5 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v5[k] = 0;
    if ( v11 < 0 || v11 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      v5[v11] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(v5[l]);
    }
    free(v5);
  }
}

//----- (000000000044D7D6) ----------------------------------------------------
void goodB2G_136()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  _DWORD *v10; // [rsp+0h] [rbp-30h]
  _DWORD *ptr; // [rsp+8h] [rbp-28h]
  int k; // [rsp+14h] [rbp-1Ch]
  int l; // [rsp+14h] [rbp-1Ch]
  int i; // [rsp+18h] [rbp-18h]
  int j; // [rsp+18h] [rbp-18h]
  int v16; // [rsp+1Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v16 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v16 = v7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v16 < 0 || v16 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v16] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
  else
  {
    v10 = malloc(0x28uLL);
    if ( !v10 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v10[k] = 0;
    if ( v16 < 0 || v16 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      v10[v16] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(v10[l]);
    }
    free(v10);
  }
}

//----- (000000000044DA1A) ----------------------------------------------------
void goodG2B_220()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (000000000044DBC8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12_good()
{
  goodB2G_136();
  goodG2B_220();
}

//----- (000000000044DBE2) ----------------------------------------------------
__int64 staticReturnsTrue_8()
{
  return 1LL;
}

//----- (000000000044DBED) ----------------------------------------------------
__int64 staticReturnsFalse_8()
{
  return 0LL;
}

//----- (000000000044DBF8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 44DBF8: using guessed type char buf[16];

//----- (000000000044DDAE) ----------------------------------------------------
void goodB2G1_79()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsFalse_8() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 44DDAE: using guessed type char buf[16];

//----- (000000000044DF75) ----------------------------------------------------
void goodB2G2_79()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 44DF75: using guessed type char buf[16];

//----- (000000000044E131) ----------------------------------------------------
void goodG2B1_116()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_8() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000044E229) ----------------------------------------------------
void goodG2B2_116()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_8() )
    v3 = 7;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000044E315) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_good()
{
  goodB2G1_79();
  goodB2G2_79();
  goodG2B1_116();
  goodG2B2_116();
}

//----- (000000000044E343) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_badSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000044E3B5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b_goodG2BSink(void **a1)
{
  __int64 src; // [rsp+10h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  __int64 v3; // [rsp+20h] [rbp-20h]
  __int64 v4; // [rsp+28h] [rbp-18h]
  __int64 v5; // [rsp+30h] [rbp-10h]
  void *dest; // [rsp+38h] [rbp-8h]

  dest = *a1;
  src = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (000000000044E427) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044E50C) ----------------------------------------------------
void goodB2G_137()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000044E5F9) ----------------------------------------------------
void goodG2B_221()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044E6C7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18_good()
{
  goodB2G_137();
  goodG2B_221();
}

//----- (000000000044E6E1) ----------------------------------------------------
void *__fastcall badSource_11(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( badStatic_6 )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D380: using guessed type int badStatic_6;

//----- (000000000044E71C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  badStatic_6 = 1;
  dest = (char *)badSource_11(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D380: using guessed type int badStatic_6;

//----- (000000000044E78B) ----------------------------------------------------
void *__fastcall goodG2B1Source_2(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B1Static_2 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D384: using guessed type int goodG2B1Static_2;

//----- (000000000044E7D2) ----------------------------------------------------
void goodG2B1_117()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  goodG2B1Static_2 = 0;
  dest = (char *)goodG2B1Source_2(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D384: using guessed type int goodG2B1Static_2;

//----- (000000000044E841) ----------------------------------------------------
void *__fastcall goodG2B2Source_2(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( goodG2B2Static_2 )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D388: using guessed type int goodG2B2Static_2;

//----- (000000000044E87C) ----------------------------------------------------
void goodG2B2_117()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  goodG2B2Static_2 = 1;
  dest = (char *)goodG2B2Source_2(0LL);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}
// 68D388: using guessed type int goodG2B2Static_2;

//----- (000000000044E8EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21_good()
{
  goodG2B1_117();
  goodG2B2_117();
}

//----- (000000000044E905) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044E994) ----------------------------------------------------
void goodG2B1_118()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044EA2F) ----------------------------------------------------
void goodG2B2_118()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( globalFive == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D1C8: using guessed type int globalFive;

//----- (000000000044EABE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_good()
{
  goodG2B1_118();
  goodG2B2_118();
}

//----- (000000000044EAD8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  void *dest; // [rsp+20h] [rbp-20h]
  void *v4; // [rsp+28h] [rbp-18h]
  void **v5; // [rsp+30h] [rbp-10h]
  __int64 *v6; // [rsp+38h] [rbp-8h]

  v6 = &v2;
  v5 = (void **)&v2;
  v2 = 0LL;
  v4 = 0LL;
  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  *v6 = (__int64)v4;
  dest = *v5;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000044EB8D) ----------------------------------------------------
void goodG2B_222()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v2; // [rsp+18h] [rbp-28h]
  void *dest; // [rsp+20h] [rbp-20h]
  void *v4; // [rsp+28h] [rbp-18h]
  void **v5; // [rsp+30h] [rbp-10h]
  __int64 *v6; // [rsp+38h] [rbp-8h]

  v6 = &v2;
  v5 = (void **)&v2;
  v2 = 0LL;
  v4 = 0LL;
  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  *v6 = (__int64)v4;
  dest = *v5;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000044EC42) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32_good()
{
  goodG2B_222();
}

//----- (000000000044EC52) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044ED66) ----------------------------------------------------
void goodG2B_223()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000044EE32) ----------------------------------------------------
void goodB2G_138()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044EF4C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01_good()
{
  goodG2B_223();
  goodB2G_138();
}

//----- (000000000044EF66) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044F092) ----------------------------------------------------
void goodB2G1_80()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000044F1CF) ----------------------------------------------------
void goodB2G2_80()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044F301) ----------------------------------------------------
void goodG2B1_119()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000044F3F1) ----------------------------------------------------
void goodG2B2_119()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044F4D5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09_good()
{
  goodB2G1_80();
  goodB2G2_80();
  goodG2B1_119();
  goodG2B2_119();
}

//----- (000000000044F503) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_badSink(v2);
}

//----- (000000000044F573) ----------------------------------------------------
void goodG2B_224()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodG2BSink(7);
}

//----- (000000000044F59B) ----------------------------------------------------
void goodB2G_139()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b_goodB2GSink(v2);
}

//----- (000000000044F60B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67_good()
{
  goodG2B_224();
  goodB2G_139();
}

//----- (000000000044F625) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000044F69A) ----------------------------------------------------
void goodG2B_225()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000044F70F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_good()
{
  goodG2B_225();
}

//----- (000000000044F71F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044F7AD) ----------------------------------------------------
void goodG2B1_120()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000044F847) ----------------------------------------------------
void goodG2B2_120()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000044F8D5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_good()
{
  goodG2B1_120();
  goodG2B2_120();
}

//----- (000000000044F8EF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_badSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000044F958) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_goodG2BSink(void *a1)
{
  size_t v1; // rax
  char s[8]; // [rsp+10h] [rbp-20h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = a1;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  memcpy(dest, s, v1 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000044F9C1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-28h]
  int v5; // [rsp+34h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-18h]
  int k; // [rsp+3Ch] [rbp-14h]
  int v8; // [rsp+40h] [rbp-10h]
  int v9; // [rsp+44h] [rbp-Ch]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v9 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 44F9C1: using guessed type char buf[16];

//----- (000000000044FBCD) ----------------------------------------------------
void goodB2G_140()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v2; // [rsp+12h] [rbp-3Eh]
  int v3; // [rsp+14h] [rbp-3Ch]
  void *ptr; // [rsp+28h] [rbp-28h]
  int v5; // [rsp+34h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-18h]
  int k; // [rsp+3Ch] [rbp-14h]
  int v8; // [rsp+40h] [rbp-10h]
  int v9; // [rsp+44h] [rbp-Ch]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  v9 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v5 = recv(v8, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v9 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      *((_DWORD *)ptr + k) = 0;
    if ( v9 < 0 || v9 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v9) = 1;
      for ( k = 0; k <= 9; ++k )
        printIntLine(*((_DWORD *)ptr + k));
    }
    free(ptr);
  }
}
// 44FBCD: using guessed type char buf[16];

//----- (000000000044FDDF) ----------------------------------------------------
void goodG2B_226()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+10h] [rbp-10h]
  int l; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
    v3 = 7;
  for ( j = 0; j <= 0; ++j )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      ptr[k] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(ptr[l]);
    }
    free(ptr);
  }
}

//----- (000000000044FED8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17_good()
{
  goodB2G_140();
  goodG2B_226();
}

//----- (000000000044FEF2) ----------------------------------------------------
void __fastcall badSink_31(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000044FFB3) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = badSink_31;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000450024) ----------------------------------------------------
void __fastcall goodG2BSink_31(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004500E5) ----------------------------------------------------
void goodG2B_227()
{
  goodG2BSink_31(7);
}

//----- (0000000000450110) ----------------------------------------------------
void __fastcall goodB2GSink_19(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004501D7) ----------------------------------------------------
__int64 goodB2G_141()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = goodB2GSink_19;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000450248) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good()
{
  goodG2B_227();
  return goodB2G_141();
}

//----- (0000000000450262) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_bad()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *v1; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%d", &v0);
  else
    v0 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v1 = malloc(0x28uLL);
    if ( !v1 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v1 + j) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v1 + v0) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v1 + j));
    }
    free(v1);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000450430) ----------------------------------------------------
void goodB2G_142()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  void *v1; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    v1 = malloc(0x28uLL);
    if ( !v1 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      *((_DWORD *)v1 + j) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)v1 + v0) = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(*((_DWORD *)v1 + j));
    }
    free(v1);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000045061C) ----------------------------------------------------
void goodG2B_228()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (00000000004507CA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12_good()
{
  goodB2G_142();
  goodG2B_228();
}

//----- (00000000004507E4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D278: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_badGlobal;

//----- (00000000004508B3) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D27C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G1Global;

//----- (0000000000450993) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D280: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodB2G2Global;

//----- (0000000000450A68) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D284: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22_goodG2BGlobal;

//----- (0000000000450B37) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_badSink(&v3);
}

//----- (0000000000450BA1) ----------------------------------------------------
void goodG2B_229()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodG2BSink(&v0);
}

//----- (0000000000450BC5) ----------------------------------------------------
void goodB2G_143()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodB2GSink(&v3);
}

//----- (0000000000450C2F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64_good()
{
  goodG2B_229();
  goodB2G_143();
}

//----- (0000000000450C49) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource();
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000450CC4) ----------------------------------------------------
void goodG2B_230()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_goodG2BSource();
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000450D3F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61_good()
{
  goodG2B_230();
}

//----- (0000000000450D4F) ----------------------------------------------------
void *badSource_12()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000450D80) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = badSource_12();
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000450DFB) ----------------------------------------------------
void *goodG2BSource_8()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0x28uLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000450E2C) ----------------------------------------------------
void goodG2B_231()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = goodG2BSource_8();
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000450EA7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42_good()
{
  goodG2B_231();
}

//----- (0000000000450EB7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_badSink(a1);
}

//----- (0000000000450ECE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodG2BSink(a1);
}

//----- (0000000000450EE5) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c_goodB2GSink(a1);
}

//----- (0000000000450EFC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000450F9D) ----------------------------------------------------
void goodG2B_232()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (000000000045103E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12_good()
{
  goodG2B_232();
}

//----- (000000000045104E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_badSink(const char **a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]

  s = (char *)*a1;
  v2 = strlen(*a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}

//----- (00000000004510D4) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodG2BSink(const char **a1)
{
  char *dest; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+18h] [rbp-18h]
  char *s; // [rsp+20h] [rbp-10h]

  s = (char *)*a1;
  v2 = strlen(*a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000045115A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_64b_goodB2GSink(const wchar_t **a1)
{
  wchar_t *dest; // [rsp+10h] [rbp-20h]
  size_t v2; // [rsp+18h] [rbp-18h]
  wchar_t *s; // [rsp+20h] [rbp-10h]

  s = (wchar_t *)*a1;
  v2 = wcslen(*a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (00000000004511E0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-30h]
  void *dest; // [rsp+18h] [rbp-18h]
  void *v3; // [rsp+20h] [rbp-10h]
  void *v4; // [rsp+28h] [rbp-8h]

  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  v3 = v4;
  dest = v4;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000451274) ----------------------------------------------------
void goodG2B_233()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-30h]
  void *dest; // [rsp+18h] [rbp-18h]
  void *v3; // [rsp+20h] [rbp-10h]
  void *v4; // [rsp+28h] [rbp-8h]

  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  v3 = v4;
  dest = v4;
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000451308) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_good()
{
  goodG2B_233();
}

//----- (0000000000451318) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 10;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004513FE) ----------------------------------------------------
void goodB2G1_81()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004514F5) ----------------------------------------------------
void goodB2G2_81()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004515E1) ----------------------------------------------------
void goodG2B1_121()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004516D3) ----------------------------------------------------
void goodG2B2_121()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 7;
  if ( globalFive == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C8: using guessed type int globalFive;

//----- (00000000004517B9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14_good()
{
  goodB2G1_81();
  goodB2G2_81();
  goodG2B1_121();
  goodG2B2_121();
}

//----- (00000000004517E7) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 4517E7: using guessed type char buf[16];

//----- (000000000045190A) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000045191D) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 45191D: using guessed type char buf[16];

//----- (0000000000451A40) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_bad()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xAuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_badSink((__int64)&v0);
}

//----- (0000000000451A85) ----------------------------------------------------
void goodG2B_234()
{
  char v0; // [rsp+0h] [rbp-30h]
  void *v1; // [rsp+10h] [rbp-20h]
  void *v2; // [rsp+28h] [rbp-8h]

  v2 = malloc(0xBuLL);
  if ( !v2 )
    exit(-1);
  v1 = v2;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000451ACA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66_good()
{
  goodG2B_234();
}

//----- (0000000000451ADA) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000451BDD) ----------------------------------------------------
void goodB2G1_82()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000451CF3) ----------------------------------------------------
void goodB2G2_82()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000451DFE) ----------------------------------------------------
void goodG2B1_122()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000451EF6) ----------------------------------------------------
void goodG2B2_122()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000451FE2) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11_good()
{
  goodB2G1_82();
  goodB2G2_82();
  goodG2B1_122();
  goodG2B2_122();
}

//----- (0000000000452010) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004520F3) ----------------------------------------------------
void goodB2G1_83()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004521DE) ----------------------------------------------------
void goodB2G2_83()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004522C9) ----------------------------------------------------
void goodG2B1_123()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000452395) ----------------------------------------------------
void goodG2B2_123()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000452461) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02_good()
{
  goodB2G1_83();
  goodB2G2_83();
  goodG2B1_123();
  goodG2B2_123();
}

//----- (000000000045248F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_badSink(v0);
}

//----- (00000000004524D4) ----------------------------------------------------
void goodG2B_235()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b_goodG2BSink(v0);
}

//----- (0000000000452519) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67_good()
{
  goodG2B_235();
}

//----- (0000000000452529) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004525F0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004526B7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000452784) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000452845) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000452906) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004529CD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000452A41) ----------------------------------------------------
void goodG2B1_124()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000452AB5) ----------------------------------------------------
void goodG2B2_124()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = (char *)malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000452B29) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_good()
{
  goodG2B1_124();
  goodG2B2_124();
}

//----- (0000000000452B43) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_badSink(v6);
}
// 452B43: using guessed type char buf[16];

//----- (0000000000452C2B) ----------------------------------------------------
void goodG2B_236()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodG2BSink(7);
}

//----- (0000000000452C4D) ----------------------------------------------------
void goodB2G_144()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b_goodB2GSink(v6);
}
// 452C4D: using guessed type char buf[16];

//----- (0000000000452D35) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54_good()
{
  goodG2B_236();
  goodB2G_144();
}

//----- (0000000000452D4F) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badSource(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badGlobal )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3AC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badGlobal;

//----- (0000000000452D8A) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3B0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Global;

//----- (0000000000452DD1) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Global )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3B4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Global;

//----- (0000000000452E0C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen((const char *)s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printLine((const char *)dest);
  free(dest);
}

//----- (0000000000452ED2) ----------------------------------------------------
void goodB2G1_84()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (0000000000452F98) ----------------------------------------------------
void goodB2G2_84()
{
  wchar_t *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  wchar_t *s; // [rsp+10h] [rbp-10h]

  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = wcslen(s);
  dest = (wchar_t *)calloc(v1 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000045305E) ----------------------------------------------------
void goodG2B1_125()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000045311F) ----------------------------------------------------
void goodG2B2_125()
{
  char *dest; // [rsp+0h] [rbp-20h]
  size_t v1; // [rsp+8h] [rbp-18h]
  _BYTE *s; // [rsp+10h] [rbp-10h]

  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  s[49] = 0;
  v1 = strlen(s);
  dest = (char *)calloc(v1 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (00000000004531E0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good()
{
  goodB2G1_84();
  goodB2G2_84();
  goodG2B1_125();
  goodG2B2_125();
}

//----- (000000000045320E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000453309) ----------------------------------------------------
void goodB2G1_85()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (0000000000453417) ----------------------------------------------------
void goodB2G2_85()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D1C4: using guessed type int globalTrue;

//----- (000000000045351A) ----------------------------------------------------
void goodG2B1_126()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000045360A) ----------------------------------------------------
void goodG2B2_126()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (00000000004536EE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10_good()
{
  goodB2G1_85();
  goodB2G2_85();
  goodG2B1_126();
  goodG2B2_126();
}

//----- (000000000045371C) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_badSink(a1);
}

//----- (0000000000453733) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodG2BSink(a1);
}

//----- (000000000045374A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e_goodB2GSink(a1);
}

//----- (0000000000453761) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_badSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000453833) ----------------------------------------------------
void goodG2B_237()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000453905) ----------------------------------------------------
void goodB2G_145()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b_goodB2GSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004539DD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61_good()
{
  goodG2B_237();
  goodB2G_145();
}

//----- (00000000004539F7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_badSink(v6);
}
// 4539F7: using guessed type char buf[16];

//----- (0000000000453ADF) ----------------------------------------------------
void goodG2B_238()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodG2BSink(7);
}

//----- (0000000000453B01) ----------------------------------------------------
void goodB2G_146()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b_goodB2GSink(v6);
}
// 453B01: using guessed type char buf[16];

//----- (0000000000453BE9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51_good()
{
  goodG2B_238();
  goodB2G_146();
}

//----- (0000000000453C03) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_badSink(a1);
}

//----- (0000000000453C1A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodG2BSink(a1);
}

//----- (0000000000453C31) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d_goodB2GSink(a1);
}

//----- (0000000000453C48) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000453D2A) ----------------------------------------------------
void goodB2G1_86()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000453E1D) ----------------------------------------------------
void goodB2G2_86()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000453F05) ----------------------------------------------------
void goodG2B1_127()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000453FF3) ----------------------------------------------------
void goodG2B2_127()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004540D5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04_good()
{
  goodB2G1_86();
  goodB2G2_86();
  goodG2B1_127();
  goodG2B2_127();
}

//----- (0000000000454103) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_bad()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004541DB) ----------------------------------------------------
void goodG2B_239()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004542B3) ----------------------------------------------------
void goodB2G_147()
{
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (0000000000454391) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31_good()
{
  goodG2B_239();
  goodB2G_147();
}

//----- (00000000004543AB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad()
{
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (0000000000454448) ----------------------------------------------------
void goodG2B_240()
{
  __int64 src; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int64 v3; // [rsp+18h] [rbp-28h]
  __int64 v4; // [rsp+20h] [rbp-20h]
  void *dest; // [rsp+30h] [rbp-10h]
  int i; // [rsp+3Ch] [rbp-4h]

  dest = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}

//----- (00000000004544E5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_good()
{
  goodG2B_240();
}

//----- (00000000004544F5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004545D8) ----------------------------------------------------
void goodG2B_241()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004546A4) ----------------------------------------------------
void goodB2G_148()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v0 < 0 || v0 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v0) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000045478F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01_good()
{
  goodG2B_241();
  goodB2G_148();
}

//----- (00000000004547A9) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004548D7) ----------------------------------------------------
void goodB2G1_87()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000454A16) ----------------------------------------------------
void goodB2G2_87()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000454B4A) ----------------------------------------------------
void goodG2B1_128()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000454C3C) ----------------------------------------------------
void goodG2B2_128()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000454D22) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13_good()
{
  goodB2G1_87();
  goodB2G2_87();
  goodG2B1_128();
  goodG2B2_128();
}

//----- (0000000000454D50) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000454E11) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000454ED2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000454F99) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_bad()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+18h] [rbp-38h]
  size_t v2; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+28h] [rbp-28h]
  void *v4; // [rsp+30h] [rbp-20h]
  void **v5; // [rsp+38h] [rbp-18h]
  __int64 *v6; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v6 = &v1;
  v5 = (void **)&v1;
  v1 = 0LL;
  v4 = 0LL;
  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  *v6 = (__int64)v4;
  ptr = *v5;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000455073) ----------------------------------------------------
void goodG2B_242()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+18h] [rbp-38h]
  size_t v2; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+28h] [rbp-28h]
  void *v4; // [rsp+30h] [rbp-20h]
  void **v5; // [rsp+38h] [rbp-18h]
  __int64 *v6; // [rsp+40h] [rbp-10h]
  unsigned __int64 i; // [rsp+48h] [rbp-8h]

  v6 = &v1;
  v5 = (void **)&v1;
  v1 = 0LL;
  v4 = 0LL;
  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  *v6 = (__int64)v4;
  ptr = *v5;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000045514D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32_good()
{
  goodG2B_242();
}

//----- (000000000045515D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_badSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_badData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D4A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_badData;

//----- (0000000000455224) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodG2BSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodG2BData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D498: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodG2BData;

//----- (00000000004552EB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b_goodB2GSink()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodB2GData;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}
// 68D49C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68_goodB2GData;

//----- (00000000004553B8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_badSink(a1);
}

//----- (00000000004553D2) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d_goodG2BSink(a1);
}

//----- (00000000004553EC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (00000000004554FE) ----------------------------------------------------
void goodB2G1_88()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (0000000000455616) ----------------------------------------------------
void goodB2G2_88()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v5 < 0 || v5 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v5) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}

//----- (000000000045572E) ----------------------------------------------------
void goodG2B1_129()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004557FA) ----------------------------------------------------
void goodG2B2_129()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (00000000004558C6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03_good()
{
  goodB2G1_88();
  goodB2G2_88();
  goodG2B1_129();
  goodG2B2_129();
}

//----- (00000000004558F4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (0000000000455A26) ----------------------------------------------------
void goodB2G1_89()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (0000000000455B69) ----------------------------------------------------
void goodB2G2_89()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}

//----- (0000000000455CA1) ----------------------------------------------------
void goodG2B1_130()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000455D99) ----------------------------------------------------
void goodG2B2_130()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (0000000000455E85) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11_good()
{
  goodB2G1_89();
  goodB2G2_89();
  goodG2B1_130();
  goodG2B2_130();
}

//----- (0000000000455EB3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_badSink(10);
}

//----- (0000000000455EDB) ----------------------------------------------------
void goodG2B_243()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodG2BSink(7);
}

//----- (0000000000455F03) ----------------------------------------------------
void goodB2G_149()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b_goodB2GSink(10);
}

//----- (0000000000455F2B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67_good()
{
  goodG2B_243();
  goodB2G_149();
}

//----- (0000000000455F45) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_badSink(&v3);
}

//----- (0000000000455FAF) ----------------------------------------------------
void goodG2B_244()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodG2BSink(&v0);
}

//----- (0000000000455FD3) ----------------------------------------------------
void goodB2G_150()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodB2GSink(&v3);
}

//----- (000000000045603D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63_good()
{
  goodG2B_244();
  goodB2G_150();
}

//----- (0000000000456057) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_badSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (00000000004560A8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_goodG2BSink(char *a1)
{
  char src[8]; // [rsp+10h] [rbp-10h]

  strcpy(src, "AAAAAAAAAA");
  strcpy(a1, src);
  printLine(a1);
  free(a1);
}

//----- (00000000004560F9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_badSink(void *a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000456187) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_goodG2BSink(void *a1)
{
  char s[8]; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  ptr = a1;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000456215) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 456215: using guessed type char buf[16];

//----- (00000000004563C5) ----------------------------------------------------
void goodB2G1_90()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 4563C5: using guessed type char buf[16];

//----- (0000000000456586) ----------------------------------------------------
void goodB2G2_90()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  in_addr_t v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+28h] [rbp-18h]
  int v5; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int i; // [rsp+38h] [rbp-8h]
  int v8; // [rsp+3Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v8) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;
// 456586: using guessed type char buf[16];

//----- (000000000045673C) ----------------------------------------------------
void goodG2B1_131()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045682E) ----------------------------------------------------
void goodG2B2_131()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000456914) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13_good()
{
  goodB2G1_90();
  goodB2G2_90();
  goodG2B1_131();
  goodG2B2_131();
}

//----- (0000000000456942) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_badSink(a1);
}

//----- (0000000000456959) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodG2BSink(a1);
}

//----- (0000000000456970) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d_goodB2GSink(a1);
}

//----- (0000000000456987) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D39C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal;

//----- (0000000000456A56) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Global;

//----- (0000000000456B36) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Sink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Global )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3A4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Global;

//----- (0000000000456C0B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BGlobal )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3A8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BGlobal;

//----- (0000000000456CDA) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0xAuLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000456D0B) ----------------------------------------------------
void *CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_goodG2BSource()
{
  void *v1; // [rsp+18h] [rbp-8h]

  v1 = malloc(0x28uLL);
  if ( !v1 )
    exit(-1);
  return v1;
}

//----- (0000000000456D3C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_bad()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000456E37) ----------------------------------------------------
void goodB2G1_91()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000456F45) ----------------------------------------------------
void goodB2G2_91()
{
  int v0; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]

  v0 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v0);
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v0 < 0 || v0 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v0) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000457048) ----------------------------------------------------
void goodG2B1_132()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;
// 4739BC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000457138) ----------------------------------------------------
void goodG2B2_132()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 7;
  if ( GLOBAL_CONST_TRUE )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739B8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000045721C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09_good()
{
  goodB2G1_91();
  goodB2G2_91();
  goodG2B1_132();
  goodG2B2_132();
}

//----- (000000000045724A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_badSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_badSink(a1);
}

//----- (0000000000457264) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d_goodG2BSink(void *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e_goodG2BSink(a1);
}

//----- (000000000045727E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_badSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045734A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodG2BSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000457416) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b_goodB2GSink(__int64 a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004574E8) ----------------------------------------------------
void __fastcall badSink_32(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_7 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D38C: using guessed type int badStatic_7;

//----- (00000000004575B7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic_7 = 1;
  badSink_32(v2);
}
// 68D38C: using guessed type int badStatic_7;

//----- (000000000045762B) ----------------------------------------------------
void __fastcall goodB2G1Sink_3(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_3 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D390: using guessed type int goodB2G1Static_3;

//----- (000000000045770B) ----------------------------------------------------
void goodB2G1_92()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static_3 = 0;
  goodB2G1Sink_3(v2);
}
// 68D390: using guessed type int goodB2G1Static_3;

//----- (000000000045777F) ----------------------------------------------------
void __fastcall goodB2G2Sink_3(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D394: using guessed type int goodB2G2Static_3;

//----- (0000000000457854) ----------------------------------------------------
void goodB2G2_92()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static_3 = 1;
  goodB2G2Sink_3(v2);
}
// 68D394: using guessed type int goodB2G2Static_3;

//----- (00000000004578C8) ----------------------------------------------------
void __fastcall goodG2BSink_32(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_3 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D398: using guessed type int goodG2BStatic_3;

//----- (0000000000457997) ----------------------------------------------------
void goodG2B_245()
{
  goodG2BStatic_3 = 1;
  goodG2BSink_32(7);
}
// 68D398: using guessed type int goodG2BStatic_3;

//----- (00000000004579C3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_good()
{
  goodB2G1_92();
  goodB2G2_92();
  goodG2B_245();
}

//----- (00000000004579E7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000457AFB) ----------------------------------------------------
void goodB2G1_93()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000457C15) ----------------------------------------------------
void goodB2G2_93()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000457D2F) ----------------------------------------------------
void goodG2B1_133()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000457DFB) ----------------------------------------------------
void goodG2B2_133()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000457EC7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03_good()
{
  goodB2G1_93();
  goodB2G2_93();
  goodG2B1_133();
  goodG2B2_133();
}

//----- (0000000000457EF5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xAuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000457FA7) ----------------------------------------------------
void goodG2B1_134()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000458065) ----------------------------------------------------
void goodG2B2_134()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = malloc(0xBuLL);
  if ( !ptr )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000458117) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_good()
{
  goodG2B1_134();
  goodG2B2_134();
}

//----- (0000000000458131) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  size_t v1; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+20h] [rbp-20h]
  void *v3; // [rsp+28h] [rbp-18h]
  void *v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  v3 = v4;
  ptr = v4;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004581EA) ----------------------------------------------------
void goodG2B_246()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  size_t v1; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+20h] [rbp-20h]
  void *v3; // [rsp+28h] [rbp-18h]
  void *v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  v3 = v4;
  ptr = v4;
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004582A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_good()
{
  goodG2B_246();
}

//----- (00000000004582B3) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4582B3: using guessed type char buf[16];

//----- (00000000004583A4) ----------------------------------------------------
void goodG2B_247()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodG2BSink(7);
}

//----- (00000000004583CF) ----------------------------------------------------
__int64 goodB2G_151()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_goodB2GSink;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4583CF: using guessed type char buf[16];

//----- (00000000004584C0) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65_good()
{
  goodG2B_247();
  return goodB2G_151();
}

//----- (00000000004584DA) ----------------------------------------------------
__int64 staticReturnsTrue_9()
{
  return 1LL;
}

//----- (00000000004584E5) ----------------------------------------------------
__int64 staticReturnsFalse_9()
{
  return 0LL;
}

//----- (00000000004584F0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
  {
    dest = (char *)malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000458572) ----------------------------------------------------
void goodG2B1_135()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsFalse_9() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000458600) ----------------------------------------------------
void goodG2B2_135()
{
  char src[8]; // [rsp+0h] [rbp-20h]
  char *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
  {
    dest = (char *)malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(src, "AAAAAAAAAA");
  strcpy(dest, src);
  printLine(dest);
  free(dest);
}

//----- (0000000000458682) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_good()
{
  goodG2B1_135();
  goodG2B2_135();
}

//----- (000000000045869C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045872B) ----------------------------------------------------
void goodG2B1_136()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004587C6) ----------------------------------------------------
void goodG2B2_136()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000458855) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_good()
{
  goodG2B1_136();
  goodG2B2_136();
}

//----- (000000000045886F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_badSink(a1);
}

//----- (0000000000458889) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_goodG2BSink(a1);
}

//----- (00000000004588A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (00000000004589B9) ----------------------------------------------------
void goodB2G_152()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000458AD5) ----------------------------------------------------
void goodG2B_248()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (0000000000458BA3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18_good()
{
  goodB2G_152();
  goodG2B_248();
}

//----- (0000000000458BBD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int v5; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_badSink(&v4);
}
// 458BBD: using guessed type char buf[16];

//----- (0000000000458CA7) ----------------------------------------------------
void goodG2B_249()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = 7;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodG2BSink(&v0);
}

//----- (0000000000458CCB) ----------------------------------------------------
void goodB2G_153()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int v5; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v4 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b_goodB2GSink(&v4);
}
// 458CCB: using guessed type char buf[16];

//----- (0000000000458DB5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64_good()
{
  goodG2B_249();
  goodB2G_153();
}

//----- (0000000000458DCF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (0000000000458EFB) ----------------------------------------------------
void goodB2G1_94()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (0000000000459038) ----------------------------------------------------
void goodB2G2_94()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000045916A) ----------------------------------------------------
void goodG2B1_137()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;
// 68D3F8: using guessed type int globalFalse;

//----- (000000000045925A) ----------------------------------------------------
void goodG2B2_137()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 7;
  if ( globalTrue )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000045933E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10_good()
{
  goodB2G1_94();
  goodB2G2_94();
  goodG2B1_137();
  goodG2B2_137();
}

//----- (000000000045936C) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_bad()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_badSink(v0);
}

//----- (00000000004593B1) ----------------------------------------------------
void goodG2B_250()
{
  void *v0; // [rsp+8h] [rbp-8h]

  v0 = malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b_goodG2BSink(v0);
}

//----- (00000000004593F6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67_good()
{
  goodG2B_250();
}

//----- (0000000000459406) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_bad()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(10);
}
// 68D39C: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal;

//----- (0000000000459432) ----------------------------------------------------
void goodB2G1_95()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Sink(10);
}
// 68D3A0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G1Global;

//----- (000000000045945E) ----------------------------------------------------
void goodB2G2_95()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Sink(10);
}
// 68D3A4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodB2G2Global;

//----- (000000000045948A) ----------------------------------------------------
void goodG2B_251()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BSink(7);
}
// 68D3A8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_goodG2BGlobal;

//----- (00000000004594B6) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_good()
{
  goodB2G1_95();
  goodB2G2_95();
  goodG2B_251();
}

//----- (00000000004594DA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_badSink(a1);
}

//----- (00000000004594F1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodG2BSink(a1);
}

//----- (0000000000459508) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c_goodB2GSink(a1);
}

//----- (000000000045951F) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badSource(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badGlobal )
  {
    v2 = malloc(0xAuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3C8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badGlobal;

//----- (000000000045955A) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Global )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3CC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Global;

//----- (00000000004595A1) ----------------------------------------------------
void *__fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Source(void *a1)
{
  void *v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  if ( CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Global )
  {
    v2 = malloc(0xBuLL);
    if ( !v2 )
      exit(-1);
  }
  return v2;
}
// 68D3D0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Global;

//----- (00000000004595DC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_8 == 5 )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1BC: using guessed type int staticFive_8;

//----- (0000000000459671) ----------------------------------------------------
void goodG2B1_138()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_8 == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1BC: using guessed type int staticFive_8;

//----- (0000000000459712) ----------------------------------------------------
void goodG2B2_138()
{
  __int64 src; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 v4; // [rsp+20h] [rbp-10h]
  void *dest; // [rsp+28h] [rbp-8h]

  dest = 0LL;
  if ( staticFive_8 == 5 )
  {
    dest = malloc(0x28uLL);
    if ( !dest )
      exit(-1);
  }
  src = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0LL;
  memmove(dest, &src, 0x28uLL);
  printIntLine(*(_DWORD *)dest);
  free(dest);
}
// 68D1BC: using guessed type int staticFive_8;

//----- (00000000004597A7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_good()
{
  goodG2B1_138();
  goodG2B2_138();
}

//----- (00000000004597C1) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_badSink(a1);
}

//----- (00000000004597D8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodG2BSink(a1);
}

//----- (00000000004597EF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e_goodB2GSink(a1);
}

//----- (0000000000459806) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_badSink(a1);
}

//----- (0000000000459820) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c_goodG2BSink(a1);
}

//----- (000000000045983A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badGlobal = 1;
  dest = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badSource(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D3AC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_badGlobal;

//----- (00000000004598B9) ----------------------------------------------------
void goodG2B1_139()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Global = 0;
  dest = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D3B0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B1Global;

//----- (0000000000459938) ----------------------------------------------------
void goodG2B2_139()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Global = 1;
  dest = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}
// 68D3B4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_goodG2B2Global;

//----- (00000000004599B7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22_good()
{
  goodG2B1_139();
  goodG2B2_139();
}

//----- (00000000004599D1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_badSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000459AA3) ----------------------------------------------------
void goodG2B_252()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodG2BSource();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000459B75) ----------------------------------------------------
void goodB2G_154()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodB2GSource(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (0000000000459C4D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61_good()
{
  goodG2B_252();
  goodB2G_154();
}

//----- (0000000000459C67) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_badSink(a1);
}

//----- (0000000000459C7E) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodG2BSink(a1);
}

//----- (0000000000459C95) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c_goodB2GSink(a1);
}

//----- (0000000000459CAC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 10;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000459D92) ----------------------------------------------------
void goodB2G1_96()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000459E89) ----------------------------------------------------
void goodB2G2_96()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000459F75) ----------------------------------------------------
void goodG2B1_140()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045A067) ----------------------------------------------------
void goodG2B2_140()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 7;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045A14D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13_good()
{
  goodB2G1_96();
  goodB2G2_96();
  goodG2B1_140();
  goodG2B2_140();
}

//----- (000000000045A17B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badSink(v3);
}
// 68D3B8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_badGlobal;

//----- (000000000045A1ED) ----------------------------------------------------
void goodB2G1_97()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Global = 0;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Sink(v3);
}
// 68D3BC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G1Global;

//----- (000000000045A25F) ----------------------------------------------------
void goodB2G2_97()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Global = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Sink(v3);
}
// 68D3C0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodB2G2Global;

//----- (000000000045A2D1) ----------------------------------------------------
void goodG2B_253()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BGlobal = 1;
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BSink(7);
}
// 68D3C4: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_goodG2BGlobal;

//----- (000000000045A2FD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22_good()
{
  goodB2G1_97();
  goodB2G2_97();
  goodG2B_253();
}

//----- (000000000045A321) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000045A37E) ----------------------------------------------------
__int64 CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000045A391) ----------------------------------------------------
__int64 __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000045A3EE) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045A473) ----------------------------------------------------
void goodG2B_254()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045A4F8) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_good()
{
  goodG2B_254();
}

//----- (000000000045A508) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045A5C9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045A68A) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045A751) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink(const char **a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = (char *)*a1;
  v2 = strlen(*a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, (const wchar_t *)s);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045A7CF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(const char **a1)
{
  char *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  char *s; // [rsp+28h] [rbp-8h]

  s = (char *)*a1;
  v2 = strlen(*a1);
  dest = (char *)calloc(v2 + 1, 1uLL);
  if ( !dest )
    exit(-1);
  strcpy(dest, s);
  printLine(dest);
  free(dest);
}

//----- (000000000045A84D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(const wchar_t **a1)
{
  wchar_t *dest; // [rsp+18h] [rbp-18h]
  size_t v2; // [rsp+20h] [rbp-10h]
  wchar_t *s; // [rsp+28h] [rbp-8h]

  s = (wchar_t *)*a1;
  v2 = wcslen(*a1);
  dest = (wchar_t *)calloc(v2 + 1, 4uLL);
  if ( !dest )
    exit(-1);
  wcscpy(dest, s);
  printWLine((__int64)dest);
  free(dest);
}

//----- (000000000045A8CB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badGlobal = 1;
  ptr = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badSource(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D3C8: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_badGlobal;

//----- (000000000045A96F) ----------------------------------------------------
void goodG2B1_141()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Global = 0;
  ptr = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D3CC: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B1Global;

//----- (000000000045AA13) ----------------------------------------------------
void goodG2B2_141()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Global = 1;
  ptr = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Source(0LL);
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D3D0: using guessed type int CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_goodG2B2Global;

//----- (000000000045AAB7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22_good()
{
  goodG2B1_141();
  goodG2B2_141();
}

//----- (000000000045AAD1) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000045AC05) ----------------------------------------------------
void goodB2G1_98()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000045AD4A) ----------------------------------------------------
void goodB2G2_98()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int i; // [rsp+8h] [rbp-18h]
  int j; // [rsp+8h] [rbp-18h]
  int v8; // [rsp+Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v8 < 0 || v8 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[v8] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000045AE84) ----------------------------------------------------
void goodG2B1_142()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000045AF7C) ----------------------------------------------------
void goodG2B2_142()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 7;
  if ( (unsigned int)globalReturnsTrue() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}

//----- (000000000045B068) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11_good()
{
  goodB2G1_98();
  goodB2G2_98();
  goodG2B1_142();
  goodG2B2_142();
}

//----- (000000000045B096) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045B1AA) ----------------------------------------------------
void goodB2G1_99()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045B2C4) ----------------------------------------------------
void goodB2G2_99()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  _DWORD *ptr; // [rsp+0h] [rbp-20h]
  int v6; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]
  int j; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v6 < 0 || v6 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045B3DE) ----------------------------------------------------
void goodG2B1_143()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045B4AA) ----------------------------------------------------
void goodG2B2_143()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045B576) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02_good()
{
  goodB2G1_99();
  goodB2G2_99();
  goodG2B1_143();
  goodG2B2_143();
}

//----- (000000000045B5A4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_badSink(v0);
}

//----- (000000000045B5E1) ----------------------------------------------------
void goodG2B_255()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b_goodG2BSink(v0);
}

//----- (000000000045B61E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54_good()
{
  goodG2B_255();
}

//----- (000000000045B62E) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045B6DF) ----------------------------------------------------
void goodG2B_256()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045B790) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12_good()
{
  goodG2B_256();
}

//----- (000000000045B7A0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_badSink(a1);
}

//----- (000000000045B7BA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e_goodG2BSink(a1);
}

//----- (000000000045B7D4) ----------------------------------------------------
void __fastcall badSink_33(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_8 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3D4: using guessed type int badStatic_8;

//----- (000000000045B8A3) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  badStatic_8 = 1;
  badSink_33(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D3D4: using guessed type int badStatic_8;

//----- (000000000045B8E5) ----------------------------------------------------
void __fastcall goodB2G1Sink_4(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_4 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3D8: using guessed type int goodB2G1Static_4;

//----- (000000000045B9C5) ----------------------------------------------------
void goodB2G1_100()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  goodB2G1Static_4 = 0;
  goodB2G1Sink_4(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D3D8: using guessed type int goodB2G1Static_4;

//----- (000000000045BA07) ----------------------------------------------------
void __fastcall goodB2G2Sink_4(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_4 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3DC: using guessed type int goodB2G2Static_4;

//----- (000000000045BADC) ----------------------------------------------------
void goodB2G2_100()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  goodB2G2Static_4 = 1;
  goodB2G2Sink_4(v0);
}
// 400E60: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 68D3DC: using guessed type int goodB2G2Static_4;

//----- (000000000045BB1E) ----------------------------------------------------
void __fastcall goodG2BSink_33(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_4 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3E0: using guessed type int goodG2BStatic_4;

//----- (000000000045BBED) ----------------------------------------------------
void goodG2B_257()
{
  goodG2BStatic_4 = 1;
  goodG2BSink_33(7);
}
// 68D3E0: using guessed type int goodG2BStatic_4;

//----- (000000000045BC19) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21_good()
{
  goodB2G1_100();
  goodB2G2_100();
  goodG2B_257();
}

//----- (000000000045BC3D) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045BCFE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045BDBF) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045BE86) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalTrue )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000045BF39) ----------------------------------------------------
void goodG2B1_144()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D3F8: using guessed type int globalFalse;

//----- (000000000045BFF8) ----------------------------------------------------
void goodG2B2_144()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( globalTrue )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 68D1C4: using guessed type int globalTrue;

//----- (000000000045C0AB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_good()
{
  goodG2B1_144();
  goodG2B2_144();
}

//----- (000000000045C0C5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_badSink(v6);
}
// 45C0C5: using guessed type char buf[16];

//----- (000000000045C1AD) ----------------------------------------------------
void goodG2B_258()
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodG2BSink(7);
}

//----- (000000000045C1CF) ----------------------------------------------------
void goodB2G_155()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b_goodB2GSink(v6);
}
// 45C1CF: using guessed type char buf[16];

//----- (000000000045C2B7) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53_good()
{
  goodG2B_258();
  goodB2G_155();
}

//----- (000000000045C2D1) ----------------------------------------------------
void __fastcall badSink_34(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( badStatic_9 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3E4: using guessed type int badStatic_9;

//----- (000000000045C3A0) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_bad()
{
  badStatic_9 = 1;
  badSink_34(10);
}
// 68D3E4: using guessed type int badStatic_9;

//----- (000000000045C3CC) ----------------------------------------------------
void __fastcall goodB2G1Sink_5(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G1Static_5 )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3E8: using guessed type int goodB2G1Static_5;

//----- (000000000045C4AC) ----------------------------------------------------
void goodB2G1_101()
{
  goodB2G1Static_5 = 0;
  goodB2G1Sink_5(10);
}
// 68D3E8: using guessed type int goodB2G1Static_5;

//----- (000000000045C4D8) ----------------------------------------------------
void __fastcall goodB2G2Sink_5(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodB2G2Static_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 || a1 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3EC: using guessed type int goodB2G2Static_5;

//----- (000000000045C5AD) ----------------------------------------------------
void goodB2G2_101()
{
  goodB2G2Static_5 = 1;
  goodB2G2Sink_5(10);
}
// 68D3EC: using guessed type int goodB2G2Static_5;

//----- (000000000045C5D9) ----------------------------------------------------
void __fastcall goodG2BSink_34(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  if ( goodG2BStatic_5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( a1 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[a1] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D3F0: using guessed type int goodG2BStatic_5;

//----- (000000000045C6A8) ----------------------------------------------------
void goodG2B_259()
{
  goodG2BStatic_5 = 1;
  goodG2BSink_34(7);
}
// 68D3F0: using guessed type int goodG2BStatic_5;

//----- (000000000045C6D4) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21_good()
{
  goodB2G1_101();
  goodB2G2_101();
  goodG2B_259();
}

//----- (000000000045C6F8) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_badSink(a1);
}

//----- (000000000045C70F) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodG2BSink(a1);
}

//----- (000000000045C726) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d_goodB2GSink(a1);
}

//----- (000000000045C73D) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0xAuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045C7F1) ----------------------------------------------------
void goodG2B1_145()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  else
  {
    printLine("Benign, fixed string");
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045C8B1) ----------------------------------------------------
void goodG2B2_145()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  size_t v1; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+20h] [rbp-10h]
  void *ptr; // [rsp+28h] [rbp-8h]

  ptr = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    ptr = malloc(0xBuLL);
    if ( !ptr )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v1 = strlen(s);
  for ( i = 0LL; v1 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}
// 4739C0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000045C965) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_good()
{
  goodG2B1_145();
  goodG2B2_145();
}

//----- (000000000045C97F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_63_bad()
{
  wchar_t *v0; // [rsp+0h] [rbp-10h]
  wchar_t *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink((const char **)&v0);
}

//----- (000000000045C9EA) ----------------------------------------------------
void goodG2B_260()
{
  void *v0; // [rsp+0h] [rbp-10h]
  void *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = malloc(0x32uLL);
  if ( !s )
    exit(-1);
  memset(s, 65, 0x31uLL);
  *((_BYTE *)s + 49) = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink((const char **)&v0);
}

//----- (000000000045CA50) ----------------------------------------------------
void goodB2G_156()
{
  wchar_t *v0; // [rsp+0h] [rbp-10h]
  wchar_t *s; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  s = (wchar_t *)malloc(0xC8uLL);
  if ( !s )
    exit(-1);
  wmemset(s, 65, 0x31uLL);
  s[49] = 0;
  v0 = s;
  CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink((const wchar_t **)&v0);
}

//----- (000000000045CABB) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__CWE135_63_good()
{
  goodG2B_260();
  goodB2G_156();
}

//----- (000000000045CAD5) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_bad()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xAuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_badSink(v0);
}

//----- (000000000045CB12) ----------------------------------------------------
void goodG2B_261()
{
  char *v0; // [rsp+8h] [rbp-8h]

  v0 = (char *)malloc(0xBuLL);
  if ( !v0 )
    exit(-1);
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b_goodG2BSink(v0);
}

//----- (000000000045CB4F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51_good()
{
  goodG2B_261();
}

//----- (000000000045CB5F) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[10] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045CC2D) ----------------------------------------------------
void goodB2G_157()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  printLine("ERROR: Array index is out-of-bounds");
  free(ptr);
}

//----- (000000000045CD01) ----------------------------------------------------
void goodG2B_262()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045CDCF) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18_good()
{
  goodB2G_157();
  goodG2B_262();
}

//----- (000000000045CDE9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_badSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045CEAA) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodG2BSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045CF6B) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d_goodB2GSink(int a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( a1 < 0 || a1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[a1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045D032) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 45D032: using guessed type char buf[16];

//----- (000000000045D20C) ----------------------------------------------------
void goodB2G1_102()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 45D20C: using guessed type char buf[16];

//----- (000000000045D3EC) ----------------------------------------------------
void goodB2G2_102()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  void *ptr; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int i; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    *((_DWORD *)ptr + i) = 0;
  if ( v9 < 0 || v9 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    *((_DWORD *)ptr + v9) = 1;
    for ( i = 0; i <= 9; ++i )
      printIntLine(*((_DWORD *)ptr + i));
  }
  free(ptr);
}
// 45D3EC: using guessed type char buf[16];

//----- (000000000045D5CC) ----------------------------------------------------
void goodG2B1_146()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045D69A) ----------------------------------------------------
void goodG2B2_146()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  ptr[7] = 1;
  for ( j = 0; j <= 9; ++j )
    printIntLine(ptr[j]);
  free(ptr);
}

//----- (000000000045D768) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15_good()
{
  goodB2G1_102();
  goodB2G2_102();
  goodG2B1_146();
  goodG2B2_146();
}

//----- (000000000045D796) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  void *v1; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  void *v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = malloc(0xAuLL);
  if ( !v4 )
    exit(-1);
  v1 = v4;
  ptr = v4;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000045D84F) ----------------------------------------------------
void goodG2B_263()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  void *v1; // [rsp+10h] [rbp-30h]
  size_t v2; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  void *v4; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v4 = malloc(0xBuLL);
  if ( !v4 )
    exit(-1);
  v1 = v4;
  ptr = v4;
  strcpy(s, "AAAAAAAAAA");
  v2 = strlen(s);
  for ( i = 0LL; v2 + 1 > i; ++i )
    *((_BYTE *)ptr + i) = s[i];
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000045D908) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_good()
{
  goodG2B_263();
}

//----- (000000000045D918) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticFive_9 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_9 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C0: using guessed type int staticFive_9;

//----- (000000000045DA44) ----------------------------------------------------
void goodB2G1_103()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticFive_9 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_9 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 68D1C0: using guessed type int staticFive_9;

//----- (000000000045DB81) ----------------------------------------------------
void goodB2G2_103()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int i; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  if ( staticFive_9 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v5 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_9 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      *((_DWORD *)ptr + i) = 0;
    if ( v5 < 0 || v5 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      *((_DWORD *)ptr + v5) = 1;
      for ( i = 0; i <= 9; ++i )
        printIntLine(*((_DWORD *)ptr + i));
    }
    free(ptr);
  }
}
// 68D1C0: using guessed type int staticFive_9;

//----- (000000000045DCB3) ----------------------------------------------------
void goodG2B1_147()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_9 == 5 )
    v3 = 7;
  else
    printLine("Benign, fixed string");
  if ( staticFive_9 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C0: using guessed type int staticFive_9;

//----- (000000000045DDA5) ----------------------------------------------------
void goodG2B2_147()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int i; // [rsp+8h] [rbp-8h]
  int j; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive_9 == 5 )
    v3 = 7;
  if ( staticFive_9 == 5 )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    if ( v3 < 0 )
    {
      printLine("ERROR: Array index is negative.");
    }
    else
    {
      ptr[v3] = 1;
      for ( j = 0; j <= 9; ++j )
        printIntLine(ptr[j]);
    }
    free(ptr);
  }
}
// 68D1C0: using guessed type int staticFive_9;

//----- (000000000045DE8B) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07_good()
{
  goodB2G1_103();
  goodB2G2_103();
  goodG2B1_147();
  goodG2B2_147();
}

//----- (000000000045DEB9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_badSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_badSink(a1);
}

//----- (000000000045DED0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodG2BSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodG2BSink(a1);
}

//----- (000000000045DEE7) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c_goodB2GSink(int a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d_goodB2GSink(a1);
}

//----- (000000000045DEFE) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_badSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045DFC9) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodG2BSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045E094) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodB2GSink(int *a1)
{
  _DWORD *ptr; // [rsp+10h] [rbp-10h]
  int v2; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]
  int j; // [rsp+1Ch] [rbp-4h]

  v2 = *a1;
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v2 < 0 || v2 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v2] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045E165) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = malloc(0xAuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E1F7) ----------------------------------------------------
void goodG2B1_148()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E295) ----------------------------------------------------
void goodG2B2_148()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    dest = malloc(0xBuLL);
    if ( !dest )
      exit(-1);
  }
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E327) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_good()
{
  goodG2B1_148();
  goodG2B2_148();
}

//----- (000000000045E341) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xAuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E3C5) ----------------------------------------------------
void goodG2B1_149()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E449) ----------------------------------------------------
void goodG2B2_149()
{
  size_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  void *dest; // [rsp+18h] [rbp-8h]

  dest = malloc(0xBuLL);
  if ( !dest )
    exit(-1);
  strcpy(s, "AAAAAAAAAA");
  v0 = strlen(s);
  memcpy(dest, s, v0 + 1);
  printLine((const char *)dest);
  free(dest);
}

//----- (000000000045E4CD) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_good()
{
  goodG2B1_149();
  goodG2B2_149();
}

//----- (000000000045E4E7) ----------------------------------------------------
__int64 __fastcall badSource_13(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 45E4E7: using guessed type char buf[16];

//----- (000000000045E60A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_bad()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = badSource_13(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045E6DC) ----------------------------------------------------
__int64 goodG2BSource_9()
{
  return 7LL;
}

//----- (000000000045E6EF) ----------------------------------------------------
void goodG2B_264()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_9();
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 )
  {
    printLine("ERROR: Array index is negative.");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045E7C1) ----------------------------------------------------
__int64 __fastcall goodB2GSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 45E7C1: using guessed type char buf[16];

//----- (000000000045E8E4) ----------------------------------------------------
void goodB2G_158()
{
  _DWORD *ptr; // [rsp+0h] [rbp-10h]
  int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]
  int j; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_5(0xFFFFFFFF);
  ptr = malloc(0x28uLL);
  if ( !ptr )
    exit(-1);
  for ( i = 0; i <= 9; ++i )
    ptr[i] = 0;
  if ( v1 < 0 || v1 > 9 )
  {
    printLine("ERROR: Array index is out-of-bounds");
  }
  else
  {
    ptr[v1] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
  }
  free(ptr);
}

//----- (000000000045E9BC) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42_good()
{
  goodB2G_158();
  goodG2B_264();
}

//----- (000000000045E9D6) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_badSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_badSink(a1);
}

//----- (000000000045E9F0) ----------------------------------------------------
void __fastcall CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c_goodG2BSink(char *a1)
{
  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d_goodG2BSink(a1);
}

//----- (000000000045EA0A) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_bad()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v6 = 10;
  else
    v6 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[v6] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    if ( v6 > 9 )
    {
      printLine("ERROR: Array index is out-of-bounds");
    }
    else
    {
      v0[v6] = 1;
      for ( l = 0; l <= 9; ++l )
        printIntLine(v0[l]);
    }
    free(v0);
  }
}

//----- (000000000045EBBE) ----------------------------------------------------
void goodB2G_159()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int j; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( j = 0; j <= 9; ++j )
      v0[j] = 0;
    printLine("ERROR: Array index is out-of-bounds");
    free(v0);
  }
}

//----- (000000000045ED78) ----------------------------------------------------
void goodG2B_265()
{
  _DWORD *v0; // [rsp+0h] [rbp-20h]
  _DWORD *ptr; // [rsp+8h] [rbp-18h]
  int k; // [rsp+14h] [rbp-Ch]
  int l; // [rsp+14h] [rbp-Ch]
  int i; // [rsp+18h] [rbp-8h]
  int j; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = malloc(0x28uLL);
    if ( !ptr )
      exit(-1);
    for ( i = 0; i <= 9; ++i )
      ptr[i] = 0;
    ptr[7] = 1;
    for ( j = 0; j <= 9; ++j )
      printIntLine(ptr[j]);
    free(ptr);
  }
  else
  {
    v0 = malloc(0x28uLL);
    if ( !v0 )
      exit(-1);
    for ( k = 0; k <= 9; ++k )
      v0[k] = 0;
    v0[7] = 1;
    for ( l = 0; l <= 9; ++l )
      printIntLine(v0[l]);
    free(v0);
  }
}

//----- (000000000045EF26) ----------------------------------------------------
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12_good()
{
  goodB2G_159();
  goodG2B_265();
}

//----- (000000000045EF40) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000045EF61) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000045EF8C) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000045EFAD) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000045EFD2) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000045EFF8) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000045F01C) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000045F040) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000045F064) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000045F088) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000045F0B8) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000045F0D9) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000045F0FD) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000045F128) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000045F154) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000045F1AB) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400E90: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000045F284) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400FD0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000045F338) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000045F343) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000045F34E) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000045F364) ----------------------------------------------------
void good1()
{
  ;
}

//----- (000000000045F36A) ----------------------------------------------------
void good2()
{
  ;
}

//----- (000000000045F370) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000045F376) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000045F37C) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000045F382) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000045F388) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000045F38E) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000045F394) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000045F39A) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000045F3A0) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000045F3A6) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000045F3AC) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000045F3B2) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000045F3B8) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000045F3BE) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000045F3C4) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000045F3CA) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000045F3D0) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000045F403) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000045F4A7) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000045F4DB) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000045F4FA) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000045F56F) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000045F589) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000045F5A3) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000045F5D0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 68CDD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 68CDD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000045F644) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 2543 function(s) have been successfully decompiled
