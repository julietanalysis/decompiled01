/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400950();
// int printf(const char *format, ...);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_53_bad();
int goodG2B();
int goodB2G();
int CWE191_Integer_Underflow__int64_t_rand_multiply_53_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_bad();
int goodB2G1();
int goodB2G2();
int goodG2B1();
int goodG2B2();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_53_bad();
int goodG2B_0();
int goodB2G_0();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_53_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_multiply_01_bad();
int goodG2B_1();
int goodB2G_1();
int CWE191_Integer_Underflow__char_rand_multiply_01_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_52_bad();
int goodG2B_2();
int goodB2G_2();
int CWE191_Integer_Underflow__int64_t_min_multiply_52_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_goodB2GSink(int a1);
int CWE191_Integer_Underflow__char_fscanf_sub_01_bad();
int goodG2B_3();
int goodB2G_3();
int CWE191_Integer_Underflow__char_fscanf_sub_01_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_13_bad();
int goodB2G1_0();
int goodB2G2_0();
int goodG2B1_0();
int goodG2B2_0();
int CWE191_Integer_Underflow__char_rand_sub_13_good();
int CWE191_Integer_Underflow__char_min_sub_12_bad();
int goodB2G_4();
int goodG2B_4();
int CWE191_Integer_Underflow__char_min_sub_12_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_16_bad();
int goodB2G_5();
int goodG2B_5();
int CWE191_Integer_Underflow__int64_t_min_multiply_16_good();
int CWE191_Integer_Underflow__char_fscanf_sub_63_bad();
int goodG2B_6();
int goodB2G_6();
int CWE191_Integer_Underflow__char_fscanf_sub_63_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_goodB2GSink(__int64 a1);
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_65_bad();
int goodG2B_7();
__int64 goodB2G_7();
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_65_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_bad();
int goodB2G_8();
int goodG2B_8();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodB2GSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_multiply_09_bad();
int goodB2G1_1();
int goodB2G2_1();
int goodG2B1_1();
int goodG2B2_1();
int CWE191_Integer_Underflow__char_rand_multiply_09_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_54_bad();
int goodG2B_9();
int goodB2G_9();
int CWE191_Integer_Underflow__char_min_multiply_54_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_sub_09_bad();
int goodB2G1_2();
int goodB2G2_2();
int goodG2B1_2();
int goodG2B2_2();
int CWE191_Integer_Underflow__char_fscanf_sub_09_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_goodB2GSink(__int64 a1);
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE191_Integer_Underflow__char_rand_sub_08_bad();
int goodB2G1_3();
int goodB2G2_3();
int goodG2B1_3();
int goodG2B2_3();
int CWE191_Integer_Underflow__char_rand_sub_08_good();
int __fastcall badSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_21_bad();
int __fastcall goodB2G1Sink(char a1);
int goodB2G1_4();
int __fastcall goodB2G2Sink(char a1);
int goodB2G2_4();
int __fastcall goodG2BSink(char a1);
int goodG2B_10();
int CWE191_Integer_Underflow__char_rand_sub_21_good();
int CWE191_Integer_Underflow__char_rand_sub_03_bad();
int goodB2G1_5();
int goodB2G2_5();
int goodG2B1_4();
int goodG2B2_4();
int CWE191_Integer_Underflow__char_rand_sub_03_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_bad();
int goodB2G1_6();
int goodB2G2_6();
int goodG2B1_5();
int goodG2B2_5();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_badSink();
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodB2GSink();
int CWE191_Integer_Underflow__char_rand_sub_18_bad();
int goodB2G_10();
int goodG2B_11();
int CWE191_Integer_Underflow__char_rand_sub_18_good();
int badSink_0();
int CWE191_Integer_Underflow__int64_t_min_multiply_45_bad();
int goodG2BSink_0();
int goodG2B_12();
int goodB2GSink();
int goodB2G_11();
int CWE191_Integer_Underflow__int64_t_min_multiply_45_good();
int CWE191_Integer_Underflow__char_min_sub_10_bad();
int goodB2G1_7();
int goodB2G2_7();
int goodG2B1_6();
int goodG2B2_6();
int CWE191_Integer_Underflow__char_min_sub_10_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_52_bad();
int goodG2B_13();
int goodB2G_12();
int CWE191_Integer_Underflow__int64_t_rand_multiply_52_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_bad();
int goodG2B_14();
int goodB2G_13();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_good();
int CWE191_Integer_Underflow__int64_t_min_sub_53_bad();
int goodG2B_15();
int goodB2G_14();
int CWE191_Integer_Underflow__int64_t_min_sub_53_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_52_bad();
int goodG2B_16();
int goodB2G_15();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_52_good();
int CWE191_Integer_Underflow__char_min_sub_53_bad();
int goodG2B_17();
int goodB2G_16();
int CWE191_Integer_Underflow__char_min_sub_53_good();
int CWE191_Integer_Underflow__char_rand_sub_12_bad();
int goodB2G_17();
int goodG2B_18();
int CWE191_Integer_Underflow__char_rand_sub_12_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_16_bad();
int goodB2G_18();
int goodG2B_19();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_16_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodB2GSink(int a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_68_bad();
int goodG2B_20();
int goodB2G_19();
int CWE191_Integer_Underflow__char_fscanf_multiply_68_good();
int CWE191_Integer_Underflow__char_fscanf_sub_15_bad();
int goodB2G1_8();
int goodB2G2_8();
int goodG2B1_7();
int goodG2B2_7();
int CWE191_Integer_Underflow__char_fscanf_sub_15_good();
int CWE191_Integer_Underflow__char_min_multiply_65_bad();
int goodG2B_21();
int goodB2G_20();
int CWE191_Integer_Underflow__char_min_multiply_65_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodB2GSink(__int64 *a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_51_bad();
int goodG2B_22();
int goodB2G_21();
int CWE191_Integer_Underflow__int64_t_rand_multiply_51_good();
int CWE191_Integer_Underflow__char_fscanf_sub_54_bad();
int goodG2B_23();
int goodB2G_22();
int CWE191_Integer_Underflow__char_fscanf_sub_54_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_51_bad();
int goodG2B_24();
int goodB2G_23();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_51_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_53_bad();
int goodG2B_25();
int goodB2G_24();
int CWE191_Integer_Underflow__char_fscanf_multiply_53_good();
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_badSource(__int64 a1);
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodG2BSource();
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodB2GSource(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_68b_badSink();
int CWE191_Integer_Underflow__char_min_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_min_multiply_68b_goodB2GSink();
int CWE191_Integer_Underflow__int64_t_rand_multiply_10_bad();
int goodB2G1_9();
int goodB2G2_9();
int goodG2B1_8();
int goodG2B2_8();
int CWE191_Integer_Underflow__int64_t_rand_multiply_10_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_18_bad();
int goodB2G_25();
int goodG2B_26();
int CWE191_Integer_Underflow__int64_t_min_sub_18_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_10_bad();
int goodB2G1_10();
int goodB2G2_10();
int goodG2B1_9();
int goodG2B2_9();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_10_good();
int CWE191_Integer_Underflow__char_fscanf_sub_14_bad();
int goodB2G1_11();
int goodB2G2_11();
int goodG2B1_10();
int goodG2B2_10();
int CWE191_Integer_Underflow__char_fscanf_sub_14_good();
int CWE191_Integer_Underflow__char_fscanf_sub_32_bad();
int goodG2B_27();
int goodB2G_26();
int CWE191_Integer_Underflow__char_fscanf_sub_32_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_67_bad();
int goodG2B_28();
int goodB2G_27();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_67_good();
int CWE191_Integer_Underflow__int64_t_min_sub_16_bad();
int goodB2G_28();
int goodG2B_29();
int CWE191_Integer_Underflow__int64_t_min_sub_16_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_01_bad();
int goodG2B_30();
int goodB2G_29();
int CWE191_Integer_Underflow__int64_t_rand_multiply_01_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE191_Integer_Underflow__char_fscanf_sub_08_bad();
int goodB2G1_12();
int goodB2G2_12();
int goodG2B1_11();
int goodG2B2_11();
int CWE191_Integer_Underflow__char_fscanf_sub_08_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_goodB2GSink(unsigned __int8 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_01_bad();
int goodG2B_31();
int goodB2G_30();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_01_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_07_bad();
int goodB2G1_13();
int goodB2G2_13();
int goodG2B1_12();
int goodG2B2_12();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_07_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_12_bad();
int goodB2G_31();
int goodG2B_32();
int CWE191_Integer_Underflow__int64_t_min_sub_12_good();
int __fastcall badSink_1(char a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_21_bad();
int __fastcall goodB2G1Sink_0(char a1);
int goodB2G1_14();
int __fastcall goodB2G2Sink_0(char a1);
int goodB2G2_14();
int __fastcall goodG2BSink_1(char a1);
int goodG2B_33();
int CWE191_Integer_Underflow__char_fscanf_multiply_21_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_03_bad();
int goodB2G1_15();
int goodB2G2_15();
int goodG2B1_13();
int goodG2B2_13();
int CWE191_Integer_Underflow__char_fscanf_multiply_03_good();
int CWE191_Integer_Underflow__char_min_multiply_22_bad();
int goodB2G1_16();
int goodB2G2_16();
int goodG2B_34();
int CWE191_Integer_Underflow__char_min_multiply_22_good();
int CWE191_Integer_Underflow__char_rand_multiply_04_bad();
int goodB2G1_17();
int goodB2G2_17();
int goodG2B1_14();
int goodG2B2_14();
int CWE191_Integer_Underflow__char_rand_multiply_04_good();
int CWE191_Integer_Underflow__char_rand_multiply_31_bad();
int goodG2B_35();
int goodB2G_32();
int CWE191_Integer_Underflow__char_rand_multiply_31_good();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_bad();
int goodG2B_36();
__int64 goodB2G_33();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_sub_04_bad();
int goodB2G1_18();
int goodB2G2_18();
int goodG2B1_15();
int goodG2B2_15();
int CWE191_Integer_Underflow__char_fscanf_sub_04_good();
int CWE191_Integer_Underflow__char_fscanf_sub_31_bad();
int goodG2B_37();
int goodB2G_34();
int CWE191_Integer_Underflow__char_fscanf_sub_31_good();
int CWE191_Integer_Underflow__char_fscanf_sub_67_bad();
int goodG2B_38();
int goodB2G_35();
int CWE191_Integer_Underflow__char_fscanf_sub_67_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_18_bad();
int goodB2G_36();
int goodG2B_39();
int CWE191_Integer_Underflow__char_fscanf_multiply_18_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_09_bad();
int goodB2G1_19();
int goodB2G2_19();
int goodG2B1_16();
int goodG2B2_16();
int CWE191_Integer_Underflow__int64_t_rand_multiply_09_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_54_bad();
int goodG2B_40();
int goodB2G_37();
int CWE191_Integer_Underflow__int64_t_min_multiply_54_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_02_bad();
int goodB2G1_20();
int goodB2G2_20();
int goodG2B1_17();
int goodG2B2_17();
int CWE191_Integer_Underflow__int64_t_min_sub_02_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_16_bad();
int goodB2G_38();
int goodG2B_41();
int CWE191_Integer_Underflow__int64_t_rand_multiply_16_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_badSink();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodB2GSink();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_10_bad();
int goodB2G1_21();
int goodB2G2_21();
int goodG2B1_18();
int goodG2B2_18();
int CWE191_Integer_Underflow__int64_t_min_sub_10_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_66_bad();
int goodG2B_42();
int goodB2G_39();
int CWE191_Integer_Underflow__char_fscanf_multiply_66_good();
int CWE191_Integer_Underflow__char_min_sub_14_bad();
int goodB2G1_22();
int goodB2G2_22();
int goodG2B1_19();
int goodG2B2_19();
int CWE191_Integer_Underflow__char_min_sub_14_good();
int CWE191_Integer_Underflow__char_min_sub_32_bad();
int goodG2B_43();
int goodB2G_40();
int CWE191_Integer_Underflow__char_min_sub_32_good();
int CWE191_Integer_Underflow__char_rand_multiply_02_bad();
int goodB2G1_23();
int goodB2G2_23();
int goodG2B1_20();
int goodG2B2_20();
int CWE191_Integer_Underflow__char_rand_multiply_02_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_01_bad();
int goodG2B_44();
int goodB2G_41();
int CWE191_Integer_Underflow__int64_t_min_sub_01_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_multiply_54_bad();
int goodG2B_45();
int goodB2G_42();
int CWE191_Integer_Underflow__char_rand_multiply_54_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_11_bad();
int goodB2G1_24();
int goodB2G2_24();
int goodG2B1_21();
int goodG2B2_21();
int CWE191_Integer_Underflow__char_fscanf_multiply_11_good();
int CWE191_Integer_Underflow__char_rand_multiply_22_bad();
int goodB2G1_25();
int goodB2G2_25();
int goodG2B_46();
int CWE191_Integer_Underflow__char_rand_multiply_22_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_bad();
int goodG2B_47();
int goodB2G_43();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_good();
int __fastcall badSink_2(char a1);
int CWE191_Integer_Underflow__char_min_multiply_21_bad();
int __fastcall goodB2G1Sink_1(char a1);
int goodB2G1_26();
int __fastcall goodB2G2Sink_1(char a1);
int goodB2G2_26();
int __fastcall goodG2BSink_2(char a1);
int goodG2B_48();
int CWE191_Integer_Underflow__char_min_multiply_21_good();
int CWE191_Integer_Underflow__char_min_multiply_03_bad();
int goodB2G1_27();
int goodB2G2_27();
int goodG2B1_22();
int goodG2B2_22();
int CWE191_Integer_Underflow__char_min_multiply_03_good();
int CWE191_Integer_Underflow__char_fscanf_sub_22_bad();
int goodB2G1_28();
int goodB2G2_28();
int goodG2B_49();
int CWE191_Integer_Underflow__char_fscanf_sub_22_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_65_bad();
int goodG2B_50();
int goodB2G_44();
int CWE191_Integer_Underflow__int64_t_min_multiply_65_good();
int CWE191_Integer_Underflow__char_min_sub_04_bad();
int goodB2G1_29();
int goodB2G2_29();
int goodG2B1_23();
int goodG2B2_23();
int CWE191_Integer_Underflow__char_min_sub_04_good();
int CWE191_Integer_Underflow__char_min_sub_31_bad();
int goodG2B_51();
int goodB2G_45();
int CWE191_Integer_Underflow__char_min_sub_31_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_10_bad();
int goodB2G1_30();
int goodB2G2_30();
int goodG2B1_24();
int goodG2B2_24();
int CWE191_Integer_Underflow__char_fscanf_multiply_10_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_54_bad();
int goodG2B_52();
int goodB2G_46();
int CWE191_Integer_Underflow__int64_t_rand_multiply_54_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_54_bad();
int goodG2B_53();
int goodB2G_47();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_54_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE191_Integer_Underflow__int64_t_min_sub_08_bad();
int goodB2G1_31();
int goodB2G2_31();
int goodG2B1_25();
int goodG2B2_25();
int CWE191_Integer_Underflow__int64_t_min_sub_08_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_min_sub_67_bad();
int goodG2B_54();
int goodB2G_48();
int CWE191_Integer_Underflow__char_min_sub_67_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodB2GSink(int a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_badSink();
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodB2GSink();
int CWE191_Integer_Underflow__char_min_multiply_12_bad();
int goodB2G_49();
int goodG2B_55();
int CWE191_Integer_Underflow__char_min_multiply_12_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_sub_14_bad();
int goodB2G1_32();
int goodB2G2_32();
int goodG2B1_26();
int goodG2B2_26();
int CWE191_Integer_Underflow__char_rand_sub_14_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodG2BSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_32_bad();
int goodG2B_56();
int goodB2G_50();
int CWE191_Integer_Underflow__char_rand_sub_32_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodB2GSink(__int64 a1);
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
int CWE191_Integer_Underflow__char_fscanf_multiply_08_bad();
int goodB2G1_33();
int goodB2G2_33();
int goodG2B1_27();
int goodG2B2_27();
int CWE191_Integer_Underflow__char_fscanf_multiply_08_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_11_bad();
int goodB2G1_34();
int goodB2G2_34();
int goodG2B1_28();
int goodG2B2_28();
int CWE191_Integer_Underflow__char_min_multiply_11_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_68_bad();
int goodG2B_57();
int goodB2G_51();
int CWE191_Integer_Underflow__int64_t_min_multiply_68_good();
int __fastcall badSink_3(char a1);
int CWE191_Integer_Underflow__char_fscanf_sub_21_bad();
int __fastcall goodB2G1Sink_2(char a1);
int goodB2G1_35();
int __fastcall goodB2G2Sink_2(char a1);
int goodB2G2_35();
int __fastcall goodG2BSink_3(char a1);
int goodG2B_58();
int CWE191_Integer_Underflow__char_fscanf_sub_21_good();
int CWE191_Integer_Underflow__char_fscanf_sub_03_bad();
int goodB2G1_36();
int goodB2G2_36();
int goodG2B1_29();
int goodG2B2_29();
int CWE191_Integer_Underflow__char_fscanf_sub_03_good();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_65_bad();
int goodG2B_59();
__int64 goodB2G_52();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_65_good();
int CWE191_Integer_Underflow__char_min_sub_22_bad();
int goodB2G1_37();
int goodB2G2_37();
int goodG2B_60();
int CWE191_Integer_Underflow__char_min_sub_22_good();
int badSink_4();
int CWE191_Integer_Underflow__int64_t_rand_multiply_45_bad();
int goodG2BSink_4();
int goodG2B_61();
int goodB2GSink_0();
int goodB2G_53();
int CWE191_Integer_Underflow__int64_t_rand_multiply_45_good();
int CWE191_Integer_Underflow__char_rand_sub_04_bad();
int goodB2G1_38();
int goodB2G2_38();
int goodG2B1_30();
int goodG2B2_30();
int CWE191_Integer_Underflow__char_rand_sub_04_good();
int CWE191_Integer_Underflow__char_rand_sub_31_bad();
int goodG2B_62();
int goodB2G_54();
int CWE191_Integer_Underflow__char_rand_sub_31_good();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_65_bad();
int goodG2B_63();
__int64 goodB2G_55();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_65_good();
int CWE191_Integer_Underflow__char_rand_multiply_18_bad();
int goodB2G_56();
int goodG2B_64();
int CWE191_Integer_Underflow__char_rand_multiply_18_good();
int CWE191_Integer_Underflow__char_fscanf_sub_18_bad();
int goodB2G_57();
int goodG2B_65();
int CWE191_Integer_Underflow__char_fscanf_sub_18_good();
int CWE191_Integer_Underflow__int64_t_min_sub_54_bad();
int goodG2B_66();
int goodB2G_58();
int CWE191_Integer_Underflow__int64_t_min_sub_54_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_53_bad();
int goodG2B_67();
int goodB2G_59();
int CWE191_Integer_Underflow__int64_t_min_multiply_53_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_bad();
int goodG2B_68();
int goodB2G_60();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_badSink();
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodB2GSink();
int CWE191_Integer_Underflow__char_rand_multiply_12_bad();
int goodB2G_61();
int goodG2B_69();
int CWE191_Integer_Underflow__char_rand_multiply_12_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_01_bad();
int goodG2B_70();
int goodB2G_62();
int CWE191_Integer_Underflow__char_min_multiply_01_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_goodB2GSink(int a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_badSink();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodG2BSink();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodB2GSink();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_bad();
int goodB2G_63();
int goodG2B_71();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodG2BSink(char a1);
int CWE191_Integer_Underflow__char_min_sub_13_bad();
int goodB2G1_39();
int goodB2G2_39();
int goodG2B1_31();
int goodG2B2_31();
int CWE191_Integer_Underflow__char_min_sub_13_good();
__int64 CWE191_Integer_Underflow__char_rand_multiply_65_bad();
int goodG2B_72();
__int64 goodB2G_64();
__int64 CWE191_Integer_Underflow__char_rand_multiply_65_good();
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_badSource();
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodG2BSource();
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodB2GSource();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_54_bad();
int goodG2B_73();
int goodB2G_65();
int CWE191_Integer_Underflow__char_fscanf_multiply_54_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodB2GSink(__int64 a1);
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
int CWE191_Integer_Underflow__char_min_multiply_08_bad();
int goodB2G1_40();
int goodB2G2_40();
int goodG2B1_32();
int goodG2B2_32();
int CWE191_Integer_Underflow__char_min_multiply_08_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_bad();
int goodG2B_74();
int goodB2G_66();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_68_bad();
int goodG2B_75();
int goodB2G_67();
int CWE191_Integer_Underflow__int64_t_rand_multiply_68_good();
int CWE191_Integer_Underflow__char_fscanf_sub_11_bad();
int goodB2G1_41();
int goodB2G2_41();
int goodG2B1_33();
int goodG2B2_33();
int CWE191_Integer_Underflow__char_fscanf_sub_11_good();
int CWE191_Integer_Underflow__char_fscanf_sub_02_bad();
int goodB2G1_42();
int goodB2G2_42();
int goodG2B1_34();
int goodG2B2_34();
int CWE191_Integer_Underflow__char_fscanf_sub_02_good();
int CWE191_Integer_Underflow__char_rand_sub_22_bad();
int goodB2G1_43();
int goodB2G2_43();
int goodG2B_76();
int CWE191_Integer_Underflow__char_rand_sub_22_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68_bad();
int goodG2B_77();
int goodB2G_68();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68_good();
int __fastcall badSink_5(char a1);
int CWE191_Integer_Underflow__char_min_sub_21_bad();
int __fastcall goodB2G1Sink_3(char a1);
int goodB2G1_44();
int __fastcall goodB2G2Sink_3(char a1);
int goodB2G2_44();
int __fastcall goodG2BSink_5(char a1);
int goodG2B_78();
int CWE191_Integer_Underflow__char_min_sub_21_good();
int CWE191_Integer_Underflow__char_min_sub_03_bad();
int goodB2G1_45();
int goodB2G2_45();
int goodG2B1_35();
int goodG2B2_35();
int CWE191_Integer_Underflow__char_min_sub_03_good();
int CWE191_Integer_Underflow__int64_t_min_sub_65_bad();
int goodG2B_79();
int goodB2G_69();
int CWE191_Integer_Underflow__int64_t_min_sub_65_good();
int CWE191_Integer_Underflow__char_rand_multiply_10_bad();
int goodB2G1_46();
int goodB2G2_46();
int goodG2B1_36();
int goodG2B2_36();
int CWE191_Integer_Underflow__char_rand_multiply_10_good();
int badSink_6();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_bad();
int goodG2BSink_6();
int goodG2B_80();
int goodB2GSink_1();
int goodB2G_70();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_good();
int CWE191_Integer_Underflow__char_fscanf_sub_10_bad();
int goodB2G1_47();
int goodB2G2_47();
int goodG2B1_37();
int goodG2B2_37();
int CWE191_Integer_Underflow__char_fscanf_sub_10_good();
int __fastcall badSink_7(int a1);
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_44_bad();
int __fastcall goodG2BSink_7(int a1);
int goodG2B_81();
int __fastcall goodB2GSink_2(int a1);
__int64 goodB2G_71();
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_44_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE191_Integer_Underflow__char_min_sub_08_bad();
int goodB2G1_48();
int goodB2G2_48();
int goodG2B1_38();
int goodG2B2_38();
int CWE191_Integer_Underflow__char_min_sub_08_good();
int CWE191_Integer_Underflow__int64_t_min_sub_11_bad();
int goodB2G1_49();
int goodB2G2_49();
int goodG2B1_39();
int goodG2B2_39();
int CWE191_Integer_Underflow__int64_t_min_sub_11_good();
int CWE191_Integer_Underflow__char_min_sub_64_bad();
int goodG2B_82();
int goodB2G_72();
int CWE191_Integer_Underflow__char_min_sub_64_good();
int __fastcall badSink_8(int a1);
__int64 CWE191_Integer_Underflow__char_rand_multiply_44_bad();
int __fastcall goodG2BSink_8(int a1);
int goodG2B_83();
int __fastcall goodB2GSink_3(int a1);
__int64 goodB2G_73();
__int64 CWE191_Integer_Underflow__char_rand_multiply_44_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_bad();
int goodG2B_84();
int goodB2G_74();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_good();
int CWE191_Integer_Underflow__char_min_multiply_63_bad();
int goodG2B_85();
int goodB2G_75();
int CWE191_Integer_Underflow__char_min_multiply_63_good();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE191_Integer_Underflow__int64_t_rand_multiply_08_bad();
int goodB2G1_50();
int goodB2G2_50();
int goodG2B1_40();
int goodG2B2_40();
int CWE191_Integer_Underflow__int64_t_rand_multiply_08_good();
int CWE191_Integer_Underflow__char_min_sub_02_bad();
int goodB2G1_51();
int goodB2G2_51();
int goodG2B1_41();
int goodG2B2_41();
int CWE191_Integer_Underflow__char_min_sub_02_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_15_bad();
int goodB2G1_52();
int goodB2G2_52();
int goodG2B1_42();
int goodG2B2_42();
int CWE191_Integer_Underflow__int64_t_min_multiply_15_good();
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_61b_badSource(unsigned __int8 a1);
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodG2BSource();
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodB2GSource(unsigned __int8 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_07_bad();
int goodB2G1_53();
int goodB2G2_53();
int goodG2B1_43();
int goodG2B2_43();
int CWE191_Integer_Underflow__int64_t_min_sub_07_good();
unsigned __int64 badSource();
int CWE191_Integer_Underflow__int64_t_min_multiply_42_bad();
__int64 goodG2BSource();
int goodG2B_86();
unsigned __int64 goodB2GSource();
int goodB2G_76();
int CWE191_Integer_Underflow__int64_t_min_multiply_42_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad();
int goodB2G1_54();
int goodB2G2_54();
int goodG2B1_44();
int goodG2B2_44();
int CWE191_Integer_Underflow__int64_t_rand_multiply_02_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_goodB2GSink(_BYTE *a1);
int CWE191_Integer_Underflow__char_min_sub_11_bad();
int goodB2G1_55();
int goodB2G2_55();
int goodG2B1_45();
int goodG2B2_45();
int CWE191_Integer_Underflow__char_min_sub_11_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_13_bad();
int goodB2G1_56();
int goodB2G2_56();
int goodG2B1_46();
int goodG2B2_46();
int CWE191_Integer_Underflow__char_fscanf_multiply_13_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_goodB2GSink(char *a1);
int CWE191_Integer_Underflow__char_min_multiply_04_bad();
int goodB2G1_57();
int goodB2G2_57();
int goodG2B1_47();
int goodG2B2_47();
int CWE191_Integer_Underflow__char_min_multiply_04_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_goodB2GSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_bad();
int goodG2B_87();
int goodB2G_77();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_61_bad();
int goodG2B_88();
int goodB2G_78();
int CWE191_Integer_Underflow__char_fscanf_multiply_61_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_05_bad();
int goodB2G1_58();
int goodB2G2_58();
int goodG2B1_48();
int goodG2B2_48();
int CWE191_Integer_Underflow__int64_t_min_multiply_05_good();
int __fastcall badSink_9(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_41_bad();
int __fastcall goodG2BSink_9(__int64 a1);
int goodG2B_89();
int __fastcall goodB2GSink_4(__int64 a1);
int goodB2G_79();
int CWE191_Integer_Underflow__int64_t_min_multiply_41_good();
int __fastcall badSink_10(int a1);
int CWE191_Integer_Underflow__char_min_multiply_44_bad();
int __fastcall goodG2BSink_10(int a1);
int goodG2B_90();
int __fastcall goodB2GSink_5(int a1);
int goodB2G_80();
int CWE191_Integer_Underflow__char_min_multiply_44_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_07_bad();
int goodB2G1_59();
int goodB2G2_59();
int goodG2B1_49();
int goodG2B2_49();
int CWE191_Integer_Underflow__char_fscanf_multiply_07_good();
int CWE191_Integer_Underflow__char_rand_sub_64_bad();
int goodG2B_91();
int goodB2G_81();
int CWE191_Integer_Underflow__char_rand_sub_64_good();
int CWE191_Integer_Underflow__char_rand_multiply_67_bad();
int goodG2B_92();
int goodB2G_82();
int CWE191_Integer_Underflow__char_rand_multiply_67_good();
int CWE191_Integer_Underflow__char_rand_multiply_63_bad();
int goodG2B_93();
int goodB2G_83();
int CWE191_Integer_Underflow__char_rand_multiply_63_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_34_bad();
int goodG2B_94();
int goodB2G_84();
int CWE191_Integer_Underflow__int64_t_min_multiply_34_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_15_bad();
int goodB2G1_60();
int goodB2G2_60();
int goodG2B1_50();
int goodG2B2_50();
int CWE191_Integer_Underflow__int64_t_rand_multiply_15_good();
int CWE191_Integer_Underflow__char_rand_multiply_11_bad();
int goodB2G1_61();
int goodB2G2_61();
int goodG2B1_51();
int goodG2B2_51();
int CWE191_Integer_Underflow__char_rand_multiply_11_good();
int CWE191_Integer_Underflow__char_rand_multiply_07_bad();
int goodB2G1_62();
int goodB2G2_62();
int goodG2B1_52();
int goodG2B2_52();
int CWE191_Integer_Underflow__char_rand_multiply_07_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_06_bad();
int goodB2G1_63();
int goodB2G2_63();
int goodG2B1_53();
int goodG2B2_53();
int CWE191_Integer_Underflow__int64_t_rand_multiply_06_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_15_bad();
int goodB2G1_64();
int goodB2G2_64();
int goodG2B1_54();
int goodG2B2_54();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_15_good();
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_badSource();
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_goodG2BSource();
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_goodB2GSource();
__int64 badSource_0();
int CWE191_Integer_Underflow__int64_t_rand_multiply_42_bad();
__int64 goodG2BSource_0();
int goodG2B_95();
__int64 goodB2GSource_0();
int goodB2G_85();
int CWE191_Integer_Underflow__int64_t_rand_multiply_42_good();
__int64 __fastcall badSource_1(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_42_bad();
__int64 goodG2BSource_1();
int goodG2B_96();
__int64 __fastcall goodB2GSource_1(__int64 a1);
int goodB2G_86();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_42_good();
int CWE191_Integer_Underflow__char_min_sub_01_bad();
int goodG2B_97();
int goodB2G_87();
int CWE191_Integer_Underflow__char_min_sub_01_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_goodB2GSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_66_bad();
int goodG2B_98();
int goodB2G_88();
int CWE191_Integer_Underflow__int64_t_min_multiply_66_good();
int CWE191_Integer_Underflow__char_min_multiply_61_bad();
int goodG2B_99();
int goodB2G_89();
int CWE191_Integer_Underflow__char_min_multiply_61_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_05_bad();
int goodB2G1_65();
int goodB2G2_65();
int goodG2B1_55();
int goodG2B2_55();
int CWE191_Integer_Underflow__int64_t_rand_multiply_05_good();
void CWE191_Integer_Underflow__char_rand_multiply_17_bad();
void goodB2G_90();
int goodG2B_100();
int CWE191_Integer_Underflow__char_rand_multiply_17_good();
int __fastcall badSink_11(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_41_bad();
int __fastcall goodG2BSink_11(__int64 a1);
int goodG2B_101();
int __fastcall goodB2GSink_6(__int64 a1);
int goodB2G_91();
int CWE191_Integer_Underflow__int64_t_rand_multiply_41_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_05_bad();
int goodB2G1_66();
int goodB2G2_66();
int goodG2B1_56();
int goodG2B2_56();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_05_good();
int CWE191_Integer_Underflow__char_fscanf_sub_68b_badSink();
int CWE191_Integer_Underflow__char_fscanf_sub_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_fscanf_sub_68b_goodB2GSink();
int CWE191_Integer_Underflow__char_fscanf_sub_17_bad();
int goodB2G_92();
int goodG2B_102();
int CWE191_Integer_Underflow__char_fscanf_sub_17_good();
int __fastcall badSink_12(char a1);
__int64 CWE191_Integer_Underflow__char_fscanf_sub_44_bad();
int __fastcall goodG2BSink_12(char a1);
int goodG2B_103();
int __fastcall goodB2GSink_7(char a1);
__int64 goodB2G_93();
__int64 CWE191_Integer_Underflow__char_fscanf_sub_44_good();
int CWE191_Integer_Underflow__char_min_multiply_07_bad();
int goodB2G1_67();
int goodB2G2_67();
int goodG2B1_57();
int goodG2B2_57();
int CWE191_Integer_Underflow__char_min_multiply_07_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_34_bad();
int goodG2B_104();
int goodB2G_94();
int CWE191_Integer_Underflow__int64_t_rand_multiply_34_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_34_bad();
int goodG2B_105();
int goodB2G_95();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_34_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_sub_63_bad();
int goodG2B_106();
int goodB2G_96();
int CWE191_Integer_Underflow__char_min_sub_63_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodB2GSink(__int64 a1);
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_badSource();
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_goodG2BSource();
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_goodB2GSource();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_15_bad();
int goodB2G1_68();
int goodB2G2_68();
int goodG2B1_58();
int goodG2B2_58();
int CWE191_Integer_Underflow__int64_t_min_sub_15_good();
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_sub_61b_badSource(unsigned __int8 a1);
__int64 CWE191_Integer_Underflow__char_fscanf_sub_61b_goodG2BSource();
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_sub_61b_goodB2GSource(unsigned __int8 a1);
unsigned __int64 badSource_2();
int CWE191_Integer_Underflow__int64_t_min_sub_42_bad();
__int64 goodG2BSource_2();
int goodG2B_107();
unsigned __int64 goodB2GSource_2();
int goodB2G_97();
int CWE191_Integer_Underflow__int64_t_min_sub_42_good();
int __fastcall badSink_13(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_bad();
int __fastcall goodG2BSink_13(__int64 a1);
int goodG2B_108();
int __fastcall goodB2GSink_8(__int64 a1);
int goodB2G_98();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_goodB2GSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_66_bad();
int goodG2B_109();
int goodB2G_99();
int CWE191_Integer_Underflow__int64_t_rand_multiply_66_good();
int CWE191_Integer_Underflow__char_rand_multiply_61_bad();
int goodG2B_110();
int goodB2G_100();
int CWE191_Integer_Underflow__char_rand_multiply_61_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_66_bad();
int goodG2B_111();
int goodB2G_101();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_66_good();
int CWE191_Integer_Underflow__char_fscanf_sub_61_bad();
int goodG2B_112();
int goodB2G_102();
int CWE191_Integer_Underflow__char_fscanf_sub_61_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_51_bad();
int goodG2B_113();
int goodB2G_103();
int CWE191_Integer_Underflow__int64_t_min_multiply_51_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_15_bad();
int goodB2G1_69();
int goodB2G2_69();
int goodG2B1_59();
int goodG2B2_59();
int CWE191_Integer_Underflow__char_fscanf_multiply_15_good();
int CWE191_Integer_Underflow__int64_t_min_sub_05_bad();
int goodB2G1_70();
int goodB2G2_70();
int goodG2B1_60();
int goodG2B2_60();
int CWE191_Integer_Underflow__int64_t_min_sub_05_good();
int CWE191_Integer_Underflow__char_min_sub_17_bad();
int goodB2G_104();
int goodG2B_114();
int CWE191_Integer_Underflow__char_min_sub_17_good();
int __fastcall badSink_14(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_41_bad();
int __fastcall goodG2BSink_14(__int64 a1);
int goodG2B_115();
int __fastcall goodB2GSink_9(__int64 a1);
int goodB2G_105();
int CWE191_Integer_Underflow__int64_t_min_sub_41_good();
int __fastcall badSink_15(char a1);
int CWE191_Integer_Underflow__char_min_sub_44_bad();
int __fastcall goodG2BSink_15(char a1);
int goodG2B_116();
int __fastcall goodB2GSink_10(char a1);
int goodB2G_106();
int CWE191_Integer_Underflow__char_min_sub_44_good();
int CWE191_Integer_Underflow__char_fscanf_sub_07_bad();
int goodB2G1_71();
int goodB2G2_71();
int goodG2B1_61();
int goodG2B2_61();
int CWE191_Integer_Underflow__char_fscanf_sub_07_good();
__int64 __fastcall badSource_3(unsigned __int8 a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_42_bad();
__int64 goodG2BSource_3();
int goodG2B_117();
__int64 __fastcall goodB2GSource_3(unsigned __int8 a1);
int goodB2G_107();
int CWE191_Integer_Underflow__char_fscanf_multiply_42_good();
int __fastcall badSink_16(int a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_41_bad();
int __fastcall goodG2BSink_16(int a1);
int goodG2B_118();
int __fastcall goodB2GSink_11(int a1);
int goodB2G_108();
int CWE191_Integer_Underflow__char_fscanf_multiply_41_good();
int CWE191_Integer_Underflow__char_fscanf_sub_66_bad();
int goodG2B_119();
int goodB2G_109();
int CWE191_Integer_Underflow__char_fscanf_sub_66_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_bad();
int goodB2G1_72();
int goodB2G2_72();
int goodG2B1_62();
int goodG2B2_62();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_bad();
int goodG2B_120();
int goodB2G_110();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_good();
int CWE191_Integer_Underflow__int64_t_min_sub_34_bad();
int goodG2B_121();
int goodB2G_111();
int CWE191_Integer_Underflow__int64_t_min_sub_34_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_goodB2GSink(__int64 a1);
__int64 CWE191_Integer_Underflow__char_min_sub_61b_badSource();
__int64 CWE191_Integer_Underflow__char_min_sub_61b_goodG2BSource();
__int64 CWE191_Integer_Underflow__char_min_sub_61b_goodB2GSource();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_sub_54_bad();
int goodG2B_122();
int goodB2G_112();
int CWE191_Integer_Underflow__char_rand_sub_54_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_05_bad();
int goodB2G1_73();
int goodB2G2_73();
int goodG2B1_63();
int goodG2B2_63();
int CWE191_Integer_Underflow__char_fscanf_multiply_05_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_bad();
int goodB2G1_74();
int goodB2G2_74();
int goodG2B1_64();
int goodG2B2_64();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_bad();
int goodG2B_123();
int goodB2G_113();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_good();
int CWE191_Integer_Underflow__char_min_multiply_13_bad();
int goodB2G1_75();
int goodB2G2_75();
int goodG2B1_65();
int goodG2B2_65();
int CWE191_Integer_Underflow__char_min_multiply_13_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_11_bad();
int goodB2G1_76();
int goodB2G2_76();
int goodG2B1_66();
int goodG2B2_66();
int CWE191_Integer_Underflow__int64_t_min_multiply_11_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_34_bad();
int goodG2B_124();
int goodB2G_114();
int CWE191_Integer_Underflow__char_fscanf_multiply_34_good();
int CWE191_Integer_Underflow__int64_t_min_sub_66_bad();
int goodG2B_125();
int goodB2G_115();
int CWE191_Integer_Underflow__int64_t_min_sub_66_good();
int CWE191_Integer_Underflow__char_min_sub_61_bad();
int goodG2B_126();
int goodB2G_116();
int CWE191_Integer_Underflow__char_min_sub_61_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodB2GSink(__int64 a1);
void CWE191_Integer_Underflow__char_rand_sub_17_bad();
void goodB2G_117();
int goodG2B_127();
int CWE191_Integer_Underflow__char_rand_sub_17_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_bad();
int goodG2B_128();
int goodB2G_118();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_good();
int CWE191_Integer_Underflow__char_min_multiply_15_bad();
int goodB2G1_77();
int goodB2G2_77();
int goodG2B1_67();
int goodG2B2_67();
int CWE191_Integer_Underflow__char_min_multiply_15_good();
int __fastcall badSink_17(char a1);
__int64 CWE191_Integer_Underflow__char_rand_sub_44_bad();
int __fastcall goodG2BSink_17(char a1);
int goodG2B_129();
int __fastcall goodB2GSink_12(char a1);
__int64 goodB2G_119();
__int64 CWE191_Integer_Underflow__char_rand_sub_44_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_63_bad();
int goodG2B_130();
int goodB2G_120();
int CWE191_Integer_Underflow__int64_t_rand_multiply_63_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_18_bad();
int goodB2G_121();
int goodG2B_131();
int CWE191_Integer_Underflow__int64_t_min_multiply_18_good();
int CWE191_Integer_Underflow__char_min_sub_07_bad();
int goodB2G1_78();
int goodB2G2_78();
int goodG2B1_68();
int goodG2B2_68();
int CWE191_Integer_Underflow__char_min_sub_07_good();
__int64 badSource_4();
int CWE191_Integer_Underflow__char_min_multiply_42_bad();
__int64 goodG2BSource_4();
int goodG2B_132();
__int64 goodB2GSource_4();
int goodB2G_122();
int CWE191_Integer_Underflow__char_min_multiply_42_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_14_bad();
int goodB2G1_79();
int goodB2G2_79();
int goodG2B1_69();
int goodG2B2_69();
int CWE191_Integer_Underflow__int64_t_min_multiply_14_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_16_bad();
int goodB2G_123();
int goodG2B_133();
int CWE191_Integer_Underflow__char_fscanf_multiply_16_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_32_bad();
int goodG2B_134();
int goodB2G_124();
int CWE191_Integer_Underflow__int64_t_min_multiply_32_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_bad();
int goodB2G1_80();
int goodB2G2_80();
int goodG2B1_70();
int goodG2B2_70();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_good();
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_badSource();
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_goodG2BSource();
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_goodB2GSource();
int CWE191_Integer_Underflow__int64_t_min_multiply_06_bad();
int goodB2G1_81();
int goodB2G2_81();
int goodG2B1_71();
int goodG2B2_71();
int CWE191_Integer_Underflow__int64_t_min_multiply_06_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodB2GSink(int a1);
int CWE191_Integer_Underflow__char_min_multiply_05_bad();
int goodB2G1_82();
int goodB2G2_82();
int goodG2B1_72();
int goodG2B2_72();
int CWE191_Integer_Underflow__char_min_multiply_05_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_bad();
int goodB2G1_83();
int goodB2G2_83();
int goodG2B_135();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_17_bad();
int goodB2G_125();
int goodG2B_136();
int CWE191_Integer_Underflow__int64_t_min_multiply_17_good();
int __fastcall badSink_18(int a1);
int CWE191_Integer_Underflow__char_min_multiply_41_bad();
int __fastcall goodG2BSink_18(int a1);
int goodG2B_137();
int __fastcall goodB2GSink_13(int a1);
int goodB2G_126();
int CWE191_Integer_Underflow__char_min_multiply_41_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_04_bad();
int goodB2G1_84();
int goodB2G2_84();
int goodG2B1_73();
int goodG2B2_73();
int CWE191_Integer_Underflow__int64_t_min_multiply_04_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_31_bad();
int goodG2B_138();
int goodB2G_127();
int CWE191_Integer_Underflow__int64_t_min_multiply_31_good();
int CWE191_Integer_Underflow__char_rand_sub_61_bad();
int goodG2B_139();
int goodB2G_128();
int CWE191_Integer_Underflow__char_rand_sub_61_good();
int CWE191_Integer_Underflow__char_min_multiply_34_bad();
int goodG2B_140();
int goodB2G_129();
int CWE191_Integer_Underflow__char_min_multiply_34_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodB2GSink(__int64 a1);
int __fastcall badSink_19(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_21_bad();
int __fastcall goodB2G1Sink_4(__int64 a1);
int goodB2G1_85();
int __fastcall goodB2G2Sink_4(__int64 a1);
int goodB2G2_85();
int __fastcall goodG2BSink_19(__int64 a1);
int goodG2B_141();
int CWE191_Integer_Underflow__int64_t_min_multiply_21_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_sub_15_bad();
int goodB2G1_86();
int goodB2G2_86();
int goodG2B1_74();
int goodG2B2_74();
int CWE191_Integer_Underflow__char_min_sub_15_good();
int CWE191_Integer_Underflow__char_rand_sub_07_bad();
int goodB2G1_87();
int goodB2G2_87();
int goodG2B1_75();
int goodG2B2_75();
int CWE191_Integer_Underflow__char_rand_sub_07_good();
__int64 badSource_5();
int CWE191_Integer_Underflow__char_rand_multiply_42_bad();
__int64 goodG2BSource_5();
int goodG2B_142();
__int64 goodB2GSource_5();
int goodB2G_130();
int CWE191_Integer_Underflow__char_rand_multiply_42_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodB2GSink(__int64 a1);
int badSink_20();
int CWE191_Integer_Underflow__char_rand_sub_45_bad();
int goodG2BSink_20();
int goodG2B_143();
int goodB2GSink_14();
int goodB2G_131();
int CWE191_Integer_Underflow__char_rand_sub_45_good();
int CWE191_Integer_Underflow__char_min_multiply_17_bad();
int goodB2G_132();
int goodG2B_144();
int CWE191_Integer_Underflow__char_min_multiply_17_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_14_bad();
int goodB2G1_88();
int goodB2G2_88();
int goodG2B1_76();
int goodG2B2_76();
int CWE191_Integer_Underflow__int64_t_rand_multiply_14_good();
__int64 __fastcall badSource_6(unsigned __int8 a1);
int CWE191_Integer_Underflow__char_fscanf_sub_42_bad();
__int64 goodG2BSource_6();
int goodG2B_145();
__int64 __fastcall goodB2GSource_6(unsigned __int8 a1);
int goodB2G_133();
int CWE191_Integer_Underflow__char_fscanf_sub_42_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_32_bad();
int goodG2B_146();
int goodB2G_134();
int CWE191_Integer_Underflow__int64_t_rand_multiply_32_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_14_bad();
int goodB2G1_89();
int goodB2G2_89();
int goodG2B1_77();
int goodG2B2_77();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_14_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_32_bad();
int goodG2B_147();
int goodB2G_135();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_32_good();
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_badSource();
__int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_goodG2BSource();
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_goodB2GSource();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_66_bad();
int goodG2B_148();
int goodB2G_136();
int CWE191_Integer_Underflow__char_min_multiply_66_good();
int CWE191_Integer_Underflow__char_rand_multiply_05_bad();
int goodB2G1_90();
int goodB2G2_90();
int goodG2B1_78();
int goodG2B2_78();
int CWE191_Integer_Underflow__char_rand_multiply_05_good();
int __fastcall badSink_21(int a1);
int CWE191_Integer_Underflow__char_rand_multiply_41_bad();
int __fastcall goodG2BSink_21(int a1);
int goodG2B_149();
int __fastcall goodB2GSink_15(int a1);
int goodB2G_137();
int CWE191_Integer_Underflow__char_rand_multiply_41_good();
int __fastcall badSink_22(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_bad();
int __fastcall goodB2G1Sink_5(__int64 a1);
int goodB2G1_91();
int __fastcall goodB2G2Sink_5(__int64 a1);
int goodB2G2_91();
int __fastcall goodG2BSink_22(__int64 a1);
int goodG2B_150();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_good();
int badSink_23();
int CWE191_Integer_Underflow__char_rand_multiply_45_bad();
int goodG2BSink_23();
int goodG2B_151();
int goodB2GSink_16();
int goodB2G_138();
int CWE191_Integer_Underflow__char_rand_multiply_45_good();
int __fastcall badSink_24(char a1);
int CWE191_Integer_Underflow__char_fscanf_sub_41_bad();
int __fastcall goodG2BSink_24(char a1);
int goodG2B_152();
int __fastcall goodB2GSink_17(char a1);
int goodB2G_139();
int CWE191_Integer_Underflow__char_fscanf_sub_41_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad();
int goodB2G1_92();
int goodB2G2_92();
int goodG2B1_79();
int goodG2B2_79();
int CWE191_Integer_Underflow__int64_t_rand_multiply_04_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_31_bad();
int goodG2B_153();
int goodB2G_140();
int CWE191_Integer_Underflow__int64_t_rand_multiply_31_good();
int __fastcall badSink_25(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_44_bad();
int __fastcall goodG2BSink_25(__int64 a1);
int goodG2B_154();
int __fastcall goodB2GSink_18(__int64 a1);
int goodB2G_141();
int CWE191_Integer_Underflow__int64_t_min_multiply_44_good();
int CWE191_Integer_Underflow__char_rand_multiply_15_bad();
int goodB2G1_93();
int goodB2G2_93();
int goodG2B1_80();
int goodG2B2_80();
int CWE191_Integer_Underflow__char_rand_multiply_15_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_04_bad();
int goodB2G1_94();
int goodB2G2_94();
int goodG2B1_81();
int goodG2B2_81();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_04_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_31_bad();
int goodG2B_155();
int goodB2G_142();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_31_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_goodB2GSink(unsigned __int8 a1);
int badSink_26();
int CWE191_Integer_Underflow__int64_t_min_sub_45_bad();
int goodG2BSink_26();
int goodG2B_156();
int goodB2GSink_19();
int goodB2G_143();
int CWE191_Integer_Underflow__int64_t_min_sub_45_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_67_bad();
int goodG2B_157();
int goodB2G_144();
int CWE191_Integer_Underflow__int64_t_rand_multiply_67_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_sub_13_bad();
int goodB2G1_95();
int goodB2G2_95();
int goodG2B1_82();
int goodG2B2_82();
int CWE191_Integer_Underflow__char_fscanf_sub_13_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_13_bad();
int goodB2G1_96();
int goodB2G2_96();
int goodG2B1_83();
int goodG2B2_83();
int CWE191_Integer_Underflow__int64_t_min_multiply_13_good();
__int64 badSource_7();
int CWE191_Integer_Underflow__char_min_sub_42_bad();
__int64 goodG2BSource_7();
int goodG2B_158();
__int64 goodB2GSource_7();
int goodB2G_145();
int CWE191_Integer_Underflow__char_min_sub_42_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_14_bad();
int goodB2G1_97();
int goodB2G2_97();
int goodG2B1_84();
int goodG2B2_84();
int CWE191_Integer_Underflow__int64_t_min_sub_14_good();
int CWE191_Integer_Underflow__int64_t_min_sub_32_bad();
int goodG2B_159();
int goodB2G_146();
int CWE191_Integer_Underflow__int64_t_min_sub_32_good();
__int64 staticReturnsTrue_6();
__int64 staticReturnsFalse_6();
int CWE191_Integer_Underflow__int64_t_min_multiply_08_bad();
int goodB2G1_98();
int goodB2G2_98();
int goodG2B1_85();
int goodG2B2_85();
int CWE191_Integer_Underflow__int64_t_min_multiply_08_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_18_bad();
int goodB2G_147();
int goodG2B_160();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_18_good();
int CWE191_Integer_Underflow__char_fscanf_sub_34_bad();
int goodG2B_161();
int goodB2G_148();
int CWE191_Integer_Underflow__char_fscanf_sub_34_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_goodB2GSink(int a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_02_bad();
int goodB2G1_99();
int goodB2G2_99();
int goodG2B1_86();
int goodG2B2_86();
int CWE191_Integer_Underflow__int64_t_min_multiply_02_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_03_bad();
int goodB2G1_100();
int goodB2G2_100();
int goodG2B1_87();
int goodG2B2_87();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_03_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_bad();
int goodB2G1_101();
int goodB2G2_101();
int goodG2B1_88();
int goodG2B2_88();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_good();
int CWE191_Integer_Underflow__int64_t_min_sub_61_bad();
int goodG2B_162();
int goodB2G_149();
int CWE191_Integer_Underflow__int64_t_min_sub_61_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_bad();
int goodB2G1_102();
int goodB2G2_102();
int goodG2B_163();
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_03_bad();
int goodB2G1_103();
int goodB2G2_103();
int goodG2B1_89();
int goodG2B2_89();
int CWE191_Integer_Underflow__int64_t_min_multiply_03_good();
int CWE191_Integer_Underflow__char_min_sub_05_bad();
int goodB2G1_104();
int goodB2G2_104();
int goodG2B1_90();
int goodG2B2_90();
int CWE191_Integer_Underflow__char_min_sub_05_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_bad();
int goodB2G1_105();
int goodB2G2_105();
int goodG2B_164();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_good();
int __fastcall badSink_27(char a1);
int CWE191_Integer_Underflow__char_min_sub_41_bad();
int __fastcall goodG2BSink_27(char a1);
int goodG2B_165();
int __fastcall goodB2GSink_20(char a1);
int goodB2G_150();
int CWE191_Integer_Underflow__char_min_sub_41_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_goodB2GSink(int a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_67_bad();
int goodG2B_166();
int goodB2G_151();
int CWE191_Integer_Underflow__int64_t_min_multiply_67_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_badSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodG2BSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodB2GSink(_QWORD *a1);
int CWE191_Integer_Underflow__int64_t_min_sub_04_bad();
int goodB2G1_106();
int goodB2G2_106();
int goodG2B1_91();
int goodG2B2_91();
int CWE191_Integer_Underflow__int64_t_min_sub_04_good();
int CWE191_Integer_Underflow__int64_t_min_sub_31_bad();
int goodG2B_167();
int goodB2G_152();
int CWE191_Integer_Underflow__int64_t_min_sub_31_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_14_bad();
int goodB2G1_107();
int goodB2G2_107();
int goodG2B1_92();
int goodG2B2_92();
int CWE191_Integer_Underflow__char_fscanf_multiply_14_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_07_bad();
int goodB2G1_108();
int goodB2G2_108();
int goodG2B1_93();
int goodG2B2_93();
int CWE191_Integer_Underflow__int64_t_min_multiply_07_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_32_bad();
int goodG2B_168();
int goodB2G_153();
int CWE191_Integer_Underflow__char_fscanf_multiply_32_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_17_bad();
int goodB2G_154();
int goodG2B_169();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_17_good();
int CWE191_Integer_Underflow__char_min_sub_34_bad();
int goodG2B_170();
int goodB2G_155();
int CWE191_Integer_Underflow__char_min_sub_34_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_sub_15_bad();
int goodB2G1_109();
int goodB2G2_109();
int goodG2B1_94();
int goodG2B2_94();
int CWE191_Integer_Underflow__char_rand_sub_15_good();
int CWE191_Integer_Underflow__char_min_multiply_02_bad();
int goodB2G1_110();
int goodB2G2_110();
int goodG2B1_95();
int goodG2B2_95();
int CWE191_Integer_Underflow__char_min_multiply_02_good();
int CWE191_Integer_Underflow__int64_t_min_sub_67_bad();
int goodG2B_171();
int goodB2G_156();
int CWE191_Integer_Underflow__int64_t_min_sub_67_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_bad();
int goodG2B_172();
int goodB2G_157();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_12_bad();
int goodB2G_158();
int goodG2B_173();
int CWE191_Integer_Underflow__int64_t_min_multiply_12_good();
__int64 badSource_8();
int CWE191_Integer_Underflow__char_rand_sub_42_bad();
__int64 goodG2BSource_8();
int goodG2B_174();
__int64 goodB2GSource_8();
int goodB2G_159();
int CWE191_Integer_Underflow__char_rand_sub_42_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_09_bad();
int goodB2G1_111();
int goodB2G2_111();
int goodG2B1_96();
int goodG2B2_96();
int CWE191_Integer_Underflow__char_fscanf_multiply_09_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_13_bad();
int goodB2G1_112();
int goodB2G2_112();
int goodG2B1_97();
int goodG2B2_97();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_13_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BSink(__int64 a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_06_bad();
int goodB2G1_113();
int goodB2G2_113();
int goodG2B1_98();
int goodG2B2_98();
int CWE191_Integer_Underflow__char_fscanf_multiply_06_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_04_bad();
int goodB2G1_114();
int goodB2G2_114();
int goodG2B1_99();
int goodG2B2_99();
int CWE191_Integer_Underflow__char_fscanf_multiply_04_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_31_bad();
int goodG2B_175();
int goodB2G_160();
int CWE191_Integer_Underflow__char_fscanf_multiply_31_good();
__int64 staticReturnsTrue_7();
__int64 staticReturnsFalse_7();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_08_bad();
int goodB2G1_115();
int goodB2G2_115();
int goodG2B1_100();
int goodG2B2_100();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_08_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_bad();
int goodB2G1_116();
int goodB2G2_116();
int goodG2B1_101();
int goodG2B2_101();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_good();
int CWE191_Integer_Underflow__char_min_sub_66_bad();
int goodG2B_176();
int goodB2G_161();
int CWE191_Integer_Underflow__char_min_sub_66_good();
int __fastcall badSink_28(__int64 a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_21_bad();
int __fastcall goodB2G1Sink_6(__int64 a1);
int goodB2G1_117();
int __fastcall goodB2G2Sink_6(__int64 a1);
int goodB2G2_117();
int __fastcall goodG2BSink_28(__int64 a1);
int goodG2B_177();
int CWE191_Integer_Underflow__int64_t_rand_multiply_21_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_03_bad();
int goodB2G1_118();
int goodB2G2_118();
int goodG2B1_102();
int goodG2B2_102();
int CWE191_Integer_Underflow__int64_t_rand_multiply_03_good();
int CWE191_Integer_Underflow__char_rand_sub_05_bad();
int goodB2G1_119();
int goodB2G2_119();
int goodG2B1_103();
int goodG2B2_103();
int CWE191_Integer_Underflow__char_rand_sub_05_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_67_bad();
int goodG2B_178();
int goodB2G_162();
int CWE191_Integer_Underflow__char_fscanf_multiply_67_good();
int __fastcall badSink_29(char a1);
int CWE191_Integer_Underflow__char_rand_sub_41_bad();
int __fastcall goodG2BSink_29(char a1);
int goodG2B_179();
int __fastcall goodB2GSink_21(char a1);
int goodB2G_163();
int CWE191_Integer_Underflow__char_rand_sub_41_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_10_bad();
int goodB2G1_120();
int goodB2G2_120();
int goodG2B1_104();
int goodG2B2_104();
int CWE191_Integer_Underflow__int64_t_min_multiply_10_good();
int __fastcall badSink_30(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_21_bad();
int __fastcall goodB2G1Sink_7(__int64 a1);
int goodB2G1_121();
int __fastcall goodB2G2Sink_7(__int64 a1);
int goodB2G2_121();
int __fastcall goodG2BSink_30(__int64 a1);
int goodG2B_180();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_21_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_13_bad();
int goodB2G1_122();
int goodB2G2_122();
int goodG2B1_105();
int goodG2B2_105();
int CWE191_Integer_Underflow__int64_t_rand_multiply_13_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_22_bad();
int goodB2G1_123();
int goodB2G2_123();
int goodG2B_181();
int CWE191_Integer_Underflow__int64_t_min_sub_22_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BSink(char a1);
int CWE191_Integer_Underflow__char_rand_multiply_34_bad();
int goodG2B_182();
int goodB2G_164();
int CWE191_Integer_Underflow__char_rand_multiply_34_good();
int CWE191_Integer_Underflow__char_min_multiply_14_bad();
int goodB2G1_124();
int goodB2G2_124();
int goodG2B1_106();
int goodG2B2_106();
int CWE191_Integer_Underflow__char_min_multiply_14_good();
int CWE191_Integer_Underflow__char_rand_sub_34_bad();
int goodG2B_183();
int goodB2G_165();
int CWE191_Integer_Underflow__char_rand_sub_34_good();
int CWE191_Integer_Underflow__char_min_multiply_32_bad();
int goodG2B_184();
int goodB2G_166();
int CWE191_Integer_Underflow__char_min_multiply_32_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_goodB2GSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_09_bad();
int goodB2G1_125();
int goodB2G2_125();
int goodG2B1_107();
int goodG2B2_107();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_09_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_01_bad();
int goodG2B_185();
int goodB2G_167();
int CWE191_Integer_Underflow__int64_t_min_multiply_01_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_10_bad();
int goodB2G1_126();
int goodB2G2_126();
int goodG2B1_108();
int goodG2B2_108();
int CWE191_Integer_Underflow__char_min_multiply_10_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_12_bad();
int goodB2G_168();
int goodG2B_186();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_12_good();
int CWE191_Integer_Underflow__int64_t_min_sub_13_bad();
int goodB2G1_127();
int goodB2G2_127();
int goodG2B1_109();
int goodG2B2_109();
int CWE191_Integer_Underflow__int64_t_min_sub_13_good();
int CWE191_Integer_Underflow__char_fscanf_sub_12_bad();
int goodB2G_169();
int goodG2B_187();
int CWE191_Integer_Underflow__char_fscanf_sub_12_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_min_multiply_31_bad();
int goodG2B_188();
int goodB2G_170();
int CWE191_Integer_Underflow__char_min_multiply_31_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_66_bad();
int goodG2B_189();
int goodB2G_171();
int CWE191_Integer_Underflow__char_rand_sub_66_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_bad();
int goodG2B_190();
int goodB2G_172();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_11_bad();
int goodB2G1_128();
int goodB2G2_128();
int goodG2B1_110();
int goodG2B2_110();
int CWE191_Integer_Underflow__int64_t_rand_multiply_11_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_09_bad();
int goodB2G1_129();
int goodB2G2_129();
int goodG2B1_111();
int goodG2B2_111();
int CWE191_Integer_Underflow__int64_t_min_multiply_09_good();
int CWE191_Integer_Underflow__char_fscanf_sub_64_bad();
int goodG2B_191();
int goodB2G_173();
int CWE191_Integer_Underflow__char_fscanf_sub_64_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodB2GSink(char a1);
__int64 staticReturnsTrue_8();
__int64 staticReturnsFalse_8();
int CWE191_Integer_Underflow__char_rand_multiply_08_bad();
int goodB2G1_130();
int goodB2G2_130();
int goodG2B1_112();
int goodG2B2_112();
int CWE191_Integer_Underflow__char_rand_multiply_08_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_11_bad();
int goodB2G1_131();
int goodB2G2_131();
int goodG2B1_113();
int goodG2B2_113();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_11_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_02_bad();
int goodB2G1_132();
int goodB2G2_132();
int goodG2B1_114();
int goodG2B2_114();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_02_good();
int CWE191_Integer_Underflow__char_min_multiply_67_bad();
int goodG2B_192();
int goodB2G_174();
int CWE191_Integer_Underflow__char_min_multiply_67_good();
int __fastcall badSink_31(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_21_bad();
int __fastcall goodB2G1Sink_8(__int64 a1);
int goodB2G1_133();
int __fastcall goodB2G2Sink_8(__int64 a1);
int goodB2G2_133();
int __fastcall goodG2BSink_31(__int64 a1);
int goodG2B_193();
int CWE191_Integer_Underflow__int64_t_min_sub_21_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_bad();
int goodG2B_194();
int goodB2G_175();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_good();
int CWE191_Integer_Underflow__char_rand_sub_02_bad();
int goodB2G1_134();
int goodB2G2_134();
int goodG2B1_115();
int goodG2B2_115();
int CWE191_Integer_Underflow__char_rand_sub_02_good();
int CWE191_Integer_Underflow__char_rand_sub_10_bad();
int goodB2G1_135();
int goodB2G2_135();
int goodG2B1_116();
int goodG2B2_116();
int CWE191_Integer_Underflow__char_rand_sub_10_good();
int CWE191_Integer_Underflow__char_min_multiply_09_bad();
int goodB2G1_136();
int goodB2G2_136();
int goodG2B1_117();
int goodG2B2_117();
int CWE191_Integer_Underflow__char_min_multiply_09_good();
int CWE191_Integer_Underflow__char_rand_multiply_32_bad();
int goodG2B_195();
int goodB2G_176();
int CWE191_Integer_Underflow__char_rand_multiply_32_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_bad();
int goodB2G_177();
int goodG2B_196();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_67_bad();
int goodG2B_197();
int goodB2G_178();
int CWE191_Integer_Underflow__char_rand_sub_67_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_01_bad();
int goodG2B_198();
int goodB2G_179();
int CWE191_Integer_Underflow__char_rand_sub_01_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_52_bad();
int goodG2B_199();
int goodB2G_180();
int CWE191_Integer_Underflow__int64_t_min_sub_52_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_sub_11_bad();
int goodB2G1_137();
int goodB2G2_137();
int goodG2B1_118();
int goodG2B2_118();
int CWE191_Integer_Underflow__char_rand_sub_11_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodB2GSink(unsigned __int8 a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_goodB2GSink(int a1);
int badSink_32();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_45_bad();
int goodG2BSink_32();
int goodG2B_200();
int goodB2GSink_22();
int goodB2G_181();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_45_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_min_multiply_68_bad();
int goodG2B_201();
int goodB2G_182();
int CWE191_Integer_Underflow__char_min_multiply_68_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_12_bad();
int goodB2G_183();
int goodG2B_202();
int CWE191_Integer_Underflow__char_fscanf_multiply_12_good();
int CWE191_Integer_Underflow__char_rand_multiply_66_bad();
int goodG2B_203();
int goodB2G_184();
int CWE191_Integer_Underflow__char_rand_multiply_66_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodB2GSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__char_rand_sub_09_bad();
int goodB2G1_138();
int goodB2G2_138();
int goodG2B1_119();
int goodG2B2_119();
int CWE191_Integer_Underflow__char_rand_sub_09_good();
int CWE191_Integer_Underflow__char_min_sub_54_bad();
int goodG2B_204();
int goodB2G_185();
int CWE191_Integer_Underflow__char_min_sub_54_good();
int CWE191_Integer_Underflow__int64_t_min_sub_51_bad();
int goodG2B_205();
int goodB2G_186();
int CWE191_Integer_Underflow__int64_t_min_sub_51_good();
int CWE191_Integer_Underflow__char_fscanf_sub_05_bad();
int goodB2G1_139();
int goodB2G2_139();
int goodG2B1_120();
int goodG2B2_120();
int CWE191_Integer_Underflow__char_fscanf_sub_05_good();
int CWE191_Integer_Underflow__char_min_multiply_53_bad();
int goodG2B_206();
int goodB2G_187();
int CWE191_Integer_Underflow__char_min_multiply_53_good();
__int64 staticReturnsTrue_9();
__int64 staticReturnsFalse_9();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_bad();
int goodB2G1_140();
int goodB2G2_140();
int goodG2B1_121();
int goodG2B2_121();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_64_bad();
int goodG2B_207();
int goodB2G_188();
int CWE191_Integer_Underflow__char_fscanf_multiply_64_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_52_bad();
int goodG2B_208();
int goodB2G_189();
int CWE191_Integer_Underflow__char_fscanf_multiply_52_good();
int CWE191_Integer_Underflow__char_rand_multiply_68b_badSink();
int CWE191_Integer_Underflow__char_rand_multiply_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_rand_multiply_68b_goodB2GSink();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodB2GSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_06_bad();
int goodB2G1_141();
int goodB2G2_141();
int goodG2B1_122();
int goodG2B2_122();
int CWE191_Integer_Underflow__int64_t_min_sub_06_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_64_bad();
int goodG2B_209();
int goodB2G_190();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_64_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_goodB2GSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_min_sub_52_bad();
int goodG2B_210();
int goodB2G_191();
int CWE191_Integer_Underflow__char_min_sub_52_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_51_bad();
int goodG2B_211();
int goodB2G_192();
int CWE191_Integer_Underflow__char_fscanf_multiply_51_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_multiply_68_bad();
int goodG2B_212();
int goodB2G_193();
int CWE191_Integer_Underflow__char_rand_multiply_68_good();
int CWE191_Integer_Underflow__char_fscanf_sub_68_bad();
int goodG2B_213();
int goodB2G_194();
int CWE191_Integer_Underflow__char_fscanf_sub_68_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_02_bad();
int goodB2G1_142();
int goodB2G2_142();
int goodG2B1_123();
int goodG2B2_123();
int CWE191_Integer_Underflow__char_fscanf_multiply_02_good();
int CWE191_Integer_Underflow__char_min_sub_65_bad();
int goodG2B_214();
int goodB2G_195();
int CWE191_Integer_Underflow__char_min_sub_65_good();
int __fastcall badSink_33(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_sub_41_bad();
int __fastcall goodG2BSink_33(__int64 a1);
int goodG2B_215();
int __fastcall goodB2GSink_23(__int64 a1);
int goodB2G_196();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_41_good();
int badSink_34();
int CWE191_Integer_Underflow__char_fscanf_multiply_45_bad();
int goodG2BSink_34();
int goodG2B_216();
int goodB2GSink_24();
int goodB2G_197();
int CWE191_Integer_Underflow__char_fscanf_multiply_45_good();
int CWE191_Integer_Underflow__char_rand_multiply_53_bad();
int goodG2B_217();
int goodB2G_198();
int CWE191_Integer_Underflow__char_rand_multiply_53_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodB2GSink(__int64 *a1);
int CWE191_Integer_Underflow__char_fscanf_sub_53_bad();
int goodG2B_218();
int goodB2G_199();
int CWE191_Integer_Underflow__char_fscanf_sub_53_good();
int CWE191_Integer_Underflow__char_min_multiply_52_bad();
int goodG2B_219();
int goodB2G_200();
int CWE191_Integer_Underflow__char_min_multiply_52_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_goodB2GSink(int a1);
int __fastcall badSink_35(__int64 a1);
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_44_bad();
int __fastcall goodG2BSink_35(__int64 a1);
int goodG2B_220();
int __fastcall goodB2GSink_25(__int64 a1);
__int64 goodB2G_201();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_44_good();
int CWE191_Integer_Underflow__char_min_multiply_16_bad();
int goodB2G_202();
int goodG2B_221();
int CWE191_Integer_Underflow__char_min_multiply_16_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_bad();
int goodB2G_203();
int goodG2B_222();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_good();
int __fastcall badSink_36(__int64 a1);
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_bad();
int __fastcall goodG2BSink_36(__int64 a1);
int goodG2B_223();
int __fastcall goodB2GSink_26(__int64 a1);
__int64 goodB2G_204();
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_goodB2GSink(int a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_bad();
int goodB2G1_143();
int goodB2G2_143();
int goodG2B1_124();
int goodG2B2_124();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_64_bad();
int goodG2B_224();
int goodB2G_205();
int CWE191_Integer_Underflow__int64_t_min_sub_64_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodB2GSink(char *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_63_bad();
int goodG2B_225();
int goodB2G_206();
int CWE191_Integer_Underflow__int64_t_min_multiply_63_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_min_multiply_51_bad();
int goodG2B_226();
int goodB2G_207();
int CWE191_Integer_Underflow__char_min_multiply_51_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_goodB2GSink(char a1);
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_badSource(__int64 a1);
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodG2BSource();
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodB2GSource(__int64 a1);
int CWE191_Integer_Underflow__char_min_sub_68_bad();
int goodG2B_227();
int goodB2G_208();
int CWE191_Integer_Underflow__char_min_sub_68_good();
__int64 CWE191_Integer_Underflow__char_rand_sub_65_bad();
int goodG2B_228();
__int64 goodB2G_209();
__int64 CWE191_Integer_Underflow__char_rand_sub_65_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_64_bad();
int goodG2B_229();
int goodB2G_210();
int CWE191_Integer_Underflow__int64_t_min_multiply_64_good();
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodB2GSink(__int64 *a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_01_bad();
int goodG2B_230();
int goodB2G_211();
int CWE191_Integer_Underflow__char_fscanf_multiply_01_good();
int CWE191_Integer_Underflow__char_rand_multiply_52_bad();
int goodG2B_231();
int goodB2G_212();
int CWE191_Integer_Underflow__char_rand_multiply_52_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_badSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodG2BSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodB2GSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_goodB2GSink(int a1);
int CWE191_Integer_Underflow__char_fscanf_sub_52_bad();
int goodG2B_232();
int goodB2G_213();
int CWE191_Integer_Underflow__char_fscanf_sub_52_good();
int CWE191_Integer_Underflow__char_rand_sub_68b_badSink();
int CWE191_Integer_Underflow__char_rand_sub_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_rand_sub_68b_goodB2GSink();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_bad();
int goodG2B_233();
int goodB2G_214();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_rand_multiply_16_bad();
int goodB2G_215();
int goodG2B_234();
int CWE191_Integer_Underflow__char_rand_multiply_16_good();
int CWE191_Integer_Underflow__int64_t_min_multiply_22_bad();
int goodB2G1_144();
int goodB2G2_144();
int goodG2B_235();
int CWE191_Integer_Underflow__int64_t_min_multiply_22_good();
int CWE191_Integer_Underflow__char_fscanf_sub_16_bad();
int goodB2G_216();
int goodG2B_236();
int CWE191_Integer_Underflow__char_fscanf_sub_16_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_22_bad();
int goodB2G1_145();
int goodB2G2_145();
int goodG2B_237();
int CWE191_Integer_Underflow__char_fscanf_multiply_22_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_bad();
int goodB2G1_146();
int goodB2G2_146();
int goodG2B1_125();
int goodG2B2_125();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_good();
int CWE191_Integer_Underflow__char_min_multiply_06_bad();
int goodB2G1_147();
int goodB2G2_147();
int goodG2B1_126();
int goodG2B2_126();
int CWE191_Integer_Underflow__char_min_multiply_06_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_03_bad();
int goodB2G1_148();
int goodB2G2_148();
int goodG2B1_127();
int goodG2B2_127();
int CWE191_Integer_Underflow__int64_t_min_sub_03_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_goodB2GSink(char *a1);
int CWE191_Integer_Underflow__char_rand_multiply_51_bad();
int goodG2B_238();
int goodB2G_217();
int CWE191_Integer_Underflow__char_rand_multiply_51_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_63_bad();
int goodG2B_239();
int goodB2G_218();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_63_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_goodB2GSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_fscanf_sub_51_bad();
int goodG2B_240();
int goodB2G_219();
int CWE191_Integer_Underflow__char_fscanf_sub_51_good();
int CWE191_Integer_Underflow__char_rand_sub_68_bad();
int goodG2B_241();
int goodB2G_220();
int CWE191_Integer_Underflow__char_rand_sub_68_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_badSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_goodG2BSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_goodB2GSink(_QWORD *a1);
int CWE191_Integer_Underflow__char_rand_multiply_13_bad();
int goodB2G1_149();
int goodB2G2_149();
int goodG2B1_128();
int goodG2B2_128();
int CWE191_Integer_Underflow__char_rand_multiply_13_good();
int CWE191_Integer_Underflow__char_rand_sub_63_bad();
int goodG2B_242();
int goodB2G_221();
int CWE191_Integer_Underflow__char_rand_sub_63_good();
int CWE191_Integer_Underflow__char_min_sub_18_bad();
int goodB2G_222();
int goodG2B_243();
int CWE191_Integer_Underflow__char_min_sub_18_good();
int CWE191_Integer_Underflow__int64_t_min_sub_17_bad();
int goodB2G_223();
int goodG2B_244();
int CWE191_Integer_Underflow__int64_t_min_sub_17_good();
int badSink_37();
int CWE191_Integer_Underflow__char_fscanf_sub_45_bad();
int goodG2BSink_37();
int goodG2B_245();
int goodB2GSink_27();
int goodB2G_224();
int CWE191_Integer_Underflow__char_fscanf_sub_45_good();
int CWE191_Integer_Underflow__char_rand_multiply_06_bad();
int goodB2G1_150();
int goodB2G2_150();
int goodG2B1_129();
int goodG2B2_129();
int CWE191_Integer_Underflow__char_rand_multiply_06_good();
int CWE191_Integer_Underflow__char_rand_sub_53_bad();
int goodG2B_246();
int goodB2G_225();
int CWE191_Integer_Underflow__char_rand_sub_53_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_18_bad();
int goodB2G_226();
int goodG2B_247();
int CWE191_Integer_Underflow__int64_t_rand_multiply_18_good();
int CWE191_Integer_Underflow__char_min_multiply_64_bad();
int goodG2B_248();
int goodB2G_227();
int CWE191_Integer_Underflow__char_min_multiply_64_good();
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_badSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_goodG2BSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_goodB2GSink(_QWORD *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodB2GSink(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_multiply_61_bad();
int goodG2B_249();
int goodB2G_228();
int CWE191_Integer_Underflow__int64_t_min_multiply_61_good();
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_68b_badSink();
int CWE191_Integer_Underflow__int64_t_min_sub_68b_goodG2BSink();
int CWE191_Integer_Underflow__int64_t_min_sub_68b_goodB2GSink();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodB2GSink(int a1);
void CWE191_Integer_Underflow__int64_t_rand_multiply_17_bad();
void goodB2G_229();
int goodG2B_250();
int CWE191_Integer_Underflow__int64_t_rand_multiply_17_good();
int CWE191_Integer_Underflow__char_min_sub_16_bad();
int goodB2G_230();
int goodG2B_251();
int CWE191_Integer_Underflow__char_min_sub_16_good();
int __fastcall badSink_38(__int64 a1);
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad();
int __fastcall goodG2BSink_38(__int64 a1);
int goodG2B_252();
int __fastcall goodB2GSink_28(__int64 a1);
__int64 goodB2G_231();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_44_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_badSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodG2BSink(__int64 a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodB2GSink(__int64 a1);
int badSink_39();
int CWE191_Integer_Underflow__char_min_multiply_45_bad();
int goodG2BSink_39();
int goodG2B_253();
int goodB2GSink_29();
int goodB2G_232();
int CWE191_Integer_Underflow__char_min_multiply_45_good();
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_goodB2GSink(char *a1);
int CWE191_Integer_Underflow__char_rand_multiply_14_bad();
int goodB2G1_151();
int goodB2G2_151();
int goodG2B1_130();
int goodG2B2_130();
int CWE191_Integer_Underflow__char_rand_multiply_14_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_goodB2GSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_min_sub_63_bad();
int goodG2B_254();
int goodB2G_233();
int CWE191_Integer_Underflow__int64_t_min_sub_63_good();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_badSource();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodG2BSource();
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodB2GSource();
int CWE191_Integer_Underflow__char_min_multiply_18_bad();
int goodB2G_234();
int goodG2B_255();
int CWE191_Integer_Underflow__char_min_multiply_18_good();
int CWE191_Integer_Underflow__char_min_sub_51_bad();
int goodG2B_256();
int goodB2G_235();
int CWE191_Integer_Underflow__char_min_sub_51_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodB2GSink(char *a1);
int CWE191_Integer_Underflow__char_min_sub_68b_badSink();
int CWE191_Integer_Underflow__char_min_sub_68b_goodG2BSink();
int CWE191_Integer_Underflow__char_min_sub_68b_goodB2GSink();
int CWE191_Integer_Underflow__char_rand_multiply_03_bad();
int goodB2G1_152();
int goodB2G2_152();
int goodG2B1_131();
int goodG2B2_131();
int CWE191_Integer_Underflow__char_rand_multiply_03_good();
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_goodB2GSink(char a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_bad();
int goodG2B_257();
int goodB2G_236();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_good();
int badSink_40();
int CWE191_Integer_Underflow__char_min_sub_45_bad();
int goodG2BSink_40();
int goodG2B_258();
int goodB2GSink_30();
int goodB2G_237();
int CWE191_Integer_Underflow__char_min_sub_45_good();
int CWE191_Integer_Underflow__int64_t_min_sub_09_bad();
int goodB2G1_153();
int goodB2G2_153();
int goodG2B1_132();
int goodG2B2_132();
int CWE191_Integer_Underflow__int64_t_min_sub_09_good();
int CWE191_Integer_Underflow__char_rand_multiply_64_bad();
int goodG2B_259();
int goodB2G_238();
int CWE191_Integer_Underflow__char_rand_multiply_64_good();
int CWE191_Integer_Underflow__char_min_sub_06_bad();
int goodB2G1_154();
int goodB2G2_154();
int goodG2B1_133();
int goodG2B2_133();
int CWE191_Integer_Underflow__char_min_sub_06_good();
int CWE191_Integer_Underflow__char_rand_sub_52_bad();
int goodG2B_260();
int goodB2G_239();
int CWE191_Integer_Underflow__char_rand_sub_52_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_61_bad();
int goodG2B_261();
int goodB2G_240();
int CWE191_Integer_Underflow__int64_t_rand_multiply_61_good();
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_badSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_goodG2BSink(char a1);
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_goodB2GSink(char a1);
int CWE191_Integer_Underflow__char_fscanf_multiply_63_bad();
int goodG2B_262();
int goodB2G_241();
int CWE191_Integer_Underflow__char_fscanf_multiply_63_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_61_bad();
int goodG2B_263();
int goodB2G_242();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_61_good();
int CWE191_Integer_Underflow__char_rand_sub_16_bad();
int goodB2G_243();
int goodG2B_264();
int CWE191_Integer_Underflow__char_rand_sub_16_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_bad();
int goodB2G1_155();
int goodB2G2_155();
int goodG2B1_134();
int goodG2B2_134();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_good();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_06_bad();
int goodB2G1_156();
int goodB2G2_156();
int goodG2B1_135();
int goodG2B2_135();
int CWE191_Integer_Underflow__int64_t_fscanf_sub_06_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_bad();
int goodB2G1_157();
int goodB2G2_157();
int goodG2B1_136();
int goodG2B2_136();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_07_bad();
int goodB2G1_158();
int goodB2G2_158();
int goodG2B1_137();
int goodG2B2_137();
int CWE191_Integer_Underflow__int64_t_rand_multiply_07_good();
int __fastcall badSink_41(char a1);
int CWE191_Integer_Underflow__char_rand_multiply_21_bad();
int __fastcall goodB2G1Sink_9(char a1);
int goodB2G1_159();
int __fastcall goodB2G2Sink_9(char a1);
int goodB2G2_159();
int __fastcall goodG2BSink_41(char a1);
int goodG2B_265();
int CWE191_Integer_Underflow__char_rand_multiply_21_good();
int __fastcall badSink_42(__int64 a1);
int CWE191_Integer_Underflow__int64_t_min_sub_44_bad();
int __fastcall goodG2BSink_42(__int64 a1);
int goodG2B_266();
int __fastcall goodB2GSink_31(__int64 a1);
int goodB2G_244();
int CWE191_Integer_Underflow__int64_t_min_sub_44_good();
__int64 __fastcall badSource_9(__int64 a1);
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_bad();
__int64 goodG2BSource_9();
int goodG2B_267();
__int64 __fastcall goodB2GSource_9(__int64 a1);
int goodB2G_245();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_good();
int CWE191_Integer_Underflow__char_min_sub_09_bad();
int goodB2G1_160();
int goodB2G2_160();
int goodG2B1_138();
int goodG2B2_138();
int CWE191_Integer_Underflow__char_min_sub_09_good();
int CWE191_Integer_Underflow__int64_t_rand_multiply_12_bad();
int goodB2G_246();
int goodG2B_268();
int CWE191_Integer_Underflow__int64_t_rand_multiply_12_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_badSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_goodB2GSink(int a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_goodB2GSink(_BYTE *a1);
int CWE191_Integer_Underflow__char_rand_sub_51_bad();
int goodG2B_269();
int goodB2G_247();
int CWE191_Integer_Underflow__char_rand_sub_51_good();
int CWE191_Integer_Underflow__int64_t_min_sub_68_bad();
int goodG2B_270();
int goodB2G_248();
int CWE191_Integer_Underflow__int64_t_min_sub_68_good();
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_goodB2GSink(char *a1);
int CWE191_Integer_Underflow__int64_t_rand_multiply_64_bad();
int goodG2B_271();
int goodB2G_249();
int CWE191_Integer_Underflow__int64_t_rand_multiply_64_good();
int CWE191_Integer_Underflow__char_fscanf_sub_06_bad();
int goodB2G1_161();
int goodB2G2_161();
int goodG2B1_139();
int goodG2B2_139();
int CWE191_Integer_Underflow__char_fscanf_sub_06_good();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_bad();
int goodB2G1_162();
int goodB2G2_162();
int goodG2B1_140();
int goodG2B2_140();
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_good();
int CWE191_Integer_Underflow__char_fscanf_multiply_17_bad();
int goodB2G_250();
int goodG2B_272();
int CWE191_Integer_Underflow__char_fscanf_multiply_17_good();
__int64 CWE191_Integer_Underflow__char_fscanf_sub_65_bad();
int goodG2B_273();
__int64 goodB2G_251();
__int64 CWE191_Integer_Underflow__char_fscanf_sub_65_good();
int CWE191_Integer_Underflow__char_rand_sub_06_bad();
int goodB2G1_163();
int goodB2G2_163();
int goodG2B1_141();
int goodG2B2_141();
int CWE191_Integer_Underflow__char_rand_sub_06_good();
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_badSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodG2BSink(__int64 *a1);
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodB2GSink(__int64 *a1);
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_43F1B4; // weak
_UNKNOWN unk_43FE28; // weak
_UNKNOWN unk_441EA0; // weak
_UNKNOWN unk_442BB8; // weak
_UNKNOWN unk_4436A4; // weak
_UNKNOWN unk_443700; // weak
_UNKNOWN unk_44534C; // weak
_UNKNOWN unk_44560C; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_662010)(void) = NULL; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue = 1; // weak
int staticFive_1 = 5; // weak
int staticFive_2 = 5; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticFive_3 = 5; // weak
int staticTrue_2 = 1; // weak
int staticFive_4 = 5; // weak
int staticTrue_3 = 1; // weak
int staticFive_5 = 5; // weak
int staticTrue_4 = 1; // weak
int staticFive_6 = 5; // weak
int staticTrue_5 = 1; // weak
int staticTrue_6 = 1; // weak
int staticFive_7 = 5; // weak
int staticTrue_7 = 1; // weak
int staticTrue_8 = 1; // weak
int staticFive_8 = 5; // weak
int staticFive_9 = 5; // weak
int staticTrue_9 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
__int64 stdin; // weak
char completed_6355; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
int CWE191_Integer_Underflow__char_min_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal; // weak
int CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
int CWE191_Integer_Underflow__char_min_sub_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData; // weak
int CWE191_Integer_Underflow__char_rand_sub_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal; // weak
int badStatic_3; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData; // weak
int staticFalse; // weak
int staticFalse_0; // weak
int staticFalse_1; // weak
int staticFalse_2; // weak
int staticFalse_3; // weak
int staticFalse_4; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal; // weak
int badStatic_4; // weak
int goodB2G1Static_4; // weak
int goodB2G2Static_4; // weak
int goodG2BStatic_4; // weak
char CWE191_Integer_Underflow__char_rand_sub_45_badData; // weak
char CWE191_Integer_Underflow__char_rand_sub_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData; // weak
int staticFalse_5; // weak
int badStatic_5; // weak
int goodB2G1Static_5; // weak
int goodB2G2Static_5; // weak
int goodG2BStatic_5; // weak
char CWE191_Integer_Underflow__char_rand_multiply_45_badData; // weak
char CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_45_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData; // weak
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal; // weak
int staticFalse_6; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal; // weak
int badStatic_6; // weak
int goodB2G1Static_6; // weak
int goodB2G2Static_6; // weak
int goodG2BStatic_6; // weak
int staticFalse_7; // weak
int badStatic_7; // weak
int goodB2G1Static_7; // weak
int goodB2G2Static_7; // weak
int goodG2BStatic_7; // weak
int CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal; // weak
int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal; // weak
int badStatic_8; // weak
int goodB2G1Static_8; // weak
int goodB2G2Static_8; // weak
int goodG2BStatic_8; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData; // weak
int staticFalse_8; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_45_badData; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData; // weak
int CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal; // weak
int CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal; // weak
int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global; // weak
int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global; // weak
int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_45_badData; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData; // weak
char CWE191_Integer_Underflow__char_min_multiply_45_badData; // weak
char CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData; // weak
char CWE191_Integer_Underflow__char_min_sub_45_badData; // weak
char CWE191_Integer_Underflow__char_min_sub_45_goodG2BData; // weak
char CWE191_Integer_Underflow__char_min_sub_45_goodB2GData; // weak
int badStatic_9; // weak
int goodB2G1Static_9; // weak
int goodB2G2Static_9; // weak
int goodG2BStatic_9; // weak
int staticFalse_9; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_68_badData; // weak
char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData; // weak
char CWE191_Integer_Underflow__char_min_multiply_68_badData; // weak
char CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_rand_multiply_68_badData; // weak
char CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_68_goodG2BData; // weak
char CWE191_Integer_Underflow__char_fscanf_sub_68_badData; // weak
char CWE191_Integer_Underflow__char_min_sub_68_goodG2BData; // weak
char CWE191_Integer_Underflow__char_min_sub_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_min_sub_68_badData; // weak
char CWE191_Integer_Underflow__char_rand_sub_68_badData; // weak
char CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData; // weak
char CWE191_Integer_Underflow__char_rand_sub_68_goodG2BData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_68_badData; // weak
__int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodG2BData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400928) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400AB0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400950) ----------------------------------------------------
__int64 sub_400950()
{
  return qword_662010();
}
// 662010: using guessed type __int64 (*qword_662010)(void);

//----- (0000000000400AC0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400AC6: positive sp value 8 has been found

//----- (0000000000400AF0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6693167LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6693167LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}
// 662128: using guessed type __int64 stdin;

//----- (0000000000400B20) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400B60) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 662130: using guessed type char completed_6355;

//----- (0000000000400B80) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400B80: could not find valid save-restore pair for rbp

//----- (0000000000400BAD) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_66_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_64_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_03_good();");
  CWE191_Integer_Underflow__char_min_sub_03_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_67_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_06_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_01_good();");
  CWE191_Integer_Underflow__char_min_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_05_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_05_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_31_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_02_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_17_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_17_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_07_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_01_good();");
  CWE191_Integer_Underflow__char_rand_sub_01_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_66_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_54_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_54_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_41_good();");
  CWE191_Integer_Underflow__char_min_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_22_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_07_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_31_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_11_good();");
  CWE191_Integer_Underflow__char_min_sub_11_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_66_good();");
  CWE191_Integer_Underflow__char_rand_sub_66_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_53_good();");
  CWE191_Integer_Underflow__char_min_sub_53_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_52_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_54_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_32_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_02_good();");
  CWE191_Integer_Underflow__char_rand_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_31_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_09_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_18_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_18_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_05_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_15_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_64_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_11_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_31_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_52_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_52_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_21_good();");
  CWE191_Integer_Underflow__char_min_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_31_good();");
  CWE191_Integer_Underflow__char_min_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_22_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_17_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_64_good();");
  CWE191_Integer_Underflow__char_min_sub_64_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_15_good();");
  CWE191_Integer_Underflow__char_min_sub_15_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_03_good();");
  CWE191_Integer_Underflow__char_min_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_05_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_51_good();");
  CWE191_Integer_Underflow__char_rand_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_44_good();");
  CWE191_Integer_Underflow__char_rand_sub_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_34_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_34_good();");
  CWE191_Integer_Underflow__char_rand_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_61_good();");
  CWE191_Integer_Underflow__char_rand_sub_61_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_14_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_22_good();");
  CWE191_Integer_Underflow__char_rand_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_11_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_11_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_21_good();");
  CWE191_Integer_Underflow__char_min_sub_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_09_good();");
  CWE191_Integer_Underflow__char_rand_sub_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_06_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_63_good();");
  CWE191_Integer_Underflow__char_rand_sub_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_63_good();");
  CWE191_Integer_Underflow__char_rand_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_16_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_01_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_18_good();");
  CWE191_Integer_Underflow__char_rand_sub_18_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_01_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_45_good();");
  CWE191_Integer_Underflow__char_min_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_13_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_17_good();");
  CWE191_Integer_Underflow__char_min_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_52_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_52_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_32_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_10_good();");
  CWE191_Integer_Underflow__char_min_sub_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_21_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_21_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_68_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_68_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_16_good();");
  CWE191_Integer_Underflow__char_min_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_65_good();");
  CWE191_Integer_Underflow__char_min_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_15_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_09_good();");
  CWE191_Integer_Underflow__char_min_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_44_good();");
  CWE191_Integer_Underflow__char_min_sub_44_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_16_good();");
  CWE191_Integer_Underflow__char_rand_sub_16_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_07_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_07_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_65_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_11_good();");
  CWE191_Integer_Underflow__char_min_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_17_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_53_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_42_good();");
  CWE191_Integer_Underflow__char_min_sub_42_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_10_good();");
  CWE191_Integer_Underflow__char_min_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_31_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_31_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_16_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_67_good();");
  CWE191_Integer_Underflow__char_rand_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_41_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_41_good();");
  CWE191_Integer_Underflow__char_rand_sub_41_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_31_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_31_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_02_good();");
  CWE191_Integer_Underflow__char_min_sub_02_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_65_good();");
  CWE191_Integer_Underflow__char_rand_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_11_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_14_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_61_good();");
  CWE191_Integer_Underflow__char_min_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_07_good();");
  CWE191_Integer_Underflow__char_min_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_13_good();");
  CWE191_Integer_Underflow__char_rand_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_01_good();");
  CWE191_Integer_Underflow__char_rand_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_66_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_66_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_42_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_42_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_11_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_06_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_42_good();");
  CWE191_Integer_Underflow__char_rand_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_03_good();");
  CWE191_Integer_Underflow__char_rand_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_51_good();");
  CWE191_Integer_Underflow__char_rand_sub_51_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_13_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_68_good();");
  CWE191_Integer_Underflow__char_rand_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_67_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_67_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_18_good();");
  CWE191_Integer_Underflow__char_min_sub_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_51_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_16_good();");
  CWE191_Integer_Underflow__char_rand_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_08_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_61_good();");
  CWE191_Integer_Underflow__char_rand_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_10_good();");
  CWE191_Integer_Underflow__char_rand_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_05_good();");
  CWE191_Integer_Underflow__char_min_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_34_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_42_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_21_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_01_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_65_good();");
  CWE191_Integer_Underflow__char_rand_sub_65_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_21_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_21_good();");
  CWE191_Integer_Underflow__char_rand_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_14_good();");
  CWE191_Integer_Underflow__char_min_sub_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_41_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_41_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_22_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_22_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_12_good();");
  CWE191_Integer_Underflow__char_rand_sub_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_41_good();");
  CWE191_Integer_Underflow__char_rand_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_07_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_10_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_03_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_63_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_68_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_09_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_09_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_07_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_68_good();");
  CWE191_Integer_Underflow__char_rand_sub_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_18_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_10_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_10_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_09_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_66_good();");
  CWE191_Integer_Underflow__char_min_sub_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_68_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_17_good();");
  CWE191_Integer_Underflow__char_min_sub_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_04_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_66_good();");
  CWE191_Integer_Underflow__char_min_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_61_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_52_good();");
  CWE191_Integer_Underflow__char_min_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_52_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_32_good();");
  CWE191_Integer_Underflow__char_min_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_61_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_21_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_63_good();");
  CWE191_Integer_Underflow__char_min_sub_63_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_12_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_08_good();");
  CWE191_Integer_Underflow__char_min_sub_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_21_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_51_good();");
  CWE191_Integer_Underflow__char_min_sub_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_45_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_45_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_41_good();");
  CWE191_Integer_Underflow__char_min_sub_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_31_good();");
  CWE191_Integer_Underflow__char_rand_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_18_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_18_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_65_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_09_good();");
  CWE191_Integer_Underflow__char_min_sub_09_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_54_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_54_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_68_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_10_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_10_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_41_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_09_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_51_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_12_good();");
  CWE191_Integer_Underflow__char_rand_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_12_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_52_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_67_good();");
  CWE191_Integer_Underflow__char_min_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_66_good();");
  CWE191_Integer_Underflow__char_rand_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_17_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_17_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_08_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_13_good();");
  CWE191_Integer_Underflow__char_min_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_51_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_42_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_45_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_44_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_42_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_52_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_52_good();");
  CWE191_Integer_Underflow__char_rand_sub_52_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_12_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_17_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_07_good();");
  CWE191_Integer_Underflow__char_rand_sub_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_53_good();");
  CWE191_Integer_Underflow__char_min_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_16_good();");
  CWE191_Integer_Underflow__char_min_sub_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_08_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_02_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_16_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_32_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_45_good();");
  CWE191_Integer_Underflow__char_rand_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_06_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_01_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_68_good();");
  CWE191_Integer_Underflow__char_min_sub_68_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_65_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_04_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_14_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_17_good();");
  CWE191_Integer_Underflow__char_rand_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_02_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_04_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_66_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_32_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_04_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_18_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_54_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_06_good();");
  CWE191_Integer_Underflow__char_rand_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_21_good();");
  CWE191_Integer_Underflow__char_rand_sub_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_14_good();");
  CWE191_Integer_Underflow__char_min_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_53_good();");
  CWE191_Integer_Underflow__char_rand_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_13_good();");
  CWE191_Integer_Underflow__char_rand_sub_13_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_67_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_13_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_13_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_03_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_03_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_21_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_21_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_12_good();");
  CWE191_Integer_Underflow__char_min_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_67_good();");
  CWE191_Integer_Underflow__char_min_sub_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_63_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_63_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_41_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_61_good();");
  CWE191_Integer_Underflow__char_min_sub_61_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_16_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_14_good();");
  CWE191_Integer_Underflow__char_rand_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_07_good();");
  CWE191_Integer_Underflow__char_min_sub_07_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_15_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_11_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_41_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_17_good();");
  CWE191_Integer_Underflow__char_rand_sub_17_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_22_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_67_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_64_good();");
  CWE191_Integer_Underflow__char_min_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_44_good();");
  CWE191_Integer_Underflow__char_rand_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_04_good();");
  CWE191_Integer_Underflow__char_rand_sub_04_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_53_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_34_good();");
  CWE191_Integer_Underflow__char_rand_sub_34_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_01_good();");
  CWE191_Integer_Underflow__char_min_sub_01_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_04_good();");
  CWE191_Integer_Underflow__char_min_sub_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_44_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_03_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_05_good();");
  CWE191_Integer_Underflow__char_rand_sub_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_51_good();");
  CWE191_Integer_Underflow__char_min_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_15_good();");
  CWE191_Integer_Underflow__char_rand_sub_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_64_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_64_good();");
  CWE191_Integer_Underflow__char_rand_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_18_good();");
  CWE191_Integer_Underflow__char_rand_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_53_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_64_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_08_good();");
  CWE191_Integer_Underflow__char_rand_sub_08_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_18_good();");
  CWE191_Integer_Underflow__char_min_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_08_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_08_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_22_good();");
  CWE191_Integer_Underflow__char_min_multiply_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_44_good();");
  CWE191_Integer_Underflow__char_min_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_66_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_66_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_66_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_54_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_09_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_09_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_22_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_53_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_14_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_02_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_02_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_03_good();");
  CWE191_Integer_Underflow__char_rand_sub_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_13_good();");
  CWE191_Integer_Underflow__char_min_sub_13_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_34_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_03_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_16_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_16_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_06_good();");
  CWE191_Integer_Underflow__char_min_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_67_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_08_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_45_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_64_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_12_good();");
  CWE191_Integer_Underflow__char_min_sub_12_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_44_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_14_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_14_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_04_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_04_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_16_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_16_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_32_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_02_good();");
  CWE191_Integer_Underflow__char_min_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_32_good();");
  CWE191_Integer_Underflow__char_rand_sub_32_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_44_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_44_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_52_good();");
  CWE191_Integer_Underflow__char_rand_multiply_52_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_68_good();");
  CWE191_Integer_Underflow__char_min_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_61_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_15_good();");
  CWE191_Integer_Underflow__char_min_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_68_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_68_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_04_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_54_good();");
  CWE191_Integer_Underflow__char_min_sub_54_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_68_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_68_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_34_good();");
  CWE191_Integer_Underflow__char_min_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_03_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_05_good();");
  CWE191_Integer_Underflow__char_min_sub_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_54_good();");
  CWE191_Integer_Underflow__char_min_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_34_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_34_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_44_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_07_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_07_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_02_good();");
  CWE191_Integer_Underflow__char_rand_sub_02_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_31_good();");
  CWE191_Integer_Underflow__char_rand_sub_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_22_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_51_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_51_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_09_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_42_good();");
  CWE191_Integer_Underflow__char_min_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_34_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_34_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_31_good();");
  CWE191_Integer_Underflow__char_min_sub_31_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_53_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_53_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_61_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_07_good();");
  CWE191_Integer_Underflow__char_rand_multiply_07_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_51_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_12_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_06_good();");
  CWE191_Integer_Underflow__char_min_sub_06_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_05_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_06_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_06_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_34_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_32_good();");
  CWE191_Integer_Underflow__char_rand_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_53_good();");
  CWE191_Integer_Underflow__char_rand_sub_53_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_42_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_14_good();");
  CWE191_Integer_Underflow__char_rand_sub_14_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_67_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_64_good();");
  CWE191_Integer_Underflow__char_rand_sub_64_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_63_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_08_good();");
  CWE191_Integer_Underflow__char_min_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_65_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_65_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_18_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_18_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_45_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_05_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_05_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_01_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_01_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_61_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_22_good();");
  CWE191_Integer_Underflow__char_min_sub_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_13_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_13_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_05_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_09_good();");
  CWE191_Integer_Underflow__char_rand_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_04_good();");
  CWE191_Integer_Underflow__char_min_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_67_good();");
  CWE191_Integer_Underflow__char_rand_sub_67_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_18_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_18_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_02_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_06_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_06_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_11_good();");
  CWE191_Integer_Underflow__char_rand_sub_11_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_15_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_10_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_65_good();");
  CWE191_Integer_Underflow__char_min_sub_65_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_64_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_64_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_22_good();");
  CWE191_Integer_Underflow__char_rand_sub_22_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_15_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_15_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_15_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_10_good();");
  CWE191_Integer_Underflow__char_rand_sub_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_12_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_15_good();");
  CWE191_Integer_Underflow__char_rand_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_41_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_41_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_52_good();");
  CWE191_Integer_Underflow__char_min_sub_52_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_42_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_42_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_34_good();");
  CWE191_Integer_Underflow__char_min_sub_34_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_06_good();");
  CWE191_Integer_Underflow__char_rand_sub_06_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_08_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_08_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_02_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_02_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_10_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_10_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_65_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_54_good();");
  CWE191_Integer_Underflow__char_rand_multiply_54_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_17_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_17_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_61_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_61_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_32_good();");
  CWE191_Integer_Underflow__char_min_sub_32_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_63_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_10_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_10_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_12_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_12_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_63_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_63_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_14_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_42_good();");
  CWE191_Integer_Underflow__char_rand_sub_42_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_11_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_65_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_65_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_45_good();");
  CWE191_Integer_Underflow__char_min_sub_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_45_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_45_good();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_63_good();");
  CWE191_Integer_Underflow__char_min_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_05_good();");
  CWE191_Integer_Underflow__char_rand_multiply_05_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_01_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_01_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_51_good();");
  CWE191_Integer_Underflow__int64_t_min_sub_51_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_63_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_63_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_45_good();");
  CWE191_Integer_Underflow__char_rand_sub_45_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_08_good();");
  CWE191_Integer_Underflow__char_rand_multiply_08_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_32_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_32_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_54_good();");
  CWE191_Integer_Underflow__char_rand_sub_54_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_13_good();");
  CWE191_Integer_Underflow__char_fscanf_sub_13_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_13_good();");
  CWE191_Integer_Underflow__char_fscanf_multiply_13_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_53_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_53_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_44_good();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_44_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_11_good();");
  CWE191_Integer_Underflow__char_rand_multiply_11_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_45_good();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_45_good();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_03_good();");
  CWE191_Integer_Underflow__int64_t_min_multiply_03_good();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_04_good();");
  CWE191_Integer_Underflow__char_rand_multiply_04_good();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_66_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_64_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_03_bad();");
  CWE191_Integer_Underflow__char_min_sub_03_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_67_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_06_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_01_bad();");
  CWE191_Integer_Underflow__char_min_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_05_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_05_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_31_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_02_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_17_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_17_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_07_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_01_bad();");
  CWE191_Integer_Underflow__char_rand_sub_01_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_66_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_54_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_54_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_41_bad();");
  CWE191_Integer_Underflow__char_min_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_22_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_07_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_31_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_11_bad();");
  CWE191_Integer_Underflow__char_min_sub_11_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_66_bad();");
  CWE191_Integer_Underflow__char_rand_sub_66_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_53_bad();");
  CWE191_Integer_Underflow__char_min_sub_53_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_52_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_54_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_32_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_02_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_31_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_09_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_18_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_18_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_05_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_15_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_64_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_11_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_31_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_52_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_52_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_21_bad();");
  CWE191_Integer_Underflow__char_min_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_31_bad();");
  CWE191_Integer_Underflow__char_min_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_22_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_17_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_64_bad();");
  CWE191_Integer_Underflow__char_min_sub_64_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_15_bad();");
  CWE191_Integer_Underflow__char_min_sub_15_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_03_bad();");
  CWE191_Integer_Underflow__char_min_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_05_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_51_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_44_bad();");
  CWE191_Integer_Underflow__char_rand_sub_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_34_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_34_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_61_bad();");
  CWE191_Integer_Underflow__char_rand_sub_61_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_14_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_22_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_11_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_11_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_21_bad();");
  CWE191_Integer_Underflow__char_min_sub_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_09_bad();");
  CWE191_Integer_Underflow__char_rand_sub_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_06_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_63_bad();");
  CWE191_Integer_Underflow__char_rand_sub_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_63_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_16_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_01_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_18_bad();");
  CWE191_Integer_Underflow__char_rand_sub_18_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_01_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_45_bad();");
  CWE191_Integer_Underflow__char_min_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_13_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_17_bad();");
  CWE191_Integer_Underflow__char_min_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_52_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_52_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_32_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_10_bad();");
  CWE191_Integer_Underflow__char_min_sub_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_21_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_21_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_68_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_68_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_16_bad();");
  CWE191_Integer_Underflow__char_min_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_65_bad();");
  CWE191_Integer_Underflow__char_min_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_15_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_09_bad();");
  CWE191_Integer_Underflow__char_min_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_44_bad();");
  CWE191_Integer_Underflow__char_min_sub_44_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_16_bad();");
  CWE191_Integer_Underflow__char_rand_sub_16_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_07_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_07_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_65_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_11_bad();");
  CWE191_Integer_Underflow__char_min_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_17_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_53_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_42_bad();");
  CWE191_Integer_Underflow__char_min_sub_42_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_10_bad();");
  CWE191_Integer_Underflow__char_min_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_31_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_31_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_16_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_67_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_41_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_41_bad();");
  CWE191_Integer_Underflow__char_rand_sub_41_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_31_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_31_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_02_bad();");
  CWE191_Integer_Underflow__char_min_sub_02_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_65_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_11_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_14_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_61_bad();");
  CWE191_Integer_Underflow__char_min_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_07_bad();");
  CWE191_Integer_Underflow__char_min_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_13_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_01_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_66_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_66_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_42_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_42_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_11_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_06_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_42_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_03_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_51_bad();");
  CWE191_Integer_Underflow__char_rand_sub_51_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_13_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_68_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_67_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_67_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_18_bad();");
  CWE191_Integer_Underflow__char_min_sub_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_51_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_16_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_08_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_61_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_10_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_05_bad();");
  CWE191_Integer_Underflow__char_min_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_34_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_42_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_21_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_01_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_65_bad();");
  CWE191_Integer_Underflow__char_rand_sub_65_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_21_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_21_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_14_bad();");
  CWE191_Integer_Underflow__char_min_sub_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_41_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_41_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_22_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_22_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_12_bad();");
  CWE191_Integer_Underflow__char_rand_sub_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_41_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_07_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_10_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_03_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_63_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_68_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_09_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_09_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_07_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_68_bad();");
  CWE191_Integer_Underflow__char_rand_sub_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_18_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_10_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_10_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_09_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_66_bad();");
  CWE191_Integer_Underflow__char_min_sub_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_68_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_17_bad();");
  CWE191_Integer_Underflow__char_min_sub_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_04_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_66_bad();");
  CWE191_Integer_Underflow__char_min_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_61_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_52_bad();");
  CWE191_Integer_Underflow__char_min_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_52_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_32_bad();");
  CWE191_Integer_Underflow__char_min_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_61_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_21_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_63_bad();");
  CWE191_Integer_Underflow__char_min_sub_63_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_12_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_08_bad();");
  CWE191_Integer_Underflow__char_min_sub_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_21_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_51_bad();");
  CWE191_Integer_Underflow__char_min_sub_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_45_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_45_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_41_bad();");
  CWE191_Integer_Underflow__char_min_sub_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_31_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_18_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_18_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_65_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_09_bad();");
  CWE191_Integer_Underflow__char_min_sub_09_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_54_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_54_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_68_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_10_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_10_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_41_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_09_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_51_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_12_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_12_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_52_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_67_bad();");
  CWE191_Integer_Underflow__char_min_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_66_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_17_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_17_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_08_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_13_bad();");
  CWE191_Integer_Underflow__char_min_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_51_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_42_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_45_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_44_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_42_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_52_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_52_bad();");
  CWE191_Integer_Underflow__char_rand_sub_52_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_12_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_17_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_07_bad();");
  CWE191_Integer_Underflow__char_rand_sub_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_53_bad();");
  CWE191_Integer_Underflow__char_min_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_16_bad();");
  CWE191_Integer_Underflow__char_min_sub_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_08_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_16_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_32_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_45_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_06_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_01_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_68_bad();");
  CWE191_Integer_Underflow__char_min_sub_68_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_65_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_04_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_14_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_17_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_02_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_04_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_04_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_66_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_32_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_18_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_54_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_06_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_21_bad();");
  CWE191_Integer_Underflow__char_rand_sub_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_14_bad();");
  CWE191_Integer_Underflow__char_min_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_53_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_13_bad();");
  CWE191_Integer_Underflow__char_rand_sub_13_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_67_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_13_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_13_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_03_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_03_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_21_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_21_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_12_bad();");
  CWE191_Integer_Underflow__char_min_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_67_bad();");
  CWE191_Integer_Underflow__char_min_sub_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_63_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_63_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_41_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_61_bad();");
  CWE191_Integer_Underflow__char_min_sub_61_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_16_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_14_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_07_bad();");
  CWE191_Integer_Underflow__char_min_sub_07_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_15_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_11_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_41_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_17_bad();");
  CWE191_Integer_Underflow__char_rand_sub_17_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_22_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_67_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_64_bad();");
  CWE191_Integer_Underflow__char_min_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_44_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_04_bad();");
  CWE191_Integer_Underflow__char_rand_sub_04_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_53_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_34_bad();");
  CWE191_Integer_Underflow__char_rand_sub_34_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_01_bad();");
  CWE191_Integer_Underflow__char_min_sub_01_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_04_bad();");
  CWE191_Integer_Underflow__char_min_sub_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_44_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_03_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_05_bad();");
  CWE191_Integer_Underflow__char_rand_sub_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_51_bad();");
  CWE191_Integer_Underflow__char_min_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_15_bad();");
  CWE191_Integer_Underflow__char_rand_sub_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_64_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_64_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_18_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_53_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_64_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_08_bad();");
  CWE191_Integer_Underflow__char_rand_sub_08_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_18_bad();");
  CWE191_Integer_Underflow__char_min_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_08_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_08_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_22_bad();");
  CWE191_Integer_Underflow__char_min_multiply_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_44_bad();");
  CWE191_Integer_Underflow__char_min_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_66_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_66_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_66_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_54_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_09_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_09_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_22_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_53_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_14_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_02_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_02_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_03_bad();");
  CWE191_Integer_Underflow__char_rand_sub_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_13_bad();");
  CWE191_Integer_Underflow__char_min_sub_13_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_34_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_03_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_16_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_16_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_06_bad();");
  CWE191_Integer_Underflow__char_min_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_67_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_08_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_45_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_64_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_12_bad();");
  CWE191_Integer_Underflow__char_min_sub_12_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_44_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_14_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_14_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_04_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_04_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_16_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_16_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_32_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_02_bad();");
  CWE191_Integer_Underflow__char_min_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_32_bad();");
  CWE191_Integer_Underflow__char_rand_sub_32_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_44_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_44_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_52_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_52_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_68_bad();");
  CWE191_Integer_Underflow__char_min_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_61_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_15_bad();");
  CWE191_Integer_Underflow__char_min_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_68_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_68_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_04_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_54_bad();");
  CWE191_Integer_Underflow__char_min_sub_54_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_68_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_68_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_34_bad();");
  CWE191_Integer_Underflow__char_min_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_03_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_05_bad();");
  CWE191_Integer_Underflow__char_min_sub_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_54_bad();");
  CWE191_Integer_Underflow__char_min_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_34_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_34_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_44_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_07_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_07_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_02_bad();");
  CWE191_Integer_Underflow__char_rand_sub_02_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_31_bad();");
  CWE191_Integer_Underflow__char_rand_sub_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_22_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_51_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_51_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_09_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_42_bad();");
  CWE191_Integer_Underflow__char_min_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_34_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_34_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_31_bad();");
  CWE191_Integer_Underflow__char_min_sub_31_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_53_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_53_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_61_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_07_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_07_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_51_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_12_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_06_bad();");
  CWE191_Integer_Underflow__char_min_sub_06_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_05_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_06_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_06_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_34_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_32_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_53_bad();");
  CWE191_Integer_Underflow__char_rand_sub_53_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_42_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_14_bad();");
  CWE191_Integer_Underflow__char_rand_sub_14_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_67_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_64_bad();");
  CWE191_Integer_Underflow__char_rand_sub_64_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_63_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_08_bad();");
  CWE191_Integer_Underflow__char_min_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_65_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_65_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_18_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_18_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_45_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_05_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_05_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_01_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_01_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_61_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_22_bad();");
  CWE191_Integer_Underflow__char_min_sub_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_13_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_13_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_05_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_09_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_04_bad();");
  CWE191_Integer_Underflow__char_min_multiply_04_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_67_bad();");
  CWE191_Integer_Underflow__char_rand_sub_67_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_18_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_18_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_02_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_06_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_06_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_11_bad();");
  CWE191_Integer_Underflow__char_rand_sub_11_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_15_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_10_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_65_bad();");
  CWE191_Integer_Underflow__char_min_sub_65_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_64_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_64_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_22_bad();");
  CWE191_Integer_Underflow__char_rand_sub_22_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_15_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_15_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_15_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_10_bad();");
  CWE191_Integer_Underflow__char_rand_sub_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_12_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_15_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_41_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_41_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_52_bad();");
  CWE191_Integer_Underflow__char_min_sub_52_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_42_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_42_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_34_bad();");
  CWE191_Integer_Underflow__char_min_sub_34_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_06_bad();");
  CWE191_Integer_Underflow__char_rand_sub_06_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_08_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_08_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_02_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_02_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_10_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_10_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_65_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_54_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_54_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_17_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_17_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_61_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_61_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_32_bad();");
  CWE191_Integer_Underflow__char_min_sub_32_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_63_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_10_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_10_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_12_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_12_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_63_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_63_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_14_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_42_bad();");
  CWE191_Integer_Underflow__char_rand_sub_42_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_11_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_65_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_65_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_sub_45_bad();");
  CWE191_Integer_Underflow__char_min_sub_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_45_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_45_bad();
  printLine("Calling CWE191_Integer_Underflow__char_min_multiply_63_bad();");
  CWE191_Integer_Underflow__char_min_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_05_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_05_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_01_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_01_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_sub_51_bad();");
  CWE191_Integer_Underflow__int64_t_min_sub_51_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_63_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_63_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_45_bad();");
  CWE191_Integer_Underflow__char_rand_sub_45_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_08_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_08_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_32_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_32_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_sub_54_bad();");
  CWE191_Integer_Underflow__char_rand_sub_54_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_sub_13_bad();");
  CWE191_Integer_Underflow__char_fscanf_sub_13_bad();
  printLine("Calling CWE191_Integer_Underflow__char_fscanf_multiply_13_bad();");
  CWE191_Integer_Underflow__char_fscanf_multiply_13_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_53_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_53_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad();");
  CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_11_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_11_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_fscanf_sub_45_bad();");
  CWE191_Integer_Underflow__int64_t_fscanf_sub_45_bad();
  printLine("Calling CWE191_Integer_Underflow__int64_t_min_multiply_03_bad();");
  CWE191_Integer_Underflow__int64_t_min_multiply_03_bad();
  printLine("Calling CWE191_Integer_Underflow__char_rand_multiply_04_bad();");
  CWE191_Integer_Underflow__char_rand_multiply_04_bad();
  return 0;
}
// 66235C: using guessed type int globalArgc;
// 662360: using guessed type __int64 globalArgv;

//----- (0000000000404D38) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54e_badSink(a1);
}

//----- (0000000000404D52) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54e_goodG2BSink(a1);
}

//----- (0000000000404D6C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54e_goodB2GSink(a1);
}

//----- (0000000000404D86) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_53_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53b_badSink(v4);
}

//----- (0000000000404E43) ----------------------------------------------------
int goodG2B()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodG2BSink(-2LL);
}

//----- (0000000000404E69) ----------------------------------------------------
int goodB2G()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodB2GSink(v4);
}

//----- (0000000000404F26) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_53_good()
{
  goodG2B();
  return goodB2G();
}

//----- (0000000000404F40) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43F1B4, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000404FA3) ----------------------------------------------------
int goodB2G1()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43F1B4, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405031) ----------------------------------------------------
int goodB2G2()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43F1B4, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004050B3) ----------------------------------------------------
int goodG2B1()
{
  return printLongLongLine(-4LL);
}

//----- (000000000040510B) ----------------------------------------------------
int goodG2B2()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000405157) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_06_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  return goodG2B2();
}

//----- (0000000000405185) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54d_badSink(a1);
}

//----- (000000000040519F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54d_goodG2BSink(a1);
}

//----- (00000000004051B9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54d_goodB2GSink(a1);
}

//----- (00000000004051D3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_53_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040520E) ----------------------------------------------------
int goodG2B_0()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodG2BSink(-2LL);
}

//----- (0000000000405234) ----------------------------------------------------
int goodB2G_0()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040526F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_53_good()
{
  goodG2B_0();
  return goodB2G_0();
}

//----- (0000000000405289) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54d_badSink(a1);
}

//----- (00000000004052A3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54d_goodG2BSink(a1);
}

//----- (00000000004052BD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54d_goodB2GSink(a1);
}

//----- (00000000004052D7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_01_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000405330) ----------------------------------------------------
int goodG2B_1()
{
  return printHexCharLine(252);
}

//----- (000000000040535C) ----------------------------------------------------
int goodB2G_1()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (00000000004053C7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_01_good()
{
  goodG2B_1();
  return goodB2G_1();
}

//----- (00000000004053E1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_52_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52b_badSink(0x8000000000000000LL);
}

//----- (000000000040540D) ----------------------------------------------------
int goodG2B_2()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodG2BSink(-2LL);
}

//----- (0000000000405433) ----------------------------------------------------
int goodB2G_2()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000040545F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_52_good()
{
  goodG2B_2();
  return goodB2G_2();
}

//----- (0000000000405479) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004054A2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004054CB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000405506) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_01_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405546) ----------------------------------------------------
int goodG2B_3()
{
  return printHexCharLine(-3);
}

//----- (000000000040556D) ----------------------------------------------------
int goodB2G_3()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004055C1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_01_good()
{
  goodG2B_3();
  return goodB2G_3();
}

//----- (00000000004055DB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53d_badSink(a1);
}

//----- (00000000004055F5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodG2BSink(a1);
}

//----- (000000000040560F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodB2GSink(a1);
}

//----- (0000000000405629) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_13_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405693) ----------------------------------------------------
int goodB2G1_0()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040571B) ----------------------------------------------------
int goodB2G2_0()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405797) ----------------------------------------------------
int goodG2B1_0()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004057E0) ----------------------------------------------------
int goodG2B2_0()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040581D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_13_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (000000000040584B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_12_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = -128;
  else
    v1 = -2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v1 - 1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}

//----- (00000000004058BD) ----------------------------------------------------
int goodB2G_4()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000405941) ----------------------------------------------------
int goodG2B_4()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(253);
}

//----- (00000000004059A1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_12_good()
{
  goodB2G_4();
  return goodG2B_4();
}

//----- (00000000004059BB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_16_bad()
{
  return printLongLongLine(0LL);
}

//----- (00000000004059FB) ----------------------------------------------------
int goodB2G_5()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000405A57) ----------------------------------------------------
int goodG2B_5()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000405A91) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_16_good()
{
  goodB2G_5();
  return goodG2B_5();
}

//----- (0000000000405AAB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405AE2) ----------------------------------------------------
int goodG2B_6()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_fscanf_sub_63b_goodG2BSink(&v1);
}

//----- (0000000000405B00) ----------------------------------------------------
int goodB2G_6()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405B37) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_63_good()
{
  goodG2B_6();
  return goodB2G_6();
}

//----- (0000000000405B51) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (0000000000405B7F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (0000000000405BAD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v2 - 1);
  return result;
}

//----- (0000000000405BED) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_65_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__char_fscanf_multiply_65b_badSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405C2F) ----------------------------------------------------
int goodG2B_7()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodG2BSink(-2);
}

//----- (0000000000405C55) ----------------------------------------------------
__int64 goodB2G_7()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodB2GSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405C97) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_65_good()
{
  goodG2B_7();
  return goodB2G_7();
}

//----- (0000000000405CB1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000405CD5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000405CF9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000405D2F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405D80) ----------------------------------------------------
int goodB2G_8()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000405DF0) ----------------------------------------------------
int goodG2B_8()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000405E2A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_18_good()
{
  goodB2G_8();
  return goodG2B_8();
}

//----- (0000000000405E44) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000405E83) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000405EC2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+20h] [rbp-10h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000405F1D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52c_badSink(a1);
}

//----- (0000000000405F37) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodG2BSink(a1);
}

//----- (0000000000405F51) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodB2GSink(a1);
}

//----- (0000000000405F6B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_09_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000405FD8) ----------------------------------------------------
int goodB2G1_1()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000406063) ----------------------------------------------------
int goodB2G2_1()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004060E2) ----------------------------------------------------
int goodG2B1_1()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040612E) ----------------------------------------------------
int goodG2B2_1()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040616E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_09_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_1();
  return goodG2B2_1();
}

//----- (000000000040619C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53c_badSink(a1);
}

//----- (00000000004061B6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53c_goodG2BSink(a1);
}

//----- (00000000004061D0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53c_goodB2GSink(a1);
}

//----- (00000000004061EA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_54_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_54b_badSink(-128);
}

//----- (0000000000406207) ----------------------------------------------------
int goodG2B_9()
{
  return CWE191_Integer_Underflow__char_min_multiply_54b_goodG2BSink(-2);
}

//----- (0000000000406224) ----------------------------------------------------
int goodB2G_9()
{
  return CWE191_Integer_Underflow__char_min_multiply_54b_goodB2GSink(-128);
}

//----- (0000000000406241) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_54_good()
{
  goodG2B_9();
  return goodB2G_9();
}

//----- (000000000040625B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_badSink(a1);
}

//----- (0000000000406275) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodG2BSink(a1);
}

//----- (000000000040628F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodB2GSink(a1);
}

//----- (00000000004062A9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_badSink(a1);
}

//----- (00000000004062C3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodG2BSink(a1);
}

//----- (00000000004062DD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodB2GSink(a1);
}

//----- (00000000004062F7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_09_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (000000000040634B) ----------------------------------------------------
int goodB2G1_2()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;
// 662128: using guessed type __int64 stdin;

//----- (00000000004063BF) ----------------------------------------------------
int goodB2G2_2()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000406427) ----------------------------------------------------
int goodG2B1_2()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040646E) ----------------------------------------------------
int goodG2B2_2()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004064A9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_09_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (00000000004064D7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (00000000004064FD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000406523) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000406565) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (0000000000406570) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (000000000040657B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_08_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue();
  if ( result )
    result = printHexCharLine(v2 - 1);
  return result;
}

//----- (00000000004065EB) ----------------------------------------------------
int goodB2G1_3()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}

//----- (0000000000406679) ----------------------------------------------------
int goodB2G2_3()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue();
  if ( result )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}

//----- (00000000004066FB) ----------------------------------------------------
int goodG2B1_3()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000040674A) ----------------------------------------------------
int goodG2B2_3()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue() )
    v1 = -2;
  result = staticReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000040678D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_08_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (00000000004067BB) ----------------------------------------------------
int __fastcall badSink(char a1)
{
  int result; // eax

  result = badStatic;
  if ( badStatic )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 662134: using guessed type int badStatic;

//----- (00000000004067E9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_21_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  badStatic = 1;
  return badSink(v0);
}
// 662134: using guessed type int badStatic;

//----- (000000000040683D) ----------------------------------------------------
int __fastcall goodB2G1Sink(char a1)
{
  if ( goodB2G1Static )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 662138: using guessed type int goodB2G1Static;

//----- (0000000000406889) ----------------------------------------------------
int goodB2G1_4()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G1Static = 0;
  return goodB2G1Sink(v0);
}
// 662138: using guessed type int goodB2G1Static;

//----- (00000000004068DD) ----------------------------------------------------
int __fastcall goodB2G2Sink(char a1)
{
  int result; // eax

  result = goodB2G2Static;
  if ( goodB2G2Static )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 66213C: using guessed type int goodB2G2Static;

//----- (000000000040691D) ----------------------------------------------------
int goodB2G2_4()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G2Static = 1;
  return goodB2G2Sink(v0);
}
// 66213C: using guessed type int goodB2G2Static;

//----- (0000000000406971) ----------------------------------------------------
int __fastcall goodG2BSink(char a1)
{
  int result; // eax

  result = goodG2BStatic;
  if ( goodG2BStatic )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 662140: using guessed type int goodG2BStatic;

//----- (000000000040699F) ----------------------------------------------------
int goodG2B_10()
{
  goodG2BStatic = 1;
  return goodG2BSink(-2);
}
// 662140: using guessed type int goodG2BStatic;

//----- (00000000004069C6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_21_good()
{
  goodB2G1_4();
  goodB2G2_4();
  return goodG2B_10();
}

//----- (00000000004069EA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_03_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (0000000000406A3E) ----------------------------------------------------
int goodB2G1_5()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000406AA4) ----------------------------------------------------
int goodB2G2_5()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000406B0A) ----------------------------------------------------
int goodG2B1_4()
{
  return printHexCharLine(-3);
}

//----- (0000000000406B31) ----------------------------------------------------
int goodG2B2_4()
{
  return printHexCharLine(-3);
}

//----- (0000000000406B58) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_03_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (0000000000406B86) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000406BD5) ----------------------------------------------------
int goodB2G1_6()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000406C43) ----------------------------------------------------
int goodB2G2_6()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000406CB1) ----------------------------------------------------
int goodG2B1_5()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000406CE9) ----------------------------------------------------
int goodG2B2_5()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000406D21) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_03_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B1_5();
  return goodG2B2_5();
}

//----- (0000000000406D4F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_68_badData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_68_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_68_badData);
  return result;
}
// 662369: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_badData;

//----- (0000000000406D7D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData);
  return result;
}
// 66236A: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData;

//----- (0000000000406DAB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData);
  }
  return result;
}
// 662368: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData;

//----- (0000000000406DEB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_18_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (0000000000406E41) ----------------------------------------------------
int goodB2G_10()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000406EA9) ----------------------------------------------------
int goodG2B_11()
{
  return printHexCharLine(-3);
}

//----- (0000000000406ED2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_18_good()
{
  goodB2G_10();
  return goodG2B_11();
}

//----- (0000000000406EEC) ----------------------------------------------------
int badSink_0()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_45_badData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_45_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_45_badData);
  return result;
}
// 662148: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_badData;

//----- (0000000000406F1F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_45_bad()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_45_badData = 0x8000000000000000LL;
  return badSink_0();
}
// 662148: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_badData;

//----- (0000000000406F54) ----------------------------------------------------
int goodG2BSink_0()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData);
  return result;
}
// 662150: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData;

//----- (0000000000406F87) ----------------------------------------------------
int goodG2B_12()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData = -2LL;
  return goodG2BSink_0();
}
// 662150: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodG2BData;

//----- (0000000000406FB6) ----------------------------------------------------
int goodB2GSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData);
  }
  return result;
}
// 662158: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData;

//----- (0000000000407005) ----------------------------------------------------
int goodB2G_11()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData = 0x8000000000000000LL;
  return goodB2GSink();
}
// 662158: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_45_goodB2GData;

//----- (000000000040703A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_45_good()
{
  goodG2B_12();
  return goodB2G_11();
}

//----- (0000000000407054) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_10_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040708F) ----------------------------------------------------
int goodB2G1_7()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (00000000004070E8) ----------------------------------------------------
int goodB2G2_7()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000407135) ----------------------------------------------------
int goodG2B1_6()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000040717C) ----------------------------------------------------
int goodG2B2_6()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (00000000004071B7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_10_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (00000000004071E5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54c_badSink(a1);
}

//----- (00000000004071FF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000407219) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54c_goodB2GSink(a1);
}

//----- (0000000000407233) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_52_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52b_badSink(v4);
}

//----- (00000000004072F0) ----------------------------------------------------
int goodG2B_13()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodG2BSink(-2LL);
}

//----- (0000000000407316) ----------------------------------------------------
int goodB2G_12()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_52b_goodB2GSink(v4);
}

//----- (00000000004073D3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_52_good()
{
  goodG2B_13();
  return goodB2G_12();
}

//----- (00000000004073ED) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407428) ----------------------------------------------------
int goodG2B_14()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000040744E) ----------------------------------------------------
int goodB2G_13()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407489) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_64_good()
{
  goodG2B_14();
  return goodB2G_13();
}

//----- (00000000004074A3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_53_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53b_badSink(0x8000000000000000LL);
}

//----- (00000000004074CF) ----------------------------------------------------
int goodG2B_15()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53b_goodG2BSink(-2LL);
}

//----- (00000000004074F5) ----------------------------------------------------
int goodB2G_14()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53b_goodB2GSink(0x8000000000000000LL);
}

//----- (0000000000407521) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_53_good()
{
  goodG2B_15();
  return goodB2G_14();
}

//----- (000000000040753B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54d_badSink(a1);
}

//----- (0000000000407555) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54d_goodG2BSink(a1);
}

//----- (000000000040756F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54d_goodB2GSink(a1);
}

//----- (0000000000407589) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004075B5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004075E1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000407629) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54c_badSink(a1);
}

//----- (0000000000407643) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54c_goodG2BSink(a1);
}

//----- (000000000040765D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54c_goodB2GSink(a1);
}

//----- (0000000000407677) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004076AA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004076DD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000407722) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_52_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040775D) ----------------------------------------------------
int goodG2B_16()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodG2BSink(-2LL);
}

//----- (0000000000407783) ----------------------------------------------------
int goodB2G_15()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004077BE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_52_good()
{
  goodG2B_16();
  return goodB2G_15();
}

//----- (00000000004077D8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_53_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_53b_badSink(-128);
}

//----- (00000000004077F5) ----------------------------------------------------
int goodG2B_17()
{
  return CWE191_Integer_Underflow__char_min_sub_53b_goodG2BSink(-2);
}

//----- (0000000000407812) ----------------------------------------------------
int goodB2G_16()
{
  return CWE191_Integer_Underflow__char_min_sub_53b_goodB2GSink(-128);
}

//----- (000000000040782F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_53_good()
{
  goodG2B_17();
  return goodB2G_16();
}

//----- (0000000000407849) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_12_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  else
  {
    v2 = -2;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v2 - 1);
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}

//----- (00000000004078E8) ----------------------------------------------------
int goodB2G_17()
{
  int v0; // eax
  int v1; // eax
  int result; // eax
  char v3; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v3 = v0;
  }
  else
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v1) = rand();
    }
    else
    {
      rand();
      rand();
      v1 = ~rand();
    }
    v3 = v1;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v3 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v3 - 1);
  }
  else if ( v3 == -128 )
  {
    result = printLine("data value is too large to perform subtraction.");
  }
  else
  {
    result = printHexCharLine(v3 - 1);
  }
  return result;
}

//----- (00000000004079C6) ----------------------------------------------------
int goodG2B_18()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(253);
}

//----- (0000000000407A26) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_12_good()
{
  goodB2G_17();
  return goodG2B_18();
}

//----- (0000000000407A40) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000407A66) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000407A8C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000407ACE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53c_badSink(a1);
}

//----- (0000000000407AE8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodG2BSink(a1);
}

//----- (0000000000407B02) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53c_goodB2GSink(a1);
}

//----- (0000000000407B1C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53d_badSink(a1);
}

//----- (0000000000407B36) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53d_goodG2BSink(a1);
}

//----- (0000000000407B50) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53d_goodB2GSink(a1);
}

//----- (0000000000407B6A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000407B8E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000407BB2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000407BE8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_16_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407C31) ----------------------------------------------------
int goodB2G_18()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407C99) ----------------------------------------------------
int goodG2B_19()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000407CCD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_16_good()
{
  goodB2G_18();
  return goodG2B_19();
}

//----- (0000000000407CE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000407D10) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000407D39) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000407D74) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_68_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_68_badData = v1;
  return CWE191_Integer_Underflow__char_fscanf_multiply_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662369: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_badData;

//----- (0000000000407DB3) ----------------------------------------------------
int goodG2B_20()
{
  CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodG2BSink();
}
// 66236A: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodG2BData;

//----- (0000000000407DD9) ----------------------------------------------------
int goodB2G_19()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData = v1;
  return CWE191_Integer_Underflow__char_fscanf_multiply_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662368: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_68_goodB2GData;

//----- (0000000000407E18) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_68_good()
{
  goodG2B_20();
  return goodB2G_19();
}

//----- (0000000000407E32) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_15_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407E74) ----------------------------------------------------
int goodB2G1_8()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407ECA) ----------------------------------------------------
int goodB2G2_8()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000407F20) ----------------------------------------------------
int goodG2B1_7()
{
  return printHexCharLine(-3);
}

//----- (0000000000407F49) ----------------------------------------------------
int goodG2B2_7()
{
  return printHexCharLine(-3);
}

//----- (0000000000407F72) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_15_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_7();
  return goodG2B2_7();
}

//----- (0000000000407FA0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_65_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_65b_badSink(-128);
}

//----- (0000000000407FC6) ----------------------------------------------------
int goodG2B_21()
{
  return CWE191_Integer_Underflow__char_min_multiply_65b_goodG2BSink(-2);
}

//----- (0000000000407FEC) ----------------------------------------------------
int goodB2G_20()
{
  return CWE191_Integer_Underflow__char_min_multiply_65b_goodB2GSink(-128);
}

//----- (0000000000408012) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_65_good()
{
  goodG2B_21();
  return goodB2G_20();
}

//----- (000000000040802C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000040806B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (00000000004080AA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+20h] [rbp-10h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000408105) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_51_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_51b_badSink(v4);
}

//----- (00000000004081C2) ----------------------------------------------------
int goodG2B_22()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodG2BSink(-2LL);
}

//----- (00000000004081E8) ----------------------------------------------------
int goodB2G_21()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_51b_goodB2GSink(v4);
}

//----- (00000000004082A5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_51_good()
{
  goodG2B_22();
  return goodB2G_21();
}

//----- (00000000004082BF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_54_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004082F8) ----------------------------------------------------
int goodG2B_23()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54b_goodG2BSink(-2);
}

//----- (0000000000408315) ----------------------------------------------------
int goodB2G_22()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040834E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_54_good()
{
  goodG2B_23();
  return goodB2G_22();
}

//----- (0000000000408368) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52c_badSink(a1);
}

//----- (0000000000408382) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52c_goodG2BSink(a1);
}

//----- (000000000040839C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_52b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52c_goodB2GSink(a1);
}

//----- (00000000004083B6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_51_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004083F1) ----------------------------------------------------
int goodG2B_24()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodG2BSink(-2LL);
}

//----- (0000000000408417) ----------------------------------------------------
int goodB2G_23()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000408452) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_51_good()
{
  goodG2B_24();
  return goodB2G_23();
}

//----- (000000000040846C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_53_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004084A5) ----------------------------------------------------
int goodG2B_25()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodG2BSink(-2);
}

//----- (00000000004084C2) ----------------------------------------------------
int goodB2G_24()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004084FB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_53_good()
{
  goodG2B_25();
  return goodB2G_24();
}

//----- (0000000000408515) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000408544) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodG2BSource()
{
  return -2LL;
}

//----- (000000000040855A) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000408589) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_68_badData;
  if ( CWE191_Integer_Underflow__char_min_multiply_68_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_68_badData);
  return result;
}
// 6623D1: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_badData;

//----- (00000000004085B7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData);
  return result;
}
// 6623D0: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData;

//----- (00000000004085E5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData);
  }
  return result;
}
// 6623D2: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData;

//----- (0000000000408625) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_10_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040870C) ----------------------------------------------------
int goodB2G1_9()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000040881B) ----------------------------------------------------
int goodB2G2_9()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalTrue;
  if ( globalTrue && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040891E) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000408976) ----------------------------------------------------
int goodG2B2_8()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (00000000004089C2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_10_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (00000000004089F0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_min_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662170: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_badGlobal;

//----- (0000000000408A23) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662174: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global;

//----- (0000000000408A74) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662178: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global;

//----- (0000000000408AB9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66217C: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal;

//----- (0000000000408AEC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000408B18) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000408B44) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000408B8C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_18_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (0000000000408BC6) ----------------------------------------------------
int goodB2G_25()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000408C1C) ----------------------------------------------------
int goodG2B_26()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000408C50) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_18_good()
{
  goodB2G_25();
  return goodG2B_26();
}

//----- (0000000000408C6A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (0000000000408CC5) ----------------------------------------------------
int goodB2G1_10()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;
// 662358: using guessed type int globalFalse;

//----- (0000000000408D4B) ----------------------------------------------------
int goodB2G2_10()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (0000000000408DC5) ----------------------------------------------------
int goodG2B1_9()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000408E17) ----------------------------------------------------
int goodG2B2_9()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000408E5D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_10_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (0000000000408E8B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_14_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000408EE1) ----------------------------------------------------
int goodB2G1_11()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000408F57) ----------------------------------------------------
int goodB2G2_11()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000408FC1) ----------------------------------------------------
int goodG2B1_10()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040900A) ----------------------------------------------------
int goodG2B2_10()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (0000000000409047) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_14_good()
{
  goodB2G1_11();
  goodB2G2_11();
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (0000000000409075) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v4 = v1;
  return printHexCharLine(*v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004090E3) ----------------------------------------------------
int goodG2B_27()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -2;
  v1 = -2;
  v3 = -2;
  v2 = -3;
  return printHexCharLine(-3);
}

//----- (0000000000409138) ----------------------------------------------------
int goodB2G_26()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  v4 = *v5;
  if ( v4 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v3 = v4 - 1;
  return printHexCharLine(v4 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004091B8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_32_good()
{
  goodG2B_27();
  return goodB2G_26();
}

//----- (00000000004091D2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_67_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000409215) ----------------------------------------------------
int goodG2B_28()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodG2BSink(-2LL);
}

//----- (0000000000409243) ----------------------------------------------------
int goodB2G_27()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000409286) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_67_good()
{
  goodG2B_28();
  return goodB2G_27();
}

//----- (00000000004092A0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_16_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (00000000004092DA) ----------------------------------------------------
int goodB2G_28()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000409330) ----------------------------------------------------
int goodG2B_29()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000409364) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_16_good()
{
  goodB2G_28();
  return goodG2B_29();
}

//----- (000000000040937E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_badSink(a1);
}

//----- (0000000000409398) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodG2BSink(a1);
}

//----- (00000000004093B2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodB2GSink(a1);
}

//----- (00000000004093CC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54c_badSink(a1);
}

//----- (00000000004093E6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000409400) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodB2GSink(a1);
}

//----- (000000000040941A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_01_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (00000000004094E9) ----------------------------------------------------
int goodG2B_30()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000409521) ----------------------------------------------------
int goodB2G_29()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (000000000040960C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_01_good()
{
  goodG2B_30();
  return goodB2G_29();
}

//----- (0000000000409626) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (0000000000409631) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040963C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_08_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_0();
  if ( result )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000409698) ----------------------------------------------------
int goodB2G1_12()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000409714) ----------------------------------------------------
int goodB2G2_12()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_0();
  if ( result )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000409784) ----------------------------------------------------
int goodG2B1_11()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue_0();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (00000000004097D3) ----------------------------------------------------
int goodG2B2_11()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = -2;
  result = staticReturnsTrue_0();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000409816) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_08_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_11();
  return goodG2B2_11();
}

//----- (0000000000409844) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000409873) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004098A2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004098E3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_01_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040992A) ----------------------------------------------------
int goodG2B_31()
{
  return printLongLongLine(-3LL);
}

//----- (000000000040995C) ----------------------------------------------------
int goodB2G_30()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004099C2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_01_good()
{
  goodG2B_31();
  return goodB2G_30();
}

//----- (00000000004099DC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive;
  if ( staticFive == 5 )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620C4: using guessed type int staticFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000409A39) ----------------------------------------------------
int goodB2G1_13()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620C4: using guessed type int staticFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000409AC1) ----------------------------------------------------
int goodB2G2_13()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive;
  if ( staticFive == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620C4: using guessed type int staticFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000409B3D) ----------------------------------------------------
int goodG2B1_12()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive;
  if ( staticFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620C4: using guessed type int staticFive;

//----- (0000000000409B91) ----------------------------------------------------
int goodG2B2_12()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    v1 = -2LL;
  result = staticFive;
  if ( staticFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620C4: using guessed type int staticFive;

//----- (0000000000409BD9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_07_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (0000000000409C07) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000409C2D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000409C53) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000409C95) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_12_bad()
{
  unsigned __int64 v1; // [rsp+18h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 0x8000000000000000LL;
  else
    v1 = -2LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printLongLongLine(v1 - 1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}

//----- (0000000000409D29) ----------------------------------------------------
int goodB2G_31()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000409DDF) ----------------------------------------------------
int goodG2B_32()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(-3LL);
}

//----- (0000000000409E51) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_12_good()
{
  goodB2G_31();
  return goodG2B_32();
}

//----- (0000000000409E6B) ----------------------------------------------------
int __fastcall badSink_1(char a1)
{
  int result; // eax

  result = badStatic_0;
  if ( badStatic_0 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662160: using guessed type int badStatic_0;

//----- (0000000000409E9E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_21_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  badStatic_0 = 1;
  return badSink_1(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662160: using guessed type int badStatic_0;

//----- (0000000000409EE1) ----------------------------------------------------
int __fastcall goodB2G1Sink_0(char a1)
{
  int result; // eax

  result = goodB2G1Static_0;
  if ( goodB2G1Static_0 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662164: using guessed type int goodB2G1Static_0;

//----- (0000000000409F32) ----------------------------------------------------
int goodB2G1_14()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G1Static_0 = 0;
  return goodB2G1Sink_0(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662164: using guessed type int goodB2G1Static_0;

//----- (0000000000409F75) ----------------------------------------------------
int __fastcall goodB2G2Sink_0(char a1)
{
  int result; // eax

  result = goodB2G2Static_0;
  if ( goodB2G2Static_0 && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662168: using guessed type int goodB2G2Static_0;

//----- (0000000000409FBA) ----------------------------------------------------
int goodB2G2_14()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G2Static_0 = 1;
  return goodB2G2Sink_0(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662168: using guessed type int goodB2G2Static_0;

//----- (0000000000409FFD) ----------------------------------------------------
int __fastcall goodG2BSink_1(char a1)
{
  int result; // eax

  result = goodG2BStatic_0;
  if ( goodG2BStatic_0 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66216C: using guessed type int goodG2BStatic_0;

//----- (000000000040A030) ----------------------------------------------------
int goodG2B_33()
{
  goodG2BStatic_0 = 1;
  return goodG2BSink_1(-2);
}
// 66216C: using guessed type int goodG2BStatic_0;

//----- (000000000040A057) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_21_good()
{
  goodB2G1_14();
  goodB2G2_14();
  return goodG2B_33();
}

//----- (000000000040A07B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_03_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A0C2) ----------------------------------------------------
int goodB2G1_15()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A11D) ----------------------------------------------------
int goodB2G2_15()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A178) ----------------------------------------------------
int goodG2B1_13()
{
  return printHexCharLine(252);
}

//----- (000000000040A1A4) ----------------------------------------------------
int goodG2B2_13()
{
  return printHexCharLine(252);
}

//----- (000000000040A1D0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_03_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_13();
  return goodG2B2_13();
}

//----- (000000000040A1FE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_22_bad()
{
  CWE191_Integer_Underflow__char_min_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_min_multiply_22_badSink(-128);
}
// 662170: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_badGlobal;

//----- (000000000040A225) ----------------------------------------------------
int goodB2G1_16()
{
  CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Sink(-128);
}
// 662174: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G1Global;

//----- (000000000040A24C) ----------------------------------------------------
int goodB2G2_16()
{
  CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Sink(-128);
}
// 662178: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodB2G2Global;

//----- (000000000040A273) ----------------------------------------------------
int goodG2B_34()
{
  CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_min_multiply_22_goodG2BSink(-2);
}
// 66217C: using guessed type int CWE191_Integer_Underflow__char_min_multiply_22_goodG2BGlobal;

//----- (000000000040A29A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_22_good()
{
  goodB2G1_16();
  goodB2G2_16();
  return goodG2B_34();
}

//----- (000000000040A2BE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_04_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 1;
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000040A329) ----------------------------------------------------
int goodB2G1_17()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 0;
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000040A3B2) ----------------------------------------------------
int goodB2G2_17()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 1;
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000040A42F) ----------------------------------------------------
int goodG2B1_14()
{
  return printHexCharLine(252);
}

//----- (000000000040A479) ----------------------------------------------------
int goodG2B2_14()
{
  return printHexCharLine(252);
}

//----- (000000000040A4B7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_04_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (000000000040A4E5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_31_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040A54C) ----------------------------------------------------
int goodG2B_35()
{
  return printHexCharLine(252);
}

//----- (000000000040A586) ----------------------------------------------------
int goodB2G_32()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040A5FF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_31_good()
{
  goodG2B_35();
  return goodB2G_32();
}

//----- (000000000040A619) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A65D) ----------------------------------------------------
int goodG2B_36()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodG2BSink(-2LL);
}

//----- (000000000040A68C) ----------------------------------------------------
__int64 goodB2G_33()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__int64_t_fscanf_multiply_65b_goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A6D0) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_65_good()
{
  goodG2B_36();
  return goodB2G_33();
}

//----- (000000000040A6EA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000040A710) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000040A736) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000040A778) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_04_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FE28, &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A7CA) ----------------------------------------------------
int goodB2G1_18()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FE28, &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A83C) ----------------------------------------------------
int goodB2G2_18()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FE28, &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A8A2) ----------------------------------------------------
int goodG2B1_15()
{
  return printHexCharLine(253);
}

//----- (000000000040A8E7) ----------------------------------------------------
int goodG2B2_15()
{
  return printHexCharLine(253);
}

//----- (000000000040A920) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_04_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (000000000040A94E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_31_bad()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040A99C) ----------------------------------------------------
int goodG2B_37()
{
  return printHexCharLine(-3);
}

//----- (000000000040A9D1) ----------------------------------------------------
int goodB2G_34()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v3 - 1;
  return printHexCharLine(v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040AA31) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_31_good()
{
  goodG2B_37();
  return goodB2G_34();
}

//----- (000000000040AA4B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_67_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040AA88) ----------------------------------------------------
int goodG2B_38()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_67b_goodG2BSink(254);
}

//----- (000000000040AAAC) ----------------------------------------------------
int goodB2G_35()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040AAE9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_67_good()
{
  goodG2B_38();
  return goodB2G_35();
}

//----- (000000000040AB03) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_18_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040AB4C) ----------------------------------------------------
int goodB2G_36()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040ABA9) ----------------------------------------------------
int goodG2B_39()
{
  return printHexCharLine(252);
}

//----- (000000000040ABD7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_18_good()
{
  goodB2G_36();
  return goodG2B_39();
}

//----- (000000000040ABF1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_09_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040ACD8) ----------------------------------------------------
int goodB2G1_19()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040ADE7) ----------------------------------------------------
int goodB2G2_19()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040AEEA) ----------------------------------------------------
int goodG2B1_16()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040AF42) ----------------------------------------------------
int goodG2B2_16()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040AF8E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_09_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (000000000040AFBC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53d_badSink(a1);
}

//----- (000000000040AFD6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodG2BSink(a1);
}

//----- (000000000040AFF0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodB2GSink(a1);
}

//----- (000000000040B00A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_54_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54b_badSink(0x8000000000000000LL);
}

//----- (000000000040B036) ----------------------------------------------------
int goodG2B_40()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodG2BSink(-2LL);
}

//----- (000000000040B05C) ----------------------------------------------------
int goodB2G_37()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000040B088) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_54_good()
{
  goodG2B_40();
  return goodB2G_37();
}

//----- (000000000040B0A2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53d_badSink(a1);
}

//----- (000000000040B0BC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53d_goodG2BSink(a1);
}

//----- (000000000040B0D6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_53d_goodB2GSink(a1);
}

//----- (000000000040B0F0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54e_badSink(a1);
}

//----- (000000000040B10A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54e_goodG2BSink(a1);
}

//----- (000000000040B124) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54e_goodB2GSink(a1);
}

//----- (000000000040B13E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_02_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (000000000040B176) ----------------------------------------------------
int goodB2G1_20()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040B1CA) ----------------------------------------------------
int goodB2G2_20()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040B21E) ----------------------------------------------------
int goodG2B1_17()
{
  return printLongLongLine(-3LL);
}

//----- (000000000040B250) ----------------------------------------------------
int goodG2B2_17()
{
  return printLongLongLine(-3LL);
}

//----- (000000000040B282) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_02_good()
{
  goodB2G1_20();
  goodB2G2_20();
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (000000000040B2B0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_16_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (000000000040B381) ----------------------------------------------------
int goodB2G_38()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (000000000040B46E) ----------------------------------------------------
int goodG2B_41()
{
  return printLongLongLine(-4LL);
}

//----- (000000000040B4A8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_16_good()
{
  goodB2G_38();
  return goodG2B_41();
}

//----- (000000000040B4C2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_badSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData);
  return result;
}
// 662380: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData;

//----- (000000000040B4F5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData);
  return result;
}
// 662378: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData;

//----- (000000000040B528) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData);
  }
  return result;
}
// 662370: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData;

//----- (000000000040B577) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662180: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal;

//----- (000000000040B5AA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662184: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global;

//----- (000000000040B5FB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662188: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global;

//----- (000000000040B640) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66218C: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal;

//----- (000000000040B673) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621A0: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal;

//----- (000000000040B6A1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Sink(char a1)
{
  if ( CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 6621A4: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Global;

//----- (000000000040B6ED) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 6621A8: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global;

//----- (000000000040B72D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621AC: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal;

//----- (000000000040B75B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040B787) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040B7B3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040B7FB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_10_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040B847) ----------------------------------------------------
int goodB2G1_21()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000040B8BB) ----------------------------------------------------
int goodB2G2_21()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040B923) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000040B975) ----------------------------------------------------
int goodG2B2_18()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040B9BB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_10_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000040B9E9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__char_fscanf_multiply_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040BA27) ----------------------------------------------------
int goodG2B_42()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040BA4C) ----------------------------------------------------
int goodB2G_39()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040BA8A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_66_good()
{
  goodG2B_42();
  return goodB2G_39();
}

//----- (000000000040BAA4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_14_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040BAE1) ----------------------------------------------------
int goodB2G1_22()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 662120: using guessed type int globalFive;

//----- (000000000040BB3C) ----------------------------------------------------
int goodB2G2_22()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040BB8B) ----------------------------------------------------
int goodG2B1_19()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040BBD4) ----------------------------------------------------
int goodG2B2_19()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040BC11) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_14_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (000000000040BC3F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -128;
  v1 = -128;
  v3 = -128;
  v2 = 127;
  return printHexCharLine(127);
}

//----- (000000000040BC94) ----------------------------------------------------
int goodG2B_43()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -2;
  v1 = -2;
  v3 = -2;
  v2 = -3;
  return printHexCharLine(-3);
}

//----- (000000000040BCE9) ----------------------------------------------------
int goodB2G_40()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Eh] [rbp-12h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = -128;
  v1 = -128;
  v2 = -128;
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040BD50) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_32_good()
{
  goodG2B_43();
  return goodB2G_40();
}

//----- (000000000040BD6A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_02_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040BDC3) ----------------------------------------------------
int goodB2G1_23()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040BE2E) ----------------------------------------------------
int goodB2G2_23()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040BE99) ----------------------------------------------------
int goodG2B1_20()
{
  return printHexCharLine(252);
}

//----- (000000000040BEC5) ----------------------------------------------------
int goodG2B2_20()
{
  return printHexCharLine(252);
}

//----- (000000000040BEF1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_02_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (000000000040BF1F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54d_badSink(a1);
}

//----- (000000000040BF39) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54d_goodG2BSink(a1);
}

//----- (000000000040BF53) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54d_goodB2GSink(a1);
}

//----- (000000000040BF6D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_badSink(a1);
}

//----- (000000000040BF87) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodG2BSink(a1);
}

//----- (000000000040BFA1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54c_goodB2GSink(a1);
}

//----- (000000000040BFBB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_01_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (000000000040BFF3) ----------------------------------------------------
int goodG2B_44()
{
  return printLongLongLine(-3LL);
}

//----- (000000000040C025) ----------------------------------------------------
int goodB2G_41()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040C079) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_01_good()
{
  goodG2B_44();
  return goodB2G_41();
}

//----- (000000000040C093) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000040C0BD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000040C0E7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000040C123) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040C14F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040C17B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040C1C3) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_54_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_54b_badSink(v0);
}

//----- (000000000040C20D) ----------------------------------------------------
int goodG2B_45()
{
  return CWE191_Integer_Underflow__char_rand_multiply_54b_goodG2BSink(-2);
}

//----- (000000000040C22A) ----------------------------------------------------
int goodB2G_42()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_54b_goodB2GSink(v0);
}

//----- (000000000040C274) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_54_good()
{
  goodG2B_45();
  return goodB2G_42();
}

//----- (000000000040C28E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_11_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040C2F1) ----------------------------------------------------
int goodB2G1_24()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040C374) ----------------------------------------------------
int goodB2G2_24()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040C3EB) ----------------------------------------------------
int goodG2B1_21()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040C43F) ----------------------------------------------------
int goodG2B2_21()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040C487) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_11_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_21();
  return goodG2B2_21();
}

//----- (000000000040C4B5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_22_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_rand_multiply_22_badSink(v0);
}
// 662180: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_badGlobal;

//----- (000000000040C509) ----------------------------------------------------
int goodB2G1_25()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Sink(v0);
}
// 662184: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G1Global;

//----- (000000000040C55D) ----------------------------------------------------
int goodB2G2_25()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Sink(v0);
}
// 662188: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodB2G2Global;

//----- (000000000040C5B1) ----------------------------------------------------
int goodG2B_46()
{
  CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BSink(-2);
}
// 66218C: using guessed type int CWE191_Integer_Underflow__char_rand_multiply_22_goodG2BGlobal;

//----- (000000000040C5D8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_22_good()
{
  goodB2G1_25();
  goodB2G2_25();
  return goodG2B_46();
}

//----- (000000000040C5FC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData = v1;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662380: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_badData;

//----- (000000000040C640) ----------------------------------------------------
int goodG2B_47()
{
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodG2BSink();
}
// 662378: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodG2BData;

//----- (000000000040C66F) ----------------------------------------------------
int goodB2G_43()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData = v1;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662370: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_goodB2GData;

//----- (000000000040C6B3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_68_good()
{
  goodG2B_47();
  return goodB2G_43();
}

//----- (000000000040C6CD) ----------------------------------------------------
int __fastcall badSink_2(char a1)
{
  int result; // eax

  result = badStatic_1;
  if ( badStatic_1 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662190: using guessed type int badStatic_1;

//----- (000000000040C700) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_21_bad()
{
  badStatic_1 = 1;
  return badSink_2(-128);
}
// 662190: using guessed type int badStatic_1;

//----- (000000000040C727) ----------------------------------------------------
int __fastcall goodB2G1Sink_1(char a1)
{
  int result; // eax

  result = goodB2G1Static_1;
  if ( goodB2G1Static_1 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662194: using guessed type int goodB2G1Static_1;

//----- (000000000040C778) ----------------------------------------------------
int goodB2G1_26()
{
  goodB2G1Static_1 = 0;
  return goodB2G1Sink_1(-128);
}
// 662194: using guessed type int goodB2G1Static_1;

//----- (000000000040C79F) ----------------------------------------------------
int __fastcall goodB2G2Sink_1(char a1)
{
  int result; // eax

  result = goodB2G2Static_1;
  if ( goodB2G2Static_1 && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662198: using guessed type int goodB2G2Static_1;

//----- (000000000040C7E4) ----------------------------------------------------
int goodB2G2_26()
{
  goodB2G2Static_1 = 1;
  return goodB2G2Sink_1(-128);
}
// 662198: using guessed type int goodB2G2Static_1;

//----- (000000000040C80B) ----------------------------------------------------
int __fastcall goodG2BSink_2(char a1)
{
  int result; // eax

  result = goodG2BStatic_1;
  if ( goodG2BStatic_1 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66219C: using guessed type int goodG2BStatic_1;

//----- (000000000040C83E) ----------------------------------------------------
int goodG2B_48()
{
  goodG2BStatic_1 = 1;
  return goodG2BSink_2(-2);
}
// 66219C: using guessed type int goodG2BStatic_1;

//----- (000000000040C865) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_21_good()
{
  goodB2G1_26();
  goodB2G2_26();
  return goodG2B_48();
}

//----- (000000000040C889) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_03_bad()
{
  return printHexCharLine(0);
}

//----- (000000000040C8B5) ----------------------------------------------------
int goodB2G1_27()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000040C8F3) ----------------------------------------------------
int goodB2G2_27()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000040C931) ----------------------------------------------------
int goodG2B1_22()
{
  return printHexCharLine(252);
}

//----- (000000000040C95D) ----------------------------------------------------
int goodG2B2_22()
{
  return printHexCharLine(252);
}

//----- (000000000040C989) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_03_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (000000000040C9B7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_22_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_fscanf_sub_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621A0: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_badGlobal;

//----- (000000000040C9FA) ----------------------------------------------------
int goodB2G1_28()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621A4: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G1Global;

//----- (000000000040CA3D) ----------------------------------------------------
int goodB2G2_28()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621A8: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodB2G2Global;

//----- (000000000040CA80) ----------------------------------------------------
int goodG2B_49()
{
  CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BSink(-2);
}
// 6621AC: using guessed type int CWE191_Integer_Underflow__char_fscanf_sub_22_goodG2BGlobal;

//----- (000000000040CAA7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_22_good()
{
  goodB2G1_28();
  goodB2G2_28();
  return goodG2B_49();
}

//----- (000000000040CACB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54e_badSink(a1);
}

//----- (000000000040CAE5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54e_goodG2BSink(a1);
}

//----- (000000000040CAFF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_54e_goodB2GSink(a1);
}

//----- (000000000040CB19) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_65_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_65b_badSink(0x8000000000000000LL);
}

//----- (000000000040CB4E) ----------------------------------------------------
int goodG2B_50()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodG2BSink(-2LL);
}

//----- (000000000040CB7D) ----------------------------------------------------
int goodB2G_44()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_65b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000040CBB2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_65_good()
{
  goodG2B_50();
  return goodB2G_44();
}

//----- (000000000040CBCC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_04_bad()
{
  return printHexCharLine(127);
}

//----- (000000000040CC05) ----------------------------------------------------
int goodB2G1_29()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040CC5C) ----------------------------------------------------
int goodB2G2_29()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040CCA7) ----------------------------------------------------
int goodG2B1_23()
{
  return printHexCharLine(253);
}

//----- (000000000040CCEC) ----------------------------------------------------
int goodG2B2_23()
{
  return printHexCharLine(253);
}

//----- (000000000040CD25) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_04_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_23();
  return goodG2B2_23();
}

//----- (000000000040CD53) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_31_bad()
{
  return printHexCharLine(127);
}

//----- (000000000040CD88) ----------------------------------------------------
int goodG2B_51()
{
  return printHexCharLine(-3);
}

//----- (000000000040CDBD) ----------------------------------------------------
int goodB2G_45()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000040CE04) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_31_good()
{
  goodG2B_51();
  return goodB2G_45();
}

//----- (000000000040CE1E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_10_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (000000000040CE79) ----------------------------------------------------
int goodB2G1_30()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;
// 662358: using guessed type int globalFalse;

//----- (000000000040CEF4) ----------------------------------------------------
int goodB2G2_30()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (000000000040CF63) ----------------------------------------------------
int goodG2B1_24()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000040CFAF) ----------------------------------------------------
int goodG2B2_24()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000040CFEF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_10_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (000000000040D01D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_54_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54b_badSink(v4);
}

//----- (000000000040D0DA) ----------------------------------------------------
int goodG2B_52()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodG2BSink(-2LL);
}

//----- (000000000040D100) ----------------------------------------------------
int goodB2G_46()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodB2GSink(v4);
}

//----- (000000000040D1BD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_54_good()
{
  goodG2B_52();
  return goodB2G_46();
}

//----- (000000000040D1D7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54e_badSink(a1);
}

//----- (000000000040D1F1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54e_goodG2BSink(a1);
}

//----- (000000000040D20B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_54e_goodB2GSink(a1);
}

//----- (000000000040D225) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_54_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040D260) ----------------------------------------------------
int goodG2B_53()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodG2BSink(-2LL);
}

//----- (000000000040D286) ----------------------------------------------------
int goodB2G_47()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040D2C1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_54_good()
{
  goodG2B_53();
  return goodB2G_47();
}

//----- (000000000040D2DB) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (000000000040D2E6) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000040D2F1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_08_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 0x8000000000000000LL;
  result = staticReturnsTrue_1();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000040D345) ----------------------------------------------------
int goodB2G1_31()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 0x8000000000000000LL;
  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}

//----- (000000000040D3C1) ----------------------------------------------------
int goodB2G2_31()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 0x8000000000000000LL;
  result = staticReturnsTrue_1();
  if ( result )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}

//----- (000000000040D431) ----------------------------------------------------
int goodG2B1_25()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticReturnsTrue_1();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000040D48B) ----------------------------------------------------
int goodG2B2_25()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = -2LL;
  result = staticReturnsTrue_1();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000040D4D9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_08_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (000000000040D507) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54d_badSink(a1);
}

//----- (000000000040D521) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodG2BSink(a1);
}

//----- (000000000040D53B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodB2GSink(a1);
}

//----- (000000000040D555) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_67_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_67b_badSink(128);
}

//----- (000000000040D579) ----------------------------------------------------
int goodG2B_54()
{
  return CWE191_Integer_Underflow__char_min_sub_67b_goodG2BSink(254);
}

//----- (000000000040D59D) ----------------------------------------------------
int goodB2G_48()
{
  return CWE191_Integer_Underflow__char_min_sub_67b_goodB2GSink(128);
}

//----- (000000000040D5C1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_67_good()
{
  goodG2B_54();
  return goodB2G_48();
}

//----- (000000000040D5DB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040D604) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040D62D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040D668) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_badSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_68_badData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_68_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_68_badData);
  return result;
}
// 662390: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_badData;

//----- (000000000040D69B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData);
  return result;
}
// 662398: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData;

//----- (000000000040D6CE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData);
  }
  return result;
}
// 662388: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData;

//----- (000000000040D71D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_12_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = -128;
  else
    v1 = -2;
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  else if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040D799) ----------------------------------------------------
int goodB2G_49()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000040D827) ----------------------------------------------------
int goodG2B_55()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(252);
}

//----- (000000000040D891) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_12_good()
{
  goodB2G_49();
  return goodG2B_55();
}

//----- (000000000040D8AB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040D8D7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040D903) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040D94B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_14_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040D9B5) ----------------------------------------------------
int goodB2G1_32()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 662120: using guessed type int globalFive;

//----- (000000000040DA3D) ----------------------------------------------------
int goodB2G2_32()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040DAB9) ----------------------------------------------------
int goodG2B1_26()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040DB02) ----------------------------------------------------
int goodG2B2_26()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000040DB3F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_14_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_26();
  return goodG2B2_26();
}

//----- (000000000040DB6D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_sub_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_min_sub_22_badGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621C0: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_badGlobal;

//----- (000000000040DB9B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Sink(char a1)
{
  if ( CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 6621C4: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Global;

//----- (000000000040DBE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 6621C8: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global;

//----- (000000000040DC27) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621CC: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal;

//----- (000000000040DC55) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_32_bad()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v2;
  v4 = &v2;
  v2 = 32;
  v3 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v3 = v0;
  *v5 = v0;
  return printHexCharLine(*v4 - 1);
}

//----- (000000000040DCD7) ----------------------------------------------------
int goodG2B_56()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -2;
  v1 = -2;
  v3 = -2;
  v2 = -3;
  return printHexCharLine(-3);
}

//----- (000000000040DD2C) ----------------------------------------------------
int goodB2G_50()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  v4 = *v6;
  if ( v4 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v3 = v4 - 1;
  return printHexCharLine(v4 - 1);
}

//----- (000000000040DDC0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_32_good()
{
  goodG2B_56();
  return goodB2G_50();
}

//----- (000000000040DDDA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000040DE04) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000040DE2E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000040DE6A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53c_badSink(a1);
}

//----- (000000000040DE84) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodG2BSink(a1);
}

//----- (000000000040DE9E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodB2GSink(a1);
}

//----- (000000000040DEB8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_badSink(a1);
}

//----- (000000000040DED2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodG2BSink(a1);
}

//----- (000000000040DEEC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52c_goodB2GSink(a1);
}

//----- (000000000040DF06) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (000000000040DF11) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (000000000040DF1C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_08_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_2();
  if ( result )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040DF7F) ----------------------------------------------------
int goodB2G1_33()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)staticReturnsFalse_2() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040E002) ----------------------------------------------------
int goodB2G2_33()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_2();
  if ( result )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040E079) ----------------------------------------------------
int goodG2B1_27()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_2() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E0CD) ----------------------------------------------------
int goodG2B2_27()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_2() )
    v1 = -2;
  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E115) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_08_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_27();
  return goodG2B2_27();
}

//----- (000000000040E143) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040E16F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040E19B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040E1E3) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_11_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E22B) ----------------------------------------------------
int goodB2G1_34()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E291) ----------------------------------------------------
int goodB2G2_34()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  result = globalReturnsTrue();
  if ( result && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E2EB) ----------------------------------------------------
int goodG2B1_28()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E33F) ----------------------------------------------------
int goodG2B2_28()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000040E387) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_11_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (000000000040E3B5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_68_bad()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_68_badData = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_68b_badSink();
}
// 662390: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_badData;

//----- (000000000040E3EA) ----------------------------------------------------
int goodG2B_57()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodG2BSink();
}
// 662398: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodG2BData;

//----- (000000000040E419) ----------------------------------------------------
int goodB2G_51()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_68b_goodB2GSink();
}
// 662388: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_multiply_68_goodB2GData;

//----- (000000000040E44E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_68_good()
{
  goodG2B_57();
  return goodB2G_51();
}

//----- (000000000040E468) ----------------------------------------------------
int __fastcall badSink_3(char a1)
{
  int result; // eax

  result = badStatic_2;
  if ( badStatic_2 )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621B0: using guessed type int badStatic_2;

//----- (000000000040E496) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_21_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  badStatic_2 = 1;
  return badSink_3(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621B0: using guessed type int badStatic_2;

//----- (000000000040E4D9) ----------------------------------------------------
int __fastcall goodB2G1Sink_2(char a1)
{
  if ( goodB2G1Static_2 )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 6621B4: using guessed type int goodB2G1Static_2;

//----- (000000000040E525) ----------------------------------------------------
int goodB2G1_35()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G1Static_2 = 0;
  return goodB2G1Sink_2(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621B4: using guessed type int goodB2G1Static_2;

//----- (000000000040E568) ----------------------------------------------------
int __fastcall goodB2G2Sink_2(char a1)
{
  int result; // eax

  result = goodB2G2Static_2;
  if ( goodB2G2Static_2 )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 6621B8: using guessed type int goodB2G2Static_2;

//----- (000000000040E5A8) ----------------------------------------------------
int goodB2G2_35()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G2Static_2 = 1;
  return goodB2G2Sink_2(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6621B8: using guessed type int goodB2G2Static_2;

//----- (000000000040E5EB) ----------------------------------------------------
int __fastcall goodG2BSink_3(char a1)
{
  int result; // eax

  result = goodG2BStatic_2;
  if ( goodG2BStatic_2 )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621BC: using guessed type int goodG2BStatic_2;

//----- (000000000040E619) ----------------------------------------------------
int goodG2B_58()
{
  goodG2BStatic_2 = 1;
  return goodG2BSink_3(-2);
}
// 6621BC: using guessed type int goodG2BStatic_2;

//----- (000000000040E640) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_21_good()
{
  goodB2G1_35();
  goodB2G2_35();
  return goodG2B_58();
}

//----- (000000000040E664) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_03_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040E6A4) ----------------------------------------------------
int goodB2G1_36()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040E6F8) ----------------------------------------------------
int goodB2G2_36()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040E74C) ----------------------------------------------------
int goodG2B1_29()
{
  return printHexCharLine(-3);
}

//----- (000000000040E773) ----------------------------------------------------
int goodG2B2_29()
{
  return printHexCharLine(-3);
}

//----- (000000000040E79A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_03_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (000000000040E7C8) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_65_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return ((__int64 (__fastcall *)(__int64))CWE191_Integer_Underflow__int64_t_rand_multiply_65b_badSink)(v4);
}

//----- (000000000040E88E) ----------------------------------------------------
int goodG2B_59()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodG2BSink(-2LL);
}

//----- (000000000040E8BD) ----------------------------------------------------
__int64 goodB2G_52()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return ((__int64 (__fastcall *)(__int64))CWE191_Integer_Underflow__int64_t_rand_multiply_65b_goodB2GSink)(v4);
}

//----- (000000000040E983) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_65_good()
{
  goodG2B_59();
  return goodB2G_52();
}

//----- (000000000040E99D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_22_bad()
{
  CWE191_Integer_Underflow__char_min_sub_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_min_sub_22_badSink(-128);
}
// 6621C0: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_badGlobal;

//----- (000000000040E9C4) ----------------------------------------------------
int goodB2G1_37()
{
  CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Sink(-128);
}
// 6621C4: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodB2G1Global;

//----- (000000000040E9EB) ----------------------------------------------------
int goodB2G2_37()
{
  CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Sink(-128);
}
// 6621C8: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodB2G2Global;

//----- (000000000040EA12) ----------------------------------------------------
int goodG2B_60()
{
  CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_min_sub_22_goodG2BSink(-2);
}
// 6621CC: using guessed type int CWE191_Integer_Underflow__char_min_sub_22_goodG2BGlobal;

//----- (000000000040EA39) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_22_good()
{
  goodB2G1_37();
  goodB2G2_37();
  return goodG2B_60();
}

//----- (000000000040EA5D) ----------------------------------------------------
int badSink_4()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData);
  return result;
}
// 6621D0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData;

//----- (000000000040EA90) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_45_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData = v4;
  return badSink_4();
}
// 6621D0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_badData;

//----- (000000000040EB56) ----------------------------------------------------
int goodG2BSink_4()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData);
  return result;
}
// 6621D8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData;

//----- (000000000040EB89) ----------------------------------------------------
int goodG2B_61()
{
  CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData = -2LL;
  return goodG2BSink_4();
}
// 6621D8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodG2BData;

//----- (000000000040EBB8) ----------------------------------------------------
int goodB2GSink_0()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData);
  }
  return result;
}
// 6621E0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData;

//----- (000000000040EC07) ----------------------------------------------------
int goodB2G_53()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData = v4;
  return goodB2GSink_0();
}
// 6621E0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_45_goodB2GData;

//----- (000000000040ECCD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_45_good()
{
  goodG2B_61();
  return goodB2G_53();
}

//----- (000000000040ECE7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_04_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (000000000040ED4D) ----------------------------------------------------
int goodB2G1_38()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (000000000040EDD1) ----------------------------------------------------
int goodB2G2_38()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (000000000040EE49) ----------------------------------------------------
int goodG2B1_30()
{
  return printHexCharLine(253);
}

//----- (000000000040EE8E) ----------------------------------------------------
int goodG2B2_30()
{
  return printHexCharLine(253);
}

//----- (000000000040EEC7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_04_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_30();
  return goodG2B2_30();
}

//----- (000000000040EEF5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_31_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (000000000040EF57) ----------------------------------------------------
int goodG2B_62()
{
  return printHexCharLine(-3);
}

//----- (000000000040EF8C) ----------------------------------------------------
int goodB2G_54()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (000000000040F000) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_31_good()
{
  goodG2B_62();
  return goodB2G_54();
}

//----- (000000000040F01A) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F05E) ----------------------------------------------------
int goodG2B_63()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodG2BSink(-2LL);
}

//----- (000000000040F08D) ----------------------------------------------------
__int64 goodB2G_55()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F0D1) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_65_good()
{
  goodG2B_63();
  return goodB2G_55();
}

//----- (000000000040F0EB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_18_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040F146) ----------------------------------------------------
int goodB2G_56()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040F1B3) ----------------------------------------------------
int goodG2B_64()
{
  return printHexCharLine(252);
}

//----- (000000000040F1E1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_18_good()
{
  goodB2G_56();
  return goodG2B_64();
}

//----- (000000000040F1FB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_18_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F23D) ----------------------------------------------------
int goodB2G_57()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F293) ----------------------------------------------------
int goodG2B_65()
{
  return printHexCharLine(-3);
}

//----- (000000000040F2BC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_18_good()
{
  goodB2G_57();
  return goodG2B_65();
}

//----- (000000000040F2D6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_54_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54b_badSink(0x8000000000000000LL);
}

//----- (000000000040F302) ----------------------------------------------------
int goodG2B_66()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54b_goodG2BSink(-2LL);
}

//----- (000000000040F328) ----------------------------------------------------
int goodB2G_58()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000040F354) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_54_good()
{
  goodG2B_66();
  return goodB2G_58();
}

//----- (000000000040F36E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54e_badSink(a1);
}

//----- (000000000040F388) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54e_goodG2BSink(a1);
}

//----- (000000000040F3A2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54e_goodB2GSink(a1);
}

//----- (000000000040F3BC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_53_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53b_badSink(0x8000000000000000LL);
}

//----- (000000000040F3E8) ----------------------------------------------------
int goodG2B_67()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodG2BSink(-2LL);
}

//----- (000000000040F40E) ----------------------------------------------------
int goodB2G_59()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000040F43A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_53_good()
{
  goodG2B_67();
  return goodB2G_59();
}

//----- (000000000040F454) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54d_badSink(a1);
}

//----- (000000000040F46E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54d_goodG2BSink(a1);
}

//----- (000000000040F488) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54d_goodB2GSink(a1);
}

//----- (000000000040F4A2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54c_badSink(a1);
}

//----- (000000000040F4BC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodG2BSink(a1);
}

//----- (000000000040F4D6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54c_goodB2GSink(a1);
}

//----- (000000000040F4F0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F52B) ----------------------------------------------------
int goodG2B_68()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodG2BSink(-2LL);
}

//----- (000000000040F551) ----------------------------------------------------
int goodB2G_60()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040F58C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_52_good()
{
  goodG2B_68();
  return goodB2G_60();
}

//----- (000000000040F5A6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_badSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData);
  return result;
}
// 6623B0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData;

//----- (000000000040F5D9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData);
  return result;
}
// 6623A8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData;

//----- (000000000040F60C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData);
  }
  return result;
}
// 6623A0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData;

//----- (000000000040F65B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_12_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  else
  {
    v2 = -2;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  else if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000040F704) ----------------------------------------------------
int goodB2G_61()
{
  int v0; // eax
  int v1; // eax
  int result; // eax
  char v3; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v3 = v0;
  }
  else
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v1) = rand();
    }
    else
    {
      rand();
      rand();
      v1 = ~rand();
    }
    v3 = v1;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v3 < 0 )
    {
      if ( v3 < -63 )
        result = printLine("data value is too small to perform multiplication.");
      else
        result = printHexCharLine(2 * v3);
    }
  }
  else if ( v3 < 0 )
  {
    if ( v3 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v3);
  }
  return result;
}

//----- (000000000040F7EC) ----------------------------------------------------
int goodG2B_69()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(252);
}

//----- (000000000040F856) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_12_good()
{
  goodB2G_61();
  return goodG2B_69();
}

//----- (000000000040F870) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040F89C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040F8C8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040F910) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_01_bad()
{
  return printHexCharLine(0);
}

//----- (000000000040F93C) ----------------------------------------------------
int goodG2B_70()
{
  return printHexCharLine(252);
}

//----- (000000000040F968) ----------------------------------------------------
int goodB2G_62()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000040F9A6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_01_good()
{
  goodG2B_70();
  return goodB2G_62();
}

//----- (000000000040F9C0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040F9E9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040FA12) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040FA4D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_badSink()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_68_badData - 1);
}
// 6623C0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_badData;

//----- (000000000040FA7A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodG2BSink()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodG2BData - 1);
}
// 6623B8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodG2BData;

//----- (000000000040FAA7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData - 1);
  return result;
}
// 6623C8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData;

//----- (000000000040FAF0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040FB41) ----------------------------------------------------
int goodB2G_63()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000040FBB1) ----------------------------------------------------
int goodG2B_71()
{
  return printLongLongLine(-4LL);
}

//----- (000000000040FBEB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_16_good()
{
  goodB2G_63();
  return goodG2B_71();
}

//----- (000000000040FC05) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_sub_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_rand_sub_22_badGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621E8: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_badGlobal;

//----- (000000000040FC33) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Sink(char a1)
{
  if ( CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 6621EC: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global;

//----- (000000000040FC7F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 6621F0: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global;

//----- (000000000040FCBF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621F4: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal;

//----- (000000000040FCED) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_13_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FD2A) ----------------------------------------------------
int goodB2G1_39()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FD85) ----------------------------------------------------
int goodB2G2_39()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FDD4) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FE1D) ----------------------------------------------------
int goodG2B2_31()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FE5A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_13_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (000000000040FE88) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_65_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE191_Integer_Underflow__char_rand_multiply_65b_badSink)((unsigned int)(char)v0);
}

//----- (000000000040FEDB) ----------------------------------------------------
int goodG2B_72()
{
  return CWE191_Integer_Underflow__char_rand_multiply_65b_goodG2BSink(-2);
}

//----- (000000000040FF01) ----------------------------------------------------
__int64 goodB2G_64()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE191_Integer_Underflow__char_rand_multiply_65b_goodB2GSink)((unsigned int)(char)v0);
}

//----- (000000000040FF54) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_65_good()
{
  goodG2B_72();
  return goodB2G_64();
}

//----- (000000000040FF6E) ----------------------------------------------------
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_badSource()
{
  return 0x8000000000000000LL;
}

//----- (000000000040FF8A) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodG2BSource()
{
  return -2LL;
}

//----- (000000000040FFA0) ----------------------------------------------------
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodB2GSource()
{
  return 0x8000000000000000LL;
}

//----- (000000000040FFBC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53c_badSink(a1);
}

//----- (000000000040FFD6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodG2BSink(a1);
}

//----- (000000000040FFF0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_53c_goodB2GSink(a1);
}

//----- (000000000041000A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_badSink(a1);
}

//----- (0000000000410024) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodG2BSink(a1);
}

//----- (000000000041003E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_53b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_53c_goodB2GSink(a1);
}

//----- (0000000000410058) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000410084) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004100B0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (00000000004100F8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_54_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410131) ----------------------------------------------------
int goodG2B_73()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodG2BSink(-2);
}

//----- (000000000041014E) ----------------------------------------------------
int goodB2G_65()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410187) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_54_good()
{
  goodG2B_73();
  return goodB2G_65();
}

//----- (00000000004101A1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52c_badSink(a1);
}

//----- (00000000004101BB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodG2BSink(a1);
}

//----- (00000000004101D5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_52b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_52c_goodB2GSink(a1);
}

//----- (00000000004101EF) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (00000000004101FA) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (0000000000410205) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_08_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = -128;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000041024D) ----------------------------------------------------
int goodB2G1_40()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = -128;
  result = staticReturnsFalse_3();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (00000000004102B3) ----------------------------------------------------
int goodB2G2_40()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = -128;
  result = staticReturnsTrue_3();
  if ( result && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000041030D) ----------------------------------------------------
int goodG2B1_32()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (0000000000410361) ----------------------------------------------------
int goodG2B2_32()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = -2;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (00000000004103A9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_08_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (00000000004103D7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410412) ----------------------------------------------------
int goodG2B_74()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodG2BSink(-2LL);
}

//----- (0000000000410438) ----------------------------------------------------
int goodB2G_66()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410473) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_51_good()
{
  goodG2B_74();
  return goodB2G_66();
}

//----- (000000000041048D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (00000000004104B3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (00000000004104D9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000041051B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_68_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_68b_badSink();
}
// 6623B0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_badData;

//----- (00000000004105E1) ----------------------------------------------------
int goodG2B_75()
{
  CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData = -2LL;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodG2BSink();
}
// 6623A8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodG2BData;

//----- (0000000000410610) ----------------------------------------------------
int goodB2G_67()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_68b_goodB2GSink();
}
// 6623A0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_rand_multiply_68_goodB2GData;

//----- (00000000004106D6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_68_good()
{
  goodG2B_75();
  return goodB2G_67();
}

//----- (00000000004106F0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_11_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041074C) ----------------------------------------------------
int goodB2G1_41()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004107C8) ----------------------------------------------------
int goodB2G2_41()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410838) ----------------------------------------------------
int goodG2B1_33()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000410887) ----------------------------------------------------
int goodG2B2_33()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (00000000004108CA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_11_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (00000000004108F8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_02_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000410938) ----------------------------------------------------
int goodB2G1_42()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041098C) ----------------------------------------------------
int goodB2G2_42()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004109E0) ----------------------------------------------------
int goodG2B1_34()
{
  return printHexCharLine(-3);
}

//----- (0000000000410A07) ----------------------------------------------------
int goodG2B2_34()
{
  return printHexCharLine(-3);
}

//----- (0000000000410A2E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_02_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (0000000000410A5C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_22_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_rand_sub_22_badSink(v0);
}
// 6621E8: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_badGlobal;

//----- (0000000000410AB0) ----------------------------------------------------
int goodB2G1_43()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Sink(v0);
}
// 6621EC: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global;

//----- (0000000000410B04) ----------------------------------------------------
int goodB2G2_43()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Sink(v0);
}
// 6621F0: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global;

//----- (0000000000410B58) ----------------------------------------------------
int goodG2B_76()
{
  CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_rand_sub_22_goodG2BSink(-2);
}
// 6621F4: using guessed type int CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal;

//----- (0000000000410B7F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_22_good()
{
  goodB2G1_43();
  goodB2G2_43();
  return goodG2B_76();
}

//----- (0000000000410BA3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_68_badData = v1;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6623C0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_badData;

//----- (0000000000410BE7) ----------------------------------------------------
int goodG2B_77()
{
  CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodG2BData = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodG2BSink();
}
// 6623B8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodG2BData;

//----- (0000000000410C16) ----------------------------------------------------
int goodB2G_68()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData = v1;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6623C8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_68_goodB2GData;

//----- (0000000000410C5A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_68_good()
{
  goodG2B_77();
  return goodB2G_68();
}

//----- (0000000000410C74) ----------------------------------------------------
int __fastcall badSink_5(char a1)
{
  int result; // eax

  result = badStatic_3;
  if ( badStatic_3 )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 6621F8: using guessed type int badStatic_3;

//----- (0000000000410CA2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_21_bad()
{
  badStatic_3 = 1;
  return badSink_5(-128);
}
// 6621F8: using guessed type int badStatic_3;

//----- (0000000000410CC9) ----------------------------------------------------
int __fastcall goodB2G1Sink_3(char a1)
{
  if ( goodB2G1Static_3 )
    return printLine("Benign, fixed string");
  if ( a1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(a1 - 1);
}
// 6621FC: using guessed type int goodB2G1Static_3;

//----- (0000000000410D15) ----------------------------------------------------
int goodB2G1_44()
{
  goodB2G1Static_3 = 0;
  return goodB2G1Sink_3(-128);
}
// 6621FC: using guessed type int goodB2G1Static_3;

//----- (0000000000410D3C) ----------------------------------------------------
int __fastcall goodB2G2Sink_3(char a1)
{
  int result; // eax

  result = goodB2G2Static_3;
  if ( goodB2G2Static_3 )
  {
    if ( a1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(a1 - 1);
  }
  return result;
}
// 662200: using guessed type int goodB2G2Static_3;

//----- (0000000000410D7C) ----------------------------------------------------
int goodB2G2_44()
{
  goodB2G2Static_3 = 1;
  return goodB2G2Sink_3(-128);
}
// 662200: using guessed type int goodB2G2Static_3;

//----- (0000000000410DA3) ----------------------------------------------------
int __fastcall goodG2BSink_5(char a1)
{
  int result; // eax

  result = goodG2BStatic_3;
  if ( goodG2BStatic_3 )
    result = printHexCharLine(a1 - 1);
  return result;
}
// 662204: using guessed type int goodG2BStatic_3;

//----- (0000000000410DD1) ----------------------------------------------------
int goodG2B_78()
{
  goodG2BStatic_3 = 1;
  return goodG2BSink_5(-2);
}
// 662204: using guessed type int goodG2BStatic_3;

//----- (0000000000410DF8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_21_good()
{
  goodB2G1_44();
  goodB2G2_44();
  return goodG2B_78();
}

//----- (0000000000410E1C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_03_bad()
{
  return printHexCharLine(127);
}

//----- (0000000000410E43) ----------------------------------------------------
int goodB2G1_45()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000410E7C) ----------------------------------------------------
int goodB2G2_45()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000410EB5) ----------------------------------------------------
int goodG2B1_35()
{
  return printHexCharLine(-3);
}

//----- (0000000000410EDC) ----------------------------------------------------
int goodG2B2_35()
{
  return printHexCharLine(-3);
}

//----- (0000000000410F03) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_03_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_35();
  return goodG2B2_35();
}

//----- (0000000000410F31) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_65_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_65b_badSink(0x8000000000000000LL);
}

//----- (0000000000410F66) ----------------------------------------------------
int goodG2B_79()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_65b_goodG2BSink(-2LL);
}

//----- (0000000000410F95) ----------------------------------------------------
int goodB2G_69()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_65b_goodB2GSink(0x8000000000000000LL);
}

//----- (0000000000410FCA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_65_good()
{
  goodG2B_79();
  return goodB2G_69();
}

//----- (0000000000410FE4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_10_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000411051) ----------------------------------------------------
int goodB2G1_46()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (00000000004110DC) ----------------------------------------------------
int goodB2G2_46()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000041115B) ----------------------------------------------------
int goodG2B1_36()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (00000000004111A7) ----------------------------------------------------
int goodG2B2_36()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (00000000004111E7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_10_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (0000000000411215) ----------------------------------------------------
int badSink_6()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData);
  return result;
}
// 662208: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData;

//----- (0000000000411248) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData = v1;
  return badSink_6();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662208: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_badData;

//----- (000000000041128C) ----------------------------------------------------
int goodG2BSink_6()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData < 0 )
    result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData);
  return result;
}
// 662210: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData;

//----- (00000000004112BF) ----------------------------------------------------
int goodG2B_80()
{
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData = -2LL;
  return goodG2BSink_6();
}
// 662210: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodG2BData;

//----- (00000000004112EE) ----------------------------------------------------
int goodB2GSink_1()
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData);
  }
  return result;
}
// 662218: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData;

//----- (000000000041133D) ----------------------------------------------------
int goodB2G_70()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData = v1;
  return goodB2GSink_1();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662218: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_goodB2GData;

//----- (0000000000411381) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_45_good()
{
  goodG2B_80();
  return goodB2G_70();
}

//----- (000000000041139B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_10_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (00000000004113EF) ----------------------------------------------------
int goodB2G1_47()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;
// 662358: using guessed type int globalFalse;

//----- (0000000000411463) ----------------------------------------------------
int goodB2G2_47()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (00000000004114CB) ----------------------------------------------------
int goodG2B1_37()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000411512) ----------------------------------------------------
int goodG2B2_37()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000041154D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_10_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (000000000041157B) ----------------------------------------------------
int __fastcall badSink_7(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004115A4) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_44_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_7;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004115E6) ----------------------------------------------------
int __fastcall goodG2BSink_7(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041160F) ----------------------------------------------------
int goodG2B_81()
{
  return goodG2BSink_7(-2);
}

//----- (0000000000411635) ----------------------------------------------------
int __fastcall goodB2GSink_2(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000411670) ----------------------------------------------------
__int64 goodB2G_71()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_2;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004116B2) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_44_good()
{
  goodG2B_81();
  return goodB2G_71();
}

//----- (00000000004116CC) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (00000000004116D7) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (00000000004116E2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_08_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = -128;
  result = staticReturnsTrue_4();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000411725) ----------------------------------------------------
int goodB2G1_48()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = -128;
  if ( (unsigned int)staticReturnsFalse_4() )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}

//----- (0000000000411786) ----------------------------------------------------
int goodB2G2_48()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = -128;
  result = staticReturnsTrue_4();
  if ( result )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}

//----- (00000000004117DB) ----------------------------------------------------
int goodG2B1_38()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_4() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue_4();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041182A) ----------------------------------------------------
int goodG2B2_38()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = -2;
  result = staticReturnsTrue_4();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041186D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_08_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_38();
  return goodG2B2_38();
}

//----- (000000000041189B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_11_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (00000000004118EF) ----------------------------------------------------
int goodB2G1_49()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}

//----- (000000000041196B) ----------------------------------------------------
int goodB2G2_49()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}

//----- (00000000004119DB) ----------------------------------------------------
int goodG2B1_39()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (0000000000411A35) ----------------------------------------------------
int goodG2B2_39()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (0000000000411A83) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_11_good()
{
  goodB2G1_49();
  goodB2G2_49();
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (0000000000411AB1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_sub_64b_badSink(&v1);
}

//----- (0000000000411ACF) ----------------------------------------------------
int goodG2B_82()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_min_sub_64b_goodG2BSink(&v1);
}

//----- (0000000000411AED) ----------------------------------------------------
int goodB2G_72()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_sub_64b_goodB2GSink(&v1);
}

//----- (0000000000411B0B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_64_good()
{
  goodG2B_82();
  return goodB2G_72();
}

//----- (0000000000411B25) ----------------------------------------------------
int __fastcall badSink_8(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000411B4E) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_44_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_8)((unsigned int)(char)v0);
}

//----- (0000000000411BA1) ----------------------------------------------------
int __fastcall goodG2BSink_8(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000411BCA) ----------------------------------------------------
int goodG2B_83()
{
  return goodG2BSink_8(-2);
}

//----- (0000000000411BF0) ----------------------------------------------------
int __fastcall goodB2GSink_3(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000411C2B) ----------------------------------------------------
__int64 goodB2G_73()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_3)((unsigned int)(char)v0);
}

//----- (0000000000411C7E) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_44_good()
{
  goodG2B_83();
  return goodB2G_73();
}

//----- (0000000000411C98) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  v3 = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v3;
    result = printLongLongLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000411CF5) ----------------------------------------------------
int goodG2B_84()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000411D3D) ----------------------------------------------------
int goodB2G_74()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  v3 = v1;
  if ( v1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v3;
      result = printLongLongLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000411DB6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_34_good()
{
  goodG2B_84();
  return goodB2G_74();
}

//----- (0000000000411DD0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_63b_badSink(&v1);
}

//----- (0000000000411DEE) ----------------------------------------------------
int goodG2B_85()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_min_multiply_63b_goodG2BSink(&v1);
}

//----- (0000000000411E0C) ----------------------------------------------------
int goodB2G_75()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_63b_goodB2GSink(&v1);
}

//----- (0000000000411E2A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_63_good()
{
  goodG2B_85();
  return goodB2G_75();
}

//----- (0000000000411E44) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000411E4F) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (0000000000411E5A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_08_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticReturnsTrue_5();
  if ( result )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000411F49) ----------------------------------------------------
int goodB2G1_50()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticReturnsFalse_5();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000412060) ----------------------------------------------------
int goodB2G2_50()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticReturnsTrue_5();
  if ( result && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (000000000041216B) ----------------------------------------------------
int goodG2B1_40()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_5() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticReturnsTrue_5();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (00000000004121CB) ----------------------------------------------------
int goodG2B2_40()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = -2LL;
  result = staticReturnsTrue_5();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041221F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_08_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (000000000041224D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_02_bad()
{
  return printHexCharLine(127);
}

//----- (0000000000412274) ----------------------------------------------------
int goodB2G1_51()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (00000000004122AD) ----------------------------------------------------
int goodB2G2_51()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (00000000004122E6) ----------------------------------------------------
int goodG2B1_41()
{
  return printHexCharLine(-3);
}

//----- (000000000041230D) ----------------------------------------------------
int goodG2B2_41()
{
  return printHexCharLine(-3);
}

//----- (0000000000412334) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_02_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (0000000000412362) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_badSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (000000000041239A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodG2BSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (00000000004123D2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodB2GSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000412426) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_15_bad()
{
  return printLongLongLine(0LL);
}

//----- (0000000000412466) ----------------------------------------------------
int goodB2G1_52()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004124C2) ----------------------------------------------------
int goodB2G2_52()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041251E) ----------------------------------------------------
int goodG2B1_42()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000412558) ----------------------------------------------------
int goodG2B2_42()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000412592) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_15_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (00000000004125C0) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_61b_badSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004125F0) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodG2BSource()
{
  return 254LL;
}

//----- (0000000000412603) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodB2GSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000412633) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_07_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_0 == 5 )
    v1 = 0x8000000000000000LL;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620C8: using guessed type int staticFive_0;

//----- (0000000000412681) ----------------------------------------------------
int goodB2G1_53()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_0 == 5 )
    v1 = 0x8000000000000000LL;
  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 6620C8: using guessed type int staticFive_0;

//----- (00000000004126F7) ----------------------------------------------------
int goodB2G2_53()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_0 == 5 )
    v1 = 0x8000000000000000LL;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 6620C8: using guessed type int staticFive_0;

//----- (0000000000412761) ----------------------------------------------------
int goodG2B1_43()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_0 == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620C8: using guessed type int staticFive_0;

//----- (00000000004127B5) ----------------------------------------------------
int goodG2B2_43()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_0 == 5 )
    v1 = -2LL;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620C8: using guessed type int staticFive_0;

//----- (00000000004127FD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_07_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (000000000041282B) ----------------------------------------------------
unsigned __int64 badSource()
{
  return 0x8000000000000000LL;
}

//----- (0000000000412847) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_42_bad()
{
  signed __int64 v0; // rax

  v0 = badSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (0000000000412887) ----------------------------------------------------
__int64 goodG2BSource()
{
  return -2LL;
}

//----- (000000000041289D) ----------------------------------------------------
int goodG2B_86()
{
  __int64 v0; // rax

  v0 = goodG2BSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (00000000004128DD) ----------------------------------------------------
unsigned __int64 goodB2GSource()
{
  return 0x8000000000000000LL;
}

//----- (00000000004128F9) ----------------------------------------------------
int goodB2G_76()
{
  signed __int64 v0; // rax

  v0 = goodB2GSource();
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (0000000000412955) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_42_good()
{
  goodB2G_76();
  return goodG2B_86();
}

//----- (000000000041296F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (0000000000412A3E) ----------------------------------------------------
int goodB2G1_54()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (0000000000412B29) ----------------------------------------------------
int goodB2G2_54()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (0000000000412C14) ----------------------------------------------------
int goodG2B1_44()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000412C4C) ----------------------------------------------------
int goodG2B2_44()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000412C84) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_02_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (0000000000412CB2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (0000000000412CE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (0000000000412D1C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (0000000000412D63) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_11_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000412DA6) ----------------------------------------------------
int goodB2G1_55()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}

//----- (0000000000412E07) ----------------------------------------------------
int goodB2G2_55()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -128;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}

//----- (0000000000412E5C) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000412EAB) ----------------------------------------------------
int goodG2B2_45()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000412EEE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_11_good()
{
  goodB2G1_55();
  goodB2G2_55();
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (0000000000412F1C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_13_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000412F79) ----------------------------------------------------
int goodB2G1_56()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000412FF6) ----------------------------------------------------
int goodB2G2_56()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000413067) ----------------------------------------------------
int goodG2B1_46()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004130B5) ----------------------------------------------------
int goodG2B2_46()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004130F7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_13_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (0000000000413125) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000413157) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000413189) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004131CD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_04_bad()
{
  return printHexCharLine(0);
}

//----- (000000000041320B) ----------------------------------------------------
int goodB2G1_57()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000413267) ----------------------------------------------------
int goodB2G2_57()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004132B7) ----------------------------------------------------
int goodG2B1_47()
{
  return printHexCharLine(252);
}

//----- (0000000000413301) ----------------------------------------------------
int goodG2B2_47()
{
  return printHexCharLine(252);
}

//----- (000000000041333F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_04_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (000000000041336D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (000000000041339A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (00000000004133C7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (0000000000413406) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000413432) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041345E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (00000000004134A6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004134E9) ----------------------------------------------------
int goodG2B_87()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = -2LL;
  v2 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000413517) ----------------------------------------------------
int goodB2G_77()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041355A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_66_good()
{
  goodG2B_87();
  return goodB2G_77();
}

//----- (0000000000413574) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_61_bad()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_61b_badSource(0x20u);
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004135AA) ----------------------------------------------------
int goodG2B_88()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodG2BSource();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004135E0) ----------------------------------------------------
int goodB2G_78()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_61b_goodB2GSource(0x20u);
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000413628) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_61_good()
{
  goodG2B_88();
  return goodB2G_78();
}

//----- (0000000000413642) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_05_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue )
    v1 = 0x8000000000000000LL;
  result = staticTrue;
  if ( staticTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620CC: using guessed type int staticTrue;

//----- (0000000000413694) ----------------------------------------------------
int goodB2G1_58()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue )
    v1 = 0x8000000000000000LL;
  result = staticFalse;
  if ( staticFalse )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620CC: using guessed type int staticTrue;
// 662220: using guessed type int staticFalse;

//----- (000000000041370E) ----------------------------------------------------
int goodB2G2_58()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue )
    v1 = 0x8000000000000000LL;
  result = staticTrue;
  if ( staticTrue && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620CC: using guessed type int staticTrue;

//----- (000000000041377C) ----------------------------------------------------
int goodG2B1_48()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticTrue;
  if ( staticTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620CC: using guessed type int staticTrue;
// 662220: using guessed type int staticFalse;

//----- (00000000004137D4) ----------------------------------------------------
int goodG2B2_48()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue )
    v1 = -2LL;
  result = staticTrue;
  if ( staticTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620CC: using guessed type int staticTrue;

//----- (0000000000413820) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_05_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (000000000041384E) ----------------------------------------------------
int __fastcall badSink_9(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041387A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_41_bad()
{
  return badSink_9(0x8000000000000000LL);
}

//----- (00000000004138A6) ----------------------------------------------------
int __fastcall goodG2BSink_9(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004138D2) ----------------------------------------------------
int goodG2B_89()
{
  return goodG2BSink_9(-2LL);
}

//----- (00000000004138F8) ----------------------------------------------------
int __fastcall goodB2GSink_4(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000413940) ----------------------------------------------------
int goodB2G_79()
{
  return goodB2GSink_4(0x8000000000000000LL);
}

//----- (000000000041396C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_41_good()
{
  goodB2G_79();
  return goodG2B_89();
}

//----- (0000000000413986) ----------------------------------------------------
int __fastcall badSink_10(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004139AF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_44_bad()
{
  return badSink_10(-128);
}

//----- (00000000004139D5) ----------------------------------------------------
int __fastcall goodG2BSink_10(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004139FE) ----------------------------------------------------
int goodG2B_90()
{
  return goodG2BSink_10(-2);
}

//----- (0000000000413A24) ----------------------------------------------------
int __fastcall goodB2GSink_5(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000413A5F) ----------------------------------------------------
int goodB2G_80()
{
  return goodB2GSink_5(-128);
}

//----- (0000000000413A85) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_44_good()
{
  goodG2B_90();
  return goodB2G_80();
}

//----- (0000000000413A9F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_07_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620D0: using guessed type int staticFive_1;
// 662128: using guessed type __int64 stdin;

//----- (0000000000413AFC) ----------------------------------------------------
int goodB2G1_59()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620D0: using guessed type int staticFive_1;
// 662128: using guessed type __int64 stdin;

//----- (0000000000413B79) ----------------------------------------------------
int goodB2G2_59()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620D0: using guessed type int staticFive_1;
// 662128: using guessed type __int64 stdin;

//----- (0000000000413BEA) ----------------------------------------------------
int goodG2B1_49()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_1;
  if ( staticFive_1 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620D0: using guessed type int staticFive_1;

//----- (0000000000413C38) ----------------------------------------------------
int goodG2B2_49()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = -2;
  result = staticFive_1;
  if ( staticFive_1 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620D0: using guessed type int staticFive_1;

//----- (0000000000413C7A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_07_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (0000000000413CA8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_64_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_64b_badSink(&v2);
}

//----- (0000000000413CF3) ----------------------------------------------------
int goodG2B_91()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_rand_sub_64b_goodG2BSink(&v1);
}

//----- (0000000000413D11) ----------------------------------------------------
int goodB2G_81()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_64b_goodB2GSink(&v2);
}

//----- (0000000000413D5C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_64_good()
{
  goodG2B_91();
  return goodB2G_81();
}

//----- (0000000000413D76) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_67_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_67b_badSink(v0);
}

//----- (0000000000413DC7) ----------------------------------------------------
int goodG2B_92()
{
  return CWE191_Integer_Underflow__char_rand_multiply_67b_goodG2BSink(0xFEu);
}

//----- (0000000000413DEB) ----------------------------------------------------
int goodB2G_82()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_67b_goodB2GSink(v0);
}

//----- (0000000000413E3C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_67_good()
{
  goodG2B_92();
  return goodB2G_82();
}

//----- (0000000000413E56) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_63_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_63b_badSink(&v2);
}

//----- (0000000000413EA1) ----------------------------------------------------
int goodG2B_93()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_rand_multiply_63b_goodG2BSink(&v1);
}

//----- (0000000000413EBF) ----------------------------------------------------
int goodB2G_83()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_63b_goodB2GSink(&v2);
}

//----- (0000000000413F0A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_63_good()
{
  goodG2B_93();
  return goodB2G_83();
}

//----- (0000000000413F24) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_34_bad()
{
  return printLongLongLine(0LL);
}

//----- (0000000000413F72) ----------------------------------------------------
int goodG2B_94()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000413FBA) ----------------------------------------------------
int goodB2G_84()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000414024) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_34_good()
{
  goodG2B_94();
  return goodB2G_84();
}

//----- (000000000041403E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_15_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (000000000041410F) ----------------------------------------------------
int goodB2G1_60()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (00000000004141FC) ----------------------------------------------------
int goodB2G2_60()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (00000000004142E9) ----------------------------------------------------
int goodG2B1_50()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000414323) ----------------------------------------------------
int goodG2B2_50()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041435D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_15_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000041438B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_11_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000414400) ----------------------------------------------------
int goodB2G1_61()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000414493) ----------------------------------------------------
int goodB2G2_61()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041451A) ----------------------------------------------------
int goodG2B1_51()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000041456E) ----------------------------------------------------
int goodG2B2_51()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (00000000004145B6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_11_good()
{
  goodB2G1_61();
  goodB2G2_61();
  goodG2B1_51();
  return goodG2B2_51();
}

//----- (00000000004145E4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_07_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 && v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 6620D4: using guessed type int staticFive_2;

//----- (0000000000414653) ----------------------------------------------------
int goodB2G1_62()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_2;
  if ( staticFive_2 != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 6620D4: using guessed type int staticFive_2;

//----- (00000000004146E0) ----------------------------------------------------
int goodB2G2_62()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 6620D4: using guessed type int staticFive_2;

//----- (0000000000414761) ----------------------------------------------------
int goodG2B1_52()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_2 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_2;
  if ( staticFive_2 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620D4: using guessed type int staticFive_2;

//----- (00000000004147AF) ----------------------------------------------------
int goodG2B2_52()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_2 == 5 )
    v1 = -2;
  result = staticFive_2;
  if ( staticFive_2 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620D4: using guessed type int staticFive_2;

//----- (00000000004147F1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_07_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_52();
  return goodG2B2_52();
}

//----- (000000000041481F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_badSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (0000000000414857) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodG2BSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (000000000041488F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodB2GSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (00000000004148E3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_06_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 5;
  if ( v10 < 0 )
    result = printLongLongLine(2 * v10);
  return result;
}

//----- (00000000004149CA) ----------------------------------------------------
int goodB2G1_63()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 5;
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000414AD9) ----------------------------------------------------
int goodB2G2_63()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 5;
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000414BDC) ----------------------------------------------------
int goodG2B1_53()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000414C34) ----------------------------------------------------
int goodG2B2_53()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000414C80) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_06_good()
{
  goodB2G1_63();
  goodB2G2_63();
  goodG2B1_53();
  return goodG2B2_53();
}

//----- (0000000000414CAE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000414CD4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000414CFA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000414D3C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_15_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000414D85) ----------------------------------------------------
int goodB2G1_64()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000414DED) ----------------------------------------------------
int goodB2G2_64()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000414E55) ----------------------------------------------------
int goodG2B1_54()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000414E89) ----------------------------------------------------
int goodG2B2_54()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000414EBD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_15_good()
{
  goodB2G1_64();
  goodB2G2_64();
  goodG2B1_54();
  return goodG2B2_54();
}

//----- (0000000000414EEB) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_badSource()
{
  return 128LL;
}

//----- (0000000000414EFE) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_goodG2BSource()
{
  return 254LL;
}

//----- (0000000000414F11) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_multiply_61b_goodB2GSource()
{
  return 128LL;
}

//----- (0000000000414F24) ----------------------------------------------------
__int64 badSource_0()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 result; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    result = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    result = ~(v8 ^ rand());
  }
  return result;
}

//----- (0000000000414FD5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_42_bad()
{
  __int64 v0; // rax

  v0 = badSource_0();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (0000000000415015) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return -2LL;
}

//----- (000000000041502B) ----------------------------------------------------
int goodG2B_95()
{
  __int64 v0; // rax

  v0 = goodG2BSource_0();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000041506B) ----------------------------------------------------
__int64 goodB2GSource_0()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 result; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    result = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    result = ~(v8 ^ rand());
  }
  return result;
}

//----- (000000000041511C) ----------------------------------------------------
int goodB2G_85()
{
  __int64 v0; // rax

  v0 = goodB2GSource_0();
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (0000000000415178) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_42_good()
{
  goodB2G_85();
  return goodG2B_95();
}

//----- (0000000000415192) ----------------------------------------------------
__int64 __fastcall badSource_1(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004151C1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_42_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = badSource_1(0LL);
  return printLongLongLine(v1 - 1);
}

//----- (00000000004151FB) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return -2LL;
}

//----- (0000000000415211) ----------------------------------------------------
int goodG2B_96()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = goodG2BSource_1();
  return printLongLongLine(v1 - 1);
}

//----- (000000000041524B) ----------------------------------------------------
__int64 __fastcall goodB2GSource_1(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041527A) ----------------------------------------------------
int goodB2G_86()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = goodB2GSource_1(0LL);
  if ( v1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (00000000004152D0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_42_good()
{
  goodB2G_86();
  return goodG2B_96();
}

//----- (00000000004152EA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_01_bad()
{
  return printHexCharLine(127);
}

//----- (0000000000415311) ----------------------------------------------------
int goodG2B_97()
{
  return printHexCharLine(-3);
}

//----- (0000000000415338) ----------------------------------------------------
int goodB2G_87()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000415371) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_01_good()
{
  goodG2B_97();
  return goodB2G_87();
}

//----- (000000000041538B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004153B7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004153E3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041542B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (0000000000415459) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (0000000000415487) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v2 - 1);
  return result;
}

//----- (00000000004154C7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (00000000004154F4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (0000000000415521) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (0000000000415560) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041558C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004155B8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000415600) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_66b_badSink((__int64)&v1);
}

//----- (0000000000415634) ----------------------------------------------------
int goodG2B_98()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = -2LL;
  v2 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000415662) ----------------------------------------------------
int goodB2G_88()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000415696) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_66_good()
{
  goodG2B_98();
  return goodB2G_88();
}

//----- (00000000004156B0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_61_bad()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_61b_badSource();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004156E6) ----------------------------------------------------
int goodG2B_99()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_61b_goodG2BSource();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041571C) ----------------------------------------------------
int goodB2G_89()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_min_multiply_61b_goodB2GSource();
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000415764) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_61_good()
{
  goodG2B_99();
  return goodB2G_89();
}

//----- (000000000041577E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_05_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticTrue_0 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 6620D8: using guessed type int staticTrue_0;

//----- (0000000000415865) ----------------------------------------------------
int goodB2G1_65()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticTrue_0 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticFalse_0;
  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 6620D8: using guessed type int staticTrue_0;
// 662224: using guessed type int staticFalse_0;

//----- (0000000000415974) ----------------------------------------------------
int goodB2G2_65()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticTrue_0 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticTrue_0;
  if ( staticTrue_0 && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 6620D8: using guessed type int staticTrue_0;

//----- (0000000000415A77) ----------------------------------------------------
int goodG2B1_55()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_0 )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620D8: using guessed type int staticTrue_0;
// 662224: using guessed type int staticFalse_0;

//----- (0000000000415ACF) ----------------------------------------------------
int goodG2B2_55()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_0 )
    v1 = -2LL;
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 6620D8: using guessed type int staticTrue_0;

//----- (0000000000415B1B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_05_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_55();
  return goodG2B2_55();
}

//----- (0000000000415B49) ----------------------------------------------------
void CWE191_Integer_Underflow__char_rand_multiply_17_bad()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      printHexCharLine(2 * v1);
  }
}

//----- (0000000000415BC8) ----------------------------------------------------
void goodB2G_90()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
    {
      if ( v1 < -63 )
        printLine("data value is too small to perform multiplication.");
      else
        printHexCharLine(2 * v1);
    }
  }
}

//----- (0000000000415C59) ----------------------------------------------------
int goodG2B_100()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (0000000000415CAB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_17_good()
{
  goodB2G_90();
  return goodG2B_100();
}

//----- (0000000000415CC5) ----------------------------------------------------
int __fastcall badSink_11(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000415CF1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_41_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return badSink_11(v4);
}

//----- (0000000000415DAE) ----------------------------------------------------
int __fastcall goodG2BSink_11(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000415DDA) ----------------------------------------------------
int goodG2B_101()
{
  return goodG2BSink_11(-2LL);
}

//----- (0000000000415E00) ----------------------------------------------------
int __fastcall goodB2GSink_6(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000415E48) ----------------------------------------------------
int goodB2G_91()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return goodB2GSink_6(v4);
}

//----- (0000000000415F05) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_41_good()
{
  goodB2G_91();
  return goodG2B_101();
}

//----- (0000000000415F1F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620DC: using guessed type int staticTrue_1;
// 662128: using guessed type __int64 stdin;

//----- (0000000000415F7A) ----------------------------------------------------
int goodB2G1_66()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620DC: using guessed type int staticTrue_1;
// 662128: using guessed type __int64 stdin;
// 662228: using guessed type int staticFalse_1;

//----- (0000000000416000) ----------------------------------------------------
int goodB2G2_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620DC: using guessed type int staticTrue_1;
// 662128: using guessed type __int64 stdin;

//----- (000000000041607A) ----------------------------------------------------
int goodG2B1_56()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620DC: using guessed type int staticTrue_1;
// 662228: using guessed type int staticFalse_1;

//----- (00000000004160CC) ----------------------------------------------------
int goodG2B2_56()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_1 )
    v1 = -2LL;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620DC: using guessed type int staticTrue_1;

//----- (0000000000416112) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_05_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_56();
  return goodG2B2_56();
}

//----- (0000000000416140) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_68b_badSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_68_badData - 1);
}
// 6623D8: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_badData;

//----- (0000000000416169) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_68b_goodG2BSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_68_goodG2BData - 1);
}
// 6623D7: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_goodG2BData;

//----- (0000000000416192) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData - 1);
  return result;
}
// 6623D6: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData;

//----- (00000000004161CD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_17_bad()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000416233) ----------------------------------------------------
int goodB2G_92()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004162AD) ----------------------------------------------------
int goodG2B_102()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (00000000004162FA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_17_good()
{
  goodB2G_92();
  return goodG2B_102();
}

//----- (0000000000416314) ----------------------------------------------------
int __fastcall badSink_12(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000416338) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_sub_44_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = badSink_12;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041637A) ----------------------------------------------------
int __fastcall goodG2BSink_12(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000041639E) ----------------------------------------------------
int goodG2B_103()
{
  return goodG2BSink_12(-2);
}

//----- (00000000004163C4) ----------------------------------------------------
int __fastcall goodB2GSink_7(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (00000000004163FA) ----------------------------------------------------
__int64 goodB2G_93()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_7;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041643C) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_sub_44_good()
{
  goodG2B_103();
  return goodB2G_93();
}

//----- (0000000000416456) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_07_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_3 == 5 )
    v1 = -128;
  result = staticFive_3;
  if ( staticFive_3 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620E0: using guessed type int staticFive_3;

//----- (0000000000416498) ----------------------------------------------------
int goodB2G1_67()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_3 == 5 )
    v1 = -128;
  result = staticFive_3;
  if ( staticFive_3 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620E0: using guessed type int staticFive_3;

//----- (00000000004164F8) ----------------------------------------------------
int goodB2G2_67()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_3 == 5 )
    v1 = -128;
  result = staticFive_3;
  if ( staticFive_3 == 5 && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620E0: using guessed type int staticFive_3;

//----- (000000000041654C) ----------------------------------------------------
int goodG2B1_57()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_3 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_3;
  if ( staticFive_3 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620E0: using guessed type int staticFive_3;

//----- (000000000041659A) ----------------------------------------------------
int goodG2B2_57()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_3 == 5 )
    v1 = -2;
  result = staticFive_3;
  if ( staticFive_3 == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 6620E0: using guessed type int staticFive_3;

//----- (00000000004165DC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_07_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_57();
  return goodG2B2_57();
}

//----- (000000000041660A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_34_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (00000000004166E9) ----------------------------------------------------
int goodG2B_104()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000416731) ----------------------------------------------------
int goodB2G_94()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (000000000041682C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_34_good()
{
  goodG2B_104();
  return goodB2G_94();
}

//----- (0000000000416846) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_34_bad()
{
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v3 = v1;
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041689D) ----------------------------------------------------
int goodG2B_105()
{
  return printLongLongLine(-3LL);
}

//----- (00000000004168DF) ----------------------------------------------------
int goodB2G_95()
{
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v3 = v1;
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v3 - 1;
  return printLongLongLine(v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000416952) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_34_good()
{
  goodG2B_105();
  return goodB2G_95();
}

//----- (000000000041696C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_badSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (00000000004169A4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodG2BSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (00000000004169DC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodB2GSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000416A30) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_sub_63b_badSink(&v1);
}

//----- (0000000000416A4E) ----------------------------------------------------
int goodG2B_106()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_min_sub_63b_goodG2BSink(&v1);
}

//----- (0000000000416A6C) ----------------------------------------------------
int goodB2G_96()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_sub_63b_goodB2GSink(&v1);
}

//----- (0000000000416A8A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_63_good()
{
  goodG2B_106();
  return goodB2G_96();
}

//----- (0000000000416AA4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53d_badSink(a1);
}

//----- (0000000000416ABE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodG2BSink(a1);
}

//----- (0000000000416AD8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodB2GSink(a1);
}

//----- (0000000000416AF2) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_badSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000416B36) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_goodG2BSource()
{
  return 254LL;
}

//----- (0000000000416B49) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_multiply_61b_goodB2GSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000416B8D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_badSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) - 1LL);
}

//----- (0000000000416BBF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) - 1LL);
}

//----- (0000000000416BF1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+18h] [rbp-8h]

  v2 = *(_QWORD *)(a1 + 16);
  if ( v2 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v2 - 1);
  return result;
}

//----- (0000000000416C3F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_15_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (0000000000416C79) ----------------------------------------------------
int goodB2G1_68()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000416CCF) ----------------------------------------------------
int goodB2G2_68()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000416D25) ----------------------------------------------------
int goodG2B1_58()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000416D59) ----------------------------------------------------
int goodG2B2_58()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000416D8D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_15_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_58();
  return goodG2B2_58();
}

//----- (0000000000416DBB) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_sub_61b_badSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000416DEB) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_sub_61b_goodG2BSource()
{
  return 254LL;
}

//----- (0000000000416DFE) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__char_fscanf_sub_61b_goodB2GSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000416E2E) ----------------------------------------------------
unsigned __int64 badSource_2()
{
  return 0x8000000000000000LL;
}

//----- (0000000000416E4A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_42_bad()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = badSource_2();
  return printLongLongLine(v1 - 1);
}

//----- (0000000000416E84) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return -2LL;
}

//----- (0000000000416E9A) ----------------------------------------------------
int goodG2B_107()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = goodG2BSource_2();
  return printLongLongLine(v1 - 1);
}

//----- (0000000000416ED4) ----------------------------------------------------
unsigned __int64 goodB2GSource_2()
{
  return 0x8000000000000000LL;
}

//----- (0000000000416EF0) ----------------------------------------------------
int goodB2G_97()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = goodB2GSource_2();
  if ( v1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (0000000000416F46) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_42_good()
{
  goodB2G_97();
  return goodG2B_107();
}

//----- (0000000000416F60) ----------------------------------------------------
int __fastcall badSink_13(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000416F8C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return badSink_13(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000416FC7) ----------------------------------------------------
int __fastcall goodG2BSink_13(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000416FF3) ----------------------------------------------------
int goodG2B_108()
{
  return goodG2BSink_13(-2LL);
}

//----- (0000000000417019) ----------------------------------------------------
int __fastcall goodB2GSink_8(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000417061) ----------------------------------------------------
int goodB2G_98()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return goodB2GSink_8(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041709C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_41_good()
{
  goodB2G_98();
  return goodG2B_108();
}

//----- (00000000004170B6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (00000000004170E3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (0000000000417110) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (000000000041714F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041717B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004171A7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (00000000004171EF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_66_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  char v10; // [rsp+0h] [rbp-40h]
  __int64 v11; // [rsp+10h] [rbp-30h]
  __int64 v12; // [rsp+28h] [rbp-18h]

  v12 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v12 = v4;
  v11 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_66b_badSink((__int64)&v10);
}

//----- (00000000004172B4) ----------------------------------------------------
int goodG2B_109()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = -2LL;
  v2 = -2LL;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004172E2) ----------------------------------------------------
int goodB2G_99()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  char v10; // [rsp+0h] [rbp-40h]
  __int64 v11; // [rsp+10h] [rbp-30h]
  __int64 v12; // [rsp+28h] [rbp-18h]

  v12 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v12 = v4;
  v11 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_66b_goodB2GSink((__int64)&v10);
}

//----- (00000000004173A7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_66_good()
{
  goodG2B_109();
  return goodB2G_99();
}

//----- (00000000004173C1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_61_bad()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_61b_badSource();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004173F7) ----------------------------------------------------
int goodG2B_110()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_61b_goodG2BSource();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041742D) ----------------------------------------------------
int goodB2G_100()
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_rand_multiply_61b_goodB2GSource();
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000417475) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_61_good()
{
  goodG2B_110();
  return goodB2G_100();
}

//----- (000000000041748F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004174D2) ----------------------------------------------------
int goodG2B_111()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = -2LL;
  v2 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000417500) ----------------------------------------------------
int goodB2G_101()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000417543) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_66_good()
{
  goodG2B_111();
  return goodB2G_101();
}

//----- (000000000041755D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_61_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_fscanf_sub_61b_badSource(0x20u);
  return printHexCharLine(v1 - 1);
}

//----- (000000000041758E) ----------------------------------------------------
int goodG2B_112()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_fscanf_sub_61b_goodG2BSource();
  return printHexCharLine(v1 - 1);
}

//----- (00000000004175BF) ----------------------------------------------------
int goodB2G_102()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_fscanf_sub_61b_goodB2GSource(0x20u);
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000417602) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_61_good()
{
  goodG2B_112();
  return goodB2G_102();
}

//----- (000000000041761C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_51_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_51b_badSink(0x8000000000000000LL);
}

//----- (0000000000417648) ----------------------------------------------------
int goodG2B_113()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodG2BSink(-2LL);
}

//----- (000000000041766E) ----------------------------------------------------
int goodB2G_103()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_51b_goodB2GSink(0x8000000000000000LL);
}

//----- (000000000041769A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_51_good()
{
  goodG2B_113();
  return goodB2G_103();
}

//----- (00000000004176B4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_15_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004176FD) ----------------------------------------------------
int goodB2G1_69()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041775A) ----------------------------------------------------
int goodB2G2_69()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004177B7) ----------------------------------------------------
int goodG2B1_59()
{
  return printHexCharLine(252);
}

//----- (00000000004177E5) ----------------------------------------------------
int goodG2B2_59()
{
  return printHexCharLine(252);
}

//----- (0000000000417813) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_15_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B1_59();
  return goodG2B2_59();
}

//----- (0000000000417841) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_05_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_2 )
    v1 = 0x8000000000000000LL;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620E4: using guessed type int staticTrue_2;

//----- (000000000041788D) ----------------------------------------------------
int goodB2G1_70()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_2 )
    v1 = 0x8000000000000000LL;
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 6620E4: using guessed type int staticTrue_2;
// 66222C: using guessed type int staticFalse_2;

//----- (0000000000417901) ----------------------------------------------------
int goodB2G2_70()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_2 )
    v1 = 0x8000000000000000LL;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 6620E4: using guessed type int staticTrue_2;

//----- (0000000000417969) ----------------------------------------------------
int goodG2B1_60()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620E4: using guessed type int staticTrue_2;
// 66222C: using guessed type int staticFalse_2;

//----- (00000000004179BB) ----------------------------------------------------
int goodG2B2_60()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_2 )
    v1 = -2LL;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 6620E4: using guessed type int staticTrue_2;

//----- (0000000000417A01) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_05_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_60();
  return goodG2B2_60();
}

//----- (0000000000417A2F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_17_bad()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -128;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000417A7C) ----------------------------------------------------
int goodB2G_104()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -128;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}

//----- (0000000000417ADB) ----------------------------------------------------
int goodG2B_114()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000417B28) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_17_good()
{
  goodB2G_104();
  return goodG2B_114();
}

//----- (0000000000417B42) ----------------------------------------------------
int __fastcall badSink_14(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000417B68) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_41_bad()
{
  return badSink_14(0x8000000000000000LL);
}

//----- (0000000000417B94) ----------------------------------------------------
int __fastcall goodG2BSink_14(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000417BBA) ----------------------------------------------------
int goodG2B_115()
{
  return goodG2BSink_14(-2LL);
}

//----- (0000000000417BE0) ----------------------------------------------------
int __fastcall goodB2GSink_9(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000417C22) ----------------------------------------------------
int goodB2G_105()
{
  return goodB2GSink_9(0x8000000000000000LL);
}

//----- (0000000000417C4E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_41_good()
{
  goodB2G_105();
  return goodG2B_115();
}

//----- (0000000000417C68) ----------------------------------------------------
int __fastcall badSink_15(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000417C8C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_44_bad()
{
  return badSink_15(-128);
}

//----- (0000000000417CB2) ----------------------------------------------------
int __fastcall goodG2BSink_15(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000417CD6) ----------------------------------------------------
int goodG2B_116()
{
  return goodG2BSink_15(-2);
}

//----- (0000000000417CFC) ----------------------------------------------------
int __fastcall goodB2GSink_10(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000417D32) ----------------------------------------------------
int goodB2G_106()
{
  return goodB2GSink_10(-128);
}

//----- (0000000000417D58) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_44_good()
{
  goodG2B_116();
  return goodB2G_106();
}

//----- (0000000000417D72) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_07_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620E8: using guessed type int staticFive_4;
// 662128: using guessed type __int64 stdin;

//----- (0000000000417DC8) ----------------------------------------------------
int goodB2G1_71()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFive_4 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620E8: using guessed type int staticFive_4;
// 662128: using guessed type __int64 stdin;

//----- (0000000000417E3E) ----------------------------------------------------
int goodB2G2_71()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620E8: using guessed type int staticFive_4;
// 662128: using guessed type __int64 stdin;

//----- (0000000000417EA8) ----------------------------------------------------
int goodG2B1_61()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620E8: using guessed type int staticFive_4;

//----- (0000000000417EF1) ----------------------------------------------------
int goodG2B2_61()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    v1 = -2;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620E8: using guessed type int staticFive_4;

//----- (0000000000417F2E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_07_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_61();
  return goodG2B2_61();
}

//----- (0000000000417F5C) ----------------------------------------------------
__int64 __fastcall badSource_3(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000417F8C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_42_bad()
{
  int result; // eax

  result = badSource_3(0x20u);
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000417FC2) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 254LL;
}

//----- (0000000000417FD5) ----------------------------------------------------
int goodG2B_117()
{
  int result; // eax

  result = goodG2BSource_3();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041800B) ----------------------------------------------------
__int64 __fastcall goodB2GSource_3(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041803B) ----------------------------------------------------
int goodB2G_107()
{
  int result; // eax

  result = goodB2GSource_3(0x20u);
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000418083) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_42_good()
{
  goodB2G_107();
  return goodG2B_117();
}

//----- (000000000041809D) ----------------------------------------------------
int __fastcall badSink_16(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004180C6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_41_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return badSink_16(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004180FF) ----------------------------------------------------
int __fastcall goodG2BSink_16(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000418128) ----------------------------------------------------
int goodG2B_118()
{
  return goodG2BSink_16(-2);
}

//----- (0000000000418145) ----------------------------------------------------
int __fastcall goodB2GSink_11(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000418180) ----------------------------------------------------
int goodB2G_108()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return goodB2GSink_11(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004181B9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_41_good()
{
  goodB2G_108();
  return goodG2B_118();
}

//----- (00000000004181D3) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__char_fscanf_sub_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418211) ----------------------------------------------------
int goodG2B_119()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_fscanf_sub_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000418236) ----------------------------------------------------
int goodB2G_109()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE191_Integer_Underflow__char_fscanf_sub_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418274) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_66_good()
{
  goodG2B_119();
  return goodB2G_109();
}

//----- (000000000041828E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (00000000004182F3) ----------------------------------------------------
int goodB2G1_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000418383) ----------------------------------------------------
int goodB2G2_72()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000418407) ----------------------------------------------------
int goodG2B1_62()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (0000000000418461) ----------------------------------------------------
int goodG2B2_62()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (00000000004184AF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_14_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B1_62();
  return goodG2B2_62();
}

//----- (00000000004184DD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_bad()
{
  __int64 v0; // rax
  __int64 v2; // [rsp+0h] [rbp-30h]
  __int64 v3; // [rsp+8h] [rbp-28h]
  __int64 v4; // [rsp+10h] [rbp-20h]
  __int64 v5; // [rsp+18h] [rbp-18h]
  __int64 *v6; // [rsp+20h] [rbp-10h]
  __int64 *v7; // [rsp+28h] [rbp-8h]

  v7 = &v3;
  v6 = &v3;
  v3 = 0LL;
  v2 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v2);
  *v7 = v2;
  v0 = *v6;
  v5 = *v6;
  if ( v5 < 0 )
  {
    v4 = 2 * v5;
    LODWORD(v0) = printLongLongLine(2 * v5);
  }
  return v0;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041855B) ----------------------------------------------------
int goodG2B_120()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-18h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2LL;
  v1 = -2LL;
  return printLongLongLine(-4LL);
}

//----- (00000000004185C4) ----------------------------------------------------
int goodB2G_110()
{
  __int64 v0; // rax
  __int64 v2; // [rsp+0h] [rbp-30h]
  __int64 v3; // [rsp+8h] [rbp-28h]
  __int64 v4; // [rsp+10h] [rbp-20h]
  __int64 v5; // [rsp+18h] [rbp-18h]
  __int64 *v6; // [rsp+20h] [rbp-10h]
  __int64 *v7; // [rsp+28h] [rbp-8h]

  v7 = &v3;
  v6 = &v3;
  v3 = 0LL;
  v2 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v2);
  *v7 = v2;
  v0 = *v6;
  v5 = *v6;
  if ( v5 < 0 )
  {
    if ( v5 < -4611686018427387903LL )
    {
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v4 = 2 * v5;
      LODWORD(v0) = printLongLongLine(2 * v5);
    }
  }
  return v0;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041865E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_32_good()
{
  goodG2B_120();
  return goodB2G_110();
}

//----- (0000000000418678) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_34_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (00000000004186C0) ----------------------------------------------------
int goodG2B_121()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000418702) ----------------------------------------------------
int goodB2G_111()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000418766) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_34_good()
{
  goodG2B_121();
  return goodB2G_111();
}

//----- (0000000000418780) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_badSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) - 1LL);
}

//----- (00000000004187B2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) - 1LL);
}

//----- (00000000004187E4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+18h] [rbp-8h]

  v2 = *(_QWORD *)(a1 + 16);
  if ( v2 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v2 - 1);
  return result;
}

//----- (0000000000418832) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_sub_61b_badSource()
{
  return 128LL;
}

//----- (0000000000418845) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_sub_61b_goodG2BSource()
{
  return 254LL;
}

//----- (0000000000418858) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_min_sub_61b_goodB2GSource()
{
  return 128LL;
}

//----- (000000000041886B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_badSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041889F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004188D3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000418923) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_54_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_54b_badSink(v0);
}

//----- (000000000041896D) ----------------------------------------------------
int goodG2B_122()
{
  return CWE191_Integer_Underflow__char_rand_sub_54b_goodG2BSink(-2);
}

//----- (000000000041898A) ----------------------------------------------------
int goodB2G_112()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_54b_goodB2GSink(v0);
}

//----- (00000000004189D4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_54_good()
{
  goodG2B_122();
  return goodB2G_112();
}

//----- (00000000004189EE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_05_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620EC: using guessed type int staticTrue_3;
// 662128: using guessed type __int64 stdin;

//----- (0000000000418A49) ----------------------------------------------------
int goodB2G1_73()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFalse_3 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620EC: using guessed type int staticTrue_3;
// 662128: using guessed type __int64 stdin;
// 662230: using guessed type int staticFalse_3;

//----- (0000000000418AC4) ----------------------------------------------------
int goodB2G2_73()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6620EC: using guessed type int staticTrue_3;
// 662128: using guessed type __int64 stdin;

//----- (0000000000418B33) ----------------------------------------------------
int goodG2B1_63()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620EC: using guessed type int staticTrue_3;
// 662230: using guessed type int staticFalse_3;

//----- (0000000000418B7F) ----------------------------------------------------
int goodG2B2_63()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_3 )
    v1 = -2;
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620EC: using guessed type int staticTrue_3;

//----- (0000000000418BBF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_05_good()
{
  goodB2G1_73();
  goodB2G2_73();
  goodG2B1_63();
  return goodG2B2_63();
}

//----- (0000000000418BED) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441EA0, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418C4E) ----------------------------------------------------
int goodB2G1_74()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441EA0, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418CDA) ----------------------------------------------------
int goodB2G2_74()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441EA0, &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418D5A) ----------------------------------------------------
int goodG2B1_64()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000418DB0) ----------------------------------------------------
int goodG2B2_64()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000418DFA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_04_good()
{
  goodB2G1_74();
  goodB2G2_74();
  goodG2B1_64();
  return goodG2B2_64();
}

//----- (0000000000418E28) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v3;
    result = printLongLongLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418E85) ----------------------------------------------------
int goodG2B_123()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000418ECD) ----------------------------------------------------
int goodB2G_113()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( v1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v3;
      result = printLongLongLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000418F46) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_31_good()
{
  goodG2B_123();
  return goodB2G_113();
}

//----- (0000000000418F60) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_13_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000418FA2) ----------------------------------------------------
int goodB2G1_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000419002) ----------------------------------------------------
int goodB2G2_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -128;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000419056) ----------------------------------------------------
int goodG2B1_65()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004190A4) ----------------------------------------------------
int goodG2B2_65()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004190E6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_13_good()
{
  goodB2G1_75();
  goodB2G2_75();
  goodG2B1_65();
  return goodG2B2_65();
}

//----- (0000000000419114) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_11_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041916E) ----------------------------------------------------
int goodB2G1_76()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (00000000004191F0) ----------------------------------------------------
int goodB2G2_76()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0x8000000000000000LL;
  result = globalReturnsTrue();
  if ( result && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000419266) ----------------------------------------------------
int goodG2B1_66()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (00000000004192C6) ----------------------------------------------------
int goodG2B2_66()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041931A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_11_good()
{
  goodB2G1_76();
  goodB2G2_76();
  goodG2B1_66();
  return goodG2B2_66();
}

//----- (0000000000419348) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041936E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000419394) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (00000000004193D6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_34_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  v3 = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v3;
    result = printHexCharLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000419429) ----------------------------------------------------
int goodG2B_124()
{
  return printHexCharLine(252);
}

//----- (0000000000419463) ----------------------------------------------------
int goodB2G_114()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  v3 = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v3 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v3;
      result = printHexCharLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004194C8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_34_good()
{
  goodG2B_124();
  return goodB2G_114();
}

//----- (00000000004194E2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_66b_badSink((__int64)&v1);
}

//----- (0000000000419516) ----------------------------------------------------
int goodG2B_125()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = -2LL;
  v2 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000419544) ----------------------------------------------------
int goodB2G_115()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000419578) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_66_good()
{
  goodG2B_125();
  return goodB2G_115();
}

//----- (0000000000419592) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_61_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_min_sub_61b_badSource();
  return printHexCharLine(v1 - 1);
}

//----- (00000000004195C3) ----------------------------------------------------
int goodG2B_126()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_min_sub_61b_goodG2BSource();
  return printHexCharLine(v1 - 1);
}

//----- (00000000004195F4) ----------------------------------------------------
int goodB2G_116()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_min_sub_61b_goodB2GSource();
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000419637) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_61_good()
{
  goodG2B_126();
  return goodB2G_116();
}

//----- (0000000000419651) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (0000000000419684) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004196B7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004196FC) ----------------------------------------------------
void CWE191_Integer_Underflow__char_rand_sub_17_bad()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
    printHexCharLine(v1 - 1);
}

//----- (0000000000419776) ----------------------------------------------------
void goodB2G_117()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == -128 )
      printLine("data value is too large to perform subtraction.");
    else
      printHexCharLine(v1 - 1);
  }
}

//----- (0000000000419802) ----------------------------------------------------
int goodG2B_127()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041984F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_17_good()
{
  goodB2G_117();
  return goodG2B_127();
}

//----- (0000000000419869) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004198AC) ----------------------------------------------------
int goodG2B_128()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodG2BSink(-2LL);
}

//----- (00000000004198DA) ----------------------------------------------------
int goodB2G_118()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041991D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_67_good()
{
  goodG2B_128();
  return goodB2G_118();
}

//----- (0000000000419937) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_15_bad()
{
  return printHexCharLine(0);
}

//----- (0000000000419965) ----------------------------------------------------
int goodB2G1_77()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004199A5) ----------------------------------------------------
int goodB2G2_77()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004199E5) ----------------------------------------------------
int goodG2B1_67()
{
  return printHexCharLine(252);
}

//----- (0000000000419A13) ----------------------------------------------------
int goodG2B2_67()
{
  return printHexCharLine(252);
}

//----- (0000000000419A41) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_15_good()
{
  goodB2G1_77();
  goodB2G2_77();
  goodG2B1_67();
  return goodG2B2_67();
}

//----- (0000000000419A6F) ----------------------------------------------------
int __fastcall badSink_17(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000419A93) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_44_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_17)((unsigned int)(char)v0);
}

//----- (0000000000419AE6) ----------------------------------------------------
int __fastcall goodG2BSink_17(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000419B0A) ----------------------------------------------------
int goodG2B_129()
{
  return goodG2BSink_17(-2);
}

//----- (0000000000419B30) ----------------------------------------------------
int __fastcall goodB2GSink_12(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000419B66) ----------------------------------------------------
__int64 goodB2G_119()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_12)((unsigned int)(char)v0);
}

//----- (0000000000419BB9) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_44_good()
{
  goodG2B_129();
  return goodB2G_119();
}

//----- (0000000000419BD3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_63_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_63b_badSink(&v10);
}

//----- (0000000000419C90) ----------------------------------------------------
int goodG2B_130()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodG2BSink(&v1);
}

//----- (0000000000419CB6) ----------------------------------------------------
int goodB2G_120()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodB2GSink(&v10);
}

//----- (0000000000419D73) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_63_good()
{
  goodG2B_130();
  return goodB2G_120();
}

//----- (0000000000419D8D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_18_bad()
{
  return printLongLongLine(0LL);
}

//----- (0000000000419DCD) ----------------------------------------------------
int goodB2G_121()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000419E29) ----------------------------------------------------
int goodG2B_131()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000419E63) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_18_good()
{
  goodB2G_121();
  return goodG2B_131();
}

//----- (0000000000419E7D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_07_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = -128;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620F0: using guessed type int staticFive_5;

//----- (0000000000419EBA) ----------------------------------------------------
int goodB2G1_78()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = -128;
  if ( staticFive_5 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 6620F0: using guessed type int staticFive_5;

//----- (0000000000419F15) ----------------------------------------------------
int goodB2G2_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = -128;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 6620F0: using guessed type int staticFive_5;

//----- (0000000000419F64) ----------------------------------------------------
int goodG2B1_68()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620F0: using guessed type int staticFive_5;

//----- (0000000000419FAD) ----------------------------------------------------
int goodG2B2_68()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = -2;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620F0: using guessed type int staticFive_5;

//----- (0000000000419FEA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_07_good()
{
  goodB2G1_78();
  goodB2G2_78();
  goodG2B1_68();
  return goodG2B2_68();
}

//----- (000000000041A018) ----------------------------------------------------
__int64 badSource_4()
{
  return 128LL;
}

//----- (000000000041A02B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_42_bad()
{
  int result; // eax

  result = badSource_4();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041A061) ----------------------------------------------------
__int64 goodG2BSource_4()
{
  return 254LL;
}

//----- (000000000041A074) ----------------------------------------------------
int goodG2B_132()
{
  int result; // eax

  result = goodG2BSource_4();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041A0AA) ----------------------------------------------------
__int64 goodB2GSource_4()
{
  return 128LL;
}

//----- (000000000041A0BD) ----------------------------------------------------
int goodB2G_122()
{
  int result; // eax

  result = goodB2GSource_4();
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041A105) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_42_good()
{
  goodB2G_122();
  return goodG2B_132();
}

//----- (000000000041A11F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662238: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal;

//----- (000000000041A155) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 66223C: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global;

//----- (000000000041A1B3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662240: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global;

//----- (000000000041A205) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662244: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal;

//----- (000000000041A23B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_14_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041A28F) ----------------------------------------------------
int goodB2G1_79()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041A30B) ----------------------------------------------------
int goodB2G2_79()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041A37B) ----------------------------------------------------
int goodG2B1_69()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041A3D5) ----------------------------------------------------
int goodG2B2_69()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041A423) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_14_good()
{
  goodB2G1_79();
  goodB2G2_79();
  goodG2B1_69();
  return goodG2B2_69();
}

//----- (000000000041A451) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_16_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041A49A) ----------------------------------------------------
int goodB2G_123()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041A4F7) ----------------------------------------------------
int goodG2B_133()
{
  return printHexCharLine(252);
}

//----- (000000000041A525) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_16_good()
{
  goodB2G_123();
  return goodG2B_133();
}

//----- (000000000041A53F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_32_bad()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-18h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 0x8000000000000000LL;
  v1 = 0x8000000000000000LL;
  return printLongLongLine(0LL);
}

//----- (000000000041A5AE) ----------------------------------------------------
int goodG2B_134()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-18h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2LL;
  v1 = -2LL;
  return printLongLongLine(-4LL);
}

//----- (000000000041A617) ----------------------------------------------------
int goodB2G_124()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0x8000000000000000LL;
  v1 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041A6A2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_32_good()
{
  goodG2B_134();
  return goodB2G_124();
}

//----- (000000000041A6BC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041A70B) ----------------------------------------------------
int goodB2G1_80()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041A779) ----------------------------------------------------
int goodB2G2_80()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041A7E7) ----------------------------------------------------
int goodG2B1_70()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041A81F) ----------------------------------------------------
int goodG2B2_70()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041A857) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_good()
{
  goodB2G1_80();
  goodB2G2_80();
  goodG2B1_70();
  return goodG2B2_70();
}

//----- (000000000041A885) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_badSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041A8C9) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_goodG2BSource()
{
  return 254LL;
}

//----- (000000000041A8DC) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_61b_goodB2GSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041A920) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_06_bad()
{
  return printLongLongLine(0LL);
}

//----- (000000000041A972) ----------------------------------------------------
int goodB2G1_81()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041A9EC) ----------------------------------------------------
int goodB2G2_81()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041AA5A) ----------------------------------------------------
int goodG2B1_71()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041AAB2) ----------------------------------------------------
int goodG2B2_71()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041AAFE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_06_good()
{
  goodB2G1_81();
  goodB2G2_81();
  goodG2B1_71();
  return goodG2B2_71();
}

//----- (000000000041AB2C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_badSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041AB60) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041AB94) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041ABE4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041AC0D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041AC36) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041AC71) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_05_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_4 )
    v1 = -128;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620F4: using guessed type int staticTrue_4;

//----- (000000000041ACB1) ----------------------------------------------------
int goodB2G1_82()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_4 )
    v1 = -128;
  result = staticFalse_4;
  if ( staticFalse_4 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620F4: using guessed type int staticTrue_4;
// 662234: using guessed type int staticFalse_4;

//----- (000000000041AD0F) ----------------------------------------------------
int goodB2G2_82()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_4 )
    v1 = -128;
  result = staticTrue_4;
  if ( staticTrue_4 && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620F4: using guessed type int staticTrue_4;

//----- (000000000041AD61) ----------------------------------------------------
int goodG2B1_72()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_4 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620F4: using guessed type int staticTrue_4;
// 662234: using guessed type int staticFalse_4;

//----- (000000000041ADAD) ----------------------------------------------------
int goodG2B2_72()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_4 )
    v1 = -2;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620F4: using guessed type int staticTrue_4;

//----- (000000000041ADED) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_05_good()
{
  goodB2G1_82();
  goodB2G2_82();
  goodG2B1_72();
  return goodG2B2_72();
}

//----- (000000000041AE1B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662238: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_badGlobal;

//----- (000000000041AE60) ----------------------------------------------------
int goodB2G1_83()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 66223C: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G1Global;

//----- (000000000041AEA5) ----------------------------------------------------
int goodB2G2_83()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662240: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodB2G2Global;

//----- (000000000041AEEA) ----------------------------------------------------
int goodG2B_135()
{
  CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BSink(-2LL);
}
// 662244: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_goodG2BGlobal;

//----- (000000000041AF1A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_22_good()
{
  goodB2G1_83();
  goodB2G2_83();
  return goodG2B_135();
}

//----- (000000000041AF3E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_17_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    result = 0;
    v1 = 0x8000000000000000LL;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041AFA2) ----------------------------------------------------
int goodB2G_125()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    result = 0;
    v1 = 0x8000000000000000LL;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
        result = printLine("data value is too small to perform multiplication.");
      else
        result = printLongLongLine(2 * v1);
    }
  }
  return result;
}

//----- (000000000041B022) ----------------------------------------------------
int goodG2B_136()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = -2LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041B080) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_17_good()
{
  goodB2G_125();
  return goodG2B_136();
}

//----- (000000000041B09A) ----------------------------------------------------
int __fastcall badSink_18(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041B0C3) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_41_bad()
{
  return badSink_18(-128);
}

//----- (000000000041B0E0) ----------------------------------------------------
int __fastcall goodG2BSink_18(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041B109) ----------------------------------------------------
int goodG2B_137()
{
  return goodG2BSink_18(-2);
}

//----- (000000000041B126) ----------------------------------------------------
int __fastcall goodB2GSink_13(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041B161) ----------------------------------------------------
int goodB2G_126()
{
  return goodB2GSink_13(-128);
}

//----- (000000000041B17E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_41_good()
{
  goodB2G_126();
  return goodG2B_137();
}

//----- (000000000041B198) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_badSink(a1);
}

//----- (000000000041B1B2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodG2BSink(a1);
}

//----- (000000000041B1CC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodB2GSink(a1);
}

//----- (000000000041B1E6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_04_bad()
{
  return printLongLongLine(0LL);
}

//----- (000000000041B236) ----------------------------------------------------
int goodB2G1_84()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041B2AE) ----------------------------------------------------
int goodB2G2_84()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041B31A) ----------------------------------------------------
int goodG2B1_73()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041B370) ----------------------------------------------------
int goodG2B2_73()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041B3BA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_04_good()
{
  goodB2G1_84();
  goodB2G2_84();
  goodG2B1_73();
  return goodG2B2_73();
}

//----- (000000000041B3E8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_31_bad()
{
  return printLongLongLine(0LL);
}

//----- (000000000041B436) ----------------------------------------------------
int goodG2B_138()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041B47E) ----------------------------------------------------
int goodB2G_127()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041B4E8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_31_good()
{
  goodG2B_138();
  return goodB2G_127();
}

//----- (000000000041B502) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_61_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_rand_sub_61b_badSource();
  return printHexCharLine(v1 - 1);
}

//----- (000000000041B533) ----------------------------------------------------
int goodG2B_139()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_rand_sub_61b_goodG2BSource();
  return printHexCharLine(v1 - 1);
}

//----- (000000000041B564) ----------------------------------------------------
int goodB2G_128()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE191_Integer_Underflow__char_rand_sub_61b_goodB2GSource();
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041B5A7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_61_good()
{
  goodG2B_139();
  return goodB2G_128();
}

//----- (000000000041B5C1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_34_bad()
{
  return printHexCharLine(0);
}

//----- (000000000041B5FB) ----------------------------------------------------
int goodG2B_140()
{
  return printHexCharLine(252);
}

//----- (000000000041B635) ----------------------------------------------------
int goodB2G_129()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041B681) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_34_good()
{
  goodG2B_140();
  return goodB2G_129();
}

//----- (000000000041B69B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_badSink(a1);
}

//----- (000000000041B6B5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodG2BSink(a1);
}

//----- (000000000041B6CF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54e_goodB2GSink(a1);
}

//----- (000000000041B6E9) ----------------------------------------------------
int __fastcall badSink_19(__int64 a1)
{
  int result; // eax

  result = badStatic_4;
  if ( badStatic_4 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662248: using guessed type int badStatic_4;

//----- (000000000041B71F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_21_bad()
{
  badStatic_4 = 1;
  return badSink_19(0x8000000000000000LL);
}
// 662248: using guessed type int badStatic_4;

//----- (000000000041B755) ----------------------------------------------------
int __fastcall goodB2G1Sink_4(__int64 a1)
{
  int result; // eax

  result = goodB2G1Static_4;
  if ( goodB2G1Static_4 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 66224C: using guessed type int goodB2G1Static_4;

//----- (000000000041B7B3) ----------------------------------------------------
int goodB2G1_85()
{
  goodB2G1Static_4 = 0;
  return goodB2G1Sink_4(0x8000000000000000LL);
}
// 66224C: using guessed type int goodB2G1Static_4;

//----- (000000000041B7E9) ----------------------------------------------------
int __fastcall goodB2G2Sink_4(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_4;
  if ( goodB2G2Static_4 && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662250: using guessed type int goodB2G2Static_4;

//----- (000000000041B83B) ----------------------------------------------------
int goodB2G2_85()
{
  goodB2G2Static_4 = 1;
  return goodB2G2Sink_4(0x8000000000000000LL);
}
// 662250: using guessed type int goodB2G2Static_4;

//----- (000000000041B871) ----------------------------------------------------
int __fastcall goodG2BSink_19(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_4;
  if ( goodG2BStatic_4 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662254: using guessed type int goodG2BStatic_4;

//----- (000000000041B8A7) ----------------------------------------------------
int goodG2B_141()
{
  goodG2BStatic_4 = 1;
  return goodG2BSink_19(-2LL);
}
// 662254: using guessed type int goodG2BStatic_4;

//----- (000000000041B8D7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_21_good()
{
  goodB2G1_85();
  goodB2G2_85();
  return goodG2B_141();
}

//----- (000000000041B8FB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000041B92E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000041B961) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041B9A6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_15_bad()
{
  return printHexCharLine(127);
}

//----- (000000000041B9CF) ----------------------------------------------------
int goodB2G1_86()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000041BA0A) ----------------------------------------------------
int goodB2G2_86()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000041BA45) ----------------------------------------------------
int goodG2B1_74()
{
  return printHexCharLine(-3);
}

//----- (000000000041BA6E) ----------------------------------------------------
int goodG2B2_74()
{
  return printHexCharLine(-3);
}

//----- (000000000041BA97) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_15_good()
{
  goodB2G1_86();
  goodB2G2_86();
  goodG2B1_74();
  return goodG2B2_74();
}

//----- (000000000041BAC5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_07_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_6 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_6;
  if ( staticFive_6 == 5 )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 6620F8: using guessed type int staticFive_6;

//----- (000000000041BB2F) ----------------------------------------------------
int goodB2G1_87()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_6 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFive_6 != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 6620F8: using guessed type int staticFive_6;

//----- (000000000041BBB7) ----------------------------------------------------
int goodB2G2_87()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_6 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 6620F8: using guessed type int staticFive_6;

//----- (000000000041BC33) ----------------------------------------------------
int goodG2B1_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = staticFive_6;
  if ( staticFive_6 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620F8: using guessed type int staticFive_6;

//----- (000000000041BC7C) ----------------------------------------------------
int goodG2B2_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    v1 = -2;
  result = staticFive_6;
  if ( staticFive_6 == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 6620F8: using guessed type int staticFive_6;

//----- (000000000041BCB9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_07_good()
{
  goodB2G1_87();
  goodB2G2_87();
  goodG2B1_75();
  return goodG2B2_75();
}

//----- (000000000041BCE7) ----------------------------------------------------
__int64 badSource_5()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041BD2B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_42_bad()
{
  int result; // eax

  result = badSource_5();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041BD61) ----------------------------------------------------
__int64 goodG2BSource_5()
{
  return 254LL;
}

//----- (000000000041BD74) ----------------------------------------------------
int goodG2B_142()
{
  int result; // eax

  result = goodG2BSource_5();
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041BDAA) ----------------------------------------------------
__int64 goodB2GSource_5()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041BDEE) ----------------------------------------------------
int goodB2G_130()
{
  int result; // eax

  result = goodB2GSource_5();
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041BE36) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_42_good()
{
  goodB2G_130();
  return goodG2B_142();
}

//----- (000000000041BE50) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_badSink(a1);
}

//----- (000000000041BE6A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodG2BSink(a1);
}

//----- (000000000041BE84) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodB2GSink(a1);
}

//----- (000000000041BE9E) ----------------------------------------------------
int badSink_20()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_45_badData - 1);
}
// 662258: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_badData;

//----- (000000000041BEC7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_45_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_45_badData = v0;
  return badSink_20();
}
// 662258: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_badData;

//----- (000000000041BF1A) ----------------------------------------------------
int goodG2BSink_20()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_45_goodG2BData - 1);
}
// 662259: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_goodG2BData;

//----- (000000000041BF43) ----------------------------------------------------
int goodG2B_143()
{
  CWE191_Integer_Underflow__char_rand_sub_45_goodG2BData = -2;
  return goodG2BSink_20();
}
// 662259: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_goodG2BData;

//----- (000000000041BF69) ----------------------------------------------------
int goodB2GSink_14()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData - 1);
  return result;
}
// 66225A: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData;

//----- (000000000041BFA4) ----------------------------------------------------
int goodB2G_131()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData = v0;
  return goodB2GSink_14();
}
// 66225A: using guessed type char CWE191_Integer_Underflow__char_rand_sub_45_goodB2GData;

//----- (000000000041BFF7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_45_good()
{
  goodG2B_143();
  return goodB2G_131();
}

//----- (000000000041C011) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_17_bad()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -128;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000041C063) ----------------------------------------------------
int goodB2G_132()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -128;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
    {
      if ( v1 < -63 )
        result = printLine("data value is too small to perform multiplication.");
      else
        result = printHexCharLine(2 * v1);
    }
  }
  return result;
}

//----- (000000000041C0C7) ----------------------------------------------------
int goodG2B_144()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000041C119) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_17_good()
{
  goodB2G_132();
  return goodG2B_144();
}

//----- (000000000041C133) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_14_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalFive;
  if ( globalFive == 5 && v10 < 0 )
    result = printLongLongLine(2 * v10);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041C21C) ----------------------------------------------------
int goodB2G1_88()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041C32D) ----------------------------------------------------
int goodB2G2_88()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalFive;
  if ( globalFive == 5 && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041C432) ----------------------------------------------------
int goodG2B1_76()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041C48C) ----------------------------------------------------
int goodG2B2_76()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041C4DA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_14_good()
{
  goodB2G1_88();
  goodB2G2_88();
  goodG2B1_76();
  return goodG2B2_76();
}

//----- (000000000041C508) ----------------------------------------------------
__int64 __fastcall badSource_6(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041C538) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_42_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = badSource_6(0x20u);
  return printHexCharLine(v1 - 1);
}

//----- (000000000041C569) ----------------------------------------------------
__int64 goodG2BSource_6()
{
  return 254LL;
}

//----- (000000000041C57C) ----------------------------------------------------
int goodG2B_145()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodG2BSource_6();
  return printHexCharLine(v1 - 1);
}

//----- (000000000041C5AD) ----------------------------------------------------
__int64 __fastcall goodB2GSource_6(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041C5DD) ----------------------------------------------------
int goodB2G_133()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_6(0x20u);
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041C620) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_42_good()
{
  goodB2G_133();
  return goodG2B_145();
}

//----- (000000000041C63A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_32_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v9; // rax
  __int64 v11; // [rsp+0h] [rbp-40h]
  __int64 v12; // [rsp+8h] [rbp-38h]
  __int64 v13; // [rsp+10h] [rbp-30h]
  __int64 v14; // [rsp+18h] [rbp-28h]
  __int64 *v15; // [rsp+20h] [rbp-20h]
  __int64 *v16; // [rsp+28h] [rbp-18h]

  v16 = &v11;
  v15 = &v11;
  v11 = 0LL;
  v14 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v14 = v4;
  *v16 = v4;
  v9 = *v15;
  v13 = *v15;
  if ( v13 < 0 )
  {
    v12 = 2 * v13;
    LODWORD(v9) = printLongLongLine(2 * v13);
  }
  return v9;
}

//----- (000000000041C73A) ----------------------------------------------------
int goodG2B_146()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-18h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2LL;
  v1 = -2LL;
  return printLongLongLine(-4LL);
}

//----- (000000000041C7A3) ----------------------------------------------------
int goodB2G_134()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v9; // rax
  __int64 v11; // [rsp+0h] [rbp-40h]
  __int64 v12; // [rsp+8h] [rbp-38h]
  __int64 v13; // [rsp+10h] [rbp-30h]
  __int64 v14; // [rsp+18h] [rbp-28h]
  __int64 *v15; // [rsp+20h] [rbp-20h]
  __int64 *v16; // [rsp+28h] [rbp-18h]

  v16 = &v11;
  v15 = &v11;
  v11 = 0LL;
  v14 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v14 = v4;
  *v16 = v4;
  v9 = *v15;
  v13 = *v15;
  if ( v13 < 0 )
  {
    if ( v13 < -4611686018427387903LL )
    {
      LODWORD(v9) = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v12 = 2 * v13;
      LODWORD(v9) = printLongLongLine(2 * v13);
    }
  }
  return v9;
}

//----- (000000000041C8BF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_32_good()
{
  goodG2B_146();
  return goodB2G_134();
}

//----- (000000000041C8D9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (000000000041C936) ----------------------------------------------------
int goodB2G1_89()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (000000000041C9BE) ----------------------------------------------------
int goodB2G2_89()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (000000000041CA3A) ----------------------------------------------------
int goodG2B1_77()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041CA8E) ----------------------------------------------------
int goodG2B2_77()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041CAD6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_14_good()
{
  goodB2G1_89();
  goodB2G2_89();
  goodG2B1_77();
  return goodG2B2_77();
}

//----- (000000000041CB04) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041CB2A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041CB50) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000041CB92) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_32_bad()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = 0LL;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  *v4 = v1;
  return printLongLongLine(*v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041CC0A) ----------------------------------------------------
int goodG2B_147()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -2LL;
  v1 = -2LL;
  v3 = -2LL;
  v2 = -3LL;
  return printLongLongLine(-3LL);
}

//----- (000000000041CC6D) ----------------------------------------------------
int goodB2G_135()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 0LL;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  *v6 = v1;
  v4 = *v5;
  if ( v4 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v3 = v4 - 1;
  return printLongLongLine(v4 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041CD01) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_32_good()
{
  goodG2B_147();
  return goodB2G_135();
}

//----- (000000000041CD1B) ----------------------------------------------------
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_badSource()
{
  return 0x8000000000000000LL;
}

//----- (000000000041CD37) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_goodG2BSource()
{
  return -2LL;
}

//----- (000000000041CD4D) ----------------------------------------------------
unsigned __int64 CWE191_Integer_Underflow__int64_t_min_sub_61b_goodB2GSource()
{
  return 0x8000000000000000LL;
}

//----- (000000000041CD69) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_badSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041CD9D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041CDD1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041CE21) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041CE4F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041CE7D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000041CEC7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -128;
  v2 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_66b_badSink((__int64)&v1);
}

//----- (000000000041CEEC) ----------------------------------------------------
int goodG2B_148()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_min_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041CF11) ----------------------------------------------------
int goodB2G_136()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -128;
  v2 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_66b_goodB2GSink((__int64)&v1);
}

//----- (000000000041CF36) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_66_good()
{
  goodG2B_148();
  return goodB2G_136();
}

//----- (000000000041CF50) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_05_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 6620FC: using guessed type int staticTrue_5;

//----- (000000000041CFBD) ----------------------------------------------------
int goodB2G1_90()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFalse_5;
  if ( staticFalse_5 )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 6620FC: using guessed type int staticTrue_5;
// 66225C: using guessed type int staticFalse_5;

//----- (000000000041D048) ----------------------------------------------------
int goodB2G2_90()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_5;
  if ( staticTrue_5 && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 6620FC: using guessed type int staticTrue_5;

//----- (000000000041D0C7) ----------------------------------------------------
int goodG2B1_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_5 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620FC: using guessed type int staticTrue_5;
// 66225C: using guessed type int staticFalse_5;

//----- (000000000041D113) ----------------------------------------------------
int goodG2B2_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_5 )
    v1 = -2;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 6620FC: using guessed type int staticTrue_5;

//----- (000000000041D153) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_05_good()
{
  goodB2G1_90();
  goodB2G2_90();
  goodG2B1_78();
  return goodG2B2_78();
}

//----- (000000000041D181) ----------------------------------------------------
int __fastcall badSink_21(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041D1AA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_41_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return badSink_21((char)v0);
}

//----- (000000000041D1F4) ----------------------------------------------------
int __fastcall goodG2BSink_21(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041D21D) ----------------------------------------------------
int goodG2B_149()
{
  return goodG2BSink_21(-2);
}

//----- (000000000041D23A) ----------------------------------------------------
int __fastcall goodB2GSink_15(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041D275) ----------------------------------------------------
int goodB2G_137()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return goodB2GSink_15((char)v0);
}

//----- (000000000041D2BF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_41_good()
{
  goodB2G_137();
  return goodG2B_149();
}

//----- (000000000041D2D9) ----------------------------------------------------
int __fastcall badSink_22(__int64 a1)
{
  int result; // eax

  result = badStatic_5;
  if ( badStatic_5 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662260: using guessed type int badStatic_5;

//----- (000000000041D30F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  badStatic_5 = 1;
  return badSink_22(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662260: using guessed type int badStatic_5;

//----- (000000000041D354) ----------------------------------------------------
int __fastcall goodB2G1Sink_5(__int64 a1)
{
  int result; // eax

  result = goodB2G1Static_5;
  if ( goodB2G1Static_5 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662264: using guessed type int goodB2G1Static_5;

//----- (000000000041D3B2) ----------------------------------------------------
int goodB2G1_91()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G1Static_5 = 0;
  return goodB2G1Sink_5(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662264: using guessed type int goodB2G1Static_5;

//----- (000000000041D3F7) ----------------------------------------------------
int __fastcall goodB2G2Sink_5(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_5;
  if ( goodB2G2Static_5 && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662268: using guessed type int goodB2G2Static_5;

//----- (000000000041D449) ----------------------------------------------------
int goodB2G2_91()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G2Static_5 = 1;
  return goodB2G2Sink_5(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662268: using guessed type int goodB2G2Static_5;

//----- (000000000041D48E) ----------------------------------------------------
int __fastcall goodG2BSink_22(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_5;
  if ( goodG2BStatic_5 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 66226C: using guessed type int goodG2BStatic_5;

//----- (000000000041D4C4) ----------------------------------------------------
int goodG2B_150()
{
  goodG2BStatic_5 = 1;
  return goodG2BSink_22(-2LL);
}
// 66226C: using guessed type int goodG2BStatic_5;

//----- (000000000041D4F4) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_21_good()
{
  goodB2G1_91();
  goodB2G2_91();
  return goodG2B_150();
}

//----- (000000000041D518) ----------------------------------------------------
int badSink_23()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_45_badData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_45_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_45_badData);
  return result;
}
// 662270: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_badData;

//----- (000000000041D546) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_45_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_45_badData = v0;
  return badSink_23();
}
// 662270: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_badData;

//----- (000000000041D599) ----------------------------------------------------
int goodG2BSink_23()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData);
  return result;
}
// 662271: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData;

//----- (000000000041D5C7) ----------------------------------------------------
int goodG2B_151()
{
  CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData = -2;
  return goodG2BSink_23();
}
// 662271: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_goodG2BData;

//----- (000000000041D5ED) ----------------------------------------------------
int goodB2GSink_16()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData);
  }
  return result;
}
// 662272: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData;

//----- (000000000041D62D) ----------------------------------------------------
int goodB2G_138()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData = v0;
  return goodB2GSink_16();
}
// 662272: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_45_goodB2GData;

//----- (000000000041D680) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_45_good()
{
  goodG2B_151();
  return goodB2G_138();
}

//----- (000000000041D69A) ----------------------------------------------------
int __fastcall badSink_24(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000041D6BE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_41_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return badSink_24(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041D6F7) ----------------------------------------------------
int __fastcall goodG2BSink_24(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000041D71B) ----------------------------------------------------
int goodG2B_152()
{
  return goodG2BSink_24(-2);
}

//----- (000000000041D738) ----------------------------------------------------
int __fastcall goodB2GSink_17(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000041D76E) ----------------------------------------------------
int goodB2G_139()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return goodB2GSink_17(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041D7A7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_41_good()
{
  goodB2G_139();
  return goodG2B_152();
}

//----- (000000000041D7C1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_04_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 1;
  if ( v10 < 0 )
    result = printLongLongLine(2 * v10);
  return result;
}

//----- (000000000041D8A6) ----------------------------------------------------
int goodB2G1_92()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 0;
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (000000000041D9B3) ----------------------------------------------------
int goodB2G2_92()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  result = 1;
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (000000000041DAB4) ----------------------------------------------------
int goodG2B1_79()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041DB0A) ----------------------------------------------------
int goodG2B2_79()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041DB54) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_04_good()
{
  goodB2G1_92();
  goodB2G2_92();
  goodG2B1_79();
  return goodG2B2_79();
}

//----- (000000000041DB82) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_31_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (000000000041DC61) ----------------------------------------------------
int goodG2B_153()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041DCA9) ----------------------------------------------------
int goodB2G_140()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (000000000041DDA4) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_31_good()
{
  goodG2B_153();
  return goodB2G_140();
}

//----- (000000000041DDBE) ----------------------------------------------------
int __fastcall badSink_25(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041DDEA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_44_bad()
{
  return badSink_25(0x8000000000000000LL);
}

//----- (000000000041DE1F) ----------------------------------------------------
int __fastcall goodG2BSink_25(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041DE4B) ----------------------------------------------------
int goodG2B_154()
{
  return goodG2BSink_25(-2LL);
}

//----- (000000000041DE7A) ----------------------------------------------------
int __fastcall goodB2GSink_18(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041DEC2) ----------------------------------------------------
int goodB2G_141()
{
  return goodB2GSink_18(0x8000000000000000LL);
}

//----- (000000000041DEF7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_44_good()
{
  goodG2B_154();
  return goodB2G_141();
}

//----- (000000000041DF11) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_15_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041DF6C) ----------------------------------------------------
int goodB2G1_93()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041DFD9) ----------------------------------------------------
int goodB2G2_93()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041E046) ----------------------------------------------------
int goodG2B1_80()
{
  return printHexCharLine(252);
}

//----- (000000000041E074) ----------------------------------------------------
int goodG2B2_80()
{
  return printHexCharLine(252);
}

//----- (000000000041E0A2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_15_good()
{
  goodB2G1_93();
  goodB2G2_93();
  goodG2B1_80();
  return goodG2B2_80();
}

//----- (000000000041E0D0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_04_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_442BB8, &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041E129) ----------------------------------------------------
int goodB2G1_94()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_442BB8, &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041E1AD) ----------------------------------------------------
int goodB2G2_94()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_442BB8, &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041E225) ----------------------------------------------------
int goodG2B1_81()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041E275) ----------------------------------------------------
int goodG2B2_81()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041E2B9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_04_good()
{
  goodB2G1_94();
  goodB2G2_94();
  goodG2B1_81();
  return goodG2B2_81();
}

//----- (000000000041E2E7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_31_bad()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  v3 = v1;
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041E33E) ----------------------------------------------------
int goodG2B_155()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041E380) ----------------------------------------------------
int goodB2G_142()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  v3 = v1;
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v3 - 1;
  return printLongLongLine(v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041E3F3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_31_good()
{
  goodG2B_155();
  return goodB2G_142();
}

//----- (000000000041E40D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041E43C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041E46B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041E4AC) ----------------------------------------------------
int badSink_26()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_45_badData - 1);
}
// 662278: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_badData;

//----- (000000000041E4D9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_45_bad()
{
  CWE191_Integer_Underflow__int64_t_min_sub_45_badData = 0x8000000000000000LL;
  return badSink_26();
}
// 662278: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_badData;

//----- (000000000041E50E) ----------------------------------------------------
int goodG2BSink_26()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_45_goodG2BData - 1);
}
// 662280: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodG2BData;

//----- (000000000041E53B) ----------------------------------------------------
int goodG2B_156()
{
  CWE191_Integer_Underflow__int64_t_min_sub_45_goodG2BData = -2LL;
  return goodG2BSink_26();
}
// 662280: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodG2BData;

//----- (000000000041E56A) ----------------------------------------------------
int goodB2GSink_19()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData - 1);
  return result;
}
// 662288: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData;

//----- (000000000041E5B3) ----------------------------------------------------
int goodB2G_143()
{
  CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData = 0x8000000000000000LL;
  return goodB2GSink_19();
}
// 662288: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_45_goodB2GData;

//----- (000000000041E5E8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_45_good()
{
  goodG2B_156();
  return goodB2G_143();
}

//----- (000000000041E602) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54e_badSink(a1);
}

//----- (000000000041E61C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodG2BSink(a1);
}

//----- (000000000041E636) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54e_goodB2GSink(a1);
}

//----- (000000000041E650) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041E67C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041E6A8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041E6F0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_67_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_67b_badSink(v4);
}

//----- (000000000041E7B5) ----------------------------------------------------
int goodG2B_157()
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodG2BSink(-2LL);
}

//----- (000000000041E7E3) ----------------------------------------------------
int goodB2G_144()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return CWE191_Integer_Underflow__int64_t_rand_multiply_67b_goodB2GSink(v4);
}

//----- (000000000041E8A8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_67_good()
{
  goodG2B_157();
  return goodB2G_144();
}

//----- (000000000041E8C2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54d_badSink(a1);
}

//----- (000000000041E8DC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodG2BSink(a1);
}

//----- (000000000041E8F6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodB2GSink(a1);
}

//----- (000000000041E910) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_13_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000041E966) ----------------------------------------------------
int goodB2G1_95()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000041E9DC) ----------------------------------------------------
int goodB2G2_95()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000041EA46) ----------------------------------------------------
int goodG2B1_82()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EA8F) ----------------------------------------------------
int goodG2B2_82()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EACC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_13_good()
{
  goodB2G1_95();
  goodB2G2_95();
  goodG2B1_82();
  return goodG2B2_82();
}

//----- (000000000041EAFA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662290: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal;

//----- (000000000041EB30) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662294: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global;

//----- (000000000041EB8E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662298: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global;

//----- (000000000041EBE0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 66229C: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal;

//----- (000000000041EC16) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_13_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EC6A) ----------------------------------------------------
int goodB2G1_96()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041ECE6) ----------------------------------------------------
int goodB2G2_96()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041ED56) ----------------------------------------------------
int goodG2B1_83()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EDB0) ----------------------------------------------------
int goodG2B2_83()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EDFE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_13_good()
{
  goodB2G1_96();
  goodB2G2_96();
  goodG2B1_83();
  return goodG2B2_83();
}

//----- (000000000041EE2C) ----------------------------------------------------
__int64 badSource_7()
{
  return 128LL;
}

//----- (000000000041EE3F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_42_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = badSource_7();
  return printHexCharLine(v1 - 1);
}

//----- (000000000041EE70) ----------------------------------------------------
__int64 goodG2BSource_7()
{
  return 254LL;
}

//----- (000000000041EE83) ----------------------------------------------------
int goodG2B_158()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodG2BSource_7();
  return printHexCharLine(v1 - 1);
}

//----- (000000000041EEB4) ----------------------------------------------------
__int64 goodB2GSource_7()
{
  return 128LL;
}

//----- (000000000041EEC7) ----------------------------------------------------
int goodB2G_145()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_7();
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (000000000041EF0A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_42_good()
{
  goodB2G_145();
  return goodG2B_158();
}

//----- (000000000041EF24) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622A4: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal;

//----- (000000000041EF54) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Sink(__int64 a1)
{
  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(a1 - 1);
}
// 6622A8: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Global;

//----- (000000000041EFAC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global )
  {
    if ( a1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(a1 - 1);
  }
  return result;
}
// 6622AC: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global;

//----- (000000000041EFF8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622B0: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal;

//----- (000000000041F028) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_14_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041F076) ----------------------------------------------------
int goodB2G1_97()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 662120: using guessed type int globalFive;

//----- (000000000041F0EC) ----------------------------------------------------
int goodB2G2_97()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 0x8000000000000000LL;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041F156) ----------------------------------------------------
int goodG2B1_84()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041F1AA) ----------------------------------------------------
int goodG2B2_84()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = -2LL;
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000041F1F2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_14_good()
{
  goodB2G1_97();
  goodB2G2_97();
  goodG2B1_84();
  return goodG2B2_84();
}

//----- (000000000041F220) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_32_bad()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 0x8000000000000000LL;
  v1 = 0x8000000000000000LL;
  v3 = 0x8000000000000000LL;
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (000000000041F289) ----------------------------------------------------
int goodG2B_159()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = -2LL;
  v1 = -2LL;
  v3 = -2LL;
  v2 = -3LL;
  return printLongLongLine(-3LL);
}

//----- (000000000041F2EC) ----------------------------------------------------
int goodB2G_146()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0x8000000000000000LL;
  v1 = 0x8000000000000000LL;
  v2 = 0x8000000000000000LL;
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000041F371) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_32_good()
{
  goodG2B_159();
  return goodB2G_146();
}

//----- (000000000041F38B) ----------------------------------------------------
__int64 staticReturnsTrue_6()
{
  return 1LL;
}

//----- (000000000041F396) ----------------------------------------------------
__int64 staticReturnsFalse_6()
{
  return 0LL;
}

//----- (000000000041F3A1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_08_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 0x8000000000000000LL;
  result = staticReturnsTrue_6();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F3FB) ----------------------------------------------------
int goodB2G1_98()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 0x8000000000000000LL;
  result = staticReturnsFalse_6();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F47D) ----------------------------------------------------
int goodB2G2_98()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 0x8000000000000000LL;
  result = staticReturnsTrue_6();
  if ( result && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F4F3) ----------------------------------------------------
int goodG2B1_85()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_6() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticReturnsTrue_6();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F553) ----------------------------------------------------
int goodG2B2_85()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = -2LL;
  result = staticReturnsTrue_6();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F5A7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_08_good()
{
  goodB2G1_98();
  goodB2G2_98();
  goodG2B1_85();
  return goodG2B2_85();
}

//----- (000000000041F5D5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_18_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041F61E) ----------------------------------------------------
int goodB2G_147()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041F686) ----------------------------------------------------
int goodG2B_160()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041F6BA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_18_good()
{
  goodB2G_147();
  return goodG2B_160();
}

//----- (000000000041F6D4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_34_bad()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041F722) ----------------------------------------------------
int goodG2B_161()
{
  return printHexCharLine(-3);
}

//----- (000000000041F757) ----------------------------------------------------
int goodB2G_148()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v3 - 1;
  return printHexCharLine(v3 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041F7B7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_34_good()
{
  goodG2B_161();
  return goodB2G_148();
}

//----- (000000000041F7D1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041F7FA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041F823) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041F85E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041F88C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000041F8BA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000041F904) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000041F928) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000041F94C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000041F982) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_02_bad()
{
  return printLongLongLine(0LL);
}

//----- (000000000041F9C0) ----------------------------------------------------
int goodB2G1_99()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041FA1A) ----------------------------------------------------
int goodB2G2_99()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000041FA74) ----------------------------------------------------
int goodG2B1_86()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041FAAC) ----------------------------------------------------
int goodG2B2_86()
{
  return printLongLongLine(-4LL);
}

//----- (000000000041FAE4) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_02_good()
{
  goodB2G1_99();
  goodB2G2_99();
  goodG2B1_86();
  return goodG2B2_86();
}

//----- (000000000041FB12) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_03_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FB59) ----------------------------------------------------
int goodB2G1_100()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FBBF) ----------------------------------------------------
int goodB2G2_100()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FC25) ----------------------------------------------------
int goodG2B1_87()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041FC57) ----------------------------------------------------
int goodG2B2_87()
{
  return printLongLongLine(-3LL);
}

//----- (000000000041FC89) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_03_good()
{
  goodB2G1_100();
  goodB2G2_100();
  goodG2B1_87();
  return goodG2B2_87();
}

//----- (000000000041FCB7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FD22) ----------------------------------------------------
int goodB2G1_101()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FDB8) ----------------------------------------------------
int goodB2G2_101()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000041FE42) ----------------------------------------------------
int goodG2B1_88()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041FEA2) ----------------------------------------------------
int goodG2B2_88()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041FEF6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_11_good()
{
  goodB2G1_101();
  goodB2G2_101();
  goodG2B1_88();
  return goodG2B2_88();
}

//----- (000000000041FF24) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_61_bad()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_min_sub_61b_badSource();
  return printLongLongLine(v1 - 1);
}

//----- (000000000041FF5E) ----------------------------------------------------
int goodG2B_162()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_min_sub_61b_goodG2BSource();
  return printLongLongLine(v1 - 1);
}

//----- (000000000041FF98) ----------------------------------------------------
int goodB2G_149()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_min_sub_61b_goodB2GSource();
  if ( v1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000041FFEE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_61_good()
{
  goodG2B_162();
  return goodB2G_149();
}

//----- (0000000000420008) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_22_badSink(v4);
}
// 662290: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_badGlobal;

//----- (00000000004200CF) ----------------------------------------------------
int goodB2G1_102()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Sink(v4);
}
// 662294: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G1Global;

//----- (0000000000420196) ----------------------------------------------------
int goodB2G2_102()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Sink(v4);
}
// 662298: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodB2G2Global;

//----- (000000000042025D) ----------------------------------------------------
int goodG2B_163()
{
  CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BSink(-2LL);
}
// 66229C: using guessed type int CWE191_Integer_Underflow__int64_t_rand_multiply_22_goodG2BGlobal;

//----- (000000000042028D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_22_good()
{
  goodB2G1_102();
  goodB2G2_102();
  return goodG2B_163();
}

//----- (00000000004202B1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_03_bad()
{
  return printLongLongLine(0LL);
}

//----- (00000000004202EF) ----------------------------------------------------
int goodB2G1_103()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000420349) ----------------------------------------------------
int goodB2G2_103()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004203A3) ----------------------------------------------------
int goodG2B1_89()
{
  return printLongLongLine(-4LL);
}

//----- (00000000004203DB) ----------------------------------------------------
int goodG2B2_89()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000420413) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_03_good()
{
  goodB2G1_103();
  goodB2G2_103();
  goodG2B1_89();
  return goodG2B2_89();
}

//----- (0000000000420441) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_05_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    v1 = -128;
  result = staticTrue_6;
  if ( staticTrue_6 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662100: using guessed type int staticTrue_6;

//----- (000000000042047C) ----------------------------------------------------
int goodB2G1_104()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    v1 = -128;
  if ( staticFalse_6 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 662100: using guessed type int staticTrue_6;
// 6622A0: using guessed type int staticFalse_6;

//----- (00000000004204D5) ----------------------------------------------------
int goodB2G2_104()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    v1 = -128;
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 662100: using guessed type int staticTrue_6;

//----- (0000000000420522) ----------------------------------------------------
int goodG2B1_90()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_6 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_6;
  if ( staticTrue_6 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662100: using guessed type int staticTrue_6;
// 6622A0: using guessed type int staticFalse_6;

//----- (0000000000420569) ----------------------------------------------------
int goodG2B2_90()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    v1 = -2;
  result = staticTrue_6;
  if ( staticTrue_6 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662100: using guessed type int staticTrue_6;

//----- (00000000004205A4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_05_good()
{
  goodB2G1_104();
  goodB2G2_104();
  goodG2B1_90();
  return goodG2B2_90();
}

//----- (00000000004205D2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622A4: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_badGlobal;

//----- (0000000000420617) ----------------------------------------------------
int goodB2G1_105()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622A8: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G1Global;

//----- (000000000042065C) ----------------------------------------------------
int goodB2G2_105()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622AC: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodB2G2Global;

//----- (00000000004206A1) ----------------------------------------------------
int goodG2B_164()
{
  CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BSink(-2LL);
}
// 6622B0: using guessed type int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_goodG2BGlobal;

//----- (00000000004206D1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_22_good()
{
  goodB2G1_105();
  goodB2G2_105();
  return goodG2B_164();
}

//----- (00000000004206F5) ----------------------------------------------------
int __fastcall badSink_27(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000420719) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_41_bad()
{
  return badSink_27(-128);
}

//----- (0000000000420736) ----------------------------------------------------
int __fastcall goodG2BSink_27(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042075A) ----------------------------------------------------
int goodG2B_165()
{
  return goodG2BSink_27(-2);
}

//----- (0000000000420777) ----------------------------------------------------
int __fastcall goodB2GSink_20(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (00000000004207AD) ----------------------------------------------------
int goodB2G_150()
{
  return goodB2GSink_20(-128);
}

//----- (00000000004207CA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_41_good()
{
  goodB2G_150();
  return goodG2B_165();
}

//----- (00000000004207E4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042080D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000420836) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000420871) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_67_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_67b_badSink(0x8000000000000000LL);
}

//----- (00000000004208A5) ----------------------------------------------------
int goodG2B_166()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodG2BSink(-2LL);
}

//----- (00000000004208D3) ----------------------------------------------------
int goodB2G_151()
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_67b_goodB2GSink(0x8000000000000000LL);
}

//----- (0000000000420907) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_67_good()
{
  goodG2B_166();
  return goodB2G_151();
}

//----- (0000000000420921) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662318: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal;

//----- (0000000000420957) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 66231C: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global;

//----- (00000000004209B5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662320: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global;

//----- (0000000000420A07) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 662324: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal;

//----- (0000000000420A3D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (0000000000420A76) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (0000000000420AAF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(*a1 - 1LL);
  return result;
}

//----- (0000000000420B04) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_04_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (0000000000420B4E) ----------------------------------------------------
int goodB2G1_106()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000420BC0) ----------------------------------------------------
int goodB2G2_106()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000420C26) ----------------------------------------------------
int goodG2B1_91()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000420C76) ----------------------------------------------------
int goodG2B2_91()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000420CBA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_04_good()
{
  goodB2G1_106();
  goodB2G2_106();
  goodG2B1_91();
  return goodG2B2_91();
}

//----- (0000000000420CE8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_31_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (0000000000420D30) ----------------------------------------------------
int goodG2B_167()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000420D72) ----------------------------------------------------
int goodB2G_152()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000420DD6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_31_good()
{
  goodG2B_167();
  return goodB2G_152();
}

//----- (0000000000420DF0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_14_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000420E4D) ----------------------------------------------------
int goodB2G1_107()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000420ECA) ----------------------------------------------------
int goodB2G2_107()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662120: using guessed type int globalFive;
// 662128: using guessed type __int64 stdin;

//----- (0000000000420F3B) ----------------------------------------------------
int goodG2B1_92()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (0000000000420F89) ----------------------------------------------------
int goodG2B2_92()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (0000000000420FCB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_14_good()
{
  goodB2G1_107();
  goodB2G2_107();
  goodG2B1_92();
  return goodG2B2_92();
}

//----- (0000000000420FF9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_07_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_7 == 5 )
    v1 = 0x8000000000000000LL;
  result = staticFive_7;
  if ( staticFive_7 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662104: using guessed type int staticFive_7;

//----- (000000000042104D) ----------------------------------------------------
int goodB2G1_108()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_7 == 5 )
    v1 = 0x8000000000000000LL;
  result = staticFive_7;
  if ( staticFive_7 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662104: using guessed type int staticFive_7;

//----- (00000000004210C9) ----------------------------------------------------
int goodB2G2_108()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_7 == 5 )
    v1 = 0x8000000000000000LL;
  result = staticFive_7;
  if ( staticFive_7 == 5 && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662104: using guessed type int staticFive_7;

//----- (0000000000421139) ----------------------------------------------------
int goodG2B1_93()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_7 == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive_7;
  if ( staticFive_7 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662104: using guessed type int staticFive_7;

//----- (0000000000421193) ----------------------------------------------------
int goodG2B2_93()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_7 == 5 )
    v1 = -2LL;
  result = staticFive_7;
  if ( staticFive_7 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662104: using guessed type int staticFive_7;

//----- (00000000004211E1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_07_good()
{
  goodB2G1_108();
  goodB2G2_108();
  goodG2B1_93();
  return goodG2B2_93();
}

//----- (000000000042120F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54e_badSink(a1);
}

//----- (0000000000421229) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodG2BSink(a1);
}

//----- (0000000000421243) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54d_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54e_goodB2GSink(a1);
}

//----- (000000000042125D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_32_bad()
{
  int result; // eax
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  result = (unsigned __int8)*v5;
  v4 = *v5;
  if ( v4 < 0 )
  {
    v3 = 2 * v4;
    result = printHexCharLine(2 * v4);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004212D0) ----------------------------------------------------
int goodG2B_168()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2;
  v1 = -2;
  return printHexCharLine(252);
}

//----- (000000000042132A) ----------------------------------------------------
int goodB2G_153()
{
  int result; // eax
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  result = (unsigned __int8)*v5;
  v4 = *v5;
  if ( v4 < 0 )
  {
    if ( v4 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v3 = 2 * v4;
      result = printHexCharLine(2 * v4);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004213AF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_32_good()
{
  goodG2B_168();
  return goodB2G_153();
}

//----- (00000000004213C9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000421436) ----------------------------------------------------
int goodB2G_154()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004214C2) ----------------------------------------------------
int goodG2B_169()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = -2LL;
  for ( j = 0; j <= 0; ++j )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000042151A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_17_good()
{
  goodB2G_154();
  return goodG2B_169();
}

//----- (0000000000421534) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_34_bad()
{
  return printHexCharLine(127);
}

//----- (0000000000421569) ----------------------------------------------------
int goodG2B_170()
{
  return printHexCharLine(-3);
}

//----- (000000000042159E) ----------------------------------------------------
int goodB2G_155()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (00000000004215E5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_34_good()
{
  goodG2B_170();
  return goodB2G_155();
}

//----- (00000000004215FF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (000000000042162D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) - 1);
}

//----- (000000000042165B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v2 - 1);
  return result;
}

//----- (000000000042169B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_badSink(a1);
}

//----- (00000000004216B5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodG2BSink(a1);
}

//----- (00000000004216CF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_54d_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_54e_goodB2GSink(a1);
}

//----- (00000000004216E9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_badSink(a1);
}

//----- (0000000000421703) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodG2BSink(a1);
}

//----- (000000000042171D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54d_goodB2GSink(a1);
}

//----- (0000000000421737) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_15_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (000000000042178D) ----------------------------------------------------
int goodB2G1_109()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (00000000004217F5) ----------------------------------------------------
int goodB2G2_109()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (000000000042185D) ----------------------------------------------------
int goodG2B1_94()
{
  return printHexCharLine(-3);
}

//----- (0000000000421886) ----------------------------------------------------
int goodG2B2_94()
{
  return printHexCharLine(-3);
}

//----- (00000000004218AF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_15_good()
{
  goodB2G1_109();
  goodB2G2_109();
  goodG2B1_94();
  return goodG2B2_94();
}

//----- (00000000004218DD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_02_bad()
{
  return printHexCharLine(0);
}

//----- (0000000000421909) ----------------------------------------------------
int goodB2G1_110()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000421947) ----------------------------------------------------
int goodB2G2_110()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000421985) ----------------------------------------------------
int goodG2B1_95()
{
  return printHexCharLine(252);
}

//----- (00000000004219B1) ----------------------------------------------------
int goodG2B2_95()
{
  return printHexCharLine(252);
}

//----- (00000000004219DD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_02_good()
{
  goodB2G1_110();
  goodB2G2_110();
  goodG2B1_95();
  return goodG2B2_95();
}

//----- (0000000000421A0B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_67_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_67b_badSink(0x8000000000000000LL);
}

//----- (0000000000421A3F) ----------------------------------------------------
int goodG2B_171()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_67b_goodG2BSink(-2LL);
}

//----- (0000000000421A6D) ----------------------------------------------------
int goodB2G_156()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_67b_goodB2GSink(0x8000000000000000LL);
}

//----- (0000000000421AA1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_67_good()
{
  goodG2B_171();
  return goodB2G_156();
}

//----- (0000000000421ABB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000421B0A) ----------------------------------------------------
int goodG2B_172()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000421B42) ----------------------------------------------------
int goodB2G_157()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000421BB0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_good()
{
  goodG2B_172();
  return goodB2G_157();
}

//----- (0000000000421BCA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000421BF6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000421C22) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000421C6A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+18h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 0x8000000000000000LL;
  else
    v1 = -2LL;
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  else if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000421D0A) ----------------------------------------------------
int goodB2G_158()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000421DCC) ----------------------------------------------------
int goodG2B_173()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(-4LL);
}

//----- (0000000000421E4A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_12_good()
{
  goodB2G_158();
  return goodG2B_173();
}

//----- (0000000000421E64) ----------------------------------------------------
__int64 badSource_8()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000421EA8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_42_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = badSource_8();
  return printHexCharLine(v1 - 1);
}

//----- (0000000000421ED9) ----------------------------------------------------
__int64 goodG2BSource_8()
{
  return 254LL;
}

//----- (0000000000421EEC) ----------------------------------------------------
int goodG2B_174()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodG2BSource_8();
  return printHexCharLine(v1 - 1);
}

//----- (0000000000421F1D) ----------------------------------------------------
__int64 goodB2GSource_8()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000421F61) ----------------------------------------------------
int goodB2G_159()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_8();
  if ( v1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000421FA4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_42_good()
{
  goodB2G_159();
  return goodG2B_174();
}

//----- (0000000000421FBE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_09_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422019) ----------------------------------------------------
int goodB2G1_111()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422094) ----------------------------------------------------
int goodB2G2_111()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422103) ----------------------------------------------------
int goodG2B1_96()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042214F) ----------------------------------------------------
int goodG2B2_96()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042218F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_09_good()
{
  goodB2G1_111();
  goodB2G2_111();
  goodG2B1_96();
  return goodG2B2_96();
}

//----- (00000000004221BD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000042221A) ----------------------------------------------------
int goodB2G1_112()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (00000000004222A2) ----------------------------------------------------
int goodB2G2_112()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000042231E) ----------------------------------------------------
int goodG2B1_97()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000422372) ----------------------------------------------------
int goodG2B2_97()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004223BA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_13_good()
{
  goodB2G1_112();
  goodB2G2_112();
  goodG2B1_97();
  return goodG2B2_97();
}

//----- (00000000004223E8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal;
  if ( CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622D8: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal;

//----- (0000000000422418) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Sink(__int64 a1)
{
  if ( CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(a1 - 1);
}
// 6622DC: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Global;

//----- (0000000000422470) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global )
  {
    if ( a1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(a1 - 1);
  }
  return result;
}
// 6622E0: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global;

//----- (00000000004224BC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622E4: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal;

//----- (00000000004224EC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_06_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_4436A4, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422547) ----------------------------------------------------
int goodB2G1_113()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_4436A4, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004225C2) ----------------------------------------------------
int goodB2G2_113()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_4436A4, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422631) ----------------------------------------------------
int goodG2B1_98()
{
  return printHexCharLine(252);
}

//----- (000000000042267D) ----------------------------------------------------
int goodG2B2_98()
{
  return printHexCharLine(252);
}

//----- (00000000004226BD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_06_good()
{
  goodB2G1_113();
  goodB2G2_113();
  goodG2B1_98();
  return goodG2B2_98();
}

//----- (00000000004226EB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_04_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_443700, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422744) ----------------------------------------------------
int goodB2G1_114()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_443700, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004227BD) ----------------------------------------------------
int goodB2G2_114()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_443700, &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042282A) ----------------------------------------------------
int goodG2B1_99()
{
  return printHexCharLine(252);
}

//----- (0000000000422874) ----------------------------------------------------
int goodG2B2_99()
{
  return printHexCharLine(252);
}

//----- (00000000004228B2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_04_good()
{
  goodB2G1_114();
  goodB2G2_114();
  goodG2B1_99();
  return goodG2B2_99();
}

//----- (00000000004228E0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_31_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  unsigned __int8 v3; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v3;
    result = printHexCharLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422933) ----------------------------------------------------
int goodG2B_175()
{
  return printHexCharLine(252);
}

//----- (000000000042296D) ----------------------------------------------------
int goodB2G_160()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  unsigned __int8 v3; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v3 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v3;
      result = printHexCharLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004229D2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_31_good()
{
  goodG2B_175();
  return goodB2G_160();
}

//----- (00000000004229EC) ----------------------------------------------------
__int64 staticReturnsTrue_7()
{
  return 1LL;
}

//----- (00000000004229F7) ----------------------------------------------------
__int64 staticReturnsFalse_7()
{
  return 0LL;
}

//----- (0000000000422A02) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_7();
  if ( result )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422A65) ----------------------------------------------------
int goodB2G1_115()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)staticReturnsFalse_7() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422AF3) ----------------------------------------------------
int goodB2G2_115()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_7();
  if ( result )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000422B75) ----------------------------------------------------
int goodG2B1_100()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_7() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticReturnsTrue_7();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (0000000000422BCF) ----------------------------------------------------
int goodG2B2_100()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_7() )
    v1 = -2LL;
  result = staticReturnsTrue_7();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (0000000000422C1D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_08_good()
{
  goodB2G1_115();
  goodB2G2_115();
  goodG2B1_100();
  return goodG2B2_100();
}

//----- (0000000000422C4B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422CAE) ----------------------------------------------------
int goodB2G1_116()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422D3C) ----------------------------------------------------
int goodB2G2_116()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000422DBE) ----------------------------------------------------
int goodG2B1_101()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000422E16) ----------------------------------------------------
int goodG2B2_101()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000422E62) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_09_good()
{
  goodB2G1_116();
  goodB2G2_116();
  goodG2B1_101();
  return goodG2B2_101();
}

//----- (0000000000422E90) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -128;
  v2 = -128;
  return CWE191_Integer_Underflow__char_min_sub_66b_badSink((__int64)&v1);
}

//----- (0000000000422EB5) ----------------------------------------------------
int goodG2B_176()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_min_sub_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000422EDA) ----------------------------------------------------
int goodB2G_161()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -128;
  v2 = -128;
  return CWE191_Integer_Underflow__char_min_sub_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000422EFF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_66_good()
{
  goodG2B_176();
  return goodB2G_161();
}

//----- (0000000000422F19) ----------------------------------------------------
int __fastcall badSink_28(__int64 a1)
{
  int result; // eax

  result = badStatic_6;
  if ( badStatic_6 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 6622B4: using guessed type int badStatic_6;

//----- (0000000000422F4F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_21_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  badStatic_6 = 1;
  return badSink_28(v4);
}
// 6622B4: using guessed type int badStatic_6;

//----- (0000000000423016) ----------------------------------------------------
int __fastcall goodB2G1Sink_6(__int64 a1)
{
  int result; // eax

  result = goodB2G1Static_6;
  if ( goodB2G1Static_6 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 6622B8: using guessed type int goodB2G1Static_6;

//----- (0000000000423074) ----------------------------------------------------
int goodB2G1_117()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  goodB2G1Static_6 = 0;
  return goodB2G1Sink_6(v4);
}
// 6622B8: using guessed type int goodB2G1Static_6;

//----- (000000000042313B) ----------------------------------------------------
int __fastcall goodB2G2Sink_6(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_6;
  if ( goodB2G2Static_6 && a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 6622BC: using guessed type int goodB2G2Static_6;

//----- (000000000042318D) ----------------------------------------------------
int goodB2G2_117()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  goodB2G2Static_6 = 1;
  return goodB2G2Sink_6(v4);
}
// 6622BC: using guessed type int goodB2G2Static_6;

//----- (0000000000423254) ----------------------------------------------------
int __fastcall goodG2BSink_28(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_6;
  if ( goodG2BStatic_6 )
  {
    if ( a1 < 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 6622C0: using guessed type int goodG2BStatic_6;

//----- (000000000042328A) ----------------------------------------------------
int goodG2B_177()
{
  goodG2BStatic_6 = 1;
  return goodG2BSink_28(-2LL);
}
// 6622C0: using guessed type int goodG2BStatic_6;

//----- (00000000004232BA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_21_good()
{
  goodB2G1_117();
  goodB2G2_117();
  return goodG2B_177();
}

//----- (00000000004232DE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_03_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (00000000004233AD) ----------------------------------------------------
int goodB2G1_118()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (0000000000423498) ----------------------------------------------------
int goodB2G2_118()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (0000000000423583) ----------------------------------------------------
int goodG2B1_102()
{
  return printLongLongLine(-4LL);
}

//----- (00000000004235BB) ----------------------------------------------------
int goodG2B2_102()
{
  return printLongLongLine(-4LL);
}

//----- (00000000004235F3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_03_good()
{
  goodB2G1_118();
  goodB2G2_118();
  goodG2B1_102();
  return goodG2B2_102();
}

//----- (0000000000423621) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_05_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 662108: using guessed type int staticTrue_7;

//----- (0000000000423689) ----------------------------------------------------
int goodB2G1_119()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFalse_7 )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 662108: using guessed type int staticTrue_7;
// 6622C4: using guessed type int staticFalse_7;

//----- (000000000042370F) ----------------------------------------------------
int goodB2G2_119()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_7;
  if ( staticTrue_7 )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 662108: using guessed type int staticTrue_7;

//----- (0000000000423789) ----------------------------------------------------
int goodG2B1_103()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_7 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662108: using guessed type int staticTrue_7;
// 6622C4: using guessed type int staticFalse_7;

//----- (00000000004237D0) ----------------------------------------------------
int goodG2B2_103()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_7 )
    v1 = -2;
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 662108: using guessed type int staticTrue_7;

//----- (000000000042380B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_05_good()
{
  goodB2G1_119();
  goodB2G2_119();
  goodG2B1_103();
  return goodG2B2_103();
}

//----- (0000000000423839) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_67_bad()
{
  unsigned __int8 v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000423876) ----------------------------------------------------
int goodG2B_178()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodG2BSink(0xFEu);
}

//----- (000000000042389A) ----------------------------------------------------
int goodB2G_162()
{
  unsigned __int8 v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004238D7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_67_good()
{
  goodG2B_178();
  return goodB2G_162();
}

//----- (00000000004238F1) ----------------------------------------------------
int __fastcall badSink_29(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000423915) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_41_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return badSink_29(v0);
}

//----- (000000000042395F) ----------------------------------------------------
int __fastcall goodG2BSink_29(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000423983) ----------------------------------------------------
int goodG2B_179()
{
  return goodG2BSink_29(-2);
}

//----- (00000000004239A0) ----------------------------------------------------
int __fastcall goodB2GSink_21(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (00000000004239D6) ----------------------------------------------------
int goodB2G_163()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return goodB2GSink_21(v0);
}

//----- (0000000000423A20) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_41_good()
{
  goodB2G_163();
  return goodG2B_179();
}

//----- (0000000000423A3A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_10_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000423A8C) ----------------------------------------------------
int goodB2G1_120()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000423B06) ----------------------------------------------------
int goodB2G2_120()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 0x8000000000000000LL;
  result = globalTrue;
  if ( globalTrue && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000423B74) ----------------------------------------------------
int goodG2B1_104()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000423BCC) ----------------------------------------------------
int goodG2B2_104()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000423C18) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_10_good()
{
  goodB2G1_120();
  goodB2G2_120();
  goodG2B1_104();
  return goodG2B2_104();
}

//----- (0000000000423C46) ----------------------------------------------------
int __fastcall badSink_30(__int64 a1)
{
  int result; // eax

  result = badStatic_7;
  if ( badStatic_7 )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622C8: using guessed type int badStatic_7;

//----- (0000000000423C76) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_21_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  badStatic_7 = 1;
  return badSink_30(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622C8: using guessed type int badStatic_7;

//----- (0000000000423CBB) ----------------------------------------------------
int __fastcall goodB2G1Sink_7(__int64 a1)
{
  if ( goodB2G1Static_7 )
    return printLine("Benign, fixed string");
  if ( a1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(a1 - 1);
}
// 6622CC: using guessed type int goodB2G1Static_7;

//----- (0000000000423D13) ----------------------------------------------------
int goodB2G1_121()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G1Static_7 = 0;
  return goodB2G1Sink_7(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622CC: using guessed type int goodB2G1Static_7;

//----- (0000000000423D58) ----------------------------------------------------
int __fastcall goodB2G2Sink_7(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_7;
  if ( goodB2G2Static_7 )
  {
    if ( a1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(a1 - 1);
  }
  return result;
}
// 6622D0: using guessed type int goodB2G2Static_7;

//----- (0000000000423DA4) ----------------------------------------------------
int goodB2G2_121()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G2Static_7 = 1;
  return goodB2G2Sink_7(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622D0: using guessed type int goodB2G2Static_7;

//----- (0000000000423DE9) ----------------------------------------------------
int __fastcall goodG2BSink_30(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_7;
  if ( goodG2BStatic_7 )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622D4: using guessed type int goodG2BStatic_7;

//----- (0000000000423E19) ----------------------------------------------------
int goodG2B_180()
{
  goodG2BStatic_7 = 1;
  return goodG2BSink_30(-2LL);
}
// 6622D4: using guessed type int goodG2BStatic_7;

//----- (0000000000423E49) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_21_good()
{
  goodB2G1_121();
  goodB2G2_121();
  return goodG2B_180();
}

//----- (0000000000423E6D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_13_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v10 < 0 )
    result = printLongLongLine(2 * v10);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000423F56) ----------------------------------------------------
int goodB2G1_122()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000424067) ----------------------------------------------------
int goodB2G2_122()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042416C) ----------------------------------------------------
int goodG2B1_105()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004241C6) ----------------------------------------------------
int goodG2B2_105()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000424214) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_13_good()
{
  goodB2G1_122();
  goodB2G2_122();
  goodG2B1_105();
  return goodG2B2_105();
}

//----- (0000000000424242) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54c_badSink(a1);
}

//----- (000000000042425C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54c_goodG2BSink(a1);
}

//----- (0000000000424276) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54c_goodB2GSink(a1);
}

//----- (0000000000424290) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_22_bad()
{
  CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_min_sub_22_badSink(0x8000000000000000LL);
}
// 6622D8: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_badGlobal;

//----- (00000000004242C6) ----------------------------------------------------
int goodB2G1_123()
{
  CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Sink(0x8000000000000000LL);
}
// 6622DC: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G1Global;

//----- (00000000004242FC) ----------------------------------------------------
int goodB2G2_123()
{
  CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Sink(0x8000000000000000LL);
}
// 6622E0: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodB2G2Global;

//----- (0000000000424332) ----------------------------------------------------
int goodG2B_181()
{
  CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BSink(-2LL);
}
// 6622E4: using guessed type int CWE191_Integer_Underflow__int64_t_min_sub_22_goodG2BGlobal;

//----- (0000000000424362) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_22_good()
{
  goodB2G1_123();
  goodB2G2_123();
  return goodG2B_181();
}

//----- (0000000000424386) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662328: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal;

//----- (00000000004243B9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66232C: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global;

//----- (000000000042440A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662330: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global;

//----- (000000000042444F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662334: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal;

//----- (0000000000424482) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_34_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004244E9) ----------------------------------------------------
int goodG2B_182()
{
  return printHexCharLine(252);
}

//----- (0000000000424523) ----------------------------------------------------
int goodB2G_164()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042459C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_34_good()
{
  goodG2B_182();
  return goodB2G_164();
}

//----- (00000000004245B6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_14_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (00000000004245F8) ----------------------------------------------------
int goodB2G1_124()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (0000000000424658) ----------------------------------------------------
int goodB2G2_124()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -128;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (00000000004246AC) ----------------------------------------------------
int goodG2B1_106()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (00000000004246FA) ----------------------------------------------------
int goodG2B2_106()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042473C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_14_good()
{
  goodB2G1_124();
  goodB2G2_124();
  goodG2B1_106();
  return goodG2B2_106();
}

//----- (000000000042476A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_34_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (00000000004247CC) ----------------------------------------------------
int goodG2B_183()
{
  return printHexCharLine(-3);
}

//----- (0000000000424801) ----------------------------------------------------
int goodB2G_165()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000424875) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_34_good()
{
  goodG2B_183();
  return goodB2G_165();
}

//----- (000000000042488F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -128;
  v1 = -128;
  return printHexCharLine(0);
}

//----- (00000000004248E9) ----------------------------------------------------
int goodG2B_184()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2;
  v1 = -2;
  return printHexCharLine(252);
}

//----- (0000000000424943) ----------------------------------------------------
int goodB2G_166()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Eh] [rbp-12h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = -128;
  v1 = -128;
  v2 = -128;
  return printLine("data value is too small to perform multiplication.");
}

//----- (00000000004249AF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_32_good()
{
  goodG2B_184();
  return goodB2G_166();
}

//----- (00000000004249C9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54e_badSink(a1);
}

//----- (00000000004249E3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54e_goodG2BSink(a1);
}

//----- (00000000004249FD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_54d_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_sub_54e_goodB2GSink(a1);
}

//----- (0000000000424A17) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54d_badSink(a1);
}

//----- (0000000000424A31) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodG2BSink(a1);
}

//----- (0000000000424A4B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_54c_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_min_multiply_54d_goodB2GSink(a1);
}

//----- (0000000000424A65) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000424AC0) ----------------------------------------------------
int goodB2G1_125()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000424B46) ----------------------------------------------------
int goodB2G2_125()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 662128: using guessed type __int64 stdin;

//----- (0000000000424BC0) ----------------------------------------------------
int goodG2B1_107()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000424C12) ----------------------------------------------------
int goodG2B2_107()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000424C58) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_09_good()
{
  goodB2G1_125();
  goodB2G2_125();
  goodG2B1_107();
  return goodG2B2_107();
}

//----- (0000000000424C86) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000424CB0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000424CDA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000424D16) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_01_bad()
{
  return printLongLongLine(0LL);
}

//----- (0000000000424D54) ----------------------------------------------------
int goodG2B_185()
{
  return printLongLongLine(-4LL);
}

//----- (0000000000424D8C) ----------------------------------------------------
int goodB2G_167()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000424DE6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_01_good()
{
  goodG2B_185();
  return goodB2G_167();
}

//----- (0000000000424E00) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000424E2C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000424E58) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000424EA0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_10_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000424EE0) ----------------------------------------------------
int goodB2G1_126()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000424F3E) ----------------------------------------------------
int goodB2G2_126()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -128;
  result = globalTrue;
  if ( globalTrue && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000424F90) ----------------------------------------------------
int goodG2B1_108()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000424FDC) ----------------------------------------------------
int goodG2B2_108()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000042501C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_10_good()
{
  goodB2G1_126();
  goodB2G2_126();
  goodG2B1_108();
  return goodG2B2_108();
}

//----- (000000000042504A) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  else
    v1 = -2LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  else if ( v1 == 0x8000000000000000LL )
  {
    result = printLine("data value is too large to perform subtraction.");
  }
  else
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004250F0) ----------------------------------------------------
int goodB2G_168()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v3 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  else if ( v1 == 0x8000000000000000LL )
  {
    result = printLine("data value is too large to perform subtraction.");
  }
  else
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004251CA) ----------------------------------------------------
int goodG2B_186()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(-3LL);
}

//----- (000000000042523C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_12_good()
{
  goodB2G_168();
  return goodG2B_186();
}

//----- (0000000000425256) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_13_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004252A4) ----------------------------------------------------
int goodB2G1_127()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042531A) ----------------------------------------------------
int goodB2G2_127()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000425384) ----------------------------------------------------
int goodG2B1_109()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004253D8) ----------------------------------------------------
int goodG2B2_109()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000425420) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_13_good()
{
  goodB2G1_127();
  goodB2G2_127();
  goodG2B1_109();
  return goodG2B2_109();
}

//----- (000000000042544E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_12_bad()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%c", &v1);
  else
    v1 = -2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  else if ( v1 == -128 )
  {
    result = printLine("data value is too large to perform subtraction.");
  }
  else
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004254DB) ----------------------------------------------------
int goodB2G_169()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v3 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  else if ( v1 == -128 )
  {
    result = printLine("data value is too large to perform subtraction.");
  }
  else
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000425595) ----------------------------------------------------
int goodG2B_187()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(253);
}

//----- (00000000004255F5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_12_good()
{
  goodB2G_169();
  return goodG2B_187();
}

//----- (000000000042560F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54c_badSink(a1);
}

//----- (0000000000425629) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000425643) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_54b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_rand_multiply_54c_goodB2GSink(a1);
}

//----- (000000000042565D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_31_bad()
{
  return printHexCharLine(0);
}

//----- (0000000000425697) ----------------------------------------------------
int goodG2B_188()
{
  return printHexCharLine(252);
}

//----- (00000000004256D1) ----------------------------------------------------
int goodB2G_170()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000042571D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_31_good()
{
  goodG2B_188();
  return goodB2G_170();
}

//----- (0000000000425737) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042575B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042577F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (00000000004257B5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_66_bad()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_66b_badSink((__int64)&v2);
}

//----- (0000000000425807) ----------------------------------------------------
int goodG2B_189()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_rand_sub_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000042582C) ----------------------------------------------------
int goodB2G_171()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_66b_goodB2GSink((__int64)&v2);
}

//----- (000000000042587E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_66_good()
{
  goodG2B_189();
  return goodB2G_171();
}

//----- (0000000000425898) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004258D3) ----------------------------------------------------
int goodG2B_190()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodG2BSink(-2LL);
}

//----- (00000000004258F9) ----------------------------------------------------
int goodB2G_172()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000425934) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_54_good()
{
  goodG2B_190();
  return goodB2G_172();
}

//----- (000000000042594E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_11_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000425A3D) ----------------------------------------------------
int goodB2G1_128()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000425B54) ----------------------------------------------------
int goodB2G2_128()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = globalReturnsTrue();
  if ( result && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (0000000000425C5F) ----------------------------------------------------
int goodG2B1_110()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000425CBF) ----------------------------------------------------
int goodG2B2_110()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000425D13) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_11_good()
{
  goodB2G1_128();
  goodB2G2_128();
  goodG2B1_110();
  return goodG2B2_110();
}

//----- (0000000000425D41) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_09_bad()
{
  int result; // eax
  signed __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000425D93) ----------------------------------------------------
int goodB2G1_129()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000425E0D) ----------------------------------------------------
int goodB2G2_129()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000425E7B) ----------------------------------------------------
int goodG2B1_111()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000425ED3) ----------------------------------------------------
int goodG2B2_111()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000425F1F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_09_good()
{
  goodB2G1_129();
  goodB2G2_129();
  goodG2B1_111();
  return goodG2B2_111();
}

//----- (0000000000425F4D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000425F84) ----------------------------------------------------
int goodG2B_191()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_fscanf_sub_64b_goodG2BSink(&v1);
}

//----- (0000000000425FA2) ----------------------------------------------------
int goodB2G_173()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000425FD9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_64_good()
{
  goodG2B_191();
  return goodB2G_173();
}

//----- (0000000000425FF3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54e_badSink(a1);
}

//----- (000000000042600D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodG2BSink(a1);
}

//----- (0000000000426027) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_54d_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_54e_goodB2GSink(a1);
}

//----- (0000000000426041) ----------------------------------------------------
__int64 staticReturnsTrue_8()
{
  return 1LL;
}

//----- (000000000042604C) ----------------------------------------------------
__int64 staticReturnsFalse_8()
{
  return 0LL;
}

//----- (0000000000426057) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_08_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_8();
  if ( result )
  {
    if ( v2 < 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004260CC) ----------------------------------------------------
int goodB2G1_130()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsFalse_8();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042615F) ----------------------------------------------------
int goodB2G2_130()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_8();
  if ( result && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004261E6) ----------------------------------------------------
int goodG2B1_112()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_8() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticReturnsTrue_8();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000042623A) ----------------------------------------------------
int goodG2B2_112()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
    v1 = -2;
  result = staticReturnsTrue_8();
  if ( result )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (0000000000426282) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_08_good()
{
  goodB2G1_130();
  goodB2G2_130();
  goodG2B1_112();
  return goodG2B2_112();
}

//----- (00000000004262B0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    v2 = v1 - 1;
    result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000426313) ----------------------------------------------------
int goodB2G1_131()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004263A1) ----------------------------------------------------
int goodB2G2_131()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == 0x8000000000000000LL )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printLongLongLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000426423) ----------------------------------------------------
int goodG2B1_113()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000042647D) ----------------------------------------------------
int goodG2B2_113()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (00000000004264CB) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_11_good()
{
  goodB2G1_131();
  goodB2G2_131();
  goodG2B1_113();
  return goodG2B2_113();
}

//----- (00000000004264F9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_02_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000426540) ----------------------------------------------------
int goodB2G1_132()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004265A6) ----------------------------------------------------
int goodB2G2_132()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042660C) ----------------------------------------------------
int goodG2B1_114()
{
  return printLongLongLine(-3LL);
}

//----- (000000000042663E) ----------------------------------------------------
int goodG2B2_114()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000426670) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_02_good()
{
  goodB2G1_132();
  goodB2G2_132();
  goodG2B1_114();
  return goodG2B2_114();
}

//----- (000000000042669E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_67_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_67b_badSink(0x80u);
}

//----- (00000000004266C2) ----------------------------------------------------
int goodG2B_192()
{
  return CWE191_Integer_Underflow__char_min_multiply_67b_goodG2BSink(0xFEu);
}

//----- (00000000004266E6) ----------------------------------------------------
int goodB2G_174()
{
  return CWE191_Integer_Underflow__char_min_multiply_67b_goodB2GSink(0x80u);
}

//----- (000000000042670A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_67_good()
{
  goodG2B_192();
  return goodB2G_174();
}

//----- (0000000000426724) ----------------------------------------------------
int __fastcall badSink_31(__int64 a1)
{
  int result; // eax

  result = badStatic_8;
  if ( badStatic_8 )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622E8: using guessed type int badStatic_8;

//----- (0000000000426754) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_21_bad()
{
  badStatic_8 = 1;
  return badSink_31(0x8000000000000000LL);
}
// 6622E8: using guessed type int badStatic_8;

//----- (000000000042678A) ----------------------------------------------------
int __fastcall goodB2G1Sink_8(__int64 a1)
{
  if ( goodB2G1Static_8 )
    return printLine("Benign, fixed string");
  if ( a1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(a1 - 1);
}
// 6622EC: using guessed type int goodB2G1Static_8;

//----- (00000000004267E2) ----------------------------------------------------
int goodB2G1_133()
{
  goodB2G1Static_8 = 0;
  return goodB2G1Sink_8(0x8000000000000000LL);
}
// 6622EC: using guessed type int goodB2G1Static_8;

//----- (0000000000426818) ----------------------------------------------------
int __fastcall goodB2G2Sink_8(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_8;
  if ( goodB2G2Static_8 )
  {
    if ( a1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(a1 - 1);
  }
  return result;
}
// 6622F0: using guessed type int goodB2G2Static_8;

//----- (0000000000426864) ----------------------------------------------------
int goodB2G2_133()
{
  goodB2G2Static_8 = 1;
  return goodB2G2Sink_8(0x8000000000000000LL);
}
// 6622F0: using guessed type int goodB2G2Static_8;

//----- (000000000042689A) ----------------------------------------------------
int __fastcall goodG2BSink_31(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_8;
  if ( goodG2BStatic_8 )
    result = printLongLongLine(a1 - 1);
  return result;
}
// 6622F4: using guessed type int goodG2BStatic_8;

//----- (00000000004268CA) ----------------------------------------------------
int goodG2B_193()
{
  goodG2BStatic_8 = 1;
  return goodG2BSink_31(-2LL);
}
// 6622F4: using guessed type int goodG2BStatic_8;

//----- (00000000004268FA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_21_good()
{
  goodB2G1_133();
  goodB2G2_133();
  return goodG2B_193();
}

//----- (000000000042691E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000426959) ----------------------------------------------------
int goodG2B_194()
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodG2BSink(-2LL);
}

//----- (000000000042697F) ----------------------------------------------------
int goodB2G_175()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004269BA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_53_good()
{
  goodG2B_194();
  return goodB2G_175();
}

//----- (00000000004269D4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_02_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (0000000000426A28) ----------------------------------------------------
int goodB2G1_134()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000426A8E) ----------------------------------------------------
int goodB2G2_134()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000426AF4) ----------------------------------------------------
int goodG2B1_115()
{
  return printHexCharLine(-3);
}

//----- (0000000000426B1B) ----------------------------------------------------
int goodG2B2_115()
{
  return printHexCharLine(-3);
}

//----- (0000000000426B42) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_02_good()
{
  goodB2G1_134();
  goodB2G2_134();
  goodG2B1_115();
  return goodG2B2_115();
}

//----- (0000000000426B70) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_10_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000426BD8) ----------------------------------------------------
int goodB2G1_135()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000426C5E) ----------------------------------------------------
int goodB2G2_135()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000426CD8) ----------------------------------------------------
int goodG2B1_116()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (0000000000426D1F) ----------------------------------------------------
int goodG2B2_116()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = -2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (0000000000426D5A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_10_good()
{
  goodB2G1_135();
  goodB2G2_135();
  goodG2B1_116();
  return goodG2B2_116();
}

//----- (0000000000426D88) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_09_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426DC8) ----------------------------------------------------
int goodB2G1_136()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000426E26) ----------------------------------------------------
int goodB2G2_136()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v1 < 0 )
  {
    if ( v1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426E78) ----------------------------------------------------
int goodG2B1_117()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000426EC4) ----------------------------------------------------
int goodG2B2_117()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426F04) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_09_good()
{
  goodB2G1_136();
  goodB2G2_136();
  goodG2B1_117();
  return goodG2B2_117();
}

//----- (0000000000426F32) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_32_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  result = (unsigned __int8)*v6;
  v4 = *v6;
  if ( v4 < 0 )
  {
    v3 = 2 * v4;
    result = printHexCharLine(2 * v4);
  }
  return result;
}

//----- (0000000000426FB9) ----------------------------------------------------
int goodG2B_195()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = -2;
  v1 = -2;
  return printHexCharLine(252);
}

//----- (0000000000427013) ----------------------------------------------------
int goodB2G_176()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  result = (unsigned __int8)*v6;
  v4 = *v6;
  if ( v4 < 0 )
  {
    if ( v4 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v3 = 2 * v4;
      result = printHexCharLine(2 * v4);
    }
  }
  return result;
}

//----- (00000000004270AC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_32_good()
{
  goodG2B_195();
  return goodB2G_176();
}

//----- (00000000004270C6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (00000000004270EA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042710E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000427144) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  else
    v1 = -2LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v3 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  else
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004271FA) ----------------------------------------------------
int goodB2G_177()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v3 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  else
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004272E4) ----------------------------------------------------
int goodG2B_196()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(-4LL);
}

//----- (0000000000427362) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_12_good()
{
  goodB2G_177();
  return goodG2B_196();
}

//----- (000000000042737C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54d_badSink(a1);
}

//----- (0000000000427396) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54d_goodG2BSink(a1);
}

//----- (00000000004273B0) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54d_goodB2GSink(a1);
}

//----- (00000000004273CA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_67_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_67b_badSink(v0);
}

//----- (000000000042741B) ----------------------------------------------------
int goodG2B_197()
{
  return CWE191_Integer_Underflow__char_rand_sub_67b_goodG2BSink(254);
}

//----- (000000000042743F) ----------------------------------------------------
int goodB2G_178()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_67b_goodB2GSink(v0);
}

//----- (0000000000427490) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_67_good()
{
  goodG2B_197();
  return goodB2G_178();
}

//----- (00000000004274AA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54c_badSink(a1);
}

//----- (00000000004274C4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54c_goodG2BSink(a1);
}

//----- (00000000004274DE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_54c_goodB2GSink(a1);
}

//----- (00000000004274F8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_01_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (000000000042754C) ----------------------------------------------------
int goodG2B_198()
{
  return printHexCharLine(-3);
}

//----- (0000000000427573) ----------------------------------------------------
int goodB2G_179()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (00000000004275D9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_01_good()
{
  goodG2B_198();
  return goodB2G_179();
}

//----- (00000000004275F3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53d_badSink(a1);
}

//----- (000000000042760D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53d_goodG2BSink(a1);
}

//----- (0000000000427627) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53d_goodB2GSink(a1);
}

//----- (0000000000427641) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_52_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52b_badSink(0x8000000000000000LL);
}

//----- (000000000042766D) ----------------------------------------------------
int goodG2B_199()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52b_goodG2BSink(-2LL);
}

//----- (0000000000427693) ----------------------------------------------------
int goodB2G_180()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_52b_goodB2GSink(0x8000000000000000LL);
}

//----- (00000000004276BF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_52_good()
{
  goodG2B_199();
  return goodB2G_180();
}

//----- (00000000004276D9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (00000000004276FD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000427721) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000427757) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_11_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v2 - 1);
  return result;
}

//----- (00000000004277C7) ----------------------------------------------------
int goodB2G1_137()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}

//----- (0000000000427855) ----------------------------------------------------
int goodB2G2_137()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}

//----- (00000000004278D7) ----------------------------------------------------
int goodG2B1_118()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000427926) ----------------------------------------------------
int goodG2B2_118()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = -2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 - 1);
  return result;
}

//----- (0000000000427969) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_11_good()
{
  goodB2G1_137();
  goodB2G2_137();
  goodG2B1_118();
  return goodG2B2_118();
}

//----- (0000000000427997) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53c_badSink(a1);
}

//----- (00000000004279B1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53c_goodG2BSink(a1);
}

//----- (00000000004279CB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_53c_goodB2GSink(a1);
}

//----- (00000000004279E5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000427A14) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000427A43) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000427A84) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_52c_badSink(a1);
}

//----- (0000000000427A9E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodG2BSink(a1);
}

//----- (0000000000427AB8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_52c_goodB2GSink(a1);
}

//----- (0000000000427AD2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000427AFB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000427B24) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000427B5F) ----------------------------------------------------
int badSink_32()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_45_badData - 1);
}
// 6622F8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_badData;

//----- (0000000000427B8C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_45_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_45_badData = v1;
  return badSink_32();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6622F8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_badData;

//----- (0000000000427BD0) ----------------------------------------------------
int goodG2BSink_32()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodG2BData - 1);
}
// 662300: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodG2BData;

//----- (0000000000427BFD) ----------------------------------------------------
int goodG2B_200()
{
  CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodG2BData = -2LL;
  return goodG2BSink_32();
}
// 662300: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodG2BData;

//----- (0000000000427C2C) ----------------------------------------------------
int goodB2GSink_22()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData - 1);
  return result;
}
// 662308: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData;

//----- (0000000000427C75) ----------------------------------------------------
int goodB2G_181()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData = v1;
  return goodB2GSink_22();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662308: using guessed type __int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_45_goodB2GData;

//----- (0000000000427CB9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_45_good()
{
  goodG2B_200();
  return goodB2G_181();
}

//----- (0000000000427CD3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54c_badSink(a1);
}

//----- (0000000000427CED) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000427D07) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_54c_goodB2GSink(a1);
}

//----- (0000000000427D21) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_68_bad()
{
  CWE191_Integer_Underflow__char_min_multiply_68_badData = -128;
  return CWE191_Integer_Underflow__char_min_multiply_68b_badSink();
}
// 6623D1: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_badData;

//----- (0000000000427D47) ----------------------------------------------------
int goodG2B_201()
{
  CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_min_multiply_68b_goodG2BSink();
}
// 6623D0: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_goodG2BData;

//----- (0000000000427D6D) ----------------------------------------------------
int goodB2G_182()
{
  CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData = -128;
  return CWE191_Integer_Underflow__char_min_multiply_68b_goodB2GSink();
}
// 6623D2: using guessed type char CWE191_Integer_Underflow__char_min_multiply_68_goodB2GData;

//----- (0000000000427D93) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_68_good()
{
  goodG2B_201();
  return goodB2G_182();
}

//----- (0000000000427DAD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_12_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%c", &v1);
  else
    v1 = -2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v3 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  else
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000427E48) ----------------------------------------------------
int goodB2G_183()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v3 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  else
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000427F10) ----------------------------------------------------
int goodG2B_202()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(252);
}

//----- (0000000000427F7A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_12_good()
{
  goodB2G_183();
  return goodG2B_202();
}

//----- (0000000000427F94) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_66_bad()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_66b_badSink((__int64)&v2);
}

//----- (0000000000427FE6) ----------------------------------------------------
int goodG2B_203()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = -2;
  v2 = -2;
  return CWE191_Integer_Underflow__char_rand_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000042800B) ----------------------------------------------------
int goodB2G_184()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_66b_goodB2GSink((__int64)&v2);
}

//----- (000000000042805D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_66_good()
{
  goodG2B_203();
  return goodB2G_184();
}

//----- (0000000000428077) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (00000000004280B6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (00000000004280F5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+20h] [rbp-10h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000428150) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000428176) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000042819C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (00000000004281DE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_09_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v2 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000428246) ----------------------------------------------------
int goodB2G1_138()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v2 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v2 - 1);
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004282CC) ----------------------------------------------------
int goodB2G2_138()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v2 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v2 - 1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000428346) ----------------------------------------------------
int goodG2B1_119()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042838D) ----------------------------------------------------
int goodG2B2_119()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004283C8) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_09_good()
{
  goodB2G1_138();
  goodB2G2_138();
  goodG2B1_119();
  return goodG2B2_119();
}

//----- (00000000004283F6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_54_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_54b_badSink(-128);
}

//----- (0000000000428413) ----------------------------------------------------
int goodG2B_204()
{
  return CWE191_Integer_Underflow__char_min_sub_54b_goodG2BSink(-2);
}

//----- (0000000000428430) ----------------------------------------------------
int goodB2G_185()
{
  return CWE191_Integer_Underflow__char_min_sub_54b_goodB2GSink(-128);
}

//----- (000000000042844D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_54_good()
{
  goodG2B_204();
  return goodB2G_185();
}

//----- (0000000000428467) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_51_bad()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_51b_badSink(0x8000000000000000LL);
}

//----- (0000000000428493) ----------------------------------------------------
int goodG2B_205()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_51b_goodG2BSink(-2LL);
}

//----- (00000000004284B9) ----------------------------------------------------
int goodB2G_186()
{
  return CWE191_Integer_Underflow__int64_t_min_sub_51b_goodB2GSink(0x8000000000000000LL);
}

//----- (00000000004284E5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_51_good()
{
  goodG2B_205();
  return goodB2G_186();
}

//----- (00000000004284FF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_05_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    v2 = v1 - 1;
    result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66210C: using guessed type int staticTrue_8;
// 662128: using guessed type __int64 stdin;

//----- (0000000000428553) ----------------------------------------------------
int goodB2G1_139()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFalse_8 )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66210C: using guessed type int staticTrue_8;
// 662128: using guessed type __int64 stdin;
// 662310: using guessed type int staticFalse_8;

//----- (00000000004285C7) ----------------------------------------------------
int goodB2G2_139()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    if ( v1 == -128 )
    {
      result = printLine("data value is too large to perform subtraction.");
    }
    else
    {
      v2 = v1 - 1;
      result = printHexCharLine(v1 - 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66210C: using guessed type int staticTrue_8;
// 662128: using guessed type __int64 stdin;

//----- (000000000042862F) ----------------------------------------------------
int goodG2B1_120()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_8 )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = staticTrue_8;
  if ( staticTrue_8 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66210C: using guessed type int staticTrue_8;
// 662310: using guessed type int staticFalse_8;

//----- (0000000000428676) ----------------------------------------------------
int goodG2B2_120()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_8 )
    v1 = -2;
  result = staticTrue_8;
  if ( staticTrue_8 )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 66210C: using guessed type int staticTrue_8;

//----- (00000000004286B1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_05_good()
{
  goodB2G1_139();
  goodB2G2_139();
  goodG2B1_120();
  return goodG2B2_120();
}

//----- (00000000004286DF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_53_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_53b_badSink(-128);
}

//----- (00000000004286FC) ----------------------------------------------------
int goodG2B_206()
{
  return CWE191_Integer_Underflow__char_min_multiply_53b_goodG2BSink(-2);
}

//----- (0000000000428719) ----------------------------------------------------
int goodB2G_187()
{
  return CWE191_Integer_Underflow__char_min_multiply_53b_goodB2GSink(-128);
}

//----- (0000000000428736) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_53_good()
{
  goodG2B_206();
  return goodB2G_187();
}

//----- (0000000000428750) ----------------------------------------------------
__int64 staticReturnsTrue_9()
{
  return 1LL;
}

//----- (000000000042875B) ----------------------------------------------------
__int64 staticReturnsFalse_9()
{
  return 0LL;
}

//----- (0000000000428766) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_9();
  if ( result )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004287D1) ----------------------------------------------------
int goodB2G1_140()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)staticReturnsFalse_9() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428867) ----------------------------------------------------
int goodB2G2_140()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_9();
  if ( result )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004288F1) ----------------------------------------------------
int goodG2B1_121()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_9() )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticReturnsTrue_9();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000428951) ----------------------------------------------------
int goodG2B2_121()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_9() )
    v1 = -2LL;
  result = staticReturnsTrue_9();
  if ( result )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (00000000004289A5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_08_good()
{
  goodB2G1_140();
  goodB2G2_140();
  goodG2B1_121();
  return goodG2B2_121();
}

//----- (00000000004289D3) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428A0A) ----------------------------------------------------
int goodG2B_207()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodG2BSink(&v1);
}

//----- (0000000000428A28) ----------------------------------------------------
int goodB2G_188()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428A5F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_64_good()
{
  goodG2B_207();
  return goodB2G_188();
}

//----- (0000000000428A79) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_52_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428AB2) ----------------------------------------------------
int goodG2B_208()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodG2BSink(-2);
}

//----- (0000000000428ACF) ----------------------------------------------------
int goodB2G_189()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428B08) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_52_good()
{
  goodG2B_208();
  return goodB2G_189();
}

//----- (0000000000428B22) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_68_badData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_68_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_68_badData);
  return result;
}
// 6623D3: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_badData;

//----- (0000000000428B50) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData);
  return result;
}
// 6623D5: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData;

//----- (0000000000428B7E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData;
  if ( CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData);
  }
  return result;
}
// 6623D4: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData;

//----- (0000000000428BBE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000428BE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000428C10) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000428C4B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000428C6F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000428C93) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000428CC9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_06_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (0000000000428D15) ----------------------------------------------------
int goodB2G1_141()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000428D89) ----------------------------------------------------
int goodB2G2_141()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (0000000000428DF1) ----------------------------------------------------
int goodG2B1_122()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000428E43) ----------------------------------------------------
int goodG2B2_122()
{
  return printLongLongLine(-3LL);
}

//----- (0000000000428E89) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_06_good()
{
  goodB2G1_141();
  goodB2G2_141();
  goodG2B1_122();
  return goodG2B2_122();
}

//----- (0000000000428EB7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54c_badSink(a1);
}

//----- (0000000000428ED1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54c_goodG2BSink(a1);
}

//----- (0000000000428EEB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_54b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_54c_goodB2GSink(a1);
}

//----- (0000000000428F05) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428F40) ----------------------------------------------------
int goodG2B_209()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodG2BSink(&v1);
}

//----- (0000000000428F66) ----------------------------------------------------
int goodB2G_190()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000428FA1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_64_good()
{
  goodG2B_209();
  return goodB2G_190();
}

//----- (0000000000428FBB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53c_badSink(a1);
}

//----- (0000000000428FD5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53c_goodG2BSink(a1);
}

//----- (0000000000428FEF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_53c_goodB2GSink(a1);
}

//----- (0000000000429009) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53c_badSink(a1);
}

//----- (0000000000429023) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53c_goodG2BSink(a1);
}

//----- (000000000042903D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53c_goodB2GSink(a1);
}

//----- (0000000000429057) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429080) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004290A9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004290E4) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53d_badSink(a1);
}

//----- (00000000004290FE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53d_goodG2BSink(a1);
}

//----- (0000000000429118) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53d_goodB2GSink(a1);
}

//----- (0000000000429132) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_52_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_52b_badSink(-128);
}

//----- (000000000042914F) ----------------------------------------------------
int goodG2B_210()
{
  return CWE191_Integer_Underflow__char_min_sub_52b_goodG2BSink(-2);
}

//----- (000000000042916C) ----------------------------------------------------
int goodB2G_191()
{
  return CWE191_Integer_Underflow__char_min_sub_52b_goodB2GSink(-128);
}

//----- (0000000000429189) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_52_good()
{
  goodG2B_210();
  return goodB2G_191();
}

//----- (00000000004291A3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_52c_badSink(a1);
}

//----- (00000000004291BD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_52c_goodG2BSink(a1);
}

//----- (00000000004291D7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_multiply_52c_goodB2GSink(a1);
}

//----- (00000000004291F1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_51_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042922A) ----------------------------------------------------
int goodG2B_211()
{
  return CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodG2BSink(-2);
}

//----- (0000000000429247) ----------------------------------------------------
int goodB2G_192()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429280) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_51_good()
{
  goodG2B_211();
  return goodB2G_192();
}

//----- (000000000042929A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (00000000004292BE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (00000000004292E2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000429318) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_68_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_68_badData = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_68b_badSink();
}
// 6623D3: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_badData;

//----- (000000000042936B) ----------------------------------------------------
int goodG2B_212()
{
  CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_rand_multiply_68b_goodG2BSink();
}
// 6623D5: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_goodG2BData;

//----- (0000000000429391) ----------------------------------------------------
int goodB2G_193()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_68b_goodB2GSink();
}
// 6623D4: using guessed type char CWE191_Integer_Underflow__char_rand_multiply_68_goodB2GData;

//----- (00000000004293E4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_68_good()
{
  goodG2B_212();
  return goodB2G_193();
}

//----- (00000000004293FE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_68_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_68_badData = v1;
  return CWE191_Integer_Underflow__char_fscanf_sub_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6623D8: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_badData;

//----- (000000000042943D) ----------------------------------------------------
int goodG2B_213()
{
  CWE191_Integer_Underflow__char_fscanf_sub_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_fscanf_sub_68b_goodG2BSink();
}
// 6623D7: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_goodG2BData;

//----- (0000000000429463) ----------------------------------------------------
int goodB2G_194()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData = v1;
  return CWE191_Integer_Underflow__char_fscanf_sub_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 6623D6: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_68_goodB2GData;

//----- (00000000004294A2) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_68_good()
{
  goodG2B_213();
  return goodB2G_194();
}

//----- (00000000004294BC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_02_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429503) ----------------------------------------------------
int goodB2G1_142()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042955E) ----------------------------------------------------
int goodB2G2_142()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004295B9) ----------------------------------------------------
int goodG2B1_123()
{
  return printHexCharLine(252);
}

//----- (00000000004295E5) ----------------------------------------------------
int goodG2B2_123()
{
  return printHexCharLine(252);
}

//----- (0000000000429611) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_02_good()
{
  goodB2G1_142();
  goodB2G2_142();
  goodG2B1_123();
  return goodG2B2_123();
}

//----- (000000000042963F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_65_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_65b_badSink(-128);
}

//----- (0000000000429665) ----------------------------------------------------
int goodG2B_214()
{
  return CWE191_Integer_Underflow__char_min_sub_65b_goodG2BSink(-2);
}

//----- (000000000042968B) ----------------------------------------------------
int goodB2G_195()
{
  return CWE191_Integer_Underflow__char_min_sub_65b_goodB2GSink(-128);
}

//----- (00000000004296B1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_65_good()
{
  goodG2B_214();
  return goodB2G_195();
}

//----- (00000000004296CB) ----------------------------------------------------
int __fastcall badSink_33(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (00000000004296F1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_41_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return badSink_33(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042972C) ----------------------------------------------------
int __fastcall goodG2BSink_33(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000429752) ----------------------------------------------------
int goodG2B_215()
{
  return goodG2BSink_33(-2LL);
}

//----- (0000000000429778) ----------------------------------------------------
int __fastcall goodB2GSink_23(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (00000000004297BA) ----------------------------------------------------
int goodB2G_196()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return goodB2GSink_23(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004297F5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_41_good()
{
  goodB2G_196();
  return goodG2B_215();
}

//----- (000000000042980F) ----------------------------------------------------
int badSink_34()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_45_badData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_45_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_45_badData);
  return result;
}
// 662314: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_badData;

//----- (000000000042983D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_45_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_45_badData = v1;
  return badSink_34();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662314: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_badData;

//----- (000000000042987C) ----------------------------------------------------
int goodG2BSink_34()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData);
  return result;
}
// 662315: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData;

//----- (00000000004298AA) ----------------------------------------------------
int goodG2B_216()
{
  CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData = -2;
  return goodG2BSink_34();
}
// 662315: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodG2BData;

//----- (00000000004298D0) ----------------------------------------------------
int goodB2GSink_24()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData);
  }
  return result;
}
// 662316: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData;

//----- (0000000000429910) ----------------------------------------------------
int goodB2G_197()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData = v1;
  return goodB2GSink_24();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662316: using guessed type char CWE191_Integer_Underflow__char_fscanf_multiply_45_goodB2GData;

//----- (000000000042994F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_45_good()
{
  goodG2B_216();
  return goodB2G_197();
}

//----- (0000000000429969) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_53_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_53b_badSink(v0);
}

//----- (00000000004299B3) ----------------------------------------------------
int goodG2B_217()
{
  return CWE191_Integer_Underflow__char_rand_multiply_53b_goodG2BSink(-2);
}

//----- (00000000004299D0) ----------------------------------------------------
int goodB2G_198()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_53b_goodB2GSink(v0);
}

//----- (0000000000429A1A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_53_good()
{
  goodG2B_217();
  return goodB2G_198();
}

//----- (0000000000429A34) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000429A6B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000429AA2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000429AF5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_53_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429B2E) ----------------------------------------------------
int goodG2B_218()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53b_goodG2BSink(-2);
}

//----- (0000000000429B4B) ----------------------------------------------------
int goodB2G_199()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429B84) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_53_good()
{
  goodG2B_218();
  return goodB2G_199();
}

//----- (0000000000429B9E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_52_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_52b_badSink(-128);
}

//----- (0000000000429BBB) ----------------------------------------------------
int goodG2B_219()
{
  return CWE191_Integer_Underflow__char_min_multiply_52b_goodG2BSink(-2);
}

//----- (0000000000429BD8) ----------------------------------------------------
int goodB2G_200()
{
  return CWE191_Integer_Underflow__char_min_multiply_52b_goodB2GSink(-128);
}

//----- (0000000000429BF5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_52_good()
{
  goodG2B_219();
  return goodB2G_200();
}

//----- (0000000000429C0F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429C38) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429C61) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000429C9C) ----------------------------------------------------
int __fastcall badSink_35(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000429CC2) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = badSink_35;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429D06) ----------------------------------------------------
int __fastcall goodG2BSink_35(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (0000000000429D2C) ----------------------------------------------------
int goodG2B_220()
{
  return goodG2BSink_35(-2LL);
}

//----- (0000000000429D5B) ----------------------------------------------------
int __fastcall goodB2GSink_25(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (0000000000429D9D) ----------------------------------------------------
__int64 goodB2G_201()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_25;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429DE1) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_sub_44_good()
{
  goodG2B_220();
  return goodB2G_201();
}

//----- (0000000000429DFB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_16_bad()
{
  return printHexCharLine(0);
}

//----- (0000000000429E29) ----------------------------------------------------
int goodB2G_202()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (0000000000429E69) ----------------------------------------------------
int goodG2B_221()
{
  return printHexCharLine(252);
}

//----- (0000000000429E97) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_16_good()
{
  goodB2G_202();
  return goodG2B_221();
}

//----- (0000000000429EB1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000429ED5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (0000000000429EF9) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (0000000000429F2F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000429FA4) ----------------------------------------------------
int goodB2G_203()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042A038) ----------------------------------------------------
int goodG2B_222()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = -2LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000042A096) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_17_good()
{
  goodB2G_203();
  return goodG2B_222();
}

//----- (000000000042A0B0) ----------------------------------------------------
int __fastcall badSink_36(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042A0DC) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = badSink_36;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042A120) ----------------------------------------------------
int __fastcall goodG2BSink_36(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042A14C) ----------------------------------------------------
int goodG2B_223()
{
  return goodG2BSink_36(-2LL);
}

//----- (000000000042A17B) ----------------------------------------------------
int __fastcall goodB2GSink_26(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000042A1C3) ----------------------------------------------------
__int64 goodB2G_204()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_26;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042A207) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_44_good()
{
  goodG2B_223();
  return goodB2G_204();
}

//----- (000000000042A221) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042A24A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042A273) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000042A2AE) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (000000000042A311) ----------------------------------------------------
int goodB2G1_143()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;
// 662358: using guessed type int globalFalse;

//----- (000000000042A39F) ----------------------------------------------------
int goodB2G2_143()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 66211C: using guessed type int globalTrue;
// 662128: using guessed type __int64 stdin;

//----- (000000000042A421) ----------------------------------------------------
int goodG2B1_124()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;
// 662358: using guessed type int globalFalse;

//----- (000000000042A479) ----------------------------------------------------
int goodG2B2_124()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = -2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 66211C: using guessed type int globalTrue;

//----- (000000000042A4C5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_10_good()
{
  goodB2G1_143();
  goodB2G2_143();
  goodG2B1_124();
  return goodG2B2_124();
}

//----- (000000000042A4F3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042A517) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042A53B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042A571) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_64b_badSink(&v1);
}

//----- (000000000042A59D) ----------------------------------------------------
int goodG2B_224()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_64b_goodG2BSink(&v1);
}

//----- (000000000042A5C3) ----------------------------------------------------
int goodB2G_205()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_64b_goodB2GSink(&v1);
}

//----- (000000000042A5EF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_64_good()
{
  goodG2B_224();
  return goodB2G_205();
}

//----- (000000000042A609) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53d_badSink(a1);
}

//----- (000000000042A623) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53d_goodG2BSink(a1);
}

//----- (000000000042A63D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53d_goodB2GSink(a1);
}

//----- (000000000042A657) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042A691) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042A6CB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042A717) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_52c_badSink(a1);
}

//----- (000000000042A731) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_52c_goodG2BSink(a1);
}

//----- (000000000042A74B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_multiply_52c_goodB2GSink(a1);
}

//----- (000000000042A765) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_63b_badSink(&v1);
}

//----- (000000000042A791) ----------------------------------------------------
int goodG2B_225()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodG2BSink(&v1);
}

//----- (000000000042A7B7) ----------------------------------------------------
int goodB2G_206()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_63b_goodB2GSink(&v1);
}

//----- (000000000042A7E3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_63_good()
{
  goodG2B_225();
  return goodB2G_206();
}

//----- (000000000042A7FD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53c_badSink(a1);
}

//----- (000000000042A817) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53c_goodG2BSink(a1);
}

//----- (000000000042A831) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_53c_goodB2GSink(a1);
}

//----- (000000000042A84B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_52c_badSink(a1);
}

//----- (000000000042A865) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_52c_goodG2BSink(a1);
}

//----- (000000000042A87F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_52c_goodB2GSink(a1);
}

//----- (000000000042A899) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_51_bad()
{
  return CWE191_Integer_Underflow__char_min_multiply_51b_badSink(-128);
}

//----- (000000000042A8B6) ----------------------------------------------------
int goodG2B_226()
{
  return CWE191_Integer_Underflow__char_min_multiply_51b_goodG2BSink(-2);
}

//----- (000000000042A8D3) ----------------------------------------------------
int goodB2G_207()
{
  return CWE191_Integer_Underflow__char_min_multiply_51b_goodB2GSink(-128);
}

//----- (000000000042A8F0) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_51_good()
{
  goodG2B_226();
  return goodB2G_207();
}

//----- (000000000042A90A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042A92E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042A952) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042A988) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042A9B7) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodG2BSource()
{
  return -2LL;
}

//----- (000000000042A9CD) ----------------------------------------------------
__int64 __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042A9FC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_68_bad()
{
  CWE191_Integer_Underflow__char_min_sub_68_badData = -128;
  return CWE191_Integer_Underflow__char_min_sub_68b_badSink();
}
// 6623DB: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_badData;

//----- (000000000042AA22) ----------------------------------------------------
int goodG2B_227()
{
  CWE191_Integer_Underflow__char_min_sub_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_min_sub_68b_goodG2BSink();
}
// 6623D9: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_goodG2BData;

//----- (000000000042AA48) ----------------------------------------------------
int goodB2G_208()
{
  CWE191_Integer_Underflow__char_min_sub_68_goodB2GData = -128;
  return CWE191_Integer_Underflow__char_min_sub_68b_goodB2GSink();
}
// 6623DA: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_goodB2GData;

//----- (000000000042AA6E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_68_good()
{
  goodG2B_227();
  return goodB2G_208();
}

//----- (000000000042AA88) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_65_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE191_Integer_Underflow__char_rand_sub_65b_badSink)((unsigned int)(char)v0);
}

//----- (000000000042AADB) ----------------------------------------------------
int goodG2B_228()
{
  return CWE191_Integer_Underflow__char_rand_sub_65b_goodG2BSink(-2);
}

//----- (000000000042AB01) ----------------------------------------------------
__int64 goodB2G_209()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE191_Integer_Underflow__char_rand_sub_65b_goodB2GSink)((unsigned int)(char)v0);
}

//----- (000000000042AB54) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_rand_sub_65_good()
{
  goodG2B_228();
  return goodB2G_209();
}

//----- (000000000042AB6E) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_64b_badSink(&v1);
}

//----- (000000000042AB9A) ----------------------------------------------------
int goodG2B_229()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000042ABC0) ----------------------------------------------------
int goodB2G_210()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_multiply_64b_goodB2GSink(&v1);
}

//----- (000000000042ABEC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_64_good()
{
  goodG2B_229();
  return goodB2G_210();
}

//----- (000000000042AC06) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000042AC3D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000042AC74) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_rand_multiply_63b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (000000000042ACC7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_01_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042AD0E) ----------------------------------------------------
int goodG2B_230()
{
  return printHexCharLine(252);
}

//----- (000000000042AD3A) ----------------------------------------------------
int goodB2G_211()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (v1 & 0x80u) != 0 )
  {
    if ( (char)v1 < -63 )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042AD95) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_01_good()
{
  goodG2B_230();
  return goodB2G_211();
}

//----- (000000000042ADAF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_52_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_52b_badSink(v0);
}

//----- (000000000042ADF9) ----------------------------------------------------
int goodG2B_231()
{
  return CWE191_Integer_Underflow__char_rand_multiply_52b_goodG2BSink(-2);
}

//----- (000000000042AE16) ----------------------------------------------------
int goodB2G_212()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_52b_goodB2GSink(v0);
}

//----- (000000000042AE60) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_52_good()
{
  goodG2B_231();
  return goodB2G_212();
}

//----- (000000000042AE7A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042AEAB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042AEDC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(*a1 - 1LL);
  return result;
}

//----- (000000000042AF29) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042AF52) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042AF7B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000042AFB6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_52_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042AFEF) ----------------------------------------------------
int goodG2B_232()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_52b_goodG2BSink(-2);
}

//----- (000000000042B00C) ----------------------------------------------------
int goodB2G_213()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042B045) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_52_good()
{
  goodG2B_232();
  return goodB2G_213();
}

//----- (000000000042B05F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_68b_badSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_68_badData - 1);
}
// 6623DC: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_badData;

//----- (000000000042B088) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_68b_goodG2BSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_68_goodG2BData - 1);
}
// 6623DE: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_goodG2BData;

//----- (000000000042B0B1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData - 1);
  return result;
}
// 6623DD: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData;

//----- (000000000042B0EC) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_bad()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_badSource(0LL);
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042B12C) ----------------------------------------------------
int goodG2B_233()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodG2BSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042B16C) ----------------------------------------------------
int goodB2G_214()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_fscanf_multiply_61b_goodB2GSource(0LL);
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (000000000042B1C8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_61_good()
{
  goodG2B_233();
  return goodB2G_214();
}

//----- (000000000042B1E2) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042B206) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042B22A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042B260) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_16_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042B2BB) ----------------------------------------------------
int goodB2G_215()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042B328) ----------------------------------------------------
int goodG2B_234()
{
  return printHexCharLine(252);
}

//----- (000000000042B356) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_16_good()
{
  goodB2G_215();
  return goodG2B_234();
}

//----- (000000000042B370) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_22_bad()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_min_multiply_22_badSink(0x8000000000000000LL);
}
// 662318: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_badGlobal;

//----- (000000000042B3A6) ----------------------------------------------------
int goodB2G1_144()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Sink(0x8000000000000000LL);
}
// 66231C: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G1Global;

//----- (000000000042B3DC) ----------------------------------------------------
int goodB2G2_144()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Sink(0x8000000000000000LL);
}
// 662320: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodB2G2Global;

//----- (000000000042B412) ----------------------------------------------------
int goodG2B_235()
{
  CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BSink(-2LL);
}
// 662324: using guessed type int CWE191_Integer_Underflow__int64_t_min_multiply_22_goodG2BGlobal;

//----- (000000000042B442) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_22_good()
{
  goodB2G1_144();
  goodB2G2_144();
  return goodG2B_235();
}

//----- (000000000042B466) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_16_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042B4A8) ----------------------------------------------------
int goodB2G_216()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042B4FE) ----------------------------------------------------
int goodG2B_236()
{
  return printHexCharLine(-3);
}

//----- (000000000042B527) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_16_good()
{
  goodB2G_216();
  return goodG2B_236();
}

//----- (000000000042B541) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_22_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal = 1;
  return CWE191_Integer_Underflow__char_fscanf_multiply_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662328: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal;

//----- (000000000042B584) ----------------------------------------------------
int goodB2G1_145()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global = 0;
  return CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 66232C: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global;

//----- (000000000042B5C7) ----------------------------------------------------
int goodB2G2_145()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global = 1;
  return CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662330: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global;

//----- (000000000042B60A) ----------------------------------------------------
int goodG2B_237()
{
  CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal = 1;
  return CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BSink(-2);
}
// 662334: using guessed type int CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal;

//----- (000000000042B631) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_22_good()
{
  goodB2G1_145();
  goodB2G2_145();
  return goodG2B_237();
}

//----- (000000000042B655) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662110: using guessed type int staticFive_8;
// 662128: using guessed type __int64 stdin;

//----- (000000000042B6BA) ----------------------------------------------------
int goodB2G1_146()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFive_8 != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662110: using guessed type int staticFive_8;
// 662128: using guessed type __int64 stdin;

//----- (000000000042B74A) ----------------------------------------------------
int goodB2G2_146()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662110: using guessed type int staticFive_8;
// 662128: using guessed type __int64 stdin;

//----- (000000000042B7CE) ----------------------------------------------------
int goodG2B1_125()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_8 == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive_8;
  if ( staticFive_8 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662110: using guessed type int staticFive_8;

//----- (000000000042B828) ----------------------------------------------------
int goodG2B2_125()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_8 == 5 )
    v1 = -2LL;
  result = staticFive_8;
  if ( staticFive_8 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662110: using guessed type int staticFive_8;

//----- (000000000042B876) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_07_good()
{
  goodB2G1_146();
  goodB2G2_146();
  goodG2B1_125();
  return goodG2B2_125();
}

//----- (000000000042B8A4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_06_bad()
{
  return printHexCharLine(0);
}

//----- (000000000042B8E4) ----------------------------------------------------
int goodB2G1_147()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000042B942) ----------------------------------------------------
int goodB2G2_147()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000042B994) ----------------------------------------------------
int goodG2B1_126()
{
  return printHexCharLine(252);
}

//----- (000000000042B9E0) ----------------------------------------------------
int goodG2B2_126()
{
  return printHexCharLine(252);
}

//----- (000000000042BA20) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_06_good()
{
  goodB2G1_147();
  goodB2G2_147();
  goodG2B1_126();
  return goodG2B2_126();
}

//----- (000000000042BA4E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53c_badSink(a1);
}

//----- (000000000042BA68) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53c_goodG2BSink(a1);
}

//----- (000000000042BA82) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_53b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_53c_goodB2GSink(a1);
}

//----- (000000000042BA9C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_03_bad()
{
  return printLongLongLine(0x7FFFFFFFFFFFFFFFLL);
}

//----- (000000000042BAD4) ----------------------------------------------------
int goodB2G1_148()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042BB28) ----------------------------------------------------
int goodB2G2_148()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042BB7C) ----------------------------------------------------
int goodG2B1_127()
{
  return printLongLongLine(-3LL);
}

//----- (000000000042BBAE) ----------------------------------------------------
int goodG2B2_127()
{
  return printLongLongLine(-3LL);
}

//----- (000000000042BBE0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_03_good()
{
  goodB2G1_148();
  goodB2G2_148();
  goodG2B1_127();
  return goodG2B2_127();
}

//----- (000000000042BC0E) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042BC48) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042BC82) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042BCCE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_51_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_51b_badSink((char)v0);
}

//----- (000000000042BD18) ----------------------------------------------------
int goodG2B_238()
{
  return CWE191_Integer_Underflow__char_rand_multiply_51b_goodG2BSink(-2);
}

//----- (000000000042BD35) ----------------------------------------------------
int goodB2G_217()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_multiply_51b_goodB2GSink((char)v0);
}

//----- (000000000042BD7F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_51_good()
{
  goodG2B_238();
  return goodB2G_217();
}

//----- (000000000042BD99) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042BDD4) ----------------------------------------------------
int goodG2B_239()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodG2BSink(&v1);
}

//----- (000000000042BDFA) ----------------------------------------------------
int goodB2G_218()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_sub_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042BE35) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_63_good()
{
  goodG2B_239();
  return goodB2G_218();
}

//----- (000000000042BE4F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042BE73) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042BE97) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042BECD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_52c_badSink(a1);
}

//----- (000000000042BEE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_52c_goodG2BSink(a1);
}

//----- (000000000042BF01) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_min_sub_52c_goodB2GSink(a1);
}

//----- (000000000042BF1B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_51_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042BF54) ----------------------------------------------------
int goodG2B_240()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_51b_goodG2BSink(-2);
}

//----- (000000000042BF71) ----------------------------------------------------
int goodB2G_219()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_sub_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042BFAA) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_51_good()
{
  goodG2B_240();
  return goodB2G_219();
}

//----- (000000000042BFC4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_68_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_68_badData = v0;
  return CWE191_Integer_Underflow__char_rand_sub_68b_badSink();
}
// 6623DC: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_badData;

//----- (000000000042C017) ----------------------------------------------------
int goodG2B_241()
{
  CWE191_Integer_Underflow__char_rand_sub_68_goodG2BData = -2;
  return CWE191_Integer_Underflow__char_rand_sub_68b_goodG2BSink();
}
// 6623DE: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_goodG2BData;

//----- (000000000042C03D) ----------------------------------------------------
int goodB2G_220()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData = v0;
  return CWE191_Integer_Underflow__char_rand_sub_68b_goodB2GSink();
}
// 6623DD: using guessed type char CWE191_Integer_Underflow__char_rand_sub_68_goodB2GData;

//----- (000000000042C090) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_68_good()
{
  goodG2B_241();
  return goodB2G_220();
}

//----- (000000000042C0AA) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042C0E3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042C11C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_64b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(*a1 - 1LL);
  return result;
}

//----- (000000000042C171) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_13_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042C1E0) ----------------------------------------------------
int goodB2G1_149()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042C26D) ----------------------------------------------------
int goodB2G2_149()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042C2EE) ----------------------------------------------------
int goodG2B1_128()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042C33C) ----------------------------------------------------
int goodG2B2_128()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042C37E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_13_good()
{
  goodB2G1_149();
  goodB2G2_149();
  goodG2B1_128();
  return goodG2B2_128();
}

//----- (000000000042C3AC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_63_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_63b_badSink(&v2);
}

//----- (000000000042C3F7) ----------------------------------------------------
int goodG2B_242()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_rand_sub_63b_goodG2BSink(&v1);
}

//----- (000000000042C415) ----------------------------------------------------
int goodB2G_221()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_sub_63b_goodB2GSink(&v2);
}

//----- (000000000042C460) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_63_good()
{
  goodG2B_242();
  return goodB2G_221();
}

//----- (000000000042C47A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_18_bad()
{
  return printHexCharLine(127);
}

//----- (000000000042C4A3) ----------------------------------------------------
int goodB2G_222()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042C4DE) ----------------------------------------------------
int goodG2B_243()
{
  return printHexCharLine(-3);
}

//----- (000000000042C507) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_18_good()
{
  goodB2G_222();
  return goodG2B_243();
}

//----- (000000000042C521) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_17_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    result = 0;
    v1 = 0x8000000000000000LL;
  }
  for ( j = 0; j <= 0; ++j )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000042C57F) ----------------------------------------------------
int goodB2G_223()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    result = 0;
    v1 = 0x8000000000000000LL;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}

//----- (000000000042C5F9) ----------------------------------------------------
int goodG2B_244()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = -2LL;
  for ( j = 0; j <= 0; ++j )
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000042C651) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_17_good()
{
  goodB2G_223();
  return goodG2B_244();
}

//----- (000000000042C66B) ----------------------------------------------------
int badSink_37()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_45_badData - 1);
}
// 662338: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_badData;

//----- (000000000042C694) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_45_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_45_badData = v1;
  return badSink_37();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 662338: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_badData;

//----- (000000000042C6D3) ----------------------------------------------------
int goodG2BSink_37()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_45_goodG2BData - 1);
}
// 662339: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_goodG2BData;

//----- (000000000042C6FC) ----------------------------------------------------
int goodG2B_245()
{
  CWE191_Integer_Underflow__char_fscanf_sub_45_goodG2BData = -2;
  return goodG2BSink_37();
}
// 662339: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_goodG2BData;

//----- (000000000042C722) ----------------------------------------------------
int goodB2GSink_27()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData - 1);
  return result;
}
// 66233A: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData;

//----- (000000000042C75D) ----------------------------------------------------
int goodB2G_224()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData = v1;
  return goodB2GSink_27();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;
// 66233A: using guessed type char CWE191_Integer_Underflow__char_fscanf_sub_45_goodB2GData;

//----- (000000000042C79C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_45_good()
{
  goodG2B_245();
  return goodB2G_224();
}

//----- (000000000042C7B6) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_06_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000042C823) ----------------------------------------------------
int goodB2G1_150()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042C8AE) ----------------------------------------------------
int goodB2G2_150()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042C92D) ----------------------------------------------------
int goodG2B1_129()
{
  return printHexCharLine(252);
}

//----- (000000000042C979) ----------------------------------------------------
int goodG2B2_129()
{
  return printHexCharLine(252);
}

//----- (000000000042C9B9) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_06_good()
{
  goodB2G1_150();
  goodB2G2_150();
  goodG2B1_129();
  return goodG2B2_129();
}

//----- (000000000042C9E7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_53_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_53b_badSink(v0);
}

//----- (000000000042CA31) ----------------------------------------------------
int goodG2B_246()
{
  return CWE191_Integer_Underflow__char_rand_sub_53b_goodG2BSink(-2);
}

//----- (000000000042CA4E) ----------------------------------------------------
int goodB2G_225()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_53b_goodB2GSink(v0);
}

//----- (000000000042CA98) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_53_good()
{
  goodG2B_246();
  return goodB2G_225();
}

//----- (000000000042CAB2) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_18_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
    LODWORD(v4) = printLongLongLine(2 * v4);
  return v4;
}

//----- (000000000042CB83) ----------------------------------------------------
int goodB2G_226()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  if ( v4 < 0 )
  {
    if ( v4 < -4611686018427387903LL )
      LODWORD(v4) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v4) = printLongLongLine(2 * v4);
  }
  return v4;
}

//----- (000000000042CC70) ----------------------------------------------------
int goodG2B_247()
{
  return printLongLongLine(-4LL);
}

//----- (000000000042CCAA) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_18_good()
{
  goodB2G_226();
  return goodG2B_247();
}

//----- (000000000042CCC4) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_64b_badSink(&v1);
}

//----- (000000000042CCE2) ----------------------------------------------------
int goodG2B_248()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_min_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000042CD00) ----------------------------------------------------
int goodB2G_227()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -128;
  return CWE191_Integer_Underflow__char_min_multiply_64b_goodB2GSink(&v1);
}

//----- (000000000042CD1E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_64_good()
{
  goodG2B_248();
  return goodB2G_227();
}

//----- (000000000042CD38) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042CD69) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 - 1LL);
}

//----- (000000000042CD9A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_min_sub_63b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(*a1 - 1LL);
  return result;
}

//----- (000000000042CDE7) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_badSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000042CE0D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000042CE33) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_sub_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000042CE75) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_61_bad()
{
  signed __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_min_multiply_61b_badSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042CEB5) ----------------------------------------------------
int goodG2B_249()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodG2BSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042CEF5) ----------------------------------------------------
int goodB2G_228()
{
  signed __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_min_multiply_61b_goodB2GSource();
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (000000000042CF51) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_multiply_61_good()
{
  goodG2B_249();
  return goodB2G_228();
}

//----- (000000000042CF6B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042CF8F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042CFB3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042CFE9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_68b_badSink()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_68_badData - 1);
}
// 6623E8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_badData;

//----- (000000000042D016) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_68b_goodG2BSink()
{
  return printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_68_goodG2BData - 1);
}
// 6623F0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodG2BData;

//----- (000000000042D043) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData - 1);
  return result;
}
// 6623E0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData;

//----- (000000000042D08C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042D0B5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042D0DE) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000042D119) ----------------------------------------------------
void CWE191_Integer_Underflow__int64_t_rand_multiply_17_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v9; // [rsp+10h] [rbp-20h]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v9 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v9 = v4;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v9 < 0 )
      printLongLongLine(2 * v9);
  }
}

//----- (000000000042D215) ----------------------------------------------------
void goodB2G_229()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v9; // [rsp+10h] [rbp-20h]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v9 = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v9 = v4;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v9 < 0 )
    {
      if ( v9 < -4611686018427387903LL )
        printLine("data value is too small to perform multiplication.");
      else
        printLongLongLine(2 * v9);
    }
  }
}

//----- (000000000042D32D) ----------------------------------------------------
int goodG2B_250()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = -2LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000042D38B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_17_good()
{
  goodB2G_229();
  return goodG2B_250();
}

//----- (000000000042D3A5) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_16_bad()
{
  return printHexCharLine(127);
}

//----- (000000000042D3CE) ----------------------------------------------------
int goodB2G_230()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042D409) ----------------------------------------------------
int goodG2B_251()
{
  return printHexCharLine(-3);
}

//----- (000000000042D432) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_16_good()
{
  goodB2G_230();
  return goodG2B_251();
}

//----- (000000000042D44C) ----------------------------------------------------
int __fastcall badSink_38(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042D478) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_44_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return ((__int64 (__fastcall *)(__int64))badSink_38)(v4);
}

//----- (000000000042D53E) ----------------------------------------------------
int __fastcall goodG2BSink_38(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042D56A) ----------------------------------------------------
int goodG2B_252()
{
  return goodG2BSink_38(-2LL);
}

//----- (000000000042D599) ----------------------------------------------------
int __fastcall goodB2GSink_28(__int64 a1)
{
  int result; // eax

  if ( a1 < 0 )
  {
    if ( a1 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000042D5E1) ----------------------------------------------------
__int64 goodB2G_231()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  return ((__int64 (__fastcall *)(__int64))goodB2GSink_28)(v4);
}

//----- (000000000042D6A7) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_44_good()
{
  goodG2B_252();
  return goodB2G_231();
}

//----- (000000000042D6C1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_badSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_badSink(a1);
}

//----- (000000000042D6DB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodG2BSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodG2BSink(a1);
}

//----- (000000000042D6F5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_54b_goodB2GSink(__int64 a1)
{
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_54c_goodB2GSink(a1);
}

//----- (000000000042D70F) ----------------------------------------------------
int badSink_39()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_45_badData;
  if ( CWE191_Integer_Underflow__char_min_multiply_45_badData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_45_badData);
  return result;
}
// 66233B: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_badData;

//----- (000000000042D73D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_45_bad()
{
  CWE191_Integer_Underflow__char_min_multiply_45_badData = -128;
  return badSink_39();
}
// 66233B: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_badData;

//----- (000000000042D763) ----------------------------------------------------
int goodG2BSink_39()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData;
  if ( CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData < 0 )
    result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData);
  return result;
}
// 66233C: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData;

//----- (000000000042D791) ----------------------------------------------------
int goodG2B_253()
{
  CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData = -2;
  return goodG2BSink_39();
}
// 66233C: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_goodG2BData;

//----- (000000000042D7B7) ----------------------------------------------------
int goodB2GSink_29()
{
  int result; // eax

  result = (unsigned __int8)CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData;
  if ( CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData < 0 )
  {
    if ( CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData);
  }
  return result;
}
// 66233D: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData;

//----- (000000000042D7F7) ----------------------------------------------------
int goodB2G_232()
{
  CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData = -128;
  return goodB2GSink_29();
}
// 66233D: using guessed type char CWE191_Integer_Underflow__char_min_multiply_45_goodB2GData;

//----- (000000000042D81D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_45_good()
{
  goodG2B_253();
  return goodB2G_232();
}

//----- (000000000042D837) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042D871) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042D8AB) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042D8F7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_14_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 && v2 < 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042D966) ----------------------------------------------------
int goodB2G1_151()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042D9F3) ----------------------------------------------------
int goodB2G2_151()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 && v2 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042DA74) ----------------------------------------------------
int goodG2B1_130()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042DAC2) ----------------------------------------------------
int goodG2B2_130()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = -2;
  result = globalFive;
  if ( globalFive == 5 && v1 < 0 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 662120: using guessed type int globalFive;

//----- (000000000042DB04) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_14_good()
{
  goodB2G1_151();
  goodB2G2_151();
  goodG2B1_130();
  return goodG2B2_130();
}

//----- (000000000042DB32) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (000000000042DB67) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (000000000042DB9C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (000000000042DBE3) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_52c_badSink(a1);
}

//----- (000000000042DBFD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_52c_goodG2BSink(a1);
}

//----- (000000000042DC17) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_52b_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_rand_sub_52c_goodB2GSink(a1);
}

//----- (000000000042DC31) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_63b_badSink(&v1);
}

//----- (000000000042DC5D) ----------------------------------------------------
int goodG2B_254()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_63b_goodG2BSink(&v1);
}

//----- (000000000042DC83) ----------------------------------------------------
int goodB2G_233()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_63b_goodB2GSink(&v1);
}

//----- (000000000042DCAF) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_63_good()
{
  goodG2B_254();
  return goodB2G_233();
}

//----- (000000000042DCC9) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_badSource()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 result; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    result = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    result = ~(v8 ^ rand());
  }
  return result;
}

//----- (000000000042DD7A) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodG2BSource()
{
  return -2LL;
}

//----- (000000000042DD90) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodB2GSource()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 result; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx

  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    result = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    result = ~(v8 ^ rand());
  }
  return result;
}

//----- (000000000042DE41) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_18_bad()
{
  return printHexCharLine(0);
}

//----- (000000000042DE6F) ----------------------------------------------------
int goodB2G_234()
{
  return printLine("data value is too small to perform multiplication.");
}

//----- (000000000042DEAF) ----------------------------------------------------
int goodG2B_255()
{
  return printHexCharLine(252);
}

//----- (000000000042DEDD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_multiply_18_good()
{
  goodB2G_234();
  return goodG2B_255();
}

//----- (000000000042DEF7) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_51_bad()
{
  return CWE191_Integer_Underflow__char_min_sub_51b_badSink(-128);
}

//----- (000000000042DF14) ----------------------------------------------------
int goodG2B_256()
{
  return CWE191_Integer_Underflow__char_min_sub_51b_goodG2BSink(-2);
}

//----- (000000000042DF31) ----------------------------------------------------
int goodB2G_235()
{
  return CWE191_Integer_Underflow__char_min_sub_51b_goodB2GSink(-128);
}

//----- (000000000042DF4E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_51_good()
{
  goodG2B_256();
  return goodB2G_235();
}

//----- (000000000042DF68) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042DF9A) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042DFCC) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000042E010) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_68b_badSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_min_sub_68_badData - 1);
}
// 6623DB: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_badData;

//----- (000000000042E039) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_68b_goodG2BSink()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_min_sub_68_goodG2BData - 1);
}
// 6623D9: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_goodG2BData;

//----- (000000000042E062) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_min_sub_68_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_min_sub_68_goodB2GData - 1);
  return result;
}
// 6623DA: using guessed type char CWE191_Integer_Underflow__char_min_sub_68_goodB2GData;

//----- (000000000042E09D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_03_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042E0F6) ----------------------------------------------------
int goodB2G1_152()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042E161) ----------------------------------------------------
int goodB2G2_152()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (result & 0x80u) != 0 )
  {
    if ( (char)result < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042E1CC) ----------------------------------------------------
int goodG2B1_131()
{
  return printHexCharLine(252);
}

//----- (000000000042E1F8) ----------------------------------------------------
int goodG2B2_131()
{
  return printHexCharLine(252);
}

//----- (000000000042E224) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_03_good()
{
  goodB2G1_152();
  goodB2G2_152();
  goodG2B1_131();
  return goodG2B2_131();
}

//----- (000000000042E252) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_badSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53d_badSink(a1);
}

//----- (000000000042E26C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_goodG2BSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53d_goodG2BSink(a1);
}

//----- (000000000042E286) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_fscanf_sub_53c_goodB2GSink(char a1)
{
  return CWE191_Integer_Underflow__char_fscanf_sub_53d_goodB2GSink(a1);
}

//----- (000000000042E2A0) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042E2DB) ----------------------------------------------------
int goodG2B_257()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodG2BSink(&v1);
}

//----- (000000000042E301) ----------------------------------------------------
int goodB2G_236()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042E33C) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_63_good()
{
  goodG2B_257();
  return goodB2G_236();
}

//----- (000000000042E356) ----------------------------------------------------
int badSink_40()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_min_sub_45_badData - 1);
}
// 66233E: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_badData;

//----- (000000000042E37F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_45_bad()
{
  CWE191_Integer_Underflow__char_min_sub_45_badData = -128;
  return badSink_40();
}
// 66233E: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_badData;

//----- (000000000042E3A5) ----------------------------------------------------
int goodG2BSink_40()
{
  return printHexCharLine(CWE191_Integer_Underflow__char_min_sub_45_goodG2BData - 1);
}
// 66233F: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_goodG2BData;

//----- (000000000042E3CE) ----------------------------------------------------
int goodG2B_258()
{
  CWE191_Integer_Underflow__char_min_sub_45_goodG2BData = -2;
  return goodG2BSink_40();
}
// 66233F: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_goodG2BData;

//----- (000000000042E3F4) ----------------------------------------------------
int goodB2GSink_30()
{
  int result; // eax

  if ( CWE191_Integer_Underflow__char_min_sub_45_goodB2GData == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(CWE191_Integer_Underflow__char_min_sub_45_goodB2GData - 1);
  return result;
}
// 662340: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_goodB2GData;

//----- (000000000042E42F) ----------------------------------------------------
int goodB2G_237()
{
  CWE191_Integer_Underflow__char_min_sub_45_goodB2GData = -128;
  return goodB2GSink_30();
}
// 662340: using guessed type char CWE191_Integer_Underflow__char_min_sub_45_goodB2GData;

//----- (000000000042E455) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_45_good()
{
  goodG2B_258();
  return goodB2G_237();
}

//----- (000000000042E46F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_09_bad()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042E4BB) ----------------------------------------------------
int goodB2G1_153()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  return printLongLongLine(v1 - 1);
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042E52F) ----------------------------------------------------
int goodB2G2_153()
{
  int result; // eax
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0x8000000000000000LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == 0x8000000000000000LL )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printLongLongLine(v1 - 1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042E597) ----------------------------------------------------
int goodG2B1_132()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042E5E9) ----------------------------------------------------
int goodG2B2_132()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042E62F) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_09_good()
{
  goodB2G1_153();
  goodB2G2_153();
  goodG2B1_132();
  return goodG2B2_132();
}

//----- (000000000042E65D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_64_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_64b_badSink(&v2);
}

//----- (000000000042E6A8) ----------------------------------------------------
int goodG2B_259()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_rand_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000042E6C6) ----------------------------------------------------
int goodB2G_238()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE191_Integer_Underflow__char_rand_multiply_64b_goodB2GSink(&v2);
}

//----- (000000000042E711) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_64_good()
{
  goodG2B_259();
  return goodB2G_238();
}

//----- (000000000042E72B) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_06_bad()
{
  return printHexCharLine(127);
}

//----- (000000000042E766) ----------------------------------------------------
int goodB2G1_154()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042E7BF) ----------------------------------------------------
int goodB2G2_154()
{
  return printLine("data value is too large to perform subtraction.");
}

//----- (000000000042E80C) ----------------------------------------------------
int goodG2B1_133()
{
  return printHexCharLine(253);
}

//----- (000000000042E853) ----------------------------------------------------
int goodG2B2_133()
{
  return printHexCharLine(253);
}

//----- (000000000042E88E) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_06_good()
{
  goodB2G1_154();
  goodB2G2_154();
  goodG2B1_133();
  return goodG2B2_133();
}

//----- (000000000042E8BC) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_52_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_52b_badSink(v0);
}

//----- (000000000042E906) ----------------------------------------------------
int goodG2B_260()
{
  return CWE191_Integer_Underflow__char_rand_sub_52b_goodG2BSink(-2);
}

//----- (000000000042E923) ----------------------------------------------------
int goodB2G_239()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_52b_goodB2GSink(v0);
}

//----- (000000000042E96D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_52_good()
{
  goodG2B_260();
  return goodB2G_239();
}

//----- (000000000042E987) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_61_bad()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_rand_multiply_61b_badSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042E9C7) ----------------------------------------------------
int goodG2B_261()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodG2BSource();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042EA07) ----------------------------------------------------
int goodB2G_240()
{
  __int64 v0; // rax

  v0 = CWE191_Integer_Underflow__int64_t_rand_multiply_61b_goodB2GSource();
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (000000000042EA63) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_61_good()
{
  goodG2B_261();
  return goodB2G_240();
}

//----- (000000000042EA7D) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_badSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042EAA1) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 - 1);
}

//----- (000000000042EAC5) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_rand_sub_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(a1 - 1);
  return result;
}

//----- (000000000042EAFB) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042EB32) ----------------------------------------------------
int goodG2B_262()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = -2;
  return CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodG2BSink(&v1);
}

//----- (000000000042EB50) ----------------------------------------------------
int goodB2G_241()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE191_Integer_Underflow__char_fscanf_multiply_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042EB87) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_63_good()
{
  goodG2B_262();
  return goodB2G_241();
}

//----- (000000000042EBA1) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_61_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_badSource(0LL);
  return printLongLongLine(v1 - 1);
}

//----- (000000000042EBDB) ----------------------------------------------------
int goodG2B_263()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodG2BSource();
  return printLongLongLine(v1 - 1);
}

//----- (000000000042EC15) ----------------------------------------------------
int goodB2G_242()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE191_Integer_Underflow__int64_t_fscanf_sub_61b_goodB2GSource(0LL);
  if ( v1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(v1 - 1);
  return result;
}

//----- (000000000042EC6B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_61_good()
{
  goodG2B_263();
  return goodB2G_242();
}

//----- (000000000042EC85) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_16_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (000000000042ECDB) ----------------------------------------------------
int goodB2G_243()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (000000000042ED43) ----------------------------------------------------
int goodG2B_264()
{
  return printHexCharLine(-3);
}

//----- (000000000042ED6C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_16_good()
{
  goodB2G_243();
  return goodG2B_264();
}

//----- (000000000042ED86) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000042EDEB) ----------------------------------------------------
int goodB2G1_155()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000042EE7B) ----------------------------------------------------
int goodB2G2_155()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;
// 662128: using guessed type __int64 stdin;

//----- (000000000042EEFF) ----------------------------------------------------
int goodG2B1_134()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042EF59) ----------------------------------------------------
int goodG2B2_134()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = -2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 4457E0: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042EFA7) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_13_good()
{
  goodB2G1_155();
  goodB2G2_155();
  goodG2B1_134();
  return goodG2B2_134();
}

//----- (000000000042EFD5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_06_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_44534C, &v1);
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F030) ----------------------------------------------------
int goodB2G1_156()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_44534C, &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F0B6) ----------------------------------------------------
int goodB2G2_156()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_44534C, &v1);
  if ( v1 == 0x8000000000000000LL )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printLongLongLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F130) ----------------------------------------------------
int goodG2B1_135()
{
  return printLongLongLine(-3LL);
}

//----- (000000000042F182) ----------------------------------------------------
int goodG2B2_135()
{
  return printLongLongLine(-3LL);
}

//----- (000000000042F1C8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_sub_06_good()
{
  goodB2G1_156();
  goodB2G2_156();
  goodG2B1_135();
  return goodG2B2_135();
}

//----- (000000000042F1F6) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F247) ----------------------------------------------------
int goodB2G1_157()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F2B7) ----------------------------------------------------
int goodB2G2_157()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042F327) ----------------------------------------------------
int goodG2B1_136()
{
  return printLongLongLine(-4LL);
}

//----- (000000000042F361) ----------------------------------------------------
int goodG2B2_136()
{
  return printLongLongLine(-4LL);
}

//----- (000000000042F39B) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_15_good()
{
  goodB2G1_157();
  goodB2G2_157();
  goodG2B1_136();
  return goodG2B2_136();
}

//----- (000000000042F3C9) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_07_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 && v10 < 0 )
    result = printLongLongLine(2 * v10);
  return result;
}
// 662114: using guessed type int staticFive_9;

//----- (000000000042F4B2) ----------------------------------------------------
int goodB2G1_158()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticFive_9;
  if ( staticFive_9 != 5 )
    return printLine("Benign, fixed string");
  if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 662114: using guessed type int staticFive_9;

//----- (000000000042F5C3) ----------------------------------------------------
int goodB2G2_158()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 && v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}
// 662114: using guessed type int staticFive_9;

//----- (000000000042F6C8) ----------------------------------------------------
int goodG2B1_137()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_9 == 5 )
    v1 = -2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive_9;
  if ( staticFive_9 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662114: using guessed type int staticFive_9;

//----- (000000000042F722) ----------------------------------------------------
int goodG2B2_137()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_9 == 5 )
    v1 = -2LL;
  result = staticFive_9;
  if ( staticFive_9 == 5 && v1 < 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 662114: using guessed type int staticFive_9;

//----- (000000000042F770) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_07_good()
{
  goodB2G1_158();
  goodB2G2_158();
  goodG2B1_137();
  return goodG2B2_137();
}

//----- (000000000042F79E) ----------------------------------------------------
int __fastcall badSink_41(char a1)
{
  int result; // eax

  result = badStatic_9;
  if ( badStatic_9 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662344: using guessed type int badStatic_9;

//----- (000000000042F7D1) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_21_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  badStatic_9 = 1;
  return badSink_41(v0);
}
// 662344: using guessed type int badStatic_9;

//----- (000000000042F825) ----------------------------------------------------
int __fastcall goodB2G1Sink_9(char a1)
{
  int result; // eax

  result = goodB2G1Static_9;
  if ( goodB2G1Static_9 )
    return printLine("Benign, fixed string");
  if ( a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662348: using guessed type int goodB2G1Static_9;

//----- (000000000042F876) ----------------------------------------------------
int goodB2G1_159()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G1Static_9 = 0;
  return goodB2G1Sink_9(v0);
}
// 662348: using guessed type int goodB2G1Static_9;

//----- (000000000042F8CA) ----------------------------------------------------
int __fastcall goodB2G2Sink_9(char a1)
{
  int result; // eax

  result = goodB2G2Static_9;
  if ( goodB2G2Static_9 && a1 < 0 )
  {
    if ( a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 66234C: using guessed type int goodB2G2Static_9;

//----- (000000000042F90F) ----------------------------------------------------
int goodB2G2_159()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G2Static_9 = 1;
  return goodB2G2Sink_9(v0);
}
// 66234C: using guessed type int goodB2G2Static_9;

//----- (000000000042F963) ----------------------------------------------------
int __fastcall goodG2BSink_41(char a1)
{
  int result; // eax

  result = goodG2BStatic_9;
  if ( goodG2BStatic_9 )
  {
    if ( a1 < 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 662350: using guessed type int goodG2BStatic_9;

//----- (000000000042F996) ----------------------------------------------------
int goodG2B_265()
{
  goodG2BStatic_9 = 1;
  return goodG2BSink_41(-2);
}
// 662350: using guessed type int goodG2BStatic_9;

//----- (000000000042F9BD) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_multiply_21_good()
{
  goodB2G1_159();
  goodB2G2_159();
  return goodG2B_265();
}

//----- (000000000042F9E1) ----------------------------------------------------
int __fastcall badSink_42(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000042FA07) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_44_bad()
{
  return badSink_42(0x8000000000000000LL);
}

//----- (000000000042FA3C) ----------------------------------------------------
int __fastcall goodG2BSink_42(__int64 a1)
{
  return printLongLongLine(a1 - 1);
}

//----- (000000000042FA62) ----------------------------------------------------
int goodG2B_266()
{
  return goodG2BSink_42(-2LL);
}

//----- (000000000042FA91) ----------------------------------------------------
int __fastcall goodB2GSink_31(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x8000000000000000LL )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printLongLongLine(a1 - 1);
  return result;
}

//----- (000000000042FAD3) ----------------------------------------------------
int goodB2G_244()
{
  return goodB2GSink_31(0x8000000000000000LL);
}

//----- (000000000042FB08) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_44_good()
{
  goodG2B_266();
  return goodB2G_244();
}

//----- (000000000042FB22) ----------------------------------------------------
__int64 __fastcall badSource_9(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042FB51) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_bad()
{
  __int64 v0; // rax

  v0 = badSource_9(0LL);
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042FB91) ----------------------------------------------------
__int64 goodG2BSource_9()
{
  return -2LL;
}

//----- (000000000042FBA7) ----------------------------------------------------
int goodG2B_267()
{
  __int64 v0; // rax

  v0 = goodG2BSource_9();
  if ( v0 < 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (000000000042FBE7) ----------------------------------------------------
__int64 __fastcall goodB2GSource_9(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000042FC16) ----------------------------------------------------
int goodB2G_245()
{
  __int64 v0; // rax

  v0 = goodB2GSource_9(0LL);
  if ( v0 < 0 )
  {
    if ( v0 < -4611686018427387903LL )
      LODWORD(v0) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (000000000042FC72) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_42_good()
{
  goodB2G_245();
  return goodG2B_267();
}

//----- (000000000042FC8C) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_09_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042FCC7) ----------------------------------------------------
int goodB2G1_160()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  return printHexCharLine(v1 - 1);
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042FD20) ----------------------------------------------------
int goodB2G2_160()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -128;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == -128 )
      result = printLine("data value is too large to perform subtraction.");
    else
      result = printHexCharLine(v1 - 1);
  }
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042FD6D) ----------------------------------------------------
int goodG2B1_138()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;
// 4457DC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042FDB4) ----------------------------------------------------
int goodG2B2_138()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = -2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 - 1);
  return result;
}
// 4457D8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042FDEF) ----------------------------------------------------
int CWE191_Integer_Underflow__char_min_sub_09_good()
{
  goodB2G1_160();
  goodB2G2_160();
  goodG2B1_138();
  return goodG2B2_138();
}

//----- (000000000042FE1D) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_12_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  int result; // eax
  __int64 v10; // [rsp+18h] [rbp-18h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v10 = v4;
  }
  else
  {
    v10 = -2LL;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v10 < 0 )
      result = printLongLongLine(2 * v10);
  }
  else if ( v10 < 0 )
  {
    if ( v10 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v10);
  }
  return result;
}

//----- (000000000042FF52) ----------------------------------------------------
int goodB2G_246()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v9; // rbx
  __int64 v10; // rbx
  __int64 v11; // rbx
  __int64 v12; // rbx
  __int64 v13; // rax
  __int64 v14; // rbx
  __int64 v15; // rbx
  __int64 v16; // rbx
  __int64 v17; // rbx
  int result; // eax
  __int64 v19; // [rsp+18h] [rbp-18h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = (__int64)rand() << 60;
      v1 = ((__int64)rand() << 45) ^ v0;
      v2 = ((__int64)rand() << 30) ^ v1;
      v3 = ((__int64)rand() << 15) ^ v2;
      v4 = v3 ^ rand();
    }
    else
    {
      v5 = (__int64)rand() << 60;
      v6 = ((__int64)rand() << 45) ^ v5;
      v7 = ((__int64)rand() << 30) ^ v6;
      v8 = ((__int64)rand() << 15) ^ v7;
      v4 = ~(v8 ^ rand());
    }
    v19 = v4;
  }
  else
  {
    if ( rand() & 1 )
    {
      v9 = (__int64)rand() << 60;
      v10 = ((__int64)rand() << 45) ^ v9;
      v11 = ((__int64)rand() << 30) ^ v10;
      v12 = ((__int64)rand() << 15) ^ v11;
      v13 = v12 ^ rand();
    }
    else
    {
      v14 = (__int64)rand() << 60;
      v15 = ((__int64)rand() << 45) ^ v14;
      v16 = ((__int64)rand() << 30) ^ v15;
      v17 = ((__int64)rand() << 15) ^ v16;
      v13 = ~(v17 ^ rand());
    }
    v19 = v13;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v19 < 0 )
    {
      if ( v19 < -4611686018427387903LL )
        result = printLine("data value is too small to perform multiplication.");
      else
        result = printLongLongLine(2 * v19);
    }
  }
  else if ( v19 < 0 )
  {
    if ( v19 < -4611686018427387903LL )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printLongLongLine(2 * v19);
  }
  return result;
}

//----- (0000000000430137) ----------------------------------------------------
int goodG2B_268()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(-4LL);
}

//----- (00000000004301B5) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_12_good()
{
  goodB2G_246();
  return goodG2B_268();
}

//----- (00000000004301CF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004301F8) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000430221) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (a1 & 0x80u) != 0 )
  {
    if ( (char)a1 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000043025C) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (0000000000430291) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 - 1);
}

//----- (00000000004302C6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_sub_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(*a1 - 1);
  return result;
}

//----- (000000000043030D) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_51_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_51b_badSink(v0);
}

//----- (0000000000430357) ----------------------------------------------------
int goodG2B_269()
{
  return CWE191_Integer_Underflow__char_rand_sub_51b_goodG2BSink(-2);
}

//----- (0000000000430374) ----------------------------------------------------
int goodB2G_247()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE191_Integer_Underflow__char_rand_sub_51b_goodB2GSink(v0);
}

//----- (00000000004303BE) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_51_good()
{
  goodG2B_269();
  return goodB2G_247();
}

//----- (00000000004303D8) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_68_bad()
{
  CWE191_Integer_Underflow__int64_t_min_sub_68_badData = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_68b_badSink();
}
// 6623E8: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_badData;

//----- (000000000043040D) ----------------------------------------------------
int goodG2B_270()
{
  CWE191_Integer_Underflow__int64_t_min_sub_68_goodG2BData = -2LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_68b_goodG2BSink();
}
// 6623F0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodG2BData;

//----- (000000000043043C) ----------------------------------------------------
int goodB2G_248()
{
  CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData = 0x8000000000000000LL;
  return CWE191_Integer_Underflow__int64_t_min_sub_68b_goodB2GSink();
}
// 6623E0: using guessed type __int64 CWE191_Integer_Underflow__int64_t_min_sub_68_goodB2GData;

//----- (0000000000430471) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_min_sub_68_good()
{
  goodG2B_270();
  return goodB2G_248();
}

//----- (000000000043048B) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (00000000004304BD) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 < 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (00000000004304EF) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__char_min_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 < 0 )
  {
    if ( v2 < -63 )
      result = printLine("data value is too small to perform multiplication.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000430533) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_64_bad()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_64b_badSink(&v10);
}

//----- (00000000004305F0) ----------------------------------------------------
int goodG2B_271()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = -2LL;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodG2BSink(&v1);
}

//----- (0000000000430616) ----------------------------------------------------
int goodB2G_249()
{
  __int64 v0; // rbx
  __int64 v1; // rbx
  __int64 v2; // rbx
  __int64 v3; // rbx
  __int64 v4; // rax
  __int64 v5; // rbx
  __int64 v6; // rbx
  __int64 v7; // rbx
  __int64 v8; // rbx
  __int64 v10; // [rsp+8h] [rbp-18h]

  v10 = 0LL;
  if ( rand() & 1 )
  {
    v0 = (__int64)rand() << 60;
    v1 = ((__int64)rand() << 45) ^ v0;
    v2 = ((__int64)rand() << 30) ^ v1;
    v3 = ((__int64)rand() << 15) ^ v2;
    v4 = v3 ^ rand();
  }
  else
  {
    v5 = (__int64)rand() << 60;
    v6 = ((__int64)rand() << 45) ^ v5;
    v7 = ((__int64)rand() << 30) ^ v6;
    v8 = ((__int64)rand() << 15) ^ v7;
    v4 = ~(v8 ^ rand());
  }
  v10 = v4;
  return CWE191_Integer_Underflow__int64_t_rand_multiply_64b_goodB2GSink(&v10);
}

//----- (00000000004306D3) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_rand_multiply_64_good()
{
  goodG2B_271();
  return goodB2G_249();
}

//----- (00000000004306ED) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_06_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44560C, &v1);
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000430741) ----------------------------------------------------
int goodB2G1_161()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44560C, &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (00000000004307B5) ----------------------------------------------------
int goodB2G2_161()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44560C, &v1);
  if ( v1 == -128 )
    return printLine("data value is too large to perform subtraction.");
  v2 = v1 - 1;
  return printHexCharLine(v1 - 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (000000000043081D) ----------------------------------------------------
int goodG2B1_139()
{
  return printHexCharLine(253);
}

//----- (0000000000430864) ----------------------------------------------------
int goodG2B2_139()
{
  return printHexCharLine(253);
}

//----- (000000000043089F) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_sub_06_good()
{
  goodB2G1_161();
  goodB2G2_161();
  goodG2B1_139();
  return goodG2B2_139();
}

//----- (00000000004308CD) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662118: using guessed type int staticTrue_9;
// 662128: using guessed type __int64 stdin;

//----- (0000000000430930) ----------------------------------------------------
int goodB2G1_162()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFalse_9 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 < 0 )
  {
    if ( v1 < -4611686018427387903LL )
    {
      result = printLine("data value is too small to perform multiplication.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662118: using guessed type int staticTrue_9;
// 662128: using guessed type __int64 stdin;
// 662354: using guessed type int staticFalse_9;

//----- (00000000004309BE) ----------------------------------------------------
int goodB2G2_162()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    result = v1;
    if ( v1 < 0 )
    {
      if ( v1 < -4611686018427387903LL )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662118: using guessed type int staticTrue_9;
// 662128: using guessed type __int64 stdin;

//----- (0000000000430A40) ----------------------------------------------------
int goodG2B1_140()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_9 )
    printLine("Benign, fixed string");
  else
    v1 = -2LL;
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662118: using guessed type int staticTrue_9;
// 662354: using guessed type int staticFalse_9;

//----- (0000000000430A98) ----------------------------------------------------
int goodG2B2_140()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_9 )
    v1 = -2LL;
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    if ( v1 < 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 662118: using guessed type int staticTrue_9;

//----- (0000000000430AE4) ----------------------------------------------------
int CWE191_Integer_Underflow__int64_t_fscanf_multiply_05_good()
{
  goodB2G1_162();
  goodB2G2_162();
  goodG2B1_140();
  return goodG2B2_140();
}

//----- (0000000000430B12) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_17_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000430B7F) ----------------------------------------------------
int goodB2G_250()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( (v1 & 0x80u) != 0 )
    {
      if ( (char)v1 < -63 )
      {
        result = printLine("data value is too small to perform multiplication.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000430C00) ----------------------------------------------------
int goodG2B_272()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = -2;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < 0 )
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (0000000000430C52) ----------------------------------------------------
int CWE191_Integer_Underflow__char_fscanf_multiply_17_good()
{
  goodB2G_250();
  return goodG2B_272();
}

//----- (0000000000430C6C) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_sub_65_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__char_fscanf_sub_65b_badSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000430CAE) ----------------------------------------------------
int goodG2B_273()
{
  return CWE191_Integer_Underflow__char_fscanf_sub_65b_goodG2BSink(-2);
}

//----- (0000000000430CD4) ----------------------------------------------------
__int64 goodB2G_251()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE191_Integer_Underflow__char_fscanf_sub_65b_goodB2GSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 662128: using guessed type __int64 stdin;

//----- (0000000000430D16) ----------------------------------------------------
__int64 CWE191_Integer_Underflow__char_fscanf_sub_65_good()
{
  goodG2B_273();
  return goodB2G_251();
}

//----- (0000000000430D30) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_06_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 - 1);
}

//----- (0000000000430D98) ----------------------------------------------------
int goodB2G1_163()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000430E1E) ----------------------------------------------------
int goodB2G2_163()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == -128 )
    result = printLine("data value is too large to perform subtraction.");
  else
    result = printHexCharLine(v0 - 1);
  return result;
}

//----- (0000000000430E98) ----------------------------------------------------
int goodG2B1_141()
{
  return printHexCharLine(253);
}

//----- (0000000000430EDF) ----------------------------------------------------
int goodG2B2_141()
{
  return printHexCharLine(253);
}

//----- (0000000000430F1A) ----------------------------------------------------
int CWE191_Integer_Underflow__char_rand_sub_06_good()
{
  goodB2G1_163();
  goodB2G2_163();
  goodG2B1_141();
  return goodG2B2_141();
}

//----- (0000000000430F48) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000430F7F) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 < 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (0000000000430FB6) ----------------------------------------------------
int __fastcall CWE191_Integer_Underflow__int64_t_fscanf_multiply_63b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 < 0 )
  {
    if ( v3 < -4611686018427387903LL )
      LODWORD(v1) = printLine("data value is too small to perform multiplication.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000431009) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000043102A) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (0000000000431055) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (0000000000431076) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000043109B) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (00000000004310C1) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (00000000004310E5) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000431109) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000043112D) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (0000000000431151) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (0000000000431181) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (00000000004311A2) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (00000000004311C6) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (00000000004311F1) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000043121D) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (0000000000431274) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400990: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000043134D) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400A40: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000431401) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000043140C) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000431417) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000043142D) ----------------------------------------------------
void good1()
{
  ;
}

//----- (0000000000431433) ----------------------------------------------------
void good2()
{
  ;
}

//----- (0000000000431439) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000043143F) ----------------------------------------------------
void good4()
{
  ;
}

//----- (0000000000431445) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000043144B) ----------------------------------------------------
void good6()
{
  ;
}

//----- (0000000000431451) ----------------------------------------------------
void good7()
{
  ;
}

//----- (0000000000431457) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000043145D) ----------------------------------------------------
void good9()
{
  ;
}

//----- (0000000000431463) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (0000000000431469) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000043146F) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (0000000000431475) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000043147B) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (0000000000431481) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (0000000000431487) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000043148D) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (0000000000431493) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (0000000000431499) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (00000000004314CC) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (0000000000431570) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (00000000004315A4) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (00000000004315C3) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (0000000000431638) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (0000000000431652) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000043166C) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (00000000004316A0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 661DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 661DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (0000000000431714) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 2839 function(s) have been successfully decompiled
