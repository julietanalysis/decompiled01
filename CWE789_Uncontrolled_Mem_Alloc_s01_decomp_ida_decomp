/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400C30();
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// int close(int fd);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void __noreturn exit(int status);
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// unsigned __int64 strtoul(const char *nptr, char **endptr, int base);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// in_addr_t inet_addr(const char *cp);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_bad();
void goodG2B();
__int64 goodB2G();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_bad();
void goodG2B_0();
void goodB2G_0();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad();
void goodB2G_1();
void goodG2B_1();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_bad();
void goodB2G1();
void goodB2G2();
void goodG2B1();
void goodG2B2();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad();
void goodB2G_2();
void goodG2B_2();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_bad();
void goodB2G_3();
void goodG2B_3();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_good();
unsigned __int64 __fastcall badSource(unsigned __int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_bad();
__int64 goodG2BSource();
void goodG2B_4();
unsigned __int64 __fastcall goodB2GSource(unsigned __int64 a1);
void goodB2G_4();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodG2BSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodB2GSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_bad();
void goodB2G_5();
void goodG2B_5();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_good();
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_badSource(unsigned __int64 a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodG2BSource();
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodB2GSource(unsigned __int64 a1);
void __fastcall badSink(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_bad();
void __fastcall goodG2BSink(size_t a1);
void goodG2B_6();
void __fastcall goodB2GSink(size_t a1);
__int64 goodB2G_6();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_bad();
void goodG2B_7();
void goodB2G_7();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad();
void goodB2G1_0();
void goodB2G2_0();
void goodG2B1_0();
void goodG2B2_0();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_bad();
void goodB2G1_1();
void goodB2G2_1();
void goodG2B1_1();
void goodG2B2_1();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_good();
void __fastcall badSink_0(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_bad();
void __fastcall goodB2G1Sink(size_t a1);
void goodB2G1_2();
void __fastcall goodB2G2Sink(size_t a1);
void goodB2G2_2();
void __fastcall goodG2BSink_0(size_t a1);
void goodG2B_8();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_bad();
void goodB2G1_3();
void goodB2G2_3();
void goodG2B1_2();
void goodG2B2_2();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad();
void goodB2G_8();
void goodG2B_9();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodG2BSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodB2GSink();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodB2GSink(size_t a1);
void __fastcall badSink_1(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_bad();
void __fastcall goodG2BSink_1(size_t a1);
void goodG2B_10();
void __fastcall goodB2GSink_0(size_t a1);
__int64 goodB2G_9();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_bad();
void goodG2B_11();
void goodB2G_10();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_bad();
void goodG2B_12();
void goodB2G_11();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad();
void goodB2G1_4();
void goodB2G2_4();
void goodG2B1_3();
void goodG2B2_3();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad();
void goodG2B_13();
void goodB2G_12();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_bad();
void goodG2B_14();
void goodB2G_13();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_badSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodG2BSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodB2GSink(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_bad();
void goodB2G1_5();
void goodB2G2_5();
void goodG2B1_4();
void goodG2B2_4();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_bad();
void goodG2B_15();
void goodB2G_14();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_bad();
void goodG2B_16();
void goodB2G_15();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_bad();
void goodB2G_16();
void goodG2B_17();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_bad();
void goodG2B_18();
void goodB2G_17();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_bad();
void goodB2G1_6();
void goodB2G2_6();
void goodG2B_19();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad();
void goodB2G1_7();
void goodB2G2_7();
void goodG2B1_5();
void goodG2B2_5();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_bad();
void goodG2B_20();
void goodB2G_18();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad();
void goodB2G1_8();
void goodB2G2_8();
void goodG2B1_6();
void goodG2B2_6();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_bad();
void goodB2G1_9();
void goodB2G2_9();
void goodG2B1_7();
void goodG2B2_7();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad();
void goodG2B_21();
void goodB2G_19();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BSink(size_t a1);
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_bad();
void goodB2G1_10();
void goodB2G2_10();
void goodG2B1_8();
void goodG2B2_8();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad();
void goodB2G_20();
void goodG2B_22();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_good();
void badSink_2();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_bad();
void goodG2BSink_2();
void goodG2B_23();
void goodB2GSink_1();
void goodB2G_21();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_bad();
void goodG2B_24();
void goodB2G_22();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_bad();
void goodB2G_23();
void goodG2B_25();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_bad();
void goodB2G_24();
void goodG2B_26();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BSink(size_t a1);
void __fastcall badSink_3(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_bad();
void __fastcall goodG2BSink_3(size_t a1);
void goodG2B_27();
void __fastcall goodB2GSink_2(size_t a1);
__int64 goodB2G_25();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad();
void goodB2G1_11();
void goodB2G2_11();
void goodG2B1_9();
void goodG2B2_9();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_good();
void __fastcall badSink_4(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_bad();
void __fastcall goodG2BSink_4(size_t a1);
void goodG2B_28();
void __fastcall goodB2GSink_3(size_t a1);
void goodB2G_26();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_bad();
void goodB2G1_12();
void goodB2G2_12();
void goodG2B_29();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_bad();
void goodB2G1_13();
void goodB2G2_13();
void goodG2B1_10();
void goodG2B2_10();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_bad();
void goodB2G1_14();
void goodB2G2_14();
void goodG2B1_11();
void goodG2B2_11();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad();
void goodB2G_27();
void goodG2B_30();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_bad();
void goodB2G1_15();
void goodB2G2_15();
void goodG2B1_12();
void goodG2B2_12();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad();
void goodB2G1_16();
void goodB2G2_16();
void goodG2B1_13();
void goodG2B2_13();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad();
void goodB2G_28();
void goodG2B_31();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_good();
void __fastcall badSink_5(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_bad();
void __fastcall goodG2BSink_5(size_t a1);
void goodG2B_32();
void __fastcall goodB2GSink_4(size_t a1);
__int64 goodB2G_29();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_bad();
void goodB2G1_17();
void goodB2G2_17();
void goodG2B1_14();
void goodG2B2_14();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad();
void goodB2G1_18();
void goodB2G2_18();
void goodG2B1_15();
void goodG2B2_15();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_bad();
void goodB2G1_19();
void goodB2G2_19();
void goodG2B_33();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_bad();
void goodG2B_34();
void goodB2G_30();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_bad();
void goodB2G_31();
void goodG2B_35();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_bad();
void goodG2B_36();
void goodB2G_32();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_bad();
void goodB2G1_20();
void goodB2G2_20();
void goodG2B1_16();
void goodG2B2_16();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodB2GSink(size_t *a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_bad();
void goodG2B_37();
void goodB2G_33();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_good();
__int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_badSource(__int64 a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodG2BSource();
__int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodB2GSource(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_bad();
void goodB2G1_21();
void goodB2G2_21();
void goodG2B1_17();
void goodG2B2_17();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad();
void goodG2B_38();
void goodB2G_34();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad();
void goodB2G1_22();
void goodB2G2_22();
void goodG2B1_18();
void goodG2B2_18();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodB2GSink(size_t *a1);
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_bad();
void goodB2G1_23();
void goodB2G2_23();
void goodG2B1_19();
void goodG2B2_19();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_good();
void __fastcall badSink_6(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad();
void __fastcall goodB2G1Sink_0(size_t a1);
void goodB2G1_24();
void __fastcall goodB2G2Sink_0(size_t a1);
void goodB2G2_24();
void __fastcall goodG2BSink_6(size_t a1);
void goodG2B_39();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good();
void __fastcall badSink_7(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_bad();
void __fastcall goodB2G1Sink_1(size_t a1);
void goodB2G1_25();
void __fastcall goodB2G2Sink_1(size_t a1);
void goodB2G2_25();
void __fastcall goodG2BSink_7(size_t a1);
void goodG2B_40();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_bad();
void goodB2G1_26();
void goodB2G2_26();
void goodG2B1_20();
void goodG2B2_20();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_badSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodG2BSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodB2GSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_bad();
void goodG2B_41();
void goodB2G_35();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_bad();
void goodG2B_42();
void goodB2G_36();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_badSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodB2GSink();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_bad();
void goodG2B_43();
__int64 goodB2G_37();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad();
void goodB2G1_27();
void goodB2G2_27();
void goodG2B1_21();
void goodG2B2_21();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodB2GSink(size_t a1);
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad();
void goodB2G1_28();
void goodB2G2_28();
void goodG2B1_22();
void goodG2B2_22();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_bad();
void goodB2G1_29();
void goodB2G2_29();
void goodG2B1_23();
void goodG2B2_23();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_bad();
void goodG2B_44();
void goodB2G_38();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad();
void goodB2G1_30();
void goodB2G2_30();
void goodG2B1_24();
void goodG2B2_24();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodB2GSink(size_t a1);
unsigned __int64 __fastcall badSource_0(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_bad();
__int64 goodG2BSource_0();
void goodG2B_45();
unsigned __int64 __fastcall goodB2GSource_0(__int64 a1);
void goodB2G_39();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodB2GSink(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_bad();
void goodG2B_46();
__int64 goodB2G_40();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodB2GSink(size_t *a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad();
void goodB2G1_31();
void goodB2G2_31();
void goodG2B1_25();
void goodG2B2_25();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_bad();
void goodB2G_41();
void goodG2B_47();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodB2GSink(size_t a1);
__int64 badSource_1();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_bad();
__int64 goodG2BSource_1();
void goodG2B_48();
__int64 goodB2GSource_1();
void goodB2G_42();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad();
void goodB2G1_32();
void goodB2G2_32();
void goodG2B1_26();
void goodG2B2_26();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_bad();
void goodG2B_49();
void goodB2G_43();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_bad();
void goodB2G1_33();
void goodB2G2_33();
void goodG2B1_27();
void goodG2B2_27();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad();
void goodB2G_44();
void goodG2B_50();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_bad();
void goodG2B_51();
void goodB2G_45();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad();
void goodB2G_46();
void goodG2B_52();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_bad();
void goodB2G1_34();
void goodB2G2_34();
void goodG2B1_28();
void goodG2B2_28();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_bad();
void goodG2B_53();
void goodB2G_47();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad();
void goodG2B_54();
void goodB2G_48();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_bad();
void goodG2B_55();
void goodB2G_49();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad();
void goodG2B_56();
void goodB2G_50();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_bad();
void goodG2B_57();
void goodB2G_51();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodG2BSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodB2GSink(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_bad();
void goodB2G1_35();
void goodB2G2_35();
void goodG2B1_29();
void goodG2B2_29();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_good();
void __fastcall badSink_8(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_bad();
void __fastcall goodG2BSink_8(size_t a1);
void goodG2B_58();
void __fastcall goodB2GSink_5(size_t a1);
void goodB2G_52();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_bad();
void goodB2G1_36();
void goodB2G2_36();
void goodG2B1_30();
void goodG2B2_30();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad();
void goodG2B_59();
void goodB2G_53();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_good();
void badSink_9();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_bad();
void goodG2BSink_9();
void goodG2B_60();
void goodB2GSink_6();
void goodB2G_54();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_bad();
void goodG2B_61();
void goodB2G_55();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_bad();
void goodG2B_62();
void goodB2G_56();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_bad();
void goodB2G1_37();
void goodB2G2_37();
void goodG2B1_31();
void goodG2B2_31();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_bad();
void goodG2B_63();
void goodB2G_57();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad();
void goodG2B_64();
void goodB2G_58();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_bad();
void goodG2B_65();
void goodB2G_59();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodB2GSink(size_t a1);
void badSink_10();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_bad();
void goodG2BSink_10();
void goodG2B_66();
void goodB2GSink_7();
void goodB2G_60();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad();
void goodB2G1_38();
void goodB2G2_38();
void goodG2B1_32();
void goodG2B2_32();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_bad();
void goodG2B_67();
void goodB2G_61();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_bad();
void goodB2G1_39();
void goodB2G2_39();
void goodG2B1_33();
void goodG2B2_33();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_bad();
void goodG2B_68();
void goodB2G_62();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_bad();
void goodG2B_69();
void goodB2G_63();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_bad();
void goodB2G1_40();
void goodB2G2_40();
void goodG2B1_34();
void goodG2B2_34();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_bad();
void goodB2G1_41();
void goodB2G2_41();
void goodG2B1_35();
void goodG2B2_35();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_bad();
void goodG2B_70();
void goodB2G_64();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_bad();
void goodG2B_71();
void goodB2G_65();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_bad();
void goodB2G1_42();
void goodB2G2_42();
void goodG2B_72();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodB2GSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_bad();
void goodG2B_73();
void goodB2G_66();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad();
void goodB2G1_43();
void goodB2G2_43();
void goodG2B1_36();
void goodG2B2_36();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_bad();
void goodG2B_74();
void goodB2G_67();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad();
void goodB2G_68();
void goodG2B_75();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodB2GSink(size_t a1);
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad();
void goodB2G1_44();
void goodB2G2_44();
void goodG2B1_37();
void goodG2B2_37();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_bad();
void goodB2G1_45();
void goodB2G2_45();
void goodG2B1_38();
void goodG2B2_38();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_bad();
void goodG2B_76();
void goodB2G_69();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_bad();
void goodG2B_77();
void goodB2G_70();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_bad();
void goodG2B_78();
void goodB2G_71();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad();
void goodG2B_79();
void goodB2G_72();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_bad();
void goodG2B_80();
void goodB2G_73();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad();
void goodB2G_74();
void goodG2B_81();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_bad();
void goodG2B_82();
void goodB2G_75();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_bad();
void goodB2G1_46();
void goodB2G2_46();
void goodG2B1_39();
void goodG2B2_39();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad();
void goodG2B_83();
void goodB2G_76();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BSink(size_t a1);
void __fastcall badSink_11(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_bad();
void __fastcall goodB2G1Sink_2(size_t a1);
void goodB2G1_47();
void __fastcall goodB2G2Sink_2(size_t a1);
void goodB2G2_47();
void __fastcall goodG2BSink_11(size_t a1);
void goodG2B_84();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_bad();
void goodB2G1_48();
void goodB2G2_48();
void goodG2B1_40();
void goodG2B2_40();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_bad();
void goodG2B_85();
void goodB2G_77();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_good();
void badSink_12();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_bad();
void goodG2BSink_12();
void goodG2B_86();
void goodB2GSink_8();
void goodB2G_78();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_bad();
void goodG2B_87();
void goodB2G_79();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_bad();
void goodB2G1_49();
void goodB2G2_49();
void goodG2B1_41();
void goodG2B2_41();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_bad();
void goodB2G_80();
void goodG2B_88();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_bad();
void goodG2B_89();
void goodB2G_81();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Sink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_bad();
void goodG2B_90();
void goodB2G_82();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_bad();
void goodB2G1_50();
void goodB2G2_50();
void goodG2B_91();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_good();
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_badSource(unsigned __int64 a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodG2BSource();
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(unsigned __int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodB2GSink(size_t a1);
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_badSource(__int64 a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodG2BSource();
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodB2GSource(__int64 a1);
void badSink_13();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_bad();
void goodG2BSink_13();
void goodG2B_92();
void goodB2GSink_9();
void goodB2G_83();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodB2GSink(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_bad();
void goodG2B_93();
__int64 goodB2G_84();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad();
void goodB2G1_51();
void goodB2G2_51();
void goodG2B1_42();
void goodG2B2_42();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodB2GSink(size_t *a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_bad();
void goodG2B_94();
void goodB2G_85();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_good();
void __fastcall badSink_14(size_t a1);
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_bad();
void __fastcall goodG2BSink_14(size_t a1);
void goodG2B_95();
void __fastcall goodB2GSink_10(size_t a1);
__int64 goodB2G_86();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_bad();
void goodB2G1_52();
void goodB2G2_52();
void goodG2B1_43();
void goodG2B2_43();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodB2GSink(size_t *a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_bad();
void goodB2G1_53();
void goodB2G2_53();
void goodG2B1_44();
void goodG2B2_44();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad();
void goodB2G1_54();
void goodB2G2_54();
void goodG2B1_45();
void goodG2B2_45();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_good();
void __fastcall badSink_15(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_bad();
void __fastcall goodB2G1Sink_3(size_t a1);
void goodB2G1_55();
void __fastcall goodB2G2Sink_3(size_t a1);
void goodB2G2_55();
void __fastcall goodG2BSink_15(size_t a1);
void goodG2B_96();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodB2GSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_bad();
void goodB2G1_56();
void goodB2G2_56();
void goodG2B1_46();
void goodG2B2_46();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_bad();
void goodG2B_97();
void goodB2G_87();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad();
void goodB2G1_57();
void goodB2G2_57();
void goodG2B1_47();
void goodG2B2_47();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad();
void goodB2G1_58();
void goodB2G2_58();
void goodG2B1_48();
void goodG2B2_48();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_bad();
void goodB2G1_59();
void goodB2G2_59();
void goodG2B1_49();
void goodG2B2_49();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_badSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodG2BSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodB2GSink(size_t *a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_bad();
void goodG2B_98();
void goodB2G_88();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_bad();
void goodB2G1_60();
void goodB2G2_60();
void goodG2B1_50();
void goodG2B2_50();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_bad();
void goodB2G_89();
void goodG2B_99();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_good();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_bad();
void goodG2B_100();
__int64 goodB2G_90();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad();
void goodG2B_101();
void goodB2G_91();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad();
void goodB2G1_61();
void goodB2G2_61();
void goodG2B1_51();
void goodG2B2_51();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad();
void goodB2G1_62();
void goodB2G2_62();
void goodG2B1_52();
void goodG2B2_52();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad();
void goodB2G1_63();
void goodB2G2_63();
void goodG2B1_53();
void goodG2B2_53();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_bad();
void goodB2G1_64();
void goodB2G2_64();
void goodG2B1_54();
void goodG2B2_54();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad();
void goodB2G1_65();
void goodB2G2_65();
void goodG2B1_55();
void goodG2B2_55();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_bad();
void goodG2B_102();
void goodB2G_92();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_good();
unsigned __int64 __fastcall badSource_2(unsigned __int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_bad();
__int64 goodG2BSource_2();
void goodG2B_103();
unsigned __int64 __fastcall goodB2GSource_2(unsigned __int64 a1);
void goodB2G_93();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_bad();
void goodB2G1_66();
void goodB2G2_66();
void goodG2B1_56();
void goodG2B2_56();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_bad();
void goodB2G1_67();
void goodB2G2_67();
void goodG2B1_57();
void goodG2B2_57();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad();
void goodG2B_104();
void goodB2G_94();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_bad();
void goodB2G1_68();
void goodB2G2_68();
void goodG2B1_58();
void goodG2B2_58();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_bad();
void goodG2B_105();
void goodB2G_95();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodB2GSink(size_t a1);
__int64 __fastcall badSource_3(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad();
__int64 goodG2BSource_3();
void goodG2B_106();
__int64 __fastcall goodB2GSource_3(__int64 a1);
void goodB2G_96();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_bad();
void goodB2G1_69();
void goodB2G2_69();
void goodG2B1_59();
void goodG2B2_59();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_good();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource();
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodB2GSource();
void __fastcall badSink_16(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_bad();
void __fastcall goodG2BSink_16(size_t a1);
void goodG2B_107();
void __fastcall goodB2GSink_11(size_t a1);
void goodB2G_97();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_badSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodG2BSink();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodB2GSink();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_bad();
void goodG2B_108();
void goodB2G_98();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_bad();
void goodG2B_109();
void goodB2G_99();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodB2GSink(size_t a1);
void __fastcall badSink_17(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_bad();
void __fastcall goodG2BSink_17(size_t a1);
void goodG2B_110();
void __fastcall goodB2GSink_12(size_t a1);
void goodB2G_100();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_bad();
void goodG2B_111();
void goodB2G_101();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_bad();
void goodG2B_112();
void goodB2G_102();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodB2GSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodG2BSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodB2GSink(__int64 a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_bad();
void goodB2G_103();
void goodG2B_113();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad();
void goodB2G1_70();
void goodB2G2_70();
void goodG2B1_60();
void goodG2B2_60();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_bad();
void goodG2B_114();
void goodB2G_104();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_good();
void __fastcall badSink_18(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_bad();
void __fastcall goodG2BSink_18(size_t a1);
void goodG2B_115();
void __fastcall goodB2GSink_13(size_t a1);
void goodB2G_105();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_bad();
void goodG2B_116();
void goodB2G_106();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_bad();
void goodG2B_117();
void goodB2G_107();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_bad();
void goodB2G1_71();
void goodB2G2_71();
void goodG2B1_61();
void goodG2B2_61();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_bad();
void goodB2G1_72();
void goodB2G2_72();
void goodG2B1_62();
void goodG2B2_62();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad();
void goodG2B_118();
void goodB2G_108();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_bad();
void goodB2G1_73();
void goodB2G2_73();
void goodG2B1_63();
void goodG2B2_63();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodG2BSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink(__int64 a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_bad();
void goodG2B_119();
void goodB2G_109();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_bad();
void goodG2B_120();
void goodB2G_110();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad();
void goodG2B_121();
void goodB2G_111();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_good();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_bad();
void goodG2B_122();
void goodB2G_112();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_good();
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_badSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodG2BSink(size_t a1);
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodB2GSink(size_t a1);
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_bad();
void goodG2B_123();
void goodB2G_113();
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_437374; // weak
_UNKNOWN unk_437EF8; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_648010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticFive_1 = 5; // weak
int staticTrue_2 = 1; // weak
int staticTrue_3 = 1; // weak
int staticFive_2 = 5; // weak
int staticFive_3 = 5; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int staticFalse; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BGlobal; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BGlobal; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int staticFalse_0; // weak
int staticFalse_1; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BGlobal; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badGlobal; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Global; // weak
int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BGlobal; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData; // weak
int badStatic_3; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
int staticFalse_2; // weak
int staticFalse_3; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData; // weak
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400C08) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400E60: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400C30) ----------------------------------------------------
__int64 sub_400C30()
{
  return qword_648010();
}
// 648010: using guessed type __int64 (*qword_648010)(void);

//----- (0000000000400E70) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400E76: positive sp value 8 has been found

//----- (0000000000400EA0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6586727LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6586727LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000400ED0) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400F10) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 648168: using guessed type char completed_6355;

//----- (0000000000400F30) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400F30: could not find valid save-restore pair for rbp

//----- (0000000000400F5D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_good();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_good();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_bad();
  printLine("Calling CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_bad();");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_bad();
  return 0;
}
// 64829C: using guessed type int globalArgc;
// 6482A0: using guessed type __int64 globalArgv;

//----- (0000000000402D48) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  in_addr_t v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  void (__fastcall *v7)(size_t); // [rsp+40h] [rbp-10h]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v7 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_badSink;
  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v8);
}
// 402D48: using guessed type char buf[32];

//----- (0000000000402E47) ----------------------------------------------------
void goodG2B()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodG2BSink(0x14uLL);
}

//----- (0000000000402E76) ----------------------------------------------------
__int64 goodB2G()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  in_addr_t v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  void (__fastcall *v7)(size_t); // [rsp+40h] [rbp-10h]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v7 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodB2GSink;
  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v8);
}
// 402E76: using guessed type char buf[32];

//----- (0000000000402F75) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65_good()
{
  goodG2B();
  return goodB2G();
}

//----- (0000000000402F8F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_badSink(a1);
}

//----- (0000000000402FA9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodG2BSink(a1);
}

//----- (0000000000402FC3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodB2GSink(a1);
}

//----- (0000000000402FDD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_badSink((size_t *)&v0);
}

//----- (0000000000403006) ----------------------------------------------------
void goodG2B_0()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodG2BSink((size_t *)&v0);
}

//----- (000000000040302C) ----------------------------------------------------
void goodB2G_0()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodB2GSink((size_t *)&v0);
}

//----- (0000000000403055) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63_good()
{
  goodG2B_0();
  goodB2G_0();
}

//----- (000000000040306F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  void *v4; // [rsp+28h] [rbp-18h]
  void *ptr; // [rsp+30h] [rbp-10h]
  size_t size; // [rsp+38h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  else
  {
    size = 20LL;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v4 = malloc(size);
    if ( !v4 )
      exit(-1);
    strcpy((char *)v4, "hello");
    printLine((const char *)v4);
    free(v4);
  }
}

//----- (00000000004031C9) ----------------------------------------------------
void goodB2G_1()
{
  char nptr[8]; // [rsp+0h] [rbp-60h]
  __int64 v1; // [rsp+8h] [rbp-58h]
  __int64 v2; // [rsp+10h] [rbp-50h]
  __int16 v3; // [rsp+18h] [rbp-48h]
  char s[8]; // [rsp+20h] [rbp-40h]
  __int64 v5; // [rsp+28h] [rbp-38h]
  __int64 v6; // [rsp+30h] [rbp-30h]
  __int16 v7; // [rsp+38h] [rbp-28h]
  void *v8; // [rsp+48h] [rbp-18h]
  void *ptr; // [rsp+50h] [rbp-10h]
  size_t size; // [rsp+58h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    v5 = 0LL;
    v6 = 0LL;
    v7 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  else
  {
    *(_QWORD *)nptr = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(nptr, 26, stdin) )
      size = strtoul(nptr, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v8 = malloc(size);
    if ( !v8 )
      exit(-1);
    strcpy((char *)v8, "hello");
    printLine((const char *)v8);
    free(v8);
  }
}

//----- (0000000000403383) ----------------------------------------------------
void goodG2B_1()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = (char *)malloc(0x14uLL);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
  else
  {
    v0 = (char *)malloc(0x14uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (000000000040347D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_12_good()
{
  goodB2G_1();
  goodG2B_1();
}

//----- (0000000000403497) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 403497: using guessed type char buf[32];

//----- (00000000004035DF) ----------------------------------------------------
void goodB2G1()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4035DF: using guessed type char buf[32];

//----- (000000000040372E) ----------------------------------------------------
void goodB2G2()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40372E: using guessed type char buf[32];

//----- (000000000040387D) ----------------------------------------------------
void goodG2B1()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004038F5) ----------------------------------------------------
void goodG2B2()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040396D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_15_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  goodG2B2();
}

//----- (000000000040399B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000403A16) ----------------------------------------------------
void goodB2G_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000403A98) ----------------------------------------------------
void goodG2B_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000403B10) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_18_good()
{
  goodB2G_2();
  goodG2B_2();
}

//----- (0000000000403B2A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_bad()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    size = rand();
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v0 = (char *)malloc(size);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000403C2E) ----------------------------------------------------
void goodB2G_3()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  globalReturnsTrueOrFalse();
  size = rand();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v0 = (char *)malloc(size);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000403D3C) ----------------------------------------------------
void goodG2B_3()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = (char *)malloc(0x14uLL);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
  else
  {
    v0 = (char *)malloc(0x14uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000403E36) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_12_good()
{
  goodB2G_3();
  goodG2B_3();
}

//----- (0000000000403E50) ----------------------------------------------------
unsigned __int64 __fastcall badSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  in_addr_t v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+48h] [rbp-8h]
  int fd; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 403E50: using guessed type char buf[32];

//----- (0000000000403F3A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = badSource(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000403FB8) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 20LL;
}

//----- (0000000000403FCE) ----------------------------------------------------
void goodG2B_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040404C) ----------------------------------------------------
unsigned __int64 __fastcall goodB2GSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  in_addr_t v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+48h] [rbp-8h]
  int fd; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 40404C: using guessed type char buf[32];

//----- (0000000000404136) ----------------------------------------------------
void goodB2G_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodB2GSource(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004041BB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_42_good()
{
  goodB2G_4();
  goodG2B_4();
}

//----- (00000000004041D5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040423F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004042A9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040431A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482A8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;

//----- (000000000040438B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodG2BSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482B8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData;

//----- (00000000004043FC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodB2GSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482B0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData;

//----- (0000000000404474) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+28h] [rbp-18h]
  size_t size; // [rsp+30h] [rbp-10h]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (0000000000404569) ----------------------------------------------------
void goodB2G_5()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+28h] [rbp-18h]
  size_t size; // [rsp+30h] [rbp-10h]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (0000000000404665) ----------------------------------------------------
void goodG2B_5()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = 20LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000404701) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_17_good()
{
  goodB2G_5();
  goodG2B_5();
}

//----- (000000000040471B) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_badSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  in_addr_t v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+48h] [rbp-8h]
  int fd; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 40471B: using guessed type char buf[32];

//----- (0000000000404805) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000040481B) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodB2GSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  in_addr_t v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+48h] [rbp-8h]
  int fd; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 40481B: using guessed type char buf[32];

//----- (0000000000404905) ----------------------------------------------------
void __fastcall badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040496F) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int16 v4; // [rsp+18h] [rbp-18h]
  void (__fastcall *v5)(size_t); // [rsp+20h] [rbp-10h]
  unsigned __int64 v6; // [rsp+28h] [rbp-8h]

  v5 = badSink;
  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(v6);
}

//----- (00000000004049F7) ----------------------------------------------------
void __fastcall goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000404A61) ----------------------------------------------------
void goodG2B_6()
{
  goodG2BSink(0x14uLL);
}

//----- (0000000000404A90) ----------------------------------------------------
void __fastcall goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000404B01) ----------------------------------------------------
__int64 goodB2G_6()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int16 v4; // [rsp+18h] [rbp-18h]
  void (__fastcall *v5)(size_t); // [rsp+20h] [rbp-10h]
  unsigned __int64 v6; // [rsp+28h] [rbp-8h]

  v5 = goodB2GSink;
  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(v6);
}

//----- (0000000000404B89) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_44_good()
{
  goodG2B_6();
  return goodB2G_6();
}

//----- (0000000000404BA3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_badSink(v7);
}
// 404BA3: using guessed type char buf[32];

//----- (0000000000404CE2) ----------------------------------------------------
void goodG2B_7()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodG2BSink(0x14uLL);
}

//----- (0000000000404D08) ----------------------------------------------------
void goodB2G_7()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54b_goodB2GSink(v7);
}
// 404D08: using guessed type char buf[32];

//----- (0000000000404E47) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54_good()
{
  goodG2B_7();
  goodB2G_7();
}

//----- (0000000000404E61) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000404F30) ----------------------------------------------------
void goodB2G1_0()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000405006) ----------------------------------------------------
void goodB2G2_0()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (00000000004050DC) ----------------------------------------------------
void goodG2B1_0()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000405152) ----------------------------------------------------
void goodG2B2_0()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004051C8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_02_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_0();
  goodG2B2_0();
}

//----- (00000000004051F6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 64812C: using guessed type int staticTrue;
// 4051F6: using guessed type char buf[32];

//----- (0000000000405354) ----------------------------------------------------
void goodB2G1_1()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 64812C: using guessed type int staticTrue;
// 64816C: using guessed type int staticFalse;
// 405354: using guessed type char buf[32];

//----- (00000000004054C5) ----------------------------------------------------
void goodB2G2_1()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 64812C: using guessed type int staticTrue;
// 4054C5: using guessed type char buf[32];

//----- (000000000040562A) ----------------------------------------------------
void goodG2B1_1()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( staticTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64812C: using guessed type int staticTrue;
// 64816C: using guessed type int staticFalse;

//----- (00000000004056C0) ----------------------------------------------------
void goodG2B2_1()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue )
    size = 20LL;
  if ( staticTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64812C: using guessed type int staticTrue;

//----- (000000000040574A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_05_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_1();
  goodG2B2_1();
}

//----- (0000000000405778) ----------------------------------------------------
void __fastcall badSink_0(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( badStatic )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648170: using guessed type int badStatic;

//----- (00000000004057EC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  badStatic = 1;
  badSink_0(v7);
}
// 648170: using guessed type int badStatic;
// 4057EC: using guessed type char buf[32];

//----- (0000000000405935) ----------------------------------------------------
void __fastcall goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648174: using guessed type int goodB2G1Static;

//----- (00000000004059BC) ----------------------------------------------------
void goodB2G1_2()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2G1Static = 0;
  goodB2G1Sink(v7);
}
// 648174: using guessed type int goodB2G1Static;
// 4059BC: using guessed type char buf[32];

//----- (0000000000405B05) ----------------------------------------------------
void __fastcall goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648178: using guessed type int goodB2G2Static;

//----- (0000000000405B80) ----------------------------------------------------
void goodB2G2_2()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2G2Static = 1;
  goodB2G2Sink(v7);
}
// 648178: using guessed type int goodB2G2Static;
// 405B80: using guessed type char buf[32];

//----- (0000000000405CC9) ----------------------------------------------------
void __fastcall goodG2BSink_0(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64817C: using guessed type int goodG2BStatic;

//----- (0000000000405D3D) ----------------------------------------------------
void goodG2B_8()
{
  goodG2BStatic = 1;
  goodG2BSink_0(0x14uLL);
}
// 64817C: using guessed type int goodG2BStatic;

//----- (0000000000405D6D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_21_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B_8();
}

//----- (0000000000405D91) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (0000000000405E74) ----------------------------------------------------
void goodB2G1_3()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (0000000000405F6A) ----------------------------------------------------
void goodB2G2_3()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (0000000000406054) ----------------------------------------------------
void goodG2B1_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (00000000004060EA) ----------------------------------------------------
void goodG2B2_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (0000000000406174) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_10_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_2();
  goodG2B2_2();
}

//----- (00000000004061A2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = rand();
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000406241) ----------------------------------------------------
void goodB2G_8()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = rand();
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (00000000004062E7) ----------------------------------------------------
void goodG2B_9()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = 20LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000406383) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_good()
{
  goodB2G_8();
  goodG2B_9();
}

//----- (000000000040639D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648318: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;

//----- (000000000040640E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodG2BSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648308: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData;

//----- (000000000040647F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodB2GSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648310: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData;

//----- (00000000004064F7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000406561) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004065CB) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040663C) ----------------------------------------------------
void __fastcall badSink_1(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004066A6) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]

  v1 = rand();
  return ((__int64 (__fastcall *)(__int64))badSink_1)(v1);
}

//----- (00000000004066D8) ----------------------------------------------------
void __fastcall goodG2BSink_1(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000406742) ----------------------------------------------------
void goodG2B_10()
{
  goodG2BSink_1(0x14uLL);
}

//----- (0000000000406771) ----------------------------------------------------
void __fastcall goodB2GSink_0(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004067E2) ----------------------------------------------------
__int64 goodB2G_9()
{
  __int64 v1; // [rsp+0h] [rbp-10h]

  v1 = rand();
  return ((__int64 (__fastcall *)(__int64))goodB2GSink_0)(v1);
}

//----- (0000000000406814) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_44_good()
{
  goodG2B_10();
  return goodB2G_9();
}

//----- (000000000040682E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000406869) ----------------------------------------------------
void goodG2B_11()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodG2BSink(0x14uLL);
}

//----- (000000000040688F) ----------------------------------------------------
void goodB2G_10()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodB2GSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004068CA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54_good()
{
  goodG2B_11();
  goodB2G_10();
}

//----- (00000000004068E4) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData = v6;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_badSink();
}
// 6482A8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_badData;
// 4068E4: using guessed type char buf[32];

//----- (00000000004069E3) ----------------------------------------------------
void goodG2B_12()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodG2BSink();
}
// 6482B8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodG2BData;

//----- (0000000000406A12) ----------------------------------------------------
void goodB2G_11()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData = v6;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68b_goodB2GSink();
}
// 6482B0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_goodB2GData;
// 406A12: using guessed type char buf[32];

//----- (0000000000406B11) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_68_good()
{
  goodG2B_12();
  goodB2G_11();
}

//----- (0000000000406B2B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000406BA4) ----------------------------------------------------
void goodB2G1_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000406C24) ----------------------------------------------------
void goodB2G2_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000406CA4) ----------------------------------------------------
void goodG2B1_3()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000406D1A) ----------------------------------------------------
void goodG2B2_3()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000406D90) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B1_3();
  goodG2B2_3();
}

//----- (0000000000406DBE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000406E8D) ----------------------------------------------------
void goodG2B_13()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000406F03) ----------------------------------------------------
void goodB2G_12()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000406FD9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_01_good()
{
  goodG2B_13();
  goodB2G_12();
}

//----- (0000000000406FF3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_badSink((size_t *)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040702E) ----------------------------------------------------
void goodG2B_14()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodG2BSink((size_t *)&v0);
}

//----- (0000000000407054) ----------------------------------------------------
void goodB2G_13()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodB2GSink((size_t *)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040708F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63_good()
{
  goodG2B_14();
  goodB2G_13();
}

//----- (00000000004070A9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_badSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040711F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodG2BSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000407195) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodB2GSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000407212) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = rand();
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (000000000040729F) ----------------------------------------------------
void goodB2G1_5()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = rand();
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (000000000040733F) ----------------------------------------------------
void goodB2G2_5()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = rand();
  if ( globalTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (00000000004073D3) ----------------------------------------------------
void goodG2B1_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (0000000000407469) ----------------------------------------------------
void goodG2B2_4()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (00000000004074F3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_10_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_4();
  goodG2B2_4();
}

//----- (0000000000407521) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040758B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004075F5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000407666) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_badSink(v6);
}
// 407666: using guessed type char buf[32];

//----- (000000000040775C) ----------------------------------------------------
void goodG2B_15()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodG2BSink(0x14uLL);
}

//----- (0000000000407782) ----------------------------------------------------
void goodB2G_14()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodB2GSink(v6);
}
// 407782: using guessed type char buf[32];

//----- (0000000000407878) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53_good()
{
  goodG2B_15();
  goodB2G_14();
}

//----- (0000000000407892) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_badSink(a1);
}

//----- (00000000004078AC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodG2BSink(a1);
}

//----- (00000000004078C6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodB2GSink(a1);
}

//----- (00000000004078E0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040794A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004079B4) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000407A25) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 407A25: using guessed type char buf[32];

//----- (0000000000407B6B) ----------------------------------------------------
void goodG2B_16()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000407BE1) ----------------------------------------------------
void goodB2G_15()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 407BE1: using guessed type char buf[32];

//----- (0000000000407D2E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_01_good()
{
  goodG2B_16();
  goodB2G_15();
}

//----- (0000000000407D48) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_badSink(a1);
}

//----- (0000000000407D62) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodG2BSink(a1);
}

//----- (0000000000407D7C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodB2GSink(a1);
}

//----- (0000000000407D96) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 407D96: using guessed type char buf[32];

//----- (0000000000407F27) ----------------------------------------------------
void goodB2G_16()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 407F27: using guessed type char buf[32];

//----- (00000000004080BF) ----------------------------------------------------
void goodG2B_17()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000408137) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_18_good()
{
  goodB2G_16();
  goodG2B_17();
}

//----- (0000000000408151) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink((size_t *)&v0);
}

//----- (000000000040817A) ----------------------------------------------------
void goodG2B_18()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodG2BSink((size_t *)&v0);
}

//----- (00000000004081A0) ----------------------------------------------------
void goodB2G_17()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodB2GSink((size_t *)&v0);
}

//----- (00000000004081C9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64_good()
{
  goodG2B_18();
  goodB2G_17();
}

//----- (00000000004081E3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648180: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal;

//----- (0000000000408228) ----------------------------------------------------
void goodB2G1_6()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Global = 0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Sink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648184: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Global;

//----- (000000000040826D) ----------------------------------------------------
void goodB2G2_6()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Global = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Sink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648188: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Global;

//----- (00000000004082B2) ----------------------------------------------------
void goodG2B_19()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BSink(0x14uLL);
}
// 64818C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BGlobal;

//----- (00000000004082E2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B_19();
}

//----- (0000000000408306) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040837F) ----------------------------------------------------
void goodB2G1_7()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004083FF) ----------------------------------------------------
void goodB2G2_7()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040847F) ----------------------------------------------------
void goodG2B1_5()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004084F5) ----------------------------------------------------
void goodG2B2_5()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040856B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_5();
  goodG2B2_5();
}

//----- (0000000000408599) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_badSource(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408617) ----------------------------------------------------
void goodG2B_20()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408695) ----------------------------------------------------
void goodB2G_18()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61b_goodB2GSource(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040871A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_61_good()
{
  goodG2B_20();
  goodB2G_18();
}

//----- (0000000000408734) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004087C2) ----------------------------------------------------
void goodB2G1_8()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040885A) ----------------------------------------------------
void goodB2G2_8()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004088F2) ----------------------------------------------------
void goodG2B1_6()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000408968) ----------------------------------------------------
void goodG2B2_6()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004089DE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_6();
  goodG2B2_6();
}

//----- (0000000000408A0C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408A97) ----------------------------------------------------
void goodB2G1_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408B35) ----------------------------------------------------
void goodB2G2_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408BC7) ----------------------------------------------------
void goodG2B1_7()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000408C5B) ----------------------------------------------------
void goodG2B2_7()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000408CE3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_04_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_7();
  goodG2B2_7();
}

//----- (0000000000408D11) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad()
{
  int v0; // eax
  char *ptr; // [rsp+0h] [rbp-20h]

  v0 = rand();
  if ( (unsigned __int64)v0 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(v0);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408D9A) ----------------------------------------------------
void goodG2B_21()
{
  char *ptr; // [rsp+0h] [rbp-20h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000408E20) ----------------------------------------------------
void goodB2G_19()
{
  int v0; // eax
  char *ptr; // [rsp+0h] [rbp-20h]

  v0 = rand();
  if ( (unsigned __int64)v0 <= 5 || (unsigned __int64)v0 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(v0);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000408EB0) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_good()
{
  goodG2B_21();
  goodB2G_19();
}

//----- (0000000000408ECA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481A8: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badGlobal;

//----- (0000000000408F3E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481AC: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Global;

//----- (0000000000408FC5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Global )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481B0: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Global;

//----- (0000000000409040) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481B4: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BGlobal;

//----- (00000000004090B4) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (00000000004090BF) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (00000000004090CA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 4090CA: using guessed type char buf[32];

//----- (0000000000409230) ----------------------------------------------------
void goodB2G1_10()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 409230: using guessed type char buf[32];

//----- (00000000004093A9) ----------------------------------------------------
void goodB2G2_10()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 4093A9: using guessed type char buf[32];

//----- (0000000000409516) ----------------------------------------------------
void goodG2B1_8()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (00000000004095B4) ----------------------------------------------------
void goodG2B2_8()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000409646) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_08_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_8();
  goodG2B2_8();
}

//----- (0000000000409674) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000409704) ----------------------------------------------------
void goodB2G_20()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040979E) ----------------------------------------------------
void goodG2B_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000409816) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_18_good()
{
  goodB2G_20();
  goodG2B_22();
}

//----- (0000000000409830) ----------------------------------------------------
void badSink_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648190: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData;

//----- (00000000004098A1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData = v6;
  badSink_2();
}
// 648190: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_badData;
// 4098A1: using guessed type char buf[32];

//----- (00000000004099A0) ----------------------------------------------------
void goodG2BSink_2()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648198: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData;

//----- (0000000000409A11) ----------------------------------------------------
void goodG2B_23()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData = 20LL;
  goodG2BSink_2();
}
// 648198: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodG2BData;

//----- (0000000000409A40) ----------------------------------------------------
void goodB2GSink_1()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481A0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData;

//----- (0000000000409AB8) ----------------------------------------------------
void goodB2G_21()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData = v6;
  goodB2GSink_1();
}
// 6481A0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_goodB2GData;
// 409AB8: using guessed type char buf[32];

//----- (0000000000409BB7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_45_good()
{
  goodG2B_23();
  goodB2G_21();
}

//----- (0000000000409BD1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_badSource(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000409C4F) ----------------------------------------------------
void goodG2B_24()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000409CCD) ----------------------------------------------------
void goodB2G_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodB2GSource(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000409D52) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61_good()
{
  goodG2B_24();
  goodB2G_22();
}

//----- (0000000000409D6C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+38h] [rbp-28h]
  int v5; // [rsp+44h] [rbp-1Ch]
  int fd; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+4Ch] [rbp-14h]
  size_t size; // [rsp+50h] [rbp-10h]
  int j; // [rsp+58h] [rbp-8h]
  int i; // [rsp+5Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 409D6C: using guessed type char buf[32];

//----- (0000000000409F28) ----------------------------------------------------
void goodB2G_23()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+38h] [rbp-28h]
  int v5; // [rsp+44h] [rbp-1Ch]
  int fd; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+4Ch] [rbp-14h]
  size_t size; // [rsp+50h] [rbp-10h]
  int j; // [rsp+58h] [rbp-8h]
  int i; // [rsp+5Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 409F28: using guessed type char buf[32];

//----- (000000000040A0EB) ----------------------------------------------------
void goodG2B_25()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = 20LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040A187) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_17_good()
{
  goodB2G_23();
  goodG2B_25();
}

//----- (000000000040A1A1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_bad()
{
  size_t size; // [rsp+8h] [rbp-18h]
  void *v1; // [rsp+10h] [rbp-10h]
  void *ptr; // [rsp+18h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%zu", &size);
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v1 = malloc(size);
    if ( !v1 )
      exit(-1);
    strcpy((char *)v1, "hello");
    printLine((const char *)v1);
    free(v1);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040A2C0) ----------------------------------------------------
void goodB2G_24()
{
  size_t size; // [rsp+8h] [rbp-18h]
  void *v1; // [rsp+10h] [rbp-10h]
  void *ptr; // [rsp+18h] [rbp-8h]

  size = 0LL;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v1 = malloc(size);
    if ( !v1 )
      exit(-1);
    strcpy((char *)v1, "hello");
    printLine((const char *)v1);
    free(v1);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040A3FE) ----------------------------------------------------
void goodG2B_26()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = (char *)malloc(0x14uLL);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
  else
  {
    v0 = (char *)malloc(0x14uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (000000000040A4F8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_12_good()
{
  goodB2G_24();
  goodG2B_26();
}

//----- (000000000040A512) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481B8: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badGlobal;

//----- (000000000040A586) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481BC: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Global;

//----- (000000000040A60D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Global )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481C0: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Global;

//----- (000000000040A688) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481C4: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BGlobal;

//----- (000000000040A6FC) ----------------------------------------------------
void __fastcall badSink_3(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040A766) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  int v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  void (__fastcall *v7)(size_t); // [rsp+38h] [rbp-18h]
  int v8; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v7 = badSink_3;
  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v9);
}
// 40A766: using guessed type char buf[32];

//----- (000000000040A8AE) ----------------------------------------------------
void __fastcall goodG2BSink_3(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040A918) ----------------------------------------------------
void goodG2B_27()
{
  goodG2BSink_3(0x14uLL);
}

//----- (000000000040A947) ----------------------------------------------------
void __fastcall goodB2GSink_2(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040A9B8) ----------------------------------------------------
__int64 goodB2G_25()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  int v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  void (__fastcall *v7)(size_t); // [rsp+38h] [rbp-18h]
  int v8; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v7 = goodB2GSink_2;
  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v9);
}
// 40A9B8: using guessed type char buf[32];

//----- (000000000040AB00) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_44_good()
{
  goodG2B_27();
  return goodB2G_25();
}

//----- (000000000040AB1A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040ABAA) ----------------------------------------------------
void goodB2G1_11()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040AC44) ----------------------------------------------------
void goodB2G2_11()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040ACDE) ----------------------------------------------------
void goodG2B1_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040AD56) ----------------------------------------------------
void goodG2B2_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040ADCE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_15_good()
{
  goodB2G1_11();
  goodB2G2_11();
  goodG2B1_9();
  goodG2B2_9();
}

//----- (000000000040ADFC) ----------------------------------------------------
void __fastcall badSink_4(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040AE66) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  badSink_4(v4);
}

//----- (000000000040AEE5) ----------------------------------------------------
void __fastcall goodG2BSink_4(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040AF4F) ----------------------------------------------------
void goodG2B_28()
{
  goodG2BSink_4(0x14uLL);
}

//----- (000000000040AF75) ----------------------------------------------------
void __fastcall goodB2GSink_3(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040AFE6) ----------------------------------------------------
void goodB2G_26()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  goodB2GSink_3(v4);
}

//----- (000000000040B065) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_41_good()
{
  goodB2G_26();
  goodG2B_28();
}

//----- (000000000040B07F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badSink(v4);
}
// 6481A8: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_badGlobal;

//----- (000000000040B108) ----------------------------------------------------
void goodB2G1_12()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Global = 0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Sink(v4);
}
// 6481AC: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G1Global;

//----- (000000000040B191) ----------------------------------------------------
void goodB2G2_12()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Global = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Sink(v4);
}
// 6481B0: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodB2G2Global;

//----- (000000000040B21A) ----------------------------------------------------
void goodG2B_29()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BSink(0x14uLL);
}
// 6481B4: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_goodG2BGlobal;

//----- (000000000040B24A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_22_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B_29();
}

//----- (000000000040B26E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40B26E: using guessed type char buf[32];

//----- (000000000040B3FD) ----------------------------------------------------
void goodB2G1_13()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40B3FD: using guessed type char buf[32];

//----- (000000000040B593) ----------------------------------------------------
void goodB2G2_13()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40B593: using guessed type char buf[32];

//----- (000000000040B729) ----------------------------------------------------
void goodG2B1_10()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040B79F) ----------------------------------------------------
void goodG2B2_10()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040B815) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_02_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_10();
  goodG2B2_10();
}

//----- (000000000040B843) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040B926) ----------------------------------------------------
void goodB2G1_14()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040BA1C) ----------------------------------------------------
void goodB2G2_14()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BB06) ----------------------------------------------------
void goodG2B1_11()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040BB9C) ----------------------------------------------------
void goodG2B2_11()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BC26) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_09_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_11();
  goodG2B2_11();
}

//----- (000000000040BC54) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_bad()
{
  size_t size; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    __isoc99_fscanf(stdin, "%zu", &size);
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040BD08) ----------------------------------------------------
void goodB2G_27()
{
  size_t size; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    __isoc99_fscanf(stdin, "%zu", &size);
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040BDC6) ----------------------------------------------------
void goodG2B_30()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = 20LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040BE62) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_17_good()
{
  goodB2G_27();
  goodG2B_30();
}

//----- (000000000040BE7C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 40BE7C: using guessed type char buf[32];

//----- (000000000040C023) ----------------------------------------------------
void goodB2G1_15()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;
// 40C023: using guessed type char buf[32];

//----- (000000000040C1DD) ----------------------------------------------------
void goodB2G2_15()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 40C1DD: using guessed type char buf[32];

//----- (000000000040C38B) ----------------------------------------------------
void goodG2B1_12()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (000000000040C421) ----------------------------------------------------
void goodG2B2_12()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (000000000040C4AB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_10_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_12();
  goodG2B2_12();
}

//----- (000000000040C4D9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = rand();
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C566) ----------------------------------------------------
void goodB2G1_16()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = rand();
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040C606) ----------------------------------------------------
void goodB2G2_16()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = rand();
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C69A) ----------------------------------------------------
void goodG2B1_13()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040C730) ----------------------------------------------------
void goodG2B2_13()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C7BA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_13();
  goodG2B2_13();
}

//----- (000000000040C7E8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000040C8B9) ----------------------------------------------------
void goodB2G_28()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000040C991) ----------------------------------------------------
void goodG2B_31()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040CA09) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_18_good()
{
  goodB2G_28();
  goodG2B_31();
}

//----- (000000000040CA23) ----------------------------------------------------
void __fastcall badSink_5(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040CA8D) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  void (__fastcall *v2)(size_t); // [rsp+8h] [rbp-8h]

  v2 = badSink_5;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CAD1) ----------------------------------------------------
void __fastcall goodG2BSink_5(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040CB3B) ----------------------------------------------------
void goodG2B_32()
{
  goodG2BSink_5(0x14uLL);
}

//----- (000000000040CB6A) ----------------------------------------------------
void __fastcall goodB2GSink_4(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040CBDB) ----------------------------------------------------
__int64 goodB2G_29()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  void (__fastcall *v2)(size_t); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_4;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CC1F) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_44_good()
{
  goodG2B_32();
  return goodB2G_29();
}

//----- (000000000040CC39) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CCE3) ----------------------------------------------------
void goodB2G1_17()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CDA3) ----------------------------------------------------
void goodB2G2_17()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040CE57) ----------------------------------------------------
void goodG2B1_14()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040CEF5) ----------------------------------------------------
void goodG2B2_14()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040CF87) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_11_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_14();
  goodG2B2_14();
}

//----- (000000000040CFB5) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D043) ----------------------------------------------------
void goodB2G1_18()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D0DB) ----------------------------------------------------
void goodB2G2_18()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D173) ----------------------------------------------------
void goodG2B1_15()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040D1E9) ----------------------------------------------------
void goodG2B2_15()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040D25F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_15();
  goodG2B2_15();
}

//----- (000000000040D28D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badSink(v0);
}
// 6481B8: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_badGlobal;

//----- (000000000040D2C0) ----------------------------------------------------
void goodB2G1_19()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Global = 0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Sink(v0);
}
// 6481BC: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G1Global;

//----- (000000000040D2F3) ----------------------------------------------------
void goodB2G2_19()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Global = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Sink(v0);
}
// 6481C0: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodB2G2Global;

//----- (000000000040D326) ----------------------------------------------------
void goodG2B_33()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BSink(0x14uLL);
}
// 6481C4: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_goodG2BGlobal;

//----- (000000000040D356) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_22_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B_33();
}

//----- (000000000040D37A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_badSink(a1);
}

//----- (000000000040D394) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodG2BSink(a1);
}

//----- (000000000040D3AE) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52c_goodB2GSink(a1);
}

//----- (000000000040D3C8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_badSource(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040D446) ----------------------------------------------------
void goodG2B_34()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040D4C4) ----------------------------------------------------
void goodB2G_30()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040D549) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61_good()
{
  goodG2B_34();
  goodB2G_30();
}

//----- (000000000040D563) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  size_t size; // [rsp+40h] [rbp-10h]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 40D563: using guessed type char buf[32];

//----- (000000000040D6D6) ----------------------------------------------------
void goodB2G_31()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  size_t size; // [rsp+40h] [rbp-10h]
  int j; // [rsp+48h] [rbp-8h]
  int i; // [rsp+4Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 40D6D6: using guessed type char buf[32];

//----- (000000000040D850) ----------------------------------------------------
void goodG2B_35()
{
  char *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  size = 0LL;
  for ( i = 0; i <= 0; ++i )
    size = 20LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040D8EC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_17_good()
{
  goodB2G_31();
  goodG2B_35();
}

//----- (000000000040D906) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40D906: using guessed type char buf[32];

//----- (000000000040DA95) ----------------------------------------------------
void goodG2B_36()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040DB0B) ----------------------------------------------------
void goodB2G_32()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40DB0B: using guessed type char buf[32];

//----- (000000000040DCA1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_01_good()
{
  goodG2B_36();
  goodB2G_32();
}

//----- (000000000040DCBB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040DDA0) ----------------------------------------------------
void goodB2G1_20()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040DE98) ----------------------------------------------------
void goodB2G2_20()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040DF84) ----------------------------------------------------
void goodG2B1_16()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E01C) ----------------------------------------------------
void goodG2B2_16()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E0A8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_13_good()
{
  goodB2G1_20();
  goodB2G2_20();
  goodG2B1_16();
  goodG2B2_16();
}

//----- (000000000040E0D6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040E14B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040E1C0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040E23C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_badSink(v6);
}
// 40E23C: using guessed type char buf[32];

//----- (000000000040E332) ----------------------------------------------------
void goodG2B_37()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodG2BSink(0x14uLL);
}

//----- (000000000040E358) ----------------------------------------------------
void goodB2G_33()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodB2GSink(v6);
}
// 40E358: using guessed type char buf[32];

//----- (000000000040E44E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54_good()
{
  goodG2B_37();
  goodB2G_33();
}

//----- (000000000040E468) ----------------------------------------------------
__int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%zu", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E497) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000040E4AD) ----------------------------------------------------
__int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%zu", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E4DC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648154: using guessed type int globalTrue;

//----- (000000000040E57E) ----------------------------------------------------
void goodB2G1_21()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (000000000040E636) ----------------------------------------------------
void goodB2G2_21()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648154: using guessed type int globalTrue;

//----- (000000000040E6E2) ----------------------------------------------------
void goodG2B1_17()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (000000000040E778) ----------------------------------------------------
void goodG2B2_17()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (000000000040E802) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_10_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_17();
  goodG2B2_17();
}

//----- (000000000040E830) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E8BE) ----------------------------------------------------
void goodG2B_38()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040E934) ----------------------------------------------------
void goodB2G_34()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E9CC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_01_good()
{
  goodG2B_38();
  goodB2G_34();
}

//----- (000000000040E9E6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = rand();
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EA75) ----------------------------------------------------
void goodB2G1_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = rand();
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EB17) ----------------------------------------------------
void goodB2G2_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = rand();
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EBAD) ----------------------------------------------------
void goodG2B1_18()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EC45) ----------------------------------------------------
void goodG2B2_18()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040ECD1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_13_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_18();
  goodG2B2_18();
}

//----- (000000000040ECFF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_badSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040ED74) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040EDE9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_63b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000040EE65) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040EE70) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040EE7B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 40EE7B: using guessed type char buf[32];

//----- (000000000040F02A) ----------------------------------------------------
void goodB2G1_23()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsFalse_0() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 40F02A: using guessed type char buf[32];

//----- (000000000040F1EC) ----------------------------------------------------
void goodB2G2_23()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 40F1EC: using guessed type char buf[32];

//----- (000000000040F3A2) ----------------------------------------------------
void goodG2B1_19()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040F440) ----------------------------------------------------
void goodG2B2_19()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_0() )
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000040F4D2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_08_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_19();
  goodG2B2_19();
}

//----- (000000000040F500) ----------------------------------------------------
void __fastcall badSink_6(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( badStatic_0 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481C8: using guessed type int badStatic_0;

//----- (000000000040F574) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  badStatic_0 = 1;
  badSink_6(v0);
}
// 6481C8: using guessed type int badStatic_0;

//----- (000000000040F5A7) ----------------------------------------------------
void __fastcall goodB2G1Sink_0(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static_0 )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481CC: using guessed type int goodB2G1Static_0;

//----- (000000000040F62E) ----------------------------------------------------
void goodB2G1_24()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  goodB2G1Static_0 = 0;
  goodB2G1Sink_0(v0);
}
// 6481CC: using guessed type int goodB2G1Static_0;

//----- (000000000040F661) ----------------------------------------------------
void __fastcall goodB2G2Sink_0(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static_0 )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481D0: using guessed type int goodB2G2Static_0;

//----- (000000000040F6DC) ----------------------------------------------------
void goodB2G2_24()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  goodB2G2Static_0 = 1;
  goodB2G2Sink_0(v0);
}
// 6481D0: using guessed type int goodB2G2Static_0;

//----- (000000000040F70F) ----------------------------------------------------
void __fastcall goodG2BSink_6(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic_0 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481D4: using guessed type int goodG2BStatic_0;

//----- (000000000040F783) ----------------------------------------------------
void goodG2B_39()
{
  goodG2BStatic_0 = 1;
  goodG2BSink_6(0x14uLL);
}
// 6481D4: using guessed type int goodG2BStatic_0;

//----- (000000000040F7B3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B_39();
}

//----- (000000000040F7D7) ----------------------------------------------------
void __fastcall badSink_7(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( badStatic_1 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481D8: using guessed type int badStatic_1;

//----- (000000000040F84B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  badStatic_1 = 1;
  badSink_7(v4);
}
// 6481D8: using guessed type int badStatic_1;

//----- (000000000040F8D4) ----------------------------------------------------
void __fastcall goodB2G1Sink_1(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static_1 )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481DC: using guessed type int goodB2G1Static_1;

//----- (000000000040F95B) ----------------------------------------------------
void goodB2G1_25()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  goodB2G1Static_1 = 0;
  goodB2G1Sink_1(v4);
}
// 6481DC: using guessed type int goodB2G1Static_1;

//----- (000000000040F9E4) ----------------------------------------------------
void __fastcall goodB2G2Sink_1(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static_1 )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481E0: using guessed type int goodB2G2Static_1;

//----- (000000000040FA5F) ----------------------------------------------------
void goodB2G2_25()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  goodB2G2Static_1 = 1;
  goodB2G2Sink_1(v4);
}
// 6481E0: using guessed type int goodB2G2Static_1;

//----- (000000000040FAE8) ----------------------------------------------------
void __fastcall goodG2BSink_7(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic_1 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 6481E4: using guessed type int goodG2BStatic_1;

//----- (000000000040FB5C) ----------------------------------------------------
void goodG2B_40()
{
  goodG2BStatic_1 = 1;
  goodG2BSink_7(0x14uLL);
}
// 6481E4: using guessed type int goodG2BStatic_1;

//----- (000000000040FB8C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_21_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B_40();
}

//----- (000000000040FBB0) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000040FC7F) ----------------------------------------------------
void goodB2G1_26()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000040FD55) ----------------------------------------------------
void goodB2G2_26()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000040FE2B) ----------------------------------------------------
void goodG2B1_20()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040FEA1) ----------------------------------------------------
void goodG2B2_20()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000040FF17) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_03_good()
{
  goodB2G1_26();
  goodB2G2_26();
  goodG2B1_20();
  goodG2B2_20();
}

//----- (000000000040FF45) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_badSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482D8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData;

//----- (000000000040FFB6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodG2BSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482E0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData;

//----- (0000000000410027) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodB2GSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482E8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData;

//----- (000000000041009F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_badSink(&v4);
}

//----- (000000000041011E) ----------------------------------------------------
void goodG2B_41()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodG2BSink((size_t *)&v0);
}

//----- (0000000000410144) ----------------------------------------------------
void goodB2G_35()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63b_goodB2GSink(&v4);
}

//----- (00000000004101C3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_63_good()
{
  goodG2B_41();
  goodB2G_35();
}

//----- (00000000004101DD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_badSource(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041025B) ----------------------------------------------------
void goodG2B_42()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004102D9) ----------------------------------------------------
void goodB2G_36()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61b_goodB2GSource(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041035E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_61_good()
{
  goodG2B_42();
  goodB2G_36();
}

//----- (0000000000410378) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_badSink(a1);
}

//----- (0000000000410392) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodG2BSink(a1);
}

//----- (00000000004103AC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53d_goodB2GSink(a1);
}

//----- (00000000004103C6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_badSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482C8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData;

//----- (0000000000410437) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482D0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;

//----- (00000000004104A8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodB2GSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482C0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData;

//----- (0000000000410520) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int16 v4; // [rsp+18h] [rbp-18h]
  void (__fastcall *v5)(size_t); // [rsp+20h] [rbp-10h]
  unsigned __int64 v6; // [rsp+28h] [rbp-8h]

  v5 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_badSink;
  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(v6);
}

//----- (00000000004105A8) ----------------------------------------------------
void goodG2B_43()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodG2BSink(0x14uLL);
}

//----- (00000000004105D7) ----------------------------------------------------
__int64 goodB2G_37()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int16 v4; // [rsp+18h] [rbp-18h]
  void (__fastcall *v5)(size_t); // [rsp+20h] [rbp-10h]
  unsigned __int64 v6; // [rsp+28h] [rbp-8h]

  v5 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodB2GSink;
  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v2 = 0LL;
  v3 = 0LL;
  v4 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(unsigned __int64))v5)(v6);
}

//----- (000000000041065F) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65_good()
{
  goodG2B_43();
  return goodB2G_37();
}

//----- (0000000000410679) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041071B) ----------------------------------------------------
void goodB2G1_27()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004107D3) ----------------------------------------------------
void goodB2G2_27()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041087F) ----------------------------------------------------
void goodG2B1_21()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000410915) ----------------------------------------------------
void goodG2B2_21()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041099F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_09_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_21();
  goodG2B2_21();
}

//----- (00000000004109CD) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_badSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410A3F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410AB1) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410B2A) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000410B35) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (0000000000410B40) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    size = rand();
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000410BD5) ----------------------------------------------------
void goodB2G1_28()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    size = rand();
  if ( (unsigned int)staticReturnsFalse_1() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410C7D) ----------------------------------------------------
void goodB2G2_28()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    size = rand();
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000410D19) ----------------------------------------------------
void goodG2B1_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000410DB7) ----------------------------------------------------
void goodG2B2_22()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_1() )
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000410E49) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_08_good()
{
  goodB2G1_28();
  goodB2G2_28();
  goodG2B1_22();
  goodG2B2_22();
}

//----- (0000000000410E77) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410EE1) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410F4B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000410FBC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 410FBC: using guessed type char buf[32];

//----- (000000000041111A) ----------------------------------------------------
void goodB2G1_29()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41111A: using guessed type char buf[32];

//----- (000000000041128B) ----------------------------------------------------
void goodB2G2_29()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41128B: using guessed type char buf[32];

//----- (00000000004113F0) ----------------------------------------------------
void goodG2B1_23()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000411486) ----------------------------------------------------
void goodG2B2_23()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000411510) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_06_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_23();
  goodG2B2_23();
}

//----- (000000000041153E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004115A8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411612) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411683) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_bad()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v2);
  v1 = v2;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink((__int64)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004116C6) ----------------------------------------------------
void goodG2B_44()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 20LL;
  v1 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodG2BSink((__int64)&v0);
}

//----- (00000000004116F4) ----------------------------------------------------
void goodB2G_38()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v2);
  v1 = v2;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink((__int64)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000411737) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66_good()
{
  goodG2B_44();
  goodB2G_38();
}

//----- (0000000000411751) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_badSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004117C3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411835) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004118AE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041197F) ----------------------------------------------------
void goodB2G1_30()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000411A57) ----------------------------------------------------
void goodB2G2_30()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000411B2F) ----------------------------------------------------
void goodG2B1_24()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000411BA7) ----------------------------------------------------
void goodG2B2_24()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000411C1F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_24();
  goodG2B2_24();
}

//----- (0000000000411C4D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_badSink(a1);
}

//----- (0000000000411C67) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodG2BSink(a1);
}

//----- (0000000000411C81) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54d_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(a1);
}

//----- (0000000000411C9B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_badSink(a1);
}

//----- (0000000000411CB5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodG2BSink(a1);
}

//----- (0000000000411CCF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodB2GSink(a1);
}

//----- (0000000000411CE9) ----------------------------------------------------
unsigned __int64 __fastcall badSource_0(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-28h]
  char s[8]; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  __int16 v6; // [rsp+28h] [rbp-8h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0;
  if ( fgets(s, 26, stdin) )
    return strtoul(s, 0LL, 0);
  printLine("fgets() failed.");
  return v2;
}

//----- (0000000000411D5C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = badSource_0(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411DDA) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 20LL;
}

//----- (0000000000411DF0) ----------------------------------------------------
void goodG2B_45()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodG2BSource_0();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411E6E) ----------------------------------------------------
unsigned __int64 __fastcall goodB2GSource_0(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-28h]
  char s[8]; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  __int16 v6; // [rsp+28h] [rbp-8h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0;
  if ( fgets(s, 26, stdin) )
    return strtoul(s, 0LL, 0);
  printLine("fgets() failed.");
  return v2;
}

//----- (0000000000411EE1) ----------------------------------------------------
void goodB2G_39()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodB2GSource_0(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000411F66) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_42_good()
{
  goodB2G_39();
  goodG2B_45();
}

//----- (0000000000411F80) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_badSink(a1);
}

//----- (0000000000411F9A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodG2BSink(a1);
}

//----- (0000000000411FB4) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(a1);
}

//----- (0000000000411FCE) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_badSink(a1);
}

//----- (0000000000411FE8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodG2BSink(a1);
}

//----- (0000000000412002) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodB2GSink(a1);
}

//----- (000000000041201C) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]

  v1 = rand();
  return ((__int64 (__fastcall *)(__int64))CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_badSink)(v1);
}

//----- (000000000041204E) ----------------------------------------------------
void goodG2B_46()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodG2BSink(0x14uLL);
}

//----- (000000000041207D) ----------------------------------------------------
__int64 goodB2G_40()
{
  __int64 v1; // [rsp+0h] [rbp-10h]

  v1 = rand();
  return ((__int64 (__fastcall *)(__int64))CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65b_goodB2GSink)(v1);
}

//----- (00000000004120AF) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_65_good()
{
  goodG2B_46();
  return goodB2G_40();
}

//----- (00000000004120C9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041213F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004121B5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000412232) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_badSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004122AF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041232C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]
  size_t size; // [rsp+20h] [rbp-10h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004123B0) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041242B) ----------------------------------------------------
void goodB2G1_31()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004124AD) ----------------------------------------------------
void goodB2G2_31()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041252F) ----------------------------------------------------
void goodG2B1_25()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004125A7) ----------------------------------------------------
void goodG2B2_25()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041261F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_15_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_25();
  goodG2B2_25();
}

//----- (000000000041264D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41264D: using guessed type char buf[32];

//----- (00000000004127DE) ----------------------------------------------------
void goodB2G_41()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4127DE: using guessed type char buf[32];

//----- (0000000000412976) ----------------------------------------------------
void goodG2B_47()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004129EE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_16_good()
{
  goodB2G_41();
  goodG2B_47();
}

//----- (0000000000412A08) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_badSink(a1);
}

//----- (0000000000412A22) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodG2BSink(a1);
}

//----- (0000000000412A3C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54c_goodB2GSink(a1);
}

//----- (0000000000412A56) ----------------------------------------------------
__int64 badSource_1()
{
  return rand();
}

//----- (0000000000412A73) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = badSource_1();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000412AF1) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 20LL;
}

//----- (0000000000412B07) ----------------------------------------------------
void goodG2B_48()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodG2BSource_1();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000412B85) ----------------------------------------------------
__int64 goodB2GSource_1()
{
  return rand();
}

//----- (0000000000412BA2) ----------------------------------------------------
void goodB2G_42()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodB2GSource_1();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000412C27) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_42_good()
{
  goodB2G_42();
  goodG2B_48();
}

//----- (0000000000412C41) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;
// 412C41: using guessed type char buf[32];

//----- (0000000000412DA1) ----------------------------------------------------
void goodB2G1_32()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648158: using guessed type int globalFive;
// 412DA1: using guessed type char buf[32];

//----- (0000000000412F14) ----------------------------------------------------
void goodB2G2_32()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;
// 412F14: using guessed type char buf[32];

//----- (000000000041307B) ----------------------------------------------------
void goodG2B1_26()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000413113) ----------------------------------------------------
void goodG2B2_26()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (000000000041319F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_14_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_26();
  goodG2B2_26();
}

//----- (00000000004131CD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_bad()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  in_addr_t v3; // [rsp+24h] [rbp-4Ch]
  __int64 v4; // [rsp+38h] [rbp-38h]
  void *ptr; // [rsp+40h] [rbp-30h]
  size_t size; // [rsp+48h] [rbp-28h]
  int v7; // [rsp+50h] [rbp-20h]
  int fd; // [rsp+54h] [rbp-1Ch]
  size_t *v9; // [rsp+58h] [rbp-18h]
  __int64 *v10; // [rsp+60h] [rbp-10h]
  unsigned __int64 v11; // [rsp+68h] [rbp-8h]

  v10 = &v4;
  v9 = (size_t *)&v4;
  v4 = 0LL;
  v11 = 0LL;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v11 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v10 = v11;
  size = *v9;
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4131CD: using guessed type char buf[32];

//----- (0000000000413344) ----------------------------------------------------
void goodG2B_49()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = &v0;
  v3 = 20LL;
  v0 = 20LL;
  size = 20LL;
  ptr = malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy((char *)ptr, "hello");
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004133EB) ----------------------------------------------------
void goodB2G_43()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  in_addr_t v3; // [rsp+24h] [rbp-4Ch]
  __int64 v4; // [rsp+38h] [rbp-38h]
  void *ptr; // [rsp+40h] [rbp-30h]
  size_t size; // [rsp+48h] [rbp-28h]
  int v7; // [rsp+50h] [rbp-20h]
  int fd; // [rsp+54h] [rbp-1Ch]
  size_t *v9; // [rsp+58h] [rbp-18h]
  __int64 *v10; // [rsp+60h] [rbp-10h]
  unsigned __int64 v11; // [rsp+68h] [rbp-8h]

  v10 = &v4;
  v9 = (size_t *)&v4;
  v4 = 0LL;
  v11 = 0LL;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v11 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v10 = v11;
  size = *v9;
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4133EB: using guessed type char buf[32];

//----- (0000000000413569) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_32_good()
{
  goodG2B_49();
  goodB2G_43();
}

//----- (0000000000413583) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_0 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticTrue_0 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648130: using guessed type int staticTrue_0;

//----- (0000000000413666) ----------------------------------------------------
void goodB2G1_33()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_0 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticFalse_0 )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 648130: using guessed type int staticTrue_0;
// 6481E8: using guessed type int staticFalse_0;

//----- (000000000041375C) ----------------------------------------------------
void goodB2G2_33()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_0 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticTrue_0 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648130: using guessed type int staticTrue_0;

//----- (0000000000413846) ----------------------------------------------------
void goodG2B1_27()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFalse_0 )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( staticTrue_0 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648130: using guessed type int staticTrue_0;
// 6481E8: using guessed type int staticFalse_0;

//----- (00000000004138DC) ----------------------------------------------------
void goodG2B2_27()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_0 )
    size = 20LL;
  if ( staticTrue_0 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648130: using guessed type int staticTrue_0;

//----- (0000000000413966) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_05_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_27();
  goodG2B2_27();
}

//----- (0000000000413994) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *v4; // [rsp+30h] [rbp-20h]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v6; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v6 = recv(fd, buf, 0x19uLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    size = 20LL;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v4 = malloc(size);
    if ( !v4 )
      exit(-1);
    strcpy((char *)v4, "hello");
    printLine((const char *)v4);
    free(v4);
  }
}
// 413994: using guessed type char buf[32];

//----- (0000000000413B6B) ----------------------------------------------------
void goodB2G_44()
{
  char nptr[32]; // [rsp+0h] [rbp-90h]
  struct sockaddr addr; // [rsp+20h] [rbp-70h]
  char buf[32]; // [rsp+30h] [rbp-60h]
  __int16 s; // [rsp+50h] [rbp-40h]
  uint16_t v4; // [rsp+52h] [rbp-3Eh]
  in_addr_t v5; // [rsp+54h] [rbp-3Ch]
  void *v6; // [rsp+68h] [rbp-28h]
  void *ptr; // [rsp+70h] [rbp-20h]
  int v8; // [rsp+78h] [rbp-18h]
  int v9; // [rsp+7Ch] [rbp-14h]
  int v10; // [rsp+80h] [rbp-10h]
  int fd; // [rsp+84h] [rbp-Ch]
  size_t size; // [rsp+88h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = inet_addr("127.0.0.1");
      v4 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v10 = recv(fd, buf, 0x19uLL, 0);
        if ( v10 != -1 )
        {
          if ( v10 )
          {
            buf[v10] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  else
  {
    v9 = socket(2, 1, 6);
    if ( v9 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = inet_addr("127.0.0.1");
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( connect(v9, &addr, 0x10u) != -1 )
      {
        v8 = recv(v9, nptr, 0x19uLL, 0);
        if ( v8 != -1 )
        {
          if ( v8 )
          {
            nptr[v8] = 0;
            size = strtoul(nptr, 0LL, 0);
          }
        }
      }
    }
    if ( v9 != -1 )
      close(v9);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v6 = malloc(size);
    if ( !v6 )
      exit(-1);
    strcpy((char *)v6, "hello");
    printLine((const char *)v6);
    free(v6);
  }
}
// 413B6B: using guessed type char buf[32];
// 413B6B: using guessed type char nptr[32];

//----- (0000000000413E2B) ----------------------------------------------------
void goodG2B_50()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = (char *)malloc(0x14uLL);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
  else
  {
    v0 = (char *)malloc(0x14uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000413F25) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_12_good()
{
  goodB2G_44();
  goodG2B_50();
}

//----- (0000000000413F3F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000413F7A) ----------------------------------------------------
void goodG2B_51()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodG2BSink(0x14uLL);
}

//----- (0000000000413FA0) ----------------------------------------------------
void goodB2G_45()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52b_goodB2GSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000413FDB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52_good()
{
  goodG2B_51();
  goodB2G_45();
}

//----- (0000000000413FF5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_badSink(a1);
}

//----- (000000000041400F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodG2BSink(a1);
}

//----- (0000000000414029) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodB2GSink(a1);
}

//----- (0000000000414043) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004140AD) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000414117) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000414188) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000414218) ----------------------------------------------------
void goodB2G_46()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, "%zu", &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004142B2) ----------------------------------------------------
void goodG2B_52()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041432A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_good()
{
  goodB2G_46();
  goodG2B_52();
}

//----- (0000000000414344) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 414344: using guessed type char buf[32];

//----- (00000000004144A2) ----------------------------------------------------
void goodB2G1_34()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;
// 4144A2: using guessed type char buf[32];

//----- (0000000000414613) ----------------------------------------------------
void goodB2G2_34()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 414613: using guessed type char buf[32];

//----- (0000000000414778) ----------------------------------------------------
void goodG2B1_28()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041480E) ----------------------------------------------------
void goodG2B2_28()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000414898) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_09_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_28();
  goodG2B2_28();
}

//----- (00000000004148C6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_badSink(v7);
}
// 4148C6: using guessed type char buf[32];

//----- (0000000000414A05) ----------------------------------------------------
void goodG2B_53()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodG2BSink(0x14uLL);
}

//----- (0000000000414A2B) ----------------------------------------------------
void goodB2G_47()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodB2GSink(v7);
}
// 414A2B: using guessed type char buf[32];

//----- (0000000000414B6A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51_good()
{
  goodG2B_53();
  goodB2G_47();
}

//----- (0000000000414B84) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData = v4;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_badSink();
}
// 6482C8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_badData;

//----- (0000000000414C0C) ----------------------------------------------------
void goodG2B_54()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodG2BSink();
}
// 6482D0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2BData;

//----- (0000000000414C3B) ----------------------------------------------------
void goodB2G_48()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData = v4;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68b_goodB2GSink();
}
// 6482C0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2GData;

//----- (0000000000414CC3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_good()
{
  goodG2B_54();
  goodB2G_48();
}

//----- (0000000000414CDD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-10h]
  int v5; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v4 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_badSink(&v4);
}
// 414CDD: using guessed type char buf[32];

//----- (0000000000414DD3) ----------------------------------------------------
void goodG2B_55()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodG2BSink((size_t *)&v0);
}

//----- (0000000000414DF9) ----------------------------------------------------
void goodB2G_49()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-10h]
  int v5; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v4 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64b_goodB2GSink(&v4);
}
// 414DF9: using guessed type char buf[32];

//----- (0000000000414EEF) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_64_good()
{
  goodG2B_55();
  goodB2G_49();
}

//----- (0000000000414F09) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  unsigned __int64 v4; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  size_t size; // [rsp+30h] [rbp-10h]
  unsigned __int64 v7; // [rsp+38h] [rbp-8h]

  v7 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v7 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v4 = v7;
  size = v7;
  if ( v7 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000414FE8) ----------------------------------------------------
void goodG2B_56()
{
  char *ptr; // [rsp+8h] [rbp-18h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041506E) ----------------------------------------------------
void goodB2G_50()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  unsigned __int64 v4; // [rsp+20h] [rbp-20h]
  void *ptr; // [rsp+28h] [rbp-18h]
  size_t size; // [rsp+30h] [rbp-10h]
  unsigned __int64 v7; // [rsp+38h] [rbp-8h]

  v7 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v7 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v4 = v7;
  size = v7;
  if ( v7 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000415154) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_34_good()
{
  goodG2B_56();
  goodB2G_50();
}

//----- (000000000041516E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_bad()
{
  int v0; // eax

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_badSink(v0);
}

//----- (000000000041519F) ----------------------------------------------------
void goodG2B_57()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodG2BSink(0x14uLL);
}

//----- (00000000004151CD) ----------------------------------------------------
void goodB2G_51()
{
  int v0; // eax

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67b_goodB2GSink(v0);
}

//----- (00000000004151FE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_67_good()
{
  goodG2B_57();
  goodB2G_51();
}

//----- (0000000000415218) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000415282) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004152EC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_65b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041535D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004153D3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodG2BSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000415449) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodB2GSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004154C6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_1 )
    size = rand();
  if ( staticTrue_1 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648134: using guessed type int staticTrue_1;

//----- (0000000000415553) ----------------------------------------------------
void goodB2G1_35()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_1 )
    size = rand();
  if ( staticFalse_1 )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648134: using guessed type int staticTrue_1;
// 6481EC: using guessed type int staticFalse_1;

//----- (00000000004155F3) ----------------------------------------------------
void goodB2G2_35()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_1 )
    size = rand();
  if ( staticTrue_1 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648134: using guessed type int staticTrue_1;

//----- (0000000000415687) ----------------------------------------------------
void goodG2B1_29()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( staticTrue_1 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648134: using guessed type int staticTrue_1;
// 6481EC: using guessed type int staticFalse_1;

//----- (000000000041571D) ----------------------------------------------------
void goodG2B2_29()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_1 )
    size = 20LL;
  if ( staticTrue_1 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648134: using guessed type int staticTrue_1;

//----- (00000000004157A7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_05_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B1_29();
  goodG2B2_29();
}

//----- (00000000004157D5) ----------------------------------------------------
void __fastcall badSink_8(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041583F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  badSink_8(v0);
}

//----- (0000000000415868) ----------------------------------------------------
void __fastcall goodG2BSink_8(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004158D2) ----------------------------------------------------
void goodG2B_58()
{
  goodG2BSink_8(0x14uLL);
}

//----- (00000000004158F8) ----------------------------------------------------
void __fastcall goodB2GSink_5(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000415969) ----------------------------------------------------
void goodB2G_52()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  goodB2GSink_5(v0);
}

//----- (0000000000415992) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_41_good()
{
  goodB2G_52();
  goodG2B_58();
}

//----- (00000000004159AC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_badSink(a1);
}

//----- (00000000004159C6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodG2BSink(a1);
}

//----- (00000000004159E0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53c_goodB2GSink(a1);
}

//----- (00000000004159FA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4159FA: using guessed type char buf[32];

//----- (0000000000415B56) ----------------------------------------------------
void goodB2G1_36()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 415B56: using guessed type char buf[32];

//----- (0000000000415CC5) ----------------------------------------------------
void goodB2G2_36()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 415CC5: using guessed type char buf[32];

//----- (0000000000415E28) ----------------------------------------------------
void goodG2B1_30()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000415EBC) ----------------------------------------------------
void goodG2B2_30()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000415F44) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_04_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_30();
  goodG2B2_30();
}

//----- (0000000000415F72) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  in_addr_t v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+38h] [rbp-28h]
  size_t size; // [rsp+40h] [rbp-20h]
  unsigned __int64 v6; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+58h] [rbp-8h]

  v9 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  size = v9;
  if ( v9 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 415F72: using guessed type char buf[32];

//----- (00000000004160C8) ----------------------------------------------------
void goodG2B_59()
{
  char *ptr; // [rsp+0h] [rbp-20h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041614E) ----------------------------------------------------
void goodB2G_53()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  in_addr_t v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+38h] [rbp-28h]
  size_t size; // [rsp+40h] [rbp-20h]
  unsigned __int64 v6; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+58h] [rbp-8h]

  v9 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  size = v9;
  if ( v9 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41614E: using guessed type char buf[32];

//----- (00000000004162AB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_31_good()
{
  goodG2B_59();
  goodB2G_53();
}

//----- (00000000004162C5) ----------------------------------------------------
void badSink_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481F0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData;

//----- (0000000000416336) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData = v7;
  badSink_9();
}
// 6481F0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_badData;
// 416336: using guessed type char buf[32];

//----- (000000000041647E) ----------------------------------------------------
void goodG2BSink_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6481F8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData;

//----- (00000000004164EF) ----------------------------------------------------
void goodG2B_60()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData = 20LL;
  goodG2BSink_9();
}
// 6481F8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodG2BData;

//----- (000000000041651E) ----------------------------------------------------
void goodB2GSink_6()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648200: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData;

//----- (0000000000416596) ----------------------------------------------------
void goodB2G_54()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData = v7;
  goodB2GSink_6();
}
// 648200: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_goodB2GData;
// 416596: using guessed type char buf[32];

//----- (00000000004166DE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_45_good()
{
  goodG2B_60();
  goodB2G_54();
}

//----- (00000000004166F8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000416762) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004167CC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041683D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_badSink(v4);
}

//----- (00000000004168BC) ----------------------------------------------------
void goodG2B_61()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodG2BSink(0x14uLL);
}

//----- (00000000004168E2) ----------------------------------------------------
void goodB2G_55()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53b_goodB2GSink(v4);
}

//----- (0000000000416961) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53_good()
{
  goodG2B_61();
  goodB2G_55();
}

//----- (000000000041697B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004169B6) ----------------------------------------------------
void goodG2B_62()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodG2BSink(0x14uLL);
}

//----- (00000000004169DC) ----------------------------------------------------
void goodB2G_56()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51b_goodB2GSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000416A17) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_51_good()
{
  goodG2B_62();
  goodB2G_56();
}

//----- (0000000000416A31) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 416A31: using guessed type char buf[32];

//----- (0000000000416BD8) ----------------------------------------------------
void goodB2G1_37()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 416BD8: using guessed type char buf[32];

//----- (0000000000416D92) ----------------------------------------------------
void goodB2G2_37()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 416D92: using guessed type char buf[32];

//----- (0000000000416F40) ----------------------------------------------------
void goodG2B1_31()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000416FD6) ----------------------------------------------------
void goodG2B2_31()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000417060) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_06_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_31();
  goodG2B2_31();
}

//----- (000000000041708E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_bad()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_badSink();
}
// 6482D8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_badData;

//----- (00000000004170C0) ----------------------------------------------------
void goodG2B_63()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodG2BSink();
}
// 6482E0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodG2BData;

//----- (00000000004170EF) ----------------------------------------------------
void goodB2G_57()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68b_goodB2GSink();
}
// 6482E8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_goodB2GData;

//----- (0000000000417121) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_68_good()
{
  goodG2B_63();
  goodB2G_57();
}

//----- (000000000041713B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad()
{
  int v0; // eax
  char *ptr; // [rsp+8h] [rbp-18h]

  v0 = rand();
  if ( (unsigned __int64)v0 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(v0);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004171C4) ----------------------------------------------------
void goodG2B_64()
{
  char *ptr; // [rsp+8h] [rbp-18h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041724A) ----------------------------------------------------
void goodB2G_58()
{
  int v0; // eax
  char *ptr; // [rsp+8h] [rbp-18h]

  v0 = rand();
  if ( (unsigned __int64)v0 <= 5 || (unsigned __int64)v0 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(v0);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004172DA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_good()
{
  goodG2B_64();
  goodB2G_58();
}

//----- (00000000004172F4) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v7;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_badSink(v7);
}
// 4172F4: using guessed type char buf[32];

//----- (00000000004173F2) ----------------------------------------------------
void goodG2B_65()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodG2BSink(0x14uLL);
}

//----- (0000000000417420) ----------------------------------------------------
void goodB2G_59()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v7;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67b_goodB2GSink(v7);
}
// 417420: using guessed type char buf[32];

//----- (000000000041751E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_67_good()
{
  goodG2B_65();
  goodB2G_59();
}

//----- (0000000000417538) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004175A2) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041760C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041767D) ----------------------------------------------------
void badSink_10()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648208: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData;

//----- (00000000004176EE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData = v0;
  badSink_10();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648208: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_badData;

//----- (0000000000417732) ----------------------------------------------------
void goodG2BSink_10()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648210: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData;

//----- (00000000004177A3) ----------------------------------------------------
void goodG2B_66()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData = 20LL;
  goodG2BSink_10();
}
// 648210: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodG2BData;

//----- (00000000004177D2) ----------------------------------------------------
void goodB2GSink_7()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648218: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData;

//----- (000000000041784A) ----------------------------------------------------
void goodB2G_60()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData = v0;
  goodB2GSink_7();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648218: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_goodB2GData;

//----- (000000000041788E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_45_good()
{
  goodG2B_66();
  goodB2G_60();
}

//----- (00000000004178A8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648220: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badGlobal;

//----- (000000000041791C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648224: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Global;

//----- (00000000004179A3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Global )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648228: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Global;

//----- (0000000000417A1E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64822C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BGlobal;

//----- (0000000000417A92) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437374, &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000417B34) ----------------------------------------------------
void goodB2G1_38()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437374, &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000417BEC) ----------------------------------------------------
void goodB2G2_38()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437374, &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000417C98) ----------------------------------------------------
void goodG2B1_32()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000417D2E) ----------------------------------------------------
void goodG2B2_32()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000417DB8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_06_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_32();
  goodG2B2_32();
}

//----- (0000000000417DE6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+20h] [rbp-10h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v5 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v5 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v4 = v5;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(v5);
}

//----- (0000000000417E6D) ----------------------------------------------------
void goodG2B_67()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodG2BSink(0x14uLL);
}

//----- (0000000000417E9B) ----------------------------------------------------
void goodB2G_61()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+20h] [rbp-10h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v5 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v5 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v4 = v5;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(v5);
}

//----- (0000000000417F22) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_good()
{
  goodG2B_67();
  goodB2G_61();
}

//----- (0000000000417F3C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041801D) ----------------------------------------------------
void goodB2G1_39()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000418111) ----------------------------------------------------
void goodB2G2_39()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (00000000004181F9) ----------------------------------------------------
void goodG2B1_33()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041828D) ----------------------------------------------------
void goodG2B2_33()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000418315) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_04_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_33();
  goodG2B2_33();
}

//----- (0000000000418343) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_bad()
{
  int v0; // eax
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v0 = rand();
  v3 = v0;
  v2 = v0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink((__int64)&v1);
}

//----- (0000000000418374) ----------------------------------------------------
void goodG2B_68()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 20LL;
  v1 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodG2BSink((__int64)&v0);
}

//----- (00000000004183A2) ----------------------------------------------------
void goodB2G_62()
{
  int v0; // eax
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v0 = rand();
  v3 = v0;
  v2 = v0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink((__int64)&v1);
}

//----- (00000000004183D3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66_good()
{
  goodG2B_68();
  goodB2G_62();
}

//----- (00000000004183ED) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041846A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004184E7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]
  size_t size; // [rsp+20h] [rbp-10h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041856B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004185D5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041863F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004186B0) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_bad()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int16 v3; // [rsp+18h] [rbp-38h]
  char v4; // [rsp+20h] [rbp-30h]
  unsigned __int64 v5; // [rsp+30h] [rbp-20h]
  unsigned __int64 v6; // [rsp+48h] [rbp-8h]

  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v5 = v6;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_badSink((__int64)&v4);
}

//----- (0000000000418737) ----------------------------------------------------
void goodG2B_69()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 20LL;
  v1 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000418765) ----------------------------------------------------
void goodB2G_63()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int16 v3; // [rsp+18h] [rbp-38h]
  char v4; // [rsp+20h] [rbp-30h]
  unsigned __int64 v5; // [rsp+30h] [rbp-20h]
  unsigned __int64 v6; // [rsp+48h] [rbp-8h]

  v6 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v6 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v5 = v6;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66b_goodB2GSink((__int64)&v4);
}

//----- (00000000004187EC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_66_good()
{
  goodG2B_69();
  goodB2G_63();
}

//----- (0000000000418806) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648138: using guessed type int staticFive;
// 418806: using guessed type char buf[32];

//----- (0000000000418966) ----------------------------------------------------
void goodB2G1_40()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648138: using guessed type int staticFive;
// 418966: using guessed type char buf[32];

//----- (0000000000418AD9) ----------------------------------------------------
void goodB2G2_40()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( staticFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648138: using guessed type int staticFive;
// 418AD9: using guessed type char buf[32];

//----- (0000000000418C40) ----------------------------------------------------
void goodG2B1_34()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( staticFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648138: using guessed type int staticFive;

//----- (0000000000418CD8) ----------------------------------------------------
void goodG2B2_34()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive == 5 )
    size = 20LL;
  if ( staticFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648138: using guessed type int staticFive;

//----- (0000000000418D64) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_07_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_34();
  goodG2B2_34();
}

//----- (0000000000418D92) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;
// 418D92: using guessed type char buf[32];

//----- (0000000000418F3B) ----------------------------------------------------
void goodB2G1_41()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648158: using guessed type int globalFive;
// 418F3B: using guessed type char buf[32];

//----- (00000000004190F7) ----------------------------------------------------
void goodB2G2_41()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;
// 4190F7: using guessed type char buf[32];

//----- (00000000004192A7) ----------------------------------------------------
void goodG2B1_35()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (000000000041933F) ----------------------------------------------------
void goodG2B2_35()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (00000000004193CB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_14_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_35();
  goodG2B2_35();
}

//----- (00000000004193F9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink((size_t *)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000419434) ----------------------------------------------------
void goodG2B_70()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodG2BSink((size_t *)&v0);
}

//----- (000000000041945A) ----------------------------------------------------
void goodB2G_64()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodB2GSink((size_t *)&v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000419495) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64_good()
{
  goodG2B_70();
  goodB2G_64();
}

//----- (00000000004194AF) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_bad()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  int v3; // [rsp+24h] [rbp-4Ch]
  __int64 v4; // [rsp+30h] [rbp-40h]
  void *ptr; // [rsp+38h] [rbp-38h]
  size_t size; // [rsp+40h] [rbp-30h]
  int v7; // [rsp+48h] [rbp-28h]
  int fd; // [rsp+4Ch] [rbp-24h]
  size_t *v9; // [rsp+50h] [rbp-20h]
  __int64 *v10; // [rsp+58h] [rbp-18h]
  int v11; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v12; // [rsp+68h] [rbp-8h]

  v10 = &v4;
  v9 = (size_t *)&v4;
  v4 = 0LL;
  v12 = 0LL;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  size = *v9;
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4194AF: using guessed type char buf[32];

//----- (000000000041966F) ----------------------------------------------------
void goodG2B_71()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = &v0;
  v3 = 20LL;
  v0 = 20LL;
  size = 20LL;
  ptr = malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy((char *)ptr, "hello");
  printLine((const char *)ptr);
  free(ptr);
}

//----- (0000000000419716) ----------------------------------------------------
void goodB2G_65()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  int v3; // [rsp+24h] [rbp-4Ch]
  __int64 v4; // [rsp+30h] [rbp-40h]
  void *ptr; // [rsp+38h] [rbp-38h]
  size_t size; // [rsp+40h] [rbp-30h]
  int v7; // [rsp+48h] [rbp-28h]
  int fd; // [rsp+4Ch] [rbp-24h]
  size_t *v9; // [rsp+50h] [rbp-20h]
  __int64 *v10; // [rsp+58h] [rbp-18h]
  int v11; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v12; // [rsp+68h] [rbp-8h]

  v10 = &v4;
  v9 = (size_t *)&v4;
  v4 = 0LL;
  v12 = 0LL;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  size = *v9;
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 419716: using guessed type char buf[32];

//----- (00000000004198DD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_32_good()
{
  goodG2B_71();
  goodB2G_65();
}

//----- (00000000004198F7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badSink(v6);
}
// 648220: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_badGlobal;
// 4198F7: using guessed type char buf[32];

//----- (00000000004199F7) ----------------------------------------------------
void goodB2G1_42()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Global = 0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Sink(v6);
}
// 648224: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G1Global;
// 4199F7: using guessed type char buf[32];

//----- (0000000000419AF7) ----------------------------------------------------
void goodB2G2_42()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Global = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Sink(v6);
}
// 648228: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodB2G2Global;
// 419AF7: using guessed type char buf[32];

//----- (0000000000419BF7) ----------------------------------------------------
void goodG2B_72()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BSink(0x14uLL);
}
// 64822C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_goodG2BGlobal;

//----- (0000000000419C27) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_22_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B_72();
}

//----- (0000000000419C4B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_badSink(a1);
}

//----- (0000000000419C65) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodG2BSink(a1);
}

//----- (0000000000419C7F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52c_goodB2GSink(a1);
}

//----- (0000000000419C99) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419D16) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419D93) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]
  size_t size; // [rsp+20h] [rbp-10h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419E17) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_badSink(a1);
}

//----- (0000000000419E31) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodG2BSink(a1);
}

//----- (0000000000419E4B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodB2GSink(a1);
}

//----- (0000000000419E65) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419ECF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419F39) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000419FAA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_badSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A01C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A08E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A107) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v7; // [rsp+4Ch] [rbp-4h]

  v4 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_badSink(&v4);
}
// 41A107: using guessed type char buf[32];

//----- (000000000041A246) ----------------------------------------------------
void goodG2B_73()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodG2BSink((size_t *)&v0);
}

//----- (000000000041A26C) ----------------------------------------------------
void goodB2G_66()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v7; // [rsp+4Ch] [rbp-4h]

  v4 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(&v4);
}
// 41A26C: using guessed type char buf[32];

//----- (000000000041A3AB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64_good()
{
  goodG2B_73();
  goodB2G_66();
}

//----- (000000000041A3C5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A42F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A499) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041A50A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648158: using guessed type int globalFive;

//----- (000000000041A5AE) ----------------------------------------------------
void goodB2G1_43()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648158: using guessed type int globalFive;

//----- (000000000041A668) ----------------------------------------------------
void goodB2G2_43()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648158: using guessed type int globalFive;

//----- (000000000041A716) ----------------------------------------------------
void goodG2B1_36()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (000000000041A7AE) ----------------------------------------------------
void goodG2B2_36()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (000000000041A83A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_14_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_36();
  goodG2B2_36();
}

//----- (000000000041A868) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_bad()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  void *ptr; // [rsp+10h] [rbp-20h]
  size_t size; // [rsp+18h] [rbp-18h]
  size_t *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v1;
  v4 = (size_t *)&v1;
  v1 = 0LL;
  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  *v5 = v0;
  size = *v4;
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041A924) ----------------------------------------------------
void goodG2B_74()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = &v0;
  v3 = 20LL;
  v0 = 20LL;
  size = 20LL;
  ptr = malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy((char *)ptr, "hello");
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000041A9CB) ----------------------------------------------------
void goodB2G_67()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  void *ptr; // [rsp+10h] [rbp-20h]
  size_t size; // [rsp+18h] [rbp-18h]
  size_t *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v1;
  v4 = (size_t *)&v1;
  v1 = 0LL;
  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  *v5 = v0;
  size = *v4;
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041AA8E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_32_good()
{
  goodG2B_74();
  goodB2G_67();
}

//----- (000000000041AAA8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041AB79) ----------------------------------------------------
void goodB2G_68()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041AC51) ----------------------------------------------------
void goodG2B_75()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041ACC9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_16_good()
{
  goodB2G_68();
  goodG2B_75();
}

//----- (000000000041ACE3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_badSink(a1);
}

//----- (000000000041ACFD) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodG2BSink(a1);
}

//----- (000000000041AD17) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodB2GSink(a1);
}

//----- (000000000041AD31) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (000000000041AD3C) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (000000000041AD47) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041ADF1) ----------------------------------------------------
void goodB2G1_44()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)staticReturnsFalse_2() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041AEB1) ----------------------------------------------------
void goodB2G2_44()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041AF65) ----------------------------------------------------
void goodG2B1_37()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsFalse_2() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000041B003) ----------------------------------------------------
void goodG2B2_37()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000041B095) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_08_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_37();
  goodG2B2_37();
}

//----- (000000000041B0C3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41B0C3: using guessed type char buf[32];

//----- (000000000041B268) ----------------------------------------------------
void goodB2G1_45()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41B268: using guessed type char buf[32];

//----- (000000000041B420) ----------------------------------------------------
void goodB2G2_45()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41B420: using guessed type char buf[32];

//----- (000000000041B5CC) ----------------------------------------------------
void goodG2B1_38()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041B660) ----------------------------------------------------
void goodG2B2_38()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041B6E8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_04_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_38();
  goodG2B2_38();
}

//----- (000000000041B716) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B78B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B800) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B87C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B8EE) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B960) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041B9D9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_bad()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData = v0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_badSink();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6482F0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData;

//----- (000000000041BA1D) ----------------------------------------------------
void goodG2B_76()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodG2BSink();
}
// 6482F8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData;

//----- (000000000041BA4C) ----------------------------------------------------
void goodB2G_69()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData = v0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodB2GSink();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648300: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData;

//----- (000000000041BA90) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_good()
{
  goodG2B_76();
  goodB2G_69();
}

//----- (000000000041BAAA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-30h]
  void *ptr; // [rsp+38h] [rbp-28h]
  size_t size; // [rsp+40h] [rbp-20h]
  int v7; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v9; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v10; // [rsp+58h] [rbp-8h]

  v10 = 0LL;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v4 = v10;
  size = v10;
  if ( v10 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41BAAA: using guessed type char buf[32];

//----- (000000000041BC49) ----------------------------------------------------
void goodG2B_77()
{
  char *ptr; // [rsp+8h] [rbp-18h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041BCCF) ----------------------------------------------------
void goodB2G_70()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-30h]
  void *ptr; // [rsp+38h] [rbp-28h]
  size_t size; // [rsp+40h] [rbp-20h]
  int v7; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v9; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v10; // [rsp+58h] [rbp-8h]

  v10 = 0LL;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v4 = v10;
  size = v10;
  if ( v10 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41BCCF: using guessed type char buf[32];

//----- (000000000041BE75) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_34_good()
{
  goodG2B_77();
  goodB2G_70();
}

//----- (000000000041BE8F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_badSink(v0);
}

//----- (000000000041BEB8) ----------------------------------------------------
void goodG2B_78()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodG2BSink(0x14uLL);
}

//----- (000000000041BEDE) ----------------------------------------------------
void goodB2G_71()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52b_goodB2GSink(v0);
}

//----- (000000000041BF07) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52_good()
{
  goodG2B_78();
  goodB2G_71();
}

//----- (000000000041BF21) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041BF8B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041BFF5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041C066) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+20h] [rbp-20h]
  size_t size; // [rsp+28h] [rbp-18h]
  unsigned __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 v7; // [rsp+38h] [rbp-8h]

  v7 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v7 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v6 = v7;
  size = v7;
  if ( v7 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041C145) ----------------------------------------------------
void goodG2B_79()
{
  char *ptr; // [rsp+0h] [rbp-20h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041C1CB) ----------------------------------------------------
void goodB2G_72()
{
  char s[8]; // [rsp+0h] [rbp-40h]
  __int64 v1; // [rsp+8h] [rbp-38h]
  __int64 v2; // [rsp+10h] [rbp-30h]
  __int16 v3; // [rsp+18h] [rbp-28h]
  void *ptr; // [rsp+20h] [rbp-20h]
  size_t size; // [rsp+28h] [rbp-18h]
  unsigned __int64 v6; // [rsp+30h] [rbp-10h]
  unsigned __int64 v7; // [rsp+38h] [rbp-8h]

  v7 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v7 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  v6 = v7;
  size = v7;
  if ( v7 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041C2B1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_good()
{
  goodG2B_79();
  goodB2G_72();
}

//----- (000000000041C2CB) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(a1);
}

//----- (000000000041C2E5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodG2BSink(a1);
}

//----- (000000000041C2FF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(a1);
}

//----- (000000000041C319) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v8 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  v4 = v8;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_badSink(v8);
}
// 41C319: using guessed type char buf[32];

//----- (000000000041C460) ----------------------------------------------------
void goodG2B_80()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodG2BSink(0x14uLL);
}

//----- (000000000041C48E) ----------------------------------------------------
void goodB2G_73()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v8 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  v4 = v8;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67b_goodB2GSink(v8);
}
// 41C48E: using guessed type char buf[32];

//----- (000000000041C5D5) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_67_good()
{
  goodG2B_80();
  goodB2G_73();
}

//----- (000000000041C5EF) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041C66A) ----------------------------------------------------
void goodB2G_74()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041C6EC) ----------------------------------------------------
void goodG2B_81()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041C764) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good()
{
  goodB2G_74();
  goodG2B_81();
}

//----- (000000000041C77E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_badSink(v4);
}

//----- (000000000041C7FD) ----------------------------------------------------
void goodG2B_82()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodG2BSink(0x14uLL);
}

//----- (000000000041C823) ----------------------------------------------------
void goodB2G_75()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51b_goodB2GSink(v4);
}

//----- (000000000041C8A2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_51_good()
{
  goodG2B_82();
  goodB2G_75();
}

//----- (000000000041C8BC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437EF8, &size);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041C95C) ----------------------------------------------------
void goodB2G1_46()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437EF8, &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041CA12) ----------------------------------------------------
void goodB2G2_46()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  __isoc99_fscanf(stdin, &unk_437EF8, &size);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041CABC) ----------------------------------------------------
void goodG2B1_39()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041CB50) ----------------------------------------------------
void goodG2B2_39()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041CBD8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_04_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_39();
  goodG2B2_39();
}

//----- (000000000041CC06) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_bad()
{
  size_t v0; // [rsp+0h] [rbp-20h]
  void *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  size_t v3; // [rsp+18h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  v3 = v0;
  size = v0;
  if ( v0 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041CCA1) ----------------------------------------------------
void goodG2B_83()
{
  char *ptr; // [rsp+0h] [rbp-20h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041CD27) ----------------------------------------------------
void goodB2G_76()
{
  size_t v0; // [rsp+0h] [rbp-20h]
  void *ptr; // [rsp+8h] [rbp-18h]
  size_t size; // [rsp+10h] [rbp-10h]
  size_t v3; // [rsp+18h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  v3 = v0;
  size = v0;
  if ( v0 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041CDC9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_31_good()
{
  goodG2B_83();
  goodB2G_76();
}

//----- (000000000041CDE3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648258: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badGlobal;

//----- (000000000041CE57) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 64825C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Global;

//----- (000000000041CEDE) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Global )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648260: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Global;

//----- (000000000041CF59) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648264: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BGlobal;

//----- (000000000041CFCD) ----------------------------------------------------
void __fastcall badSink_11(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( badStatic_2 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648230: using guessed type int badStatic_2;

//----- (000000000041D041) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  badStatic_2 = 1;
  badSink_11(v6);
}
// 648230: using guessed type int badStatic_2;
// 41D041: using guessed type char buf[32];

//----- (000000000041D141) ----------------------------------------------------
void __fastcall goodB2G1Sink_2(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static_2 )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648234: using guessed type int goodB2G1Static_2;

//----- (000000000041D1C8) ----------------------------------------------------
void goodB2G1_47()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G1Static_2 = 0;
  goodB2G1Sink_2(v6);
}
// 648234: using guessed type int goodB2G1Static_2;
// 41D1C8: using guessed type char buf[32];

//----- (000000000041D2C8) ----------------------------------------------------
void __fastcall goodB2G2Sink_2(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static_2 )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648238: using guessed type int goodB2G2Static_2;

//----- (000000000041D343) ----------------------------------------------------
void goodB2G2_47()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2G2Static_2 = 1;
  goodB2G2Sink_2(v6);
}
// 648238: using guessed type int goodB2G2Static_2;
// 41D343: using guessed type char buf[32];

//----- (000000000041D443) ----------------------------------------------------
void __fastcall goodG2BSink_11(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic_2 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64823C: using guessed type int goodG2BStatic_2;

//----- (000000000041D4B7) ----------------------------------------------------
void goodG2B_84()
{
  goodG2BStatic_2 = 1;
  goodG2BSink_11(0x14uLL);
}
// 64823C: using guessed type int goodG2BStatic_2;

//----- (000000000041D4E7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_21_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B_84();
}

//----- (000000000041D50B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41D50B: using guessed type char buf[32];

//----- (000000000041D651) ----------------------------------------------------
void goodB2G1_48()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41D651: using guessed type char buf[32];

//----- (000000000041D79E) ----------------------------------------------------
void goodB2G2_48()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41D79E: using guessed type char buf[32];

//----- (000000000041D8EB) ----------------------------------------------------
void goodG2B1_40()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041D961) ----------------------------------------------------
void goodG2B2_40()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041D9D7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_03_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_40();
  goodG2B2_40();
}

//----- (000000000041DA05) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-10h]
  int v5; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v4 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_badSink(&v4);
}
// 41DA05: using guessed type char buf[32];

//----- (000000000041DAFB) ----------------------------------------------------
void goodG2B_85()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodG2BSink((size_t *)&v0);
}

//----- (000000000041DB21) ----------------------------------------------------
void goodB2G_77()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-10h]
  int v5; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v4 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v4 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63b_goodB2GSink(&v4);
}
// 41DB21: using guessed type char buf[32];

//----- (000000000041DC17) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_63_good()
{
  goodG2B_85();
  goodB2G_77();
}

//----- (000000000041DC31) ----------------------------------------------------
void badSink_12()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648240: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;

//----- (000000000041DCA2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData = v4;
  badSink_12();
}
// 648240: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_badData;

//----- (000000000041DD2A) ----------------------------------------------------
void goodG2BSink_12()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648248: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData;

//----- (000000000041DD9B) ----------------------------------------------------
void goodG2B_86()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData = 20LL;
  goodG2BSink_12();
}
// 648248: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodG2BData;

//----- (000000000041DDCA) ----------------------------------------------------
void goodB2GSink_8()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648250: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData;

//----- (000000000041DE42) ----------------------------------------------------
void goodB2G_78()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData = v4;
  goodB2GSink_8();
}
// 648250: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_goodB2GData;

//----- (000000000041DECA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_45_good()
{
  goodG2B_86();
  goodB2G_78();
}

//----- (000000000041DEE4) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041DF27) ----------------------------------------------------
void goodG2B_87()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodG2BSink(0x14uLL);
}

//----- (000000000041DF55) ----------------------------------------------------
void goodB2G_79()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67b_goodB2GSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041DF98) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_67_good()
{
  goodG2B_87();
  goodB2G_79();
}

//----- (000000000041DFB2) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_badSink(a1);
}

//----- (000000000041DFCC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodG2BSink(a1);
}

//----- (000000000041DFE6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodB2GSink(a1);
}

//----- (000000000041E000) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041E0E3) ----------------------------------------------------
void goodB2G1_49()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041E1D9) ----------------------------------------------------
void goodB2G2_49()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    size = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000041E2C3) ----------------------------------------------------
void goodG2B1_41()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041E359) ----------------------------------------------------
void goodG2B2_41()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041E3E3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_06_good()
{
  goodB2G1_49();
  goodB2G2_49();
  goodG2B1_41();
  goodG2B2_41();
}

//----- (000000000041E411) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41E411: using guessed type char buf[32];

//----- (000000000041E559) ----------------------------------------------------
void goodB2G_80()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41E559: using guessed type char buf[32];

//----- (000000000041E6A8) ----------------------------------------------------
void goodG2B_88()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041E720) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_18_good()
{
  goodB2G_80();
  goodG2B_88();
}

//----- (000000000041E73A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_badSink(v0);
}

//----- (000000000041E763) ----------------------------------------------------
void goodG2B_89()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodG2BSink(0x14uLL);
}

//----- (000000000041E789) ----------------------------------------------------
void goodB2G_81()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51b_goodB2GSink(v0);
}

//----- (000000000041E7B2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_51_good()
{
  goodG2B_89();
  goodB2G_81();
}

//----- (000000000041E7CC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648180: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_badGlobal;

//----- (000000000041E840) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Global )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648184: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G1Global;

//----- (000000000041E8C7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Sink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Global )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648188: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodB2G2Global;

//----- (000000000041E942) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BGlobal )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64818C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_22_goodG2BGlobal;

//----- (000000000041E9B6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_badSink(v4);
}

//----- (000000000041EA35) ----------------------------------------------------
void goodG2B_90()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodG2BSink(0x14uLL);
}

//----- (000000000041EA5B) ----------------------------------------------------
void goodB2G_82()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52b_goodB2GSink(v4);
}

//----- (000000000041EADA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_52_good()
{
  goodG2B_90();
  goodB2G_82();
}

//----- (000000000041EAF4) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badSink(v7);
}
// 648258: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_badGlobal;
// 41EAF4: using guessed type char buf[32];

//----- (000000000041EC3D) ----------------------------------------------------
void goodB2G1_50()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Global = 0;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Sink(v7);
}
// 64825C: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G1Global;
// 41EC3D: using guessed type char buf[32];

//----- (000000000041ED86) ----------------------------------------------------
void goodB2G2_50()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Global = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Sink(v7);
}
// 648260: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodB2G2Global;
// 41ED86: using guessed type char buf[32];

//----- (000000000041EECF) ----------------------------------------------------
void goodG2B_91()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BGlobal = 1;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BSink(0x14uLL);
}
// 648264: using guessed type int CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_goodG2BGlobal;

//----- (000000000041EEFF) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_22_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B_91();
}

//----- (000000000041EF23) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_badSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  int v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 41EF23: using guessed type char buf[32];

//----- (000000000041F056) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000041F06C) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_61b_goodB2GSource(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  int v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 41F06C: using guessed type char buf[32];

//----- (000000000041F19F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F209) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F273) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53d_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F2E4) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-28h]
  char s[8]; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  __int16 v6; // [rsp+28h] [rbp-8h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0;
  if ( fgets(s, 26, stdin) )
    return strtoul(s, 0LL, 0);
  printLine("fgets() failed.");
  return v2;
}

//----- (000000000041F357) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000041F36D) ----------------------------------------------------
unsigned __int64 __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-28h]
  char s[8]; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 v5; // [rsp+20h] [rbp-10h]
  __int16 v6; // [rsp+28h] [rbp-8h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0LL;
  v5 = 0LL;
  v6 = 0;
  if ( fgets(s, 26, stdin) )
    return strtoul(s, 0LL, 0);
  printLine("fgets() failed.");
  return v2;
}

//----- (000000000041F3E0) ----------------------------------------------------
void badSink_13()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648268: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData;

//----- (000000000041F451) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_bad()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData = rand();
  badSink_13();
}
// 648268: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_badData;

//----- (000000000041F483) ----------------------------------------------------
void goodG2BSink_13()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648270: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;

//----- (000000000041F4F4) ----------------------------------------------------
void goodG2B_92()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData = 20LL;
  goodG2BSink_13();
}
// 648270: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodG2BData;

//----- (000000000041F523) ----------------------------------------------------
void goodB2GSink_9()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648278: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;

//----- (000000000041F59B) ----------------------------------------------------
void goodB2G_83()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData = rand();
  goodB2GSink_9();
}
// 648278: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_goodB2GData;

//----- (000000000041F5CD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_45_good()
{
  goodG2B_92();
  goodB2G_83();
}

//----- (000000000041F5E7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_badSink(a1);
}

//----- (000000000041F601) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodG2BSink(a1);
}

//----- (000000000041F61B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodB2GSink(a1);
}

//----- (000000000041F635) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  void (__fastcall *v2)(size_t); // [rsp+8h] [rbp-8h]

  v2 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F679) ----------------------------------------------------
void goodG2B_93()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodG2BSink(0x14uLL);
}

//----- (000000000041F6A8) ----------------------------------------------------
__int64 goodB2G_84()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  void (__fastcall *v2)(size_t); // [rsp+8h] [rbp-8h]

  v2 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65b_goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F6EC) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_65_good()
{
  goodG2B_93();
  return goodB2G_84();
}

//----- (000000000041F706) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F793) ----------------------------------------------------
void goodB2G1_51()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F833) ----------------------------------------------------
void goodB2G2_51()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041F8C7) ----------------------------------------------------
void goodG2B1_42()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041F95D) ----------------------------------------------------
void goodG2B2_42()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041F9E7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_06_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_42();
  goodG2B2_42();
}

//----- (000000000041FA15) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_badSink(a1);
}

//----- (000000000041FA2F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodG2BSink(a1);
}

//----- (000000000041FA49) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_53c_goodB2GSink(a1);
}

//----- (000000000041FA63) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041FAE0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041FB5D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]
  size_t size; // [rsp+20h] [rbp-10h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000041FBE1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+30h] [rbp-30h]
  size_t size; // [rsp+38h] [rbp-28h]
  unsigned __int64 v6; // [rsp+40h] [rbp-20h]
  int v7; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v9; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v10; // [rsp+58h] [rbp-8h]

  v10 = 0LL;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  size = v10;
  if ( v10 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41FBE1: using guessed type char buf[32];

//----- (000000000041FD80) ----------------------------------------------------
void goodG2B_94()
{
  char *ptr; // [rsp+0h] [rbp-20h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000041FE06) ----------------------------------------------------
void goodB2G_85()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  void *ptr; // [rsp+30h] [rbp-30h]
  size_t size; // [rsp+38h] [rbp-28h]
  unsigned __int64 v6; // [rsp+40h] [rbp-20h]
  int v7; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v9; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v10; // [rsp+58h] [rbp-8h]

  v10 = 0LL;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  size = v10;
  if ( v10 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 41FE06: using guessed type char buf[32];

//----- (000000000041FFAC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_31_good()
{
  goodG2B_94();
  goodB2G_85();
}

//----- (000000000041FFC6) ----------------------------------------------------
void __fastcall badSink_14(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420030) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  in_addr_t v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  void (__fastcall *v7)(size_t); // [rsp+40h] [rbp-10h]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v7 = badSink_14;
  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v8);
}
// 420030: using guessed type char buf[32];

//----- (000000000042012F) ----------------------------------------------------
void __fastcall goodG2BSink_14(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420199) ----------------------------------------------------
void goodG2B_95()
{
  goodG2BSink_14(0x14uLL);
}

//----- (00000000004201C8) ----------------------------------------------------
void __fastcall goodB2GSink_10(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420239) ----------------------------------------------------
__int64 goodB2G_86()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  in_addr_t v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+38h] [rbp-18h]
  int fd; // [rsp+3Ch] [rbp-14h]
  void (__fastcall *v7)(size_t); // [rsp+40h] [rbp-10h]
  unsigned __int64 v8; // [rsp+48h] [rbp-8h]

  v7 = goodB2GSink_10;
  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v8);
}
// 420239: using guessed type char buf[32];

//----- (0000000000420338) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_44_good()
{
  goodG2B_95();
  return goodB2G_86();
}

//----- (0000000000420352) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 420352: using guessed type char buf[32];

//----- (00000000004204FB) ----------------------------------------------------
void goodB2G1_52()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 4204FB: using guessed type char buf[32];

//----- (00000000004206B7) ----------------------------------------------------
void goodB2G2_52()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 4206B7: using guessed type char buf[32];

//----- (0000000000420867) ----------------------------------------------------
void goodG2B1_43()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004208FF) ----------------------------------------------------
void goodG2B2_43()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042098B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_13_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_43();
  goodG2B2_43();
}

//----- (00000000004209B9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_badSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420A2E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420AA3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000420B1F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 420B1F: using guessed type char buf[32];

//----- (0000000000420C85) ----------------------------------------------------
void goodB2G1_53()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 420C85: using guessed type char buf[32];

//----- (0000000000420DFE) ----------------------------------------------------
void goodB2G2_53()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 420DFE: using guessed type char buf[32];

//----- (0000000000420F6B) ----------------------------------------------------
void goodG2B1_44()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000421009) ----------------------------------------------------
void goodG2B2_44()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000042109B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_11_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_44();
  goodG2B2_44();
}

//----- (00000000004210C9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4210C9: using guessed type char buf[32];

//----- (000000000042120F) ----------------------------------------------------
void goodB2G1_54()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42120F: using guessed type char buf[32];

//----- (000000000042135C) ----------------------------------------------------
void goodB2G2_54()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42135C: using guessed type char buf[32];

//----- (00000000004214A9) ----------------------------------------------------
void goodG2B1_45()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000042151F) ----------------------------------------------------
void goodG2B2_45()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000421595) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_02_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_45();
  goodG2B2_45();
}

//----- (00000000004215C3) ----------------------------------------------------
void __fastcall badSink_15(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( badStatic_3 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648280: using guessed type int badStatic_3;

//----- (0000000000421637) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  badStatic_3 = 1;
  badSink_15(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648280: using guessed type int badStatic_3;

//----- (000000000042167C) ----------------------------------------------------
void __fastcall goodB2G1Sink_3(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G1Static_3 )
  {
    printLine("Benign, fixed string");
  }
  else if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648284: using guessed type int goodB2G1Static_3;

//----- (0000000000421703) ----------------------------------------------------
void goodB2G1_55()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  goodB2G1Static_3 = 0;
  goodB2G1Sink_3(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648284: using guessed type int goodB2G1Static_3;

//----- (0000000000421748) ----------------------------------------------------
void __fastcall goodB2G2Sink_3(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodB2G2Static_3 )
  {
    if ( a1 <= 5 || a1 > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648288: using guessed type int goodB2G2Static_3;

//----- (00000000004217C3) ----------------------------------------------------
void goodB2G2_55()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  goodB2G2Static_3 = 1;
  goodB2G2Sink_3(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648288: using guessed type int goodB2G2Static_3;

//----- (0000000000421808) ----------------------------------------------------
void __fastcall goodG2BSink_15(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( goodG2BStatic_3 )
  {
    if ( a1 <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(a1);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64828C: using guessed type int goodG2BStatic_3;

//----- (000000000042187C) ----------------------------------------------------
void goodG2B_96()
{
  goodG2BStatic_3 = 1;
  goodG2BSink_15(0x14uLL);
}
// 64828C: using guessed type int goodG2BStatic_3;

//----- (00000000004218AC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_21_good()
{
  goodB2G1_55();
  goodB2G2_55();
  goodG2B_96();
}

//----- (00000000004218D0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_badSink(a1);
}

//----- (00000000004218EA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodG2BSink(a1);
}

//----- (0000000000421904) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54d_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_54e_goodB2GSink(a1);
}

//----- (000000000042191E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042199B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000421A18) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+18h] [rbp-18h]
  size_t size; // [rsp+20h] [rbp-10h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000421A9C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000421B0E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000421B80) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000421BF9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 421BF9: using guessed type char buf[32];

//----- (0000000000421D57) ----------------------------------------------------
void goodB2G1_56()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalFalse )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;
// 421D57: using guessed type char buf[32];

//----- (0000000000421EC8) ----------------------------------------------------
void goodB2G2_56()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( globalTrue )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 421EC8: using guessed type char buf[32];

//----- (000000000042202D) ----------------------------------------------------
void goodG2B1_46()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;
// 648298: using guessed type int globalFalse;

//----- (00000000004220C3) ----------------------------------------------------
void goodG2B2_46()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalTrue )
    size = 20LL;
  if ( globalTrue )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648154: using guessed type int globalTrue;

//----- (000000000042214D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_10_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_46();
  goodG2B2_46();
}

//----- (000000000042217B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004221E5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042224F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_51b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004222C0) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_badSink(&v4);
}

//----- (000000000042233F) ----------------------------------------------------
void goodG2B_97()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodG2BSink((size_t *)&v0);
}

//----- (0000000000422365) ----------------------------------------------------
void goodB2G_87()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64b_goodB2GSink(&v4);
}

//----- (00000000004223E4) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_64_good()
{
  goodG2B_97();
  goodB2G_87();
}

//----- (00000000004223FE) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004224A2) ----------------------------------------------------
void goodB2G1_57()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042255C) ----------------------------------------------------
void goodB2G2_57()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042260A) ----------------------------------------------------
void goodG2B1_47()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004226A2) ----------------------------------------------------
void goodG2B2_47()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042272E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_47();
  goodG2B2_47();
}

//----- (000000000042275C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = rand();
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (00000000004227EB) ----------------------------------------------------
void goodB2G1_58()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = rand();
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648158: using guessed type int globalFive;

//----- (000000000042288D) ----------------------------------------------------
void goodB2G2_58()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = rand();
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422923) ----------------------------------------------------
void goodG2B1_48()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (00000000004229BB) ----------------------------------------------------
void goodG2B2_48()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422A47) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_14_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_48();
  goodG2B2_48();
}

//----- (0000000000422A75) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422B5A) ----------------------------------------------------
void goodB2G1_59()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422C52) ----------------------------------------------------
void goodB2G2_59()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( globalFive == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422D3E) ----------------------------------------------------
void goodG2B1_49()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422DD6) ----------------------------------------------------
void goodG2B2_49()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( globalFive == 5 )
    size = 20LL;
  if ( globalFive == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648158: using guessed type int globalFive;

//----- (0000000000422E62) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_14_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_49();
  goodG2B2_49();
}

//----- (0000000000422E90) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_badSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000422F05) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodG2BSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]

  if ( *a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(*a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000422F7A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_63b_goodB2GSink(size_t *a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *a1;
  if ( *a1 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000422FF6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000423060) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004230CA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54e_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042313B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_bad()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  size_t *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = (size_t *)&v0;
  v0 = 0LL;
  v3 = 0LL;
  v3 = rand();
  *v5 = v3;
  size = *v4;
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (00000000004231E5) ----------------------------------------------------
void goodG2B_98()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = &v0;
  v3 = 20LL;
  v0 = 20LL;
  size = 20LL;
  ptr = malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy((char *)ptr, "hello");
  printLine((const char *)ptr);
  free(ptr);
}

//----- (000000000042328C) ----------------------------------------------------
void goodB2G_88()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  size_t *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = (size_t *)&v0;
  v0 = 0LL;
  v3 = 0LL;
  v3 = rand();
  *v5 = v3;
  size = *v4;
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000042333D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_32_good()
{
  goodG2B_98();
  goodB2G_88();
}

//----- (0000000000423357) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_badSink(a1);
}

//----- (0000000000423371) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodG2BSink(a1);
}

//----- (000000000042338B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_54d_goodB2GSink(a1);
}

//----- (00000000004233A5) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4233A5: using guessed type char buf[32];

//----- (0000000000423534) ----------------------------------------------------
void goodB2G1_60()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 423534: using guessed type char buf[32];

//----- (00000000004236CA) ----------------------------------------------------
void goodB2G2_60()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4236CA: using guessed type char buf[32];

//----- (0000000000423860) ----------------------------------------------------
void goodG2B1_50()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004238D6) ----------------------------------------------------
void goodG2B2_50()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000042394C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_03_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B1_50();
  goodG2B2_50();
}

//----- (000000000042397A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  int v3; // [rsp+24h] [rbp-3Ch]
  void *v4; // [rsp+38h] [rbp-28h]
  void *ptr; // [rsp+40h] [rbp-20h]
  int v6; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v8; // [rsp+54h] [rbp-Ch]
  size_t size; // [rsp+58h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1 )
        {
          v6 = recv(v8, buf, 0x19uLL, 0);
          if ( v6 != -1 )
          {
            if ( v6 )
            {
              buf[v6] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
  else
  {
    size = 20LL;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v4 = malloc(size);
    if ( !v4 )
      exit(-1);
    strcpy((char *)v4, "hello");
    printLine((const char *)v4);
    free(v4);
  }
}
// 42397A: using guessed type char buf[32];

//----- (0000000000423B9A) ----------------------------------------------------
void goodB2G_89()
{
  char nptr[32]; // [rsp+0h] [rbp-90h]
  struct sockaddr addr; // [rsp+20h] [rbp-70h]
  char buf[32]; // [rsp+30h] [rbp-60h]
  __int16 s; // [rsp+50h] [rbp-40h]
  uint16_t v4; // [rsp+52h] [rbp-3Eh]
  int v5; // [rsp+54h] [rbp-3Ch]
  void *v6; // [rsp+60h] [rbp-30h]
  void *ptr; // [rsp+68h] [rbp-28h]
  int v8; // [rsp+70h] [rbp-20h]
  int v9; // [rsp+74h] [rbp-1Ch]
  int v10; // [rsp+78h] [rbp-18h]
  int fd; // [rsp+7Ch] [rbp-14h]
  int v12; // [rsp+80h] [rbp-10h]
  int v13; // [rsp+84h] [rbp-Ch]
  size_t size; // [rsp+88h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v13 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = 0;
      v4 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v13 = accept(fd, 0LL, 0LL);
        if ( v13 != -1 )
        {
          v10 = recv(v13, buf, 0x19uLL, 0);
          if ( v10 != -1 )
          {
            if ( v10 )
            {
              buf[v10] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v13 != -1 )
      close(v13);
  }
  else
  {
    v12 = -1;
    v9 = socket(2, 1, 6);
    if ( v9 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v9, &addr, 0x10u) != -1 && listen(v9, 5) != -1 )
      {
        v12 = accept(v9, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v8 = recv(v12, nptr, 0x19uLL, 0);
          if ( v8 != -1 )
          {
            if ( v8 )
            {
              nptr[v8] = 0;
              size = strtoul(nptr, 0LL, 0);
            }
          }
        }
      }
    }
    if ( v9 != -1 )
      close(v9);
    if ( v12 != -1 )
      close(v12);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    v6 = malloc(size);
    if ( !v6 )
      exit(-1);
    strcpy((char *)v6, "hello");
    printLine((const char *)v6);
    free(v6);
  }
}
// 423B9A: using guessed type char buf[32];
// 423B9A: using guessed type char nptr[32];

//----- (0000000000423EEC) ----------------------------------------------------
void goodG2B_99()
{
  char *v0; // [rsp+8h] [rbp-18h]
  char *ptr; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    ptr = (char *)malloc(0x14uLL);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
  else
  {
    v0 = (char *)malloc(0x14uLL);
    if ( !v0 )
      exit(-1);
    strcpy(v0, "hello");
    printLine(v0);
    free(v0);
  }
}

//----- (0000000000423FE6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_12_good()
{
  goodB2G_89();
  goodG2B_99();
}

//----- (0000000000424000) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  int v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  void (__fastcall *v7)(size_t); // [rsp+38h] [rbp-18h]
  int v8; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v7 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_badSink;
  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v9);
}
// 424000: using guessed type char buf[32];

//----- (0000000000424148) ----------------------------------------------------
void goodG2B_100()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodG2BSink(0x14uLL);
}

//----- (0000000000424177) ----------------------------------------------------
__int64 goodB2G_90()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v3; // [rsp+22h] [rbp-2Eh]
  int v4; // [rsp+24h] [rbp-2Ch]
  int v5; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  void (__fastcall *v7)(size_t); // [rsp+38h] [rbp-18h]
  int v8; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v7 = CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink;
  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(unsigned __int64))v7)(v9);
}
// 424177: using guessed type char buf[32];

//----- (00000000004242BF) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65_good()
{
  goodG2B_100();
  return goodB2G_90();
}

//----- (00000000004242D9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000424352) ----------------------------------------------------
void goodG2B_101()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (00000000004243C8) ----------------------------------------------------
void goodB2G_91()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = rand();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000424448) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_01_good()
{
  goodG2B_101();
  goodB2G_91();
}

//----- (0000000000424462) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004244CC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000424536) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53d_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004245A7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4245A7: using guessed type char buf[32];

//----- (0000000000424738) ----------------------------------------------------
void goodB2G1_61()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 424738: using guessed type char buf[32];

//----- (00000000004248D0) ----------------------------------------------------
void goodB2G2_61()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 4248D0: using guessed type char buf[32];

//----- (0000000000424A68) ----------------------------------------------------
void goodG2B1_51()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000424AE0) ----------------------------------------------------
void goodG2B2_51()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000424B58) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_good()
{
  goodB2G1_61();
  goodB2G2_61();
  goodG2B1_51();
  goodG2B2_51();
}

//----- (0000000000424B86) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = rand();
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000424C1B) ----------------------------------------------------
void goodB2G1_62()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = rand();
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000424CC3) ----------------------------------------------------
void goodB2G2_62()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = rand();
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000424D5F) ----------------------------------------------------
void goodG2B1_52()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000424DFD) ----------------------------------------------------
void goodG2B2_52()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000424E8F) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_52();
  goodG2B2_52();
}

//----- (0000000000424EBD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_0 == 5 )
    size = rand();
  if ( staticFive_0 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64813C: using guessed type int staticFive_0;

//----- (0000000000424F4C) ----------------------------------------------------
void goodB2G1_63()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_0 == 5 )
    size = rand();
  if ( staticFive_0 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 64813C: using guessed type int staticFive_0;

//----- (0000000000424FEE) ----------------------------------------------------
void goodB2G2_63()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_0 == 5 )
    size = rand();
  if ( staticFive_0 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64813C: using guessed type int staticFive_0;

//----- (0000000000425084) ----------------------------------------------------
void goodG2B1_53()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_0 == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( staticFive_0 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64813C: using guessed type int staticFive_0;

//----- (000000000042511C) ----------------------------------------------------
void goodG2B2_53()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_0 == 5 )
    size = 20LL;
  if ( staticFive_0 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64813C: using guessed type int staticFive_0;

//----- (00000000004251A8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_07_good()
{
  goodB2G1_63();
  goodB2G2_63();
  goodG2B1_53();
  goodG2B2_53();
}

//----- (00000000004251D6) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (00000000004251E1) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (00000000004251EC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (00000000004252D7) ----------------------------------------------------
void goodB2G1_64()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsFalse_3() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (00000000004253D5) ----------------------------------------------------
void goodB2G2_64()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (00000000004254C7) ----------------------------------------------------
void goodG2B1_54()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000425565) ----------------------------------------------------
void goodG2B2_54()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
    size = 20LL;
  if ( (unsigned int)staticReturnsTrue_3() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (00000000004255F7) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_08_good()
{
  goodB2G1_64();
  goodB2G2_64();
  goodG2B1_54();
  goodG2B2_54();
}

//----- (0000000000425625) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 425625: using guessed type char buf[32];

//----- (00000000004257CC) ----------------------------------------------------
void goodB2G1_65()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FALSE )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;
// 4257CC: using guessed type char buf[32];

//----- (0000000000425986) ----------------------------------------------------
void goodB2G2_65()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 425986: using guessed type char buf[32];

//----- (0000000000425B34) ----------------------------------------------------
void goodG2B1_55()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;
// 43A24C: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000425BCA) ----------------------------------------------------
void goodG2B2_55()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_TRUE )
    size = 20LL;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A248: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000425C54) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_09_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_55();
  goodG2B2_55();
}

//----- (0000000000425C82) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_bad()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  in_addr_t v3; // [rsp+24h] [rbp-4Ch]
  char v4; // [rsp+30h] [rbp-40h]
  unsigned __int64 v5; // [rsp+40h] [rbp-30h]
  int v6; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v8; // [rsp+68h] [rbp-8h]

  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0x19uLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_badSink((__int64)&v4);
}
// 425C82: using guessed type char buf[32];

//----- (0000000000425D80) ----------------------------------------------------
void goodG2B_102()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 20LL;
  v1 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodG2BSink((__int64)&v0);
}

//----- (0000000000425DAE) ----------------------------------------------------
void goodB2G_92()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  in_addr_t v3; // [rsp+24h] [rbp-4Ch]
  char v4; // [rsp+30h] [rbp-40h]
  unsigned __int64 v5; // [rsp+40h] [rbp-30h]
  int v6; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v8; // [rsp+68h] [rbp-8h]

  v8 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0x19uLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66b_goodB2GSink((__int64)&v4);
}
// 425DAE: using guessed type char buf[32];

//----- (0000000000425EAC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_66_good()
{
  goodG2B_102();
  goodB2G_92();
}

//----- (0000000000425EC6) ----------------------------------------------------
unsigned __int64 __fastcall badSource_2(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  int v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 425EC6: using guessed type char buf[32];

//----- (0000000000425FF9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = badSource_2(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000426077) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 20LL;
}

//----- (000000000042608D) ----------------------------------------------------
void goodG2B_103()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodG2BSource_2();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042610B) ----------------------------------------------------
unsigned __int64 __fastcall goodB2GSource_2(unsigned __int64 a1)
{
  unsigned __int64 v2; // [rsp+8h] [rbp-48h]
  char buf[32]; // [rsp+10h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v5; // [rsp+32h] [rbp-1Eh]
  int v6; // [rsp+34h] [rbp-1Ch]
  int v7; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v9; // [rsp+4Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0x19uLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 42610B: using guessed type char buf[32];

//----- (000000000042623E) ----------------------------------------------------
void goodB2G_93()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodB2GSource_2(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004262C3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_42_good()
{
  goodB2G_93();
  goodG2B_103();
}

//----- (00000000004262DD) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (00000000004263C8) ----------------------------------------------------
void goodB2G1_66()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (00000000004264C6) ----------------------------------------------------
void goodB2G2_66()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}

//----- (00000000004265B8) ----------------------------------------------------
void goodG2B1_56()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (0000000000426656) ----------------------------------------------------
void goodG2B2_56()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (00000000004266E8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_11_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_56();
  goodG2B2_56();
}

//----- (0000000000426716) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticFive_1 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_1 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648140: using guessed type int staticFive_1;

//----- (00000000004267FB) ----------------------------------------------------
void goodB2G1_67()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticFive_1 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_1 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 648140: using guessed type int staticFive_1;

//----- (00000000004268F3) ----------------------------------------------------
void goodB2G2_67()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  void *ptr; // [rsp+20h] [rbp-10h]
  size_t size; // [rsp+28h] [rbp-8h]

  size = 0LL;
  if ( staticFive_1 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0LL;
    v2 = 0LL;
    v3 = 0;
    if ( fgets(s, 26, stdin) )
      size = strtoul(s, 0LL, 0);
    else
      printLine("fgets() failed.");
  }
  if ( staticFive_1 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648140: using guessed type int staticFive_1;

//----- (00000000004269DF) ----------------------------------------------------
void goodG2B1_57()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_1 == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( staticFive_1 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648140: using guessed type int staticFive_1;

//----- (0000000000426A77) ----------------------------------------------------
void goodG2B2_57()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_1 == 5 )
    size = 20LL;
  if ( staticFive_1 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648140: using guessed type int staticFive_1;

//----- (0000000000426B03) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_07_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_57();
  goodG2B2_57();
}

//----- (0000000000426B31) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000426BAF) ----------------------------------------------------
void goodG2B_104()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000426C2D) ----------------------------------------------------
void goodB2G_94()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodB2GSource();
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000426CB2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61_good()
{
  goodG2B_104();
  goodB2G_94();
}

//----- (0000000000426CCC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 426CCC: using guessed type char buf[32];

//----- (0000000000426E2C) ----------------------------------------------------
void goodB2G1_68()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 426E2C: using guessed type char buf[32];

//----- (0000000000426F9F) ----------------------------------------------------
void goodB2G2_68()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v5 = recv(fd, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            size = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;
// 426F9F: using guessed type char buf[32];

//----- (0000000000427106) ----------------------------------------------------
void goodG2B1_58()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042719E) ----------------------------------------------------
void goodG2B2_58()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    size = 20LL;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 43A250: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042722A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_13_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_58();
  goodG2B2_58();
}

//----- (0000000000427258) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_badSink(v7);
}
// 427258: using guessed type char buf[32];

//----- (0000000000427397) ----------------------------------------------------
void goodG2B_105()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodG2BSink(0x14uLL);
}

//----- (00000000004273BD) ----------------------------------------------------
void goodB2G_95()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52b_goodB2GSink(v7);
}
// 4273BD: using guessed type char buf[32];

//----- (00000000004274FC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52_good()
{
  goodG2B_105();
  goodB2G_95();
}

//----- (0000000000427516) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000427580) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004275EA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_65b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042765B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_badSink(a1);
}

//----- (0000000000427675) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodG2BSink(a1);
}

//----- (000000000042768F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodB2GSink(a1);
}

//----- (00000000004276A9) ----------------------------------------------------
__int64 __fastcall badSource_3(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%zu", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004276D8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_bad()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = badSource_3(0LL);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000427756) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 20LL;
}

//----- (000000000042776C) ----------------------------------------------------
void goodG2B_106()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodG2BSource_3();
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004277EA) ----------------------------------------------------
__int64 __fastcall goodB2GSource_3(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%zu", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000427819) ----------------------------------------------------
void goodB2G_96()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  unsigned __int64 size; // [rsp+8h] [rbp-8h]

  size = goodB2GSource_3(0LL);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042789E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_42_good()
{
  goodB2G_96();
  goodG2B_106();
}

//----- (00000000004278B8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_badSink(a1);
}

//----- (00000000004278D2) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodG2BSink(a1);
}

//----- (00000000004278EC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53d_goodB2GSink(a1);
}

//----- (0000000000427906) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_2 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticTrue_2 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648144: using guessed type int staticTrue_2;
// 427906: using guessed type char buf[32];

//----- (0000000000427AAD) ----------------------------------------------------
void goodB2G1_69()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_2 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFalse_2 )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 648144: using guessed type int staticTrue_2;
// 648290: using guessed type int staticFalse_2;
// 427AAD: using guessed type char buf[32];

//----- (0000000000427C67) ----------------------------------------------------
void goodB2G2_69()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_2 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticTrue_2 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 648144: using guessed type int staticTrue_2;
// 427C67: using guessed type char buf[32];

//----- (0000000000427E15) ----------------------------------------------------
void goodG2B1_59()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( staticTrue_2 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648144: using guessed type int staticTrue_2;
// 648290: using guessed type int staticFalse_2;

//----- (0000000000427EAB) ----------------------------------------------------
void goodG2B2_59()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_2 )
    size = 20LL;
  if ( staticTrue_2 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648144: using guessed type int staticTrue_2;

//----- (0000000000427F35) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_05_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B1_59();
  goodG2B2_59();
}

//----- (0000000000427F63) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_badSource()
{
  return rand();
}

//----- (0000000000427F80) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodG2BSource()
{
  return 20LL;
}

//----- (0000000000427F96) ----------------------------------------------------
__int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_61b_goodB2GSource()
{
  return rand();
}

//----- (0000000000427FB3) ----------------------------------------------------
void __fastcall badSink_16(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042801D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  badSink_16(v7);
}
// 42801D: using guessed type char buf[32];

//----- (000000000042815C) ----------------------------------------------------
void __fastcall goodG2BSink_16(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004281C6) ----------------------------------------------------
void goodG2B_107()
{
  goodG2BSink_16(0x14uLL);
}

//----- (00000000004281EC) ----------------------------------------------------
void __fastcall goodB2GSink_11(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042825D) ----------------------------------------------------
void goodB2G_97()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  goodB2GSink_11(v7);
}
// 42825D: using guessed type char buf[32];

//----- (000000000042839C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_41_good()
{
  goodB2G_97();
  goodG2B_107();
}

//----- (00000000004283B6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_badSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482F0: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_badData;

//----- (0000000000428427) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodG2BSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 6482F8: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodG2BData;

//----- (0000000000428498) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68b_goodB2GSink()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  if ( (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData <= 5
    || (unsigned __int64)CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}
// 648300: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_68_goodB2GData;

//----- (0000000000428510) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_badSink(a1);
}

//----- (000000000042852A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodG2BSink(a1);
}

//----- (0000000000428544) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53c_goodB2GSink(a1);
}

//----- (000000000042855E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v7; // [rsp+4Ch] [rbp-4h]

  v4 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_badSink(&v4);
}
// 42855E: using guessed type char buf[32];

//----- (000000000042869D) ----------------------------------------------------
void goodG2B_108()
{
  __int64 v0; // [rsp+8h] [rbp-8h]

  v0 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodG2BSink((size_t *)&v0);
}

//----- (00000000004286C3) ----------------------------------------------------
void goodB2G_98()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  unsigned __int64 v4; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+44h] [rbp-Ch]
  int fd; // [rsp+48h] [rbp-8h]
  int v7; // [rsp+4Ch] [rbp-4h]

  v4 = 0LL;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0x19uLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v4 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63b_goodB2GSink(&v4);
}
// 4286C3: using guessed type char buf[32];

//----- (0000000000428802) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_63_good()
{
  goodG2B_108();
  goodB2G_98();
}

//----- (000000000042881C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_bad()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int16 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+28h] [rbp-28h]
  size_t size; // [rsp+30h] [rbp-20h]
  size_t *v7; // [rsp+38h] [rbp-18h]
  __int64 *v8; // [rsp+40h] [rbp-10h]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v8 = &v4;
  v7 = (size_t *)&v4;
  v4 = 0LL;
  v9 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v9 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  *v8 = v9;
  size = *v7;
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (000000000042891C) ----------------------------------------------------
void goodG2B_109()
{
  __int64 v0; // [rsp+0h] [rbp-30h]
  void *ptr; // [rsp+8h] [rbp-28h]
  size_t size; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+18h] [rbp-18h]
  __int64 *v4; // [rsp+20h] [rbp-10h]
  __int64 *v5; // [rsp+28h] [rbp-8h]

  v5 = &v0;
  v4 = &v0;
  v3 = 20LL;
  v0 = 20LL;
  size = 20LL;
  ptr = malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy((char *)ptr, "hello");
  printLine((const char *)ptr);
  free(ptr);
}

//----- (00000000004289C3) ----------------------------------------------------
void goodB2G_99()
{
  char s[8]; // [rsp+0h] [rbp-50h]
  __int64 v1; // [rsp+8h] [rbp-48h]
  __int64 v2; // [rsp+10h] [rbp-40h]
  __int16 v3; // [rsp+18h] [rbp-38h]
  __int64 v4; // [rsp+20h] [rbp-30h]
  void *ptr; // [rsp+28h] [rbp-28h]
  size_t size; // [rsp+30h] [rbp-20h]
  size_t *v7; // [rsp+38h] [rbp-18h]
  __int64 *v8; // [rsp+40h] [rbp-10h]
  unsigned __int64 v9; // [rsp+48h] [rbp-8h]

  v8 = &v4;
  v7 = (size_t *)&v4;
  v4 = 0LL;
  v9 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v9 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  *v8 = v9;
  size = *v7;
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}

//----- (0000000000428ACA) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_32_good()
{
  goodG2B_109();
  goodB2G_99();
}

//----- (0000000000428AE4) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428B4E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428BB8) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_52c_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428C29) ----------------------------------------------------
void __fastcall badSink_17(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428C93) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  badSink_17(v6);
}
// 428C93: using guessed type char buf[32];

//----- (0000000000428D89) ----------------------------------------------------
void __fastcall goodG2BSink_17(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428DF3) ----------------------------------------------------
void goodG2B_110()
{
  goodG2BSink_17(0x14uLL);
}

//----- (0000000000428E19) ----------------------------------------------------
void __fastcall goodB2GSink_12(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000428E8A) ----------------------------------------------------
void goodB2G_100()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  goodB2GSink_12(v6);
}
// 428E8A: using guessed type char buf[32];

//----- (0000000000428F80) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_41_good()
{
  goodB2G_100();
  goodG2B_110();
}

//----- (0000000000428F9A) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData = v7;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_badSink();
}
// 648318: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_badData;
// 428F9A: using guessed type char buf[32];

//----- (00000000004290E2) ----------------------------------------------------
void goodG2B_111()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodG2BSink();
}
// 648308: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodG2BData;

//----- (0000000000429111) ----------------------------------------------------
void goodB2G_101()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData = v7;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68b_goodB2GSink();
}
// 648310: using guessed type __int64 CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_goodB2GData;
// 429111: using guessed type char buf[32];

//----- (0000000000429259) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_68_good()
{
  goodG2B_111();
  goodB2G_101();
}

//----- (0000000000429273) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_badSink(a1);
}

//----- (000000000042928D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodG2BSink(a1);
}

//----- (00000000004292A7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54d_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54e_goodB2GSink(a1);
}

//----- (00000000004292C1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_badSink(v6);
}
// 4292C1: using guessed type char buf[32];

//----- (00000000004293B7) ----------------------------------------------------
void goodG2B_112()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodG2BSink(0x14uLL);
}

//----- (00000000004293DD) ----------------------------------------------------
void goodB2G_102()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52b_goodB2GSink(v6);
}
// 4293DD: using guessed type char buf[32];

//----- (00000000004294D3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_52_good()
{
  goodG2B_112();
  goodB2G_102();
}

//----- (00000000004294ED) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_badSink(a1);
}

//----- (0000000000429507) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodG2BSink(a1);
}

//----- (0000000000429521) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54c_goodB2GSink(a1);
}

//----- (000000000042953B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004295A5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042960F) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000429680) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004296EA) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000429754) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004297C5) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_badSink(a1);
}

//----- (00000000004297DF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodG2BSink(a1);
}

//----- (00000000004297F9) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54e_goodB2GSink(a1);
}

//----- (0000000000429813) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (0000000000429889) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodG2BSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (00000000004298FF) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodB2GSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042997C) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42997C: using guessed type char buf[32];

//----- (0000000000429AC4) ----------------------------------------------------
void goodB2G_103()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  in_addr_t v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+38h] [rbp-18h]
  int v5; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0x19uLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          size = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 429AC4: using guessed type char buf[32];

//----- (0000000000429C13) ----------------------------------------------------
void goodG2B_113()
{
  char *ptr; // [rsp+0h] [rbp-10h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (0000000000429C8B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_16_good()
{
  goodB2G_103();
  goodG2B_113();
}

//----- (0000000000429CA5) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticTrue_3 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648148: using guessed type int staticTrue_3;

//----- (0000000000429D47) ----------------------------------------------------
void goodB2G1_70()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticFalse_3 )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648148: using guessed type int staticTrue_3;
// 648294: using guessed type int staticFalse_3;

//----- (0000000000429DFF) ----------------------------------------------------
void goodB2G2_70()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_3 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticTrue_3 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648148: using guessed type int staticTrue_3;

//----- (0000000000429EAB) ----------------------------------------------------
void goodG2B1_60()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( staticTrue_3 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648148: using guessed type int staticTrue_3;
// 648294: using guessed type int staticFalse_3;

//----- (0000000000429F41) ----------------------------------------------------
void goodG2B2_60()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticTrue_3 )
    size = 20LL;
  if ( staticTrue_3 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648148: using guessed type int staticTrue_3;

//----- (0000000000429FCB) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_60();
  goodG2B2_60();
}

//----- (0000000000429FF9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_badSink(v4);
}

//----- (000000000042A078) ----------------------------------------------------
void goodG2B_114()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodG2BSink(0x14uLL);
}

//----- (000000000042A09E) ----------------------------------------------------
void goodB2G_104()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+8h] [rbp-28h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int16 v3; // [rsp+18h] [rbp-18h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = 0LL;
  *(_QWORD *)s = 0LL;
  v1 = 0LL;
  v2 = 0LL;
  v3 = 0;
  if ( fgets(s, 26, stdin) )
    v4 = strtoul(s, 0LL, 0);
  else
    printLine("fgets() failed.");
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54b_goodB2GSink(v4);
}

//----- (000000000042A11D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54_good()
{
  goodG2B_114();
  goodB2G_104();
}

//----- (000000000042A137) ----------------------------------------------------
void __fastcall badSink_18(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A1A1) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  badSink_18(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042A1DC) ----------------------------------------------------
void __fastcall goodG2BSink_18(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A246) ----------------------------------------------------
void goodG2B_115()
{
  goodG2BSink_18(0x14uLL);
}

//----- (000000000042A26C) ----------------------------------------------------
void __fastcall goodB2GSink_13(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A2DD) ----------------------------------------------------
void goodB2G_105()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  goodB2GSink_13(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042A318) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_41_good()
{
  goodB2G_105();
  goodG2B_115();
}

//----- (000000000042A332) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_badSink(a1);
}

//----- (000000000042A34C) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodG2BSink(a1);
}

//----- (000000000042A366) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53c_goodB2GSink(a1);
}

//----- (000000000042A380) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_bad()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  in_addr_t v3; // [rsp+24h] [rbp-3Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-30h]
  void *ptr; // [rsp+40h] [rbp-20h]
  size_t size; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+58h] [rbp-8h]

  v9 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v9;
  size = v9;
  if ( v9 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42A380: using guessed type char buf[32];

//----- (000000000042A4D6) ----------------------------------------------------
void goodG2B_116()
{
  char *ptr; // [rsp+8h] [rbp-18h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000042A55C) ----------------------------------------------------
void goodB2G_106()
{
  char buf[32]; // [rsp+0h] [rbp-60h]
  __int16 s; // [rsp+20h] [rbp-40h]
  uint16_t v2; // [rsp+22h] [rbp-3Eh]
  in_addr_t v3; // [rsp+24h] [rbp-3Ch]
  unsigned __int64 v4; // [rsp+30h] [rbp-30h]
  void *ptr; // [rsp+40h] [rbp-20h]
  size_t size; // [rsp+48h] [rbp-18h]
  int v7; // [rsp+50h] [rbp-10h]
  int fd; // [rsp+54h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+58h] [rbp-8h]

  v9 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0x19uLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v4 = v9;
  size = v9;
  if ( v9 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42A55C: using guessed type char buf[32];

//----- (000000000042A6B9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_34_good()
{
  goodG2B_116();
  goodB2G_106();
}

//----- (000000000042A6D3) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A73D) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A7A7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_52c_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042A818) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_badSink(v7);
}
// 42A818: using guessed type char buf[32];

//----- (000000000042A957) ----------------------------------------------------
void goodG2B_117()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodG2BSink(0x14uLL);
}

//----- (000000000042A97D) ----------------------------------------------------
void goodB2G_107()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  int v4; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v6; // [rsp+44h] [rbp-Ch]
  unsigned __int64 v7; // [rsp+48h] [rbp-8h]

  v7 = 0LL;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0x19uLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53b_goodB2GSink(v7);
}
// 42A97D: using guessed type char buf[32];

//----- (000000000042AABC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_53_good()
{
  goodG2B_117();
  goodB2G_107();
}

//----- (000000000042AAD6) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_badSink(a1);
}

//----- (000000000042AAF0) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodG2BSink(a1);
}

//----- (000000000042AB0A) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_54d_goodB2GSink(a1);
}

//----- (000000000042AB24) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 42AB24: using guessed type char buf[32];

//----- (000000000042ACD3) ----------------------------------------------------
void goodB2G1_71()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsFalse() )
  {
    printLine("Benign, fixed string");
  }
  else if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 42ACD3: using guessed type char buf[32];

//----- (000000000042AE95) ----------------------------------------------------
void goodB2G2_71()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 42AE95: using guessed type char buf[32];

//----- (000000000042B04B) ----------------------------------------------------
void goodG2B1_61()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000042B0E9) ----------------------------------------------------
void goodG2B2_61()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    size = 20LL;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}

//----- (000000000042B17B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_11_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_61();
  goodG2B2_61();
}

//----- (000000000042B1A9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_bad()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive_2 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_2 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 64814C: using guessed type int staticFive_2;
// 42B1A9: using guessed type char buf[32];

//----- (000000000042B352) ----------------------------------------------------
void goodB2G1_72()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive_2 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_2 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 64814C: using guessed type int staticFive_2;
// 42B352: using guessed type char buf[32];

//----- (000000000042B50E) ----------------------------------------------------
void goodB2G2_72()
{
  char buf[32]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+20h] [rbp-30h]
  uint16_t v2; // [rsp+22h] [rbp-2Eh]
  int v3; // [rsp+24h] [rbp-2Ch]
  void *ptr; // [rsp+30h] [rbp-20h]
  int v5; // [rsp+3Ch] [rbp-14h]
  int fd; // [rsp+40h] [rbp-10h]
  int v7; // [rsp+44h] [rbp-Ch]
  size_t size; // [rsp+48h] [rbp-8h]

  size = 0LL;
  if ( staticFive_2 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0x19uLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              size = strtoul(buf, 0LL, 0);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_2 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 64814C: using guessed type int staticFive_2;
// 42B50E: using guessed type char buf[32];

//----- (000000000042B6BE) ----------------------------------------------------
void goodG2B1_62()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_2 == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( staticFive_2 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64814C: using guessed type int staticFive_2;

//----- (000000000042B756) ----------------------------------------------------
void goodG2B2_62()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_2 == 5 )
    size = 20LL;
  if ( staticFive_2 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 64814C: using guessed type int staticFive_2;

//----- (000000000042B7E2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_07_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B1_62();
  goodG2B2_62();
}

//----- (000000000042B810) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_bad()
{
  size_t v0; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  size = v0;
  if ( v0 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042B8AB) ----------------------------------------------------
void goodG2B_118()
{
  char *ptr; // [rsp+8h] [rbp-18h]

  ptr = (char *)malloc(0x14uLL);
  if ( !ptr )
    exit(-1);
  strcpy(ptr, "hello");
  printLine(ptr);
  free(ptr);
}

//----- (000000000042B931) ----------------------------------------------------
void goodB2G_108()
{
  size_t v0; // [rsp+8h] [rbp-18h]
  void *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  size = v0;
  if ( v0 <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy((char *)ptr, "hello");
    printLine((const char *)ptr);
    free(ptr);
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042B9D3) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_34_good()
{
  goodG2B_118();
  goodB2G_108();
}

//----- (000000000042B9ED) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_bad()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticFive_3 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648150: using guessed type int staticFive_3;

//----- (000000000042BA91) ----------------------------------------------------
void goodB2G1_73()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticFive_3 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
  else
  {
    printLine("Benign, fixed string");
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648150: using guessed type int staticFive_3;

//----- (000000000042BB4B) ----------------------------------------------------
void goodB2G2_73()
{
  size_t size; // [rsp+0h] [rbp-10h]
  void *ptr; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%zu", &size);
  if ( staticFive_3 == 5 )
  {
    if ( size <= 5 || size > 0x63 )
    {
      printLine("Input is less than the length of the source string or too large");
    }
    else
    {
      ptr = malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy((char *)ptr, "hello");
      printLine((const char *)ptr);
      free(ptr);
    }
  }
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 648150: using guessed type int staticFive_3;

//----- (000000000042BBF9) ----------------------------------------------------
void goodG2B1_63()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_3 == 5 )
    size = 20LL;
  else
    printLine("Benign, fixed string");
  if ( staticFive_3 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648150: using guessed type int staticFive_3;

//----- (000000000042BC91) ----------------------------------------------------
void goodG2B2_63()
{
  char *ptr; // [rsp+0h] [rbp-10h]
  size_t size; // [rsp+8h] [rbp-8h]

  size = 0LL;
  if ( staticFive_3 == 5 )
    size = 20LL;
  if ( staticFive_3 == 5 )
  {
    if ( size <= 5 )
    {
      printLine("Input is less than the length of the source string");
    }
    else
    {
      ptr = (char *)malloc(size);
      if ( !ptr )
        exit(-1);
      strcpy(ptr, "hello");
      printLine(ptr);
      free(ptr);
    }
  }
}
// 648150: using guessed type int staticFive_3;

//----- (000000000042BD1D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_07_good()
{
  goodB2G1_73();
  goodB2G2_73();
  goodG2B1_63();
  goodG2B2_63();
}

//----- (000000000042BD4B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BDC1) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodG2BSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BE37) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_goodB2GSink(__int64 a1)
{
  char *ptr; // [rsp+10h] [rbp-10h]
  size_t size; // [rsp+18h] [rbp-8h]

  size = *(_QWORD *)(a1 + 16);
  if ( size <= 5 || size > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(size);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BEB4) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BF1E) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BF88) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_65b_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042BFF9) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_bad()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_badSink(v6);
}
// 42BFF9: using guessed type char buf[32];

//----- (000000000042C0EF) ----------------------------------------------------
void goodG2B_119()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodG2BSink(0x14uLL);
}

//----- (000000000042C115) ----------------------------------------------------
void goodB2G_109()
{
  char buf[32]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v2; // [rsp+22h] [rbp-1Eh]
  in_addr_t v3; // [rsp+24h] [rbp-1Ch]
  int v4; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  unsigned __int64 v6; // [rsp+38h] [rbp-8h]

  v6 = 0LL;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0x19uLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = strtoul(buf, 0LL, 0);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51b_goodB2GSink(v6);
}
// 42C115: using guessed type char buf[32];

//----- (000000000042C20B) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_connect_socket_51_good()
{
  goodG2B_119();
  goodB2G_109();
}

//----- (000000000042C225) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_badSink(v0);
}

//----- (000000000042C24E) ----------------------------------------------------
void goodG2B_120()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodG2BSink(0x14uLL);
}

//----- (000000000042C274) ----------------------------------------------------
void goodB2G_110()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54b_goodB2GSink(v0);
}

//----- (000000000042C29D) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_54_good()
{
  goodG2B_120();
  goodB2G_110();
}

//----- (000000000042C2B7) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_badSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042C321) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodG2BSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 )
  {
    printLine("Input is less than the length of the source string");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042C38B) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_54e_goodB2GSink(size_t a1)
{
  char *ptr; // [rsp+18h] [rbp-8h]

  if ( a1 <= 5 || a1 > 0x63 )
  {
    printLine("Input is less than the length of the source string or too large");
  }
  else
  {
    ptr = (char *)malloc(a1);
    if ( !ptr )
      exit(-1);
    strcpy(ptr, "hello");
    printLine(ptr);
    free(ptr);
  }
}

//----- (000000000042C3FC) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_bad()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  int v3; // [rsp+24h] [rbp-4Ch]
  char v4; // [rsp+30h] [rbp-40h]
  unsigned __int64 v5; // [rsp+40h] [rbp-30h]
  int v6; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int v8; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+68h] [rbp-8h]

  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0x19uLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_badSink((__int64)&v4);
}
// 42C3FC: using guessed type char buf[32];

//----- (000000000042C543) ----------------------------------------------------
void goodG2B_121()
{
  char v0; // [rsp+0h] [rbp-30h]
  __int64 v1; // [rsp+10h] [rbp-20h]
  __int64 v2; // [rsp+28h] [rbp-8h]

  v2 = 20LL;
  v1 = 20LL;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodG2BSink((__int64)&v0);
}

//----- (000000000042C571) ----------------------------------------------------
void goodB2G_111()
{
  char buf[32]; // [rsp+0h] [rbp-70h]
  __int16 s; // [rsp+20h] [rbp-50h]
  uint16_t v2; // [rsp+22h] [rbp-4Eh]
  int v3; // [rsp+24h] [rbp-4Ch]
  char v4; // [rsp+30h] [rbp-40h]
  unsigned __int64 v5; // [rsp+40h] [rbp-30h]
  int v6; // [rsp+5Ch] [rbp-14h]
  int fd; // [rsp+60h] [rbp-10h]
  int v8; // [rsp+64h] [rbp-Ch]
  unsigned __int64 v9; // [rsp+68h] [rbp-8h]

  v9 = 0LL;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0x19uLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = strtoul(buf, 0LL, 0);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66b_goodB2GSink((__int64)&v4);
}
// 42C571: using guessed type char buf[32];

//----- (000000000042C6B8) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_66_good()
{
  goodG2B_121();
  goodB2G_111();
}

//----- (000000000042C6D2) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042C70D) ----------------------------------------------------
void goodG2B_122()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodG2BSink(0x14uLL);
}

//----- (000000000042C733) ----------------------------------------------------
void goodB2G_112()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = 0LL;
  __isoc99_fscanf(stdin, "%zu", &v0);
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53b_goodB2GSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042C76E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_53_good()
{
  goodG2B_122();
  goodB2G_112();
}

//----- (000000000042C788) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_badSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_badSink(a1);
}

//----- (000000000042C7A2) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodG2BSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodG2BSink(a1);
}

//----- (000000000042C7BC) ----------------------------------------------------
void __fastcall CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53c_goodB2GSink(size_t a1)
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_53d_goodB2GSink(a1);
}

//----- (000000000042C7D6) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_bad()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_badSink(v0);
}

//----- (000000000042C7FF) ----------------------------------------------------
void goodG2B_123()
{
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodG2BSink(0x14uLL);
}

//----- (000000000042C825) ----------------------------------------------------
void goodB2G_113()
{
  size_t v0; // [rsp+8h] [rbp-8h]

  v0 = rand();
  CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53b_goodB2GSink(v0);
}

//----- (000000000042C84E) ----------------------------------------------------
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_53_good()
{
  goodG2B_123();
  goodB2G_113();
}

//----- (000000000042C868) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000042C889) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000042C8B4) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000042C8D5) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000042C8FA) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000042C920) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000042C944) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000042C968) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000042C98C) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000042C9B0) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000042C9E0) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000042CA01) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000042CA25) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000042CA50) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000042CA7C) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000042CAD3) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400CA0: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042CBAC) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400DB0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042CC60) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000042CC6B) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000042CC76) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000042CC8C) ----------------------------------------------------
void good1()
{
  ;
}

//----- (000000000042CC92) ----------------------------------------------------
void good2()
{
  ;
}

//----- (000000000042CC98) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000042CC9E) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000042CCA4) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000042CCAA) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000042CCB0) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000042CCB6) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000042CCBC) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000042CCC2) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000042CCC8) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000042CCCE) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000042CCD4) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000042CCDA) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000042CCE0) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000042CCE6) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000042CCEC) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000042CCF2) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000042CCF8) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000042CD2B) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000042CDCF) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000042CE03) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000042CE22) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000042CE97) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000042CEB1) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000042CECB) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000042CF00) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 647DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 647DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000042CF74) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 1321 function(s) have been successfully decompiled
