/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400BF0();
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// int close(int fd);
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int getsockname(int fd, struct sockaddr *addr, socklen_t *len);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
// int socket(int domain, int type, int protocol);
// char *inet_ntoa(struct in_addr in);
// int wprintf(const wchar_t *format, ...);
// int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, int flags);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// int strcmp(const char *s1, const char *s2);
// ssize_t send(int fd, const void *buf, size_t n, int flags);
// void srand(unsigned int seed);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// in_addr_t inet_addr(const char *cp);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int CWE510_Trapdoor__hostname_based_logic_09_bad();
int good1();
int good2();
int CWE510_Trapdoor__hostname_based_logic_09_good();
int CWE510_Trapdoor__network_listen_13_bad();
int CWE510_Trapdoor__ip_based_logic_03_bad();
int good1_0();
int good2_0();
int CWE510_Trapdoor__ip_based_logic_03_good();
int CWE510_Trapdoor__network_connection_09_bad();
int CWE510_Trapdoor__network_connection_11_bad();
int CWE510_Trapdoor__network_connection_02_bad();
int CWE510_Trapdoor__ip_based_logic_14_bad();
int good1_1();
int good2_1();
int CWE510_Trapdoor__ip_based_logic_14_good();
int CWE510_Trapdoor__ip_based_logic_06_bad();
int good1_2();
int good2_2();
int CWE510_Trapdoor__ip_based_logic_06_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE510_Trapdoor__ip_based_logic_08_bad();
int good1_3();
int good2_3();
int CWE510_Trapdoor__ip_based_logic_08_good();
int CWE510_Trapdoor__network_connection_16_bad();
int CWE510_Trapdoor__network_connection_10_bad();
int CWE510_Trapdoor__hostname_based_logic_03_bad();
int good1_4();
int good2_4();
int CWE510_Trapdoor__hostname_based_logic_03_good();
int CWE510_Trapdoor__ip_based_logic_02_bad();
int good1_5();
int good2_5();
int CWE510_Trapdoor__ip_based_logic_02_good();
int CWE510_Trapdoor__network_connection_15_bad();
int CWE510_Trapdoor__network_listen_09_bad();
int CWE510_Trapdoor__ip_based_logic_11_bad();
int good1_6();
int good2_6();
int CWE510_Trapdoor__ip_based_logic_11_good();
int CWE510_Trapdoor__hostname_based_logic_14_bad();
int good1_7();
int good2_7();
int CWE510_Trapdoor__hostname_based_logic_14_good();
int CWE510_Trapdoor__ip_based_logic_18_bad();
int good1_8();
int CWE510_Trapdoor__ip_based_logic_18_good();
int CWE510_Trapdoor__network_listen_03_bad();
int CWE510_Trapdoor__hostname_based_logic_18_bad();
int good1_9();
int CWE510_Trapdoor__hostname_based_logic_18_good();
int CWE510_Trapdoor__network_listen_14_bad();
__int64 staticReturnsTrue_0();
int CWE510_Trapdoor__network_connection_08_bad();
int CWE510_Trapdoor__ip_based_logic_04_bad();
int good1_10();
int good2_8();
int CWE510_Trapdoor__ip_based_logic_04_good();
int CWE510_Trapdoor__network_listen_18_bad();
__int64 staticReturnsTrue_1();
int CWE510_Trapdoor__network_listen_08_bad();
int CWE510_Trapdoor__ip_based_logic_07_bad();
int good1_11();
int good2_9();
int CWE510_Trapdoor__ip_based_logic_07_good();
void CWE510_Trapdoor__ip_based_logic_17_bad();
void good1_12();
void CWE510_Trapdoor__ip_based_logic_17_good();
int CWE510_Trapdoor__hostname_based_logic_12_bad();
int good1_13();
int CWE510_Trapdoor__hostname_based_logic_12_good();
int CWE510_Trapdoor__network_listen_16_bad();
int CWE510_Trapdoor__hostname_based_logic_04_bad();
int good1_14();
int good2_10();
int CWE510_Trapdoor__hostname_based_logic_04_good();
int CWE510_Trapdoor__network_connection_06_bad();
int CWE510_Trapdoor__hostname_based_logic_07_bad();
int good1_15();
int good2_11();
int CWE510_Trapdoor__hostname_based_logic_07_good();
int CWE510_Trapdoor__ip_based_logic_16_bad();
int good1_16();
int CWE510_Trapdoor__ip_based_logic_16_good();
void CWE510_Trapdoor__hostname_based_logic_17_bad();
void good1_17();
void CWE510_Trapdoor__hostname_based_logic_17_good();
int CWE510_Trapdoor__network_connection_07_bad();
int CWE510_Trapdoor__ip_based_logic_10_bad();
int good1_18();
int good2_12();
int CWE510_Trapdoor__ip_based_logic_10_good();
int CWE510_Trapdoor__network_listen_11_bad();
int CWE510_Trapdoor__network_listen_07_bad();
int CWE510_Trapdoor__ip_based_logic_15_bad();
int good1_19();
int good2_13();
int CWE510_Trapdoor__ip_based_logic_15_good();
int CWE510_Trapdoor__hostname_based_logic_11_bad();
int good1_20();
int good2_14();
int CWE510_Trapdoor__hostname_based_logic_11_good();
int CWE510_Trapdoor__hostname_based_logic_02_bad();
int good1_21();
int good2_15();
int CWE510_Trapdoor__hostname_based_logic_02_good();
void CWE510_Trapdoor__network_listen_17_bad();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_0();
int CWE510_Trapdoor__hostname_based_logic_08_bad();
int good1_22();
int good2_16();
int CWE510_Trapdoor__hostname_based_logic_08_good();
int CWE510_Trapdoor__ip_based_logic_05_bad();
int good1_23();
int good2_17();
int CWE510_Trapdoor__ip_based_logic_05_good();
int CWE510_Trapdoor__ip_based_logic_01_bad();
int good1_24();
int CWE510_Trapdoor__ip_based_logic_01_good();
int CWE510_Trapdoor__network_listen_02_bad();
int CWE510_Trapdoor__hostname_based_logic_16_bad();
int good1_25();
int CWE510_Trapdoor__hostname_based_logic_16_good();
int CWE510_Trapdoor__hostname_based_logic_10_bad();
int good1_26();
int good2_18();
int CWE510_Trapdoor__hostname_based_logic_10_good();
int CWE510_Trapdoor__hostname_based_logic_15_bad();
int good1_27();
int good2_19();
int CWE510_Trapdoor__hostname_based_logic_15_good();
int CWE510_Trapdoor__network_connection_03_bad();
int CWE510_Trapdoor__network_connection_13_bad();
int CWE510_Trapdoor__hostname_based_logic_05_bad();
int good1_28();
int good2_20();
int CWE510_Trapdoor__hostname_based_logic_05_good();
int CWE510_Trapdoor__network_connection_14_bad();
int CWE510_Trapdoor__hostname_based_logic_01_bad();
int good1_29();
int CWE510_Trapdoor__hostname_based_logic_01_good();
int CWE510_Trapdoor__network_listen_15_bad();
int CWE510_Trapdoor__network_connection_05_bad();
int CWE510_Trapdoor__network_connection_18_bad();
int CWE510_Trapdoor__network_listen_05_bad();
int CWE510_Trapdoor__ip_based_logic_09_bad();
int good1_30();
int good2_21();
int CWE510_Trapdoor__ip_based_logic_09_good();
int CWE510_Trapdoor__network_listen_01_bad();
int CWE510_Trapdoor__network_connection_04_bad();
int CWE510_Trapdoor__ip_based_logic_13_bad();
int good1_31();
int good2_22();
int CWE510_Trapdoor__ip_based_logic_13_good();
int CWE510_Trapdoor__network_listen_10_bad();
int CWE510_Trapdoor__network_connection_01_bad();
int CWE510_Trapdoor__network_listen_04_bad();
int CWE510_Trapdoor__hostname_based_logic_06_bad();
int good1_32();
int good2_23();
int CWE510_Trapdoor__hostname_based_logic_06_good();
int CWE510_Trapdoor__ip_based_logic_12_bad();
int good1_33();
int CWE510_Trapdoor__ip_based_logic_12_good();
int CWE510_Trapdoor__hostname_based_logic_13_bad();
int good1_34();
int good2_24();
int CWE510_Trapdoor__hostname_based_logic_13_good();
int CWE510_Trapdoor__network_listen_06_bad();
void CWE510_Trapdoor__network_connection_17_bad();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_35();
void good2_25();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_611010)(void) = NULL; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticFive_1 = 5; // weak
int staticFive_2 = 5; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticTrue_2 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
char completed_6355; // weak
int staticFalse; // weak
int staticFalse_0; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400BD0) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400E20: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400BF0) ----------------------------------------------------
__int64 sub_400BF0()
{
  return qword_611010();
}
// 611010: using guessed type __int64 (*qword_611010)(void);

//----- (0000000000400E30) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400E36: positive sp value 8 has been found

//----- (0000000000400E60) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6361439LL - (_QWORD)&completed_6355;
  if ( (unsigned __int64)(6361439LL - (_QWORD)&completed_6355) > 0xE )
    result = 0LL;
  return result;
}
// 611158: using guessed type char completed_6355;

//----- (0000000000400E90) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400ED0) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 611158: using guessed type char completed_6355;

//----- (0000000000400EF0) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400EF0: could not find valid save-restore pair for rbp

//----- (0000000000400F1D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE510_Trapdoor__ip_based_logic_11_good();");
  CWE510_Trapdoor__ip_based_logic_11_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_14_good();");
  CWE510_Trapdoor__hostname_based_logic_14_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_15_good();");
  CWE510_Trapdoor__hostname_based_logic_15_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_08_good();");
  CWE510_Trapdoor__ip_based_logic_08_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_04_good();");
  CWE510_Trapdoor__ip_based_logic_04_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_14_good();");
  CWE510_Trapdoor__ip_based_logic_14_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_11_good();");
  CWE510_Trapdoor__hostname_based_logic_11_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_13_good();");
  CWE510_Trapdoor__ip_based_logic_13_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_03_good();");
  CWE510_Trapdoor__ip_based_logic_03_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_01_good();");
  CWE510_Trapdoor__hostname_based_logic_01_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_18_good();");
  CWE510_Trapdoor__hostname_based_logic_18_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_16_good();");
  CWE510_Trapdoor__hostname_based_logic_16_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_15_good();");
  CWE510_Trapdoor__ip_based_logic_15_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_04_good();");
  CWE510_Trapdoor__hostname_based_logic_04_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_17_good();");
  CWE510_Trapdoor__ip_based_logic_17_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_13_good();");
  CWE510_Trapdoor__hostname_based_logic_13_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_16_good();");
  CWE510_Trapdoor__ip_based_logic_16_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_06_good();");
  CWE510_Trapdoor__ip_based_logic_06_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_08_good();");
  CWE510_Trapdoor__hostname_based_logic_08_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_02_good();");
  CWE510_Trapdoor__ip_based_logic_02_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_09_good();");
  CWE510_Trapdoor__hostname_based_logic_09_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_10_good();");
  CWE510_Trapdoor__ip_based_logic_10_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_09_good();");
  CWE510_Trapdoor__ip_based_logic_09_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_17_good();");
  CWE510_Trapdoor__hostname_based_logic_17_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_01_good();");
  CWE510_Trapdoor__ip_based_logic_01_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_10_good();");
  CWE510_Trapdoor__hostname_based_logic_10_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_02_good();");
  CWE510_Trapdoor__hostname_based_logic_02_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_03_good();");
  CWE510_Trapdoor__hostname_based_logic_03_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_05_good();");
  CWE510_Trapdoor__hostname_based_logic_05_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_12_good();");
  CWE510_Trapdoor__ip_based_logic_12_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_05_good();");
  CWE510_Trapdoor__ip_based_logic_05_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_07_good();");
  CWE510_Trapdoor__ip_based_logic_07_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_07_good();");
  CWE510_Trapdoor__hostname_based_logic_07_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_06_good();");
  CWE510_Trapdoor__hostname_based_logic_06_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_18_good();");
  CWE510_Trapdoor__ip_based_logic_18_good();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_12_good();");
  CWE510_Trapdoor__hostname_based_logic_12_good();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_11_bad();");
  CWE510_Trapdoor__ip_based_logic_11_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_14_bad();");
  CWE510_Trapdoor__hostname_based_logic_14_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_09_bad();");
  CWE510_Trapdoor__network_listen_09_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_01_bad();");
  CWE510_Trapdoor__network_connection_01_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_15_bad();");
  CWE510_Trapdoor__network_listen_15_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_15_bad();");
  CWE510_Trapdoor__hostname_based_logic_15_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_10_bad();");
  CWE510_Trapdoor__network_connection_10_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_08_bad();");
  CWE510_Trapdoor__ip_based_logic_08_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_04_bad();");
  CWE510_Trapdoor__ip_based_logic_04_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_14_bad();");
  CWE510_Trapdoor__ip_based_logic_14_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_11_bad();");
  CWE510_Trapdoor__hostname_based_logic_11_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_17_bad();");
  CWE510_Trapdoor__network_listen_17_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_13_bad();");
  CWE510_Trapdoor__ip_based_logic_13_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_10_bad();");
  CWE510_Trapdoor__network_listen_10_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_03_bad();");
  CWE510_Trapdoor__ip_based_logic_03_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_01_bad();");
  CWE510_Trapdoor__hostname_based_logic_01_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_18_bad();");
  CWE510_Trapdoor__hostname_based_logic_18_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_16_bad();");
  CWE510_Trapdoor__hostname_based_logic_16_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_09_bad();");
  CWE510_Trapdoor__network_connection_09_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_11_bad();");
  CWE510_Trapdoor__network_listen_11_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_16_bad();");
  CWE510_Trapdoor__network_connection_16_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_15_bad();");
  CWE510_Trapdoor__ip_based_logic_15_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_04_bad();");
  CWE510_Trapdoor__hostname_based_logic_04_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_15_bad();");
  CWE510_Trapdoor__network_connection_15_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_14_bad();");
  CWE510_Trapdoor__network_connection_14_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_17_bad();");
  CWE510_Trapdoor__ip_based_logic_17_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_13_bad();");
  CWE510_Trapdoor__network_connection_13_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_13_bad();");
  CWE510_Trapdoor__hostname_based_logic_13_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_01_bad();");
  CWE510_Trapdoor__network_listen_01_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_16_bad();");
  CWE510_Trapdoor__ip_based_logic_16_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_03_bad();");
  CWE510_Trapdoor__network_connection_03_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_07_bad();");
  CWE510_Trapdoor__network_connection_07_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_17_bad();");
  CWE510_Trapdoor__network_connection_17_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_06_bad();");
  CWE510_Trapdoor__ip_based_logic_06_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_08_bad();");
  CWE510_Trapdoor__hostname_based_logic_08_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_08_bad();");
  CWE510_Trapdoor__network_listen_08_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_05_bad();");
  CWE510_Trapdoor__network_connection_05_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_02_bad();");
  CWE510_Trapdoor__ip_based_logic_02_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_09_bad();");
  CWE510_Trapdoor__hostname_based_logic_09_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_10_bad();");
  CWE510_Trapdoor__ip_based_logic_10_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_16_bad();");
  CWE510_Trapdoor__network_listen_16_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_07_bad();");
  CWE510_Trapdoor__network_listen_07_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_13_bad();");
  CWE510_Trapdoor__network_listen_13_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_09_bad();");
  CWE510_Trapdoor__ip_based_logic_09_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_17_bad();");
  CWE510_Trapdoor__hostname_based_logic_17_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_01_bad();");
  CWE510_Trapdoor__ip_based_logic_01_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_14_bad();");
  CWE510_Trapdoor__network_listen_14_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_10_bad();");
  CWE510_Trapdoor__hostname_based_logic_10_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_06_bad();");
  CWE510_Trapdoor__network_connection_06_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_02_bad();");
  CWE510_Trapdoor__hostname_based_logic_02_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_03_bad();");
  CWE510_Trapdoor__hostname_based_logic_03_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_02_bad();");
  CWE510_Trapdoor__network_listen_02_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_02_bad();");
  CWE510_Trapdoor__network_connection_02_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_05_bad();");
  CWE510_Trapdoor__hostname_based_logic_05_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_12_bad();");
  CWE510_Trapdoor__ip_based_logic_12_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_08_bad();");
  CWE510_Trapdoor__network_connection_08_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_04_bad();");
  CWE510_Trapdoor__network_listen_04_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_11_bad();");
  CWE510_Trapdoor__network_connection_11_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_18_bad();");
  CWE510_Trapdoor__network_connection_18_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_05_bad();");
  CWE510_Trapdoor__ip_based_logic_05_bad();
  printLine("Calling CWE510_Trapdoor__network_connection_04_bad();");
  CWE510_Trapdoor__network_connection_04_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_07_bad();");
  CWE510_Trapdoor__ip_based_logic_07_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_18_bad();");
  CWE510_Trapdoor__network_listen_18_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_07_bad();");
  CWE510_Trapdoor__hostname_based_logic_07_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_06_bad();");
  CWE510_Trapdoor__network_listen_06_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_05_bad();");
  CWE510_Trapdoor__network_listen_05_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_06_bad();");
  CWE510_Trapdoor__hostname_based_logic_06_bad();
  printLine("Calling CWE510_Trapdoor__ip_based_logic_18_bad();");
  CWE510_Trapdoor__ip_based_logic_18_bad();
  printLine("Calling CWE510_Trapdoor__network_listen_03_bad();");
  CWE510_Trapdoor__network_listen_03_bad();
  printLine("Calling CWE510_Trapdoor__hostname_based_logic_12_bad();");
  CWE510_Trapdoor__hostname_based_logic_12_bad();
  return 0;
}
// 61116C: using guessed type int globalArgc;
// 611170: using guessed type __int64 globalArgv;

//----- (00000000004017A0) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_09_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000401959) ----------------------------------------------------
int good1()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF14: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000401A78) ----------------------------------------------------
int good2()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000401B8C) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_09_good()
{
  good1();
  return good2();
}

//----- (0000000000401BA6) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_13_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000401C91) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_03_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (0000000000401DFF) ----------------------------------------------------
int good1_0()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000401F05) ----------------------------------------------------
int good2_0()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040200B) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_03_good()
{
  good1_0();
  return good2_0();
}

//----- (0000000000402025) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_09_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004020C6) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_11_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}

//----- (000000000040216B) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_02_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (00000000004021FE) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_14_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (000000000040237B) ----------------------------------------------------
int good1_1()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( globalFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (000000000040249B) ----------------------------------------------------
int good2_1()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (00000000004025B0) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_14_good()
{
  good1_1();
  return good2_1();
}

//----- (00000000004025CA) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_06_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (0000000000402746) ----------------------------------------------------
int good1_2()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000402865) ----------------------------------------------------
int good2_2()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000402979) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_06_good()
{
  good1_2();
  return good2_2();
}

//----- (0000000000402993) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (000000000040299E) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (00000000004029A9) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_08_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue();
  if ( (_DWORD)v0 )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}

//----- (0000000000402B29) ----------------------------------------------------
int good1_3()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000402C4C) ----------------------------------------------------
int good2_3()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue();
  if ( (_DWORD)v0 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000402D64) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_08_good()
{
  good1_3();
  return good2_3();
}

//----- (0000000000402D7E) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_16_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (0000000000402E12) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_10_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 61114C: using guessed type int globalTrue;

//----- (0000000000402EB3) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_03_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (000000000040305E) ----------------------------------------------------
int good1_4()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000403164) ----------------------------------------------------
int good2_4()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040326A) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_03_good()
{
  good1_4();
  return good2_4();
}

//----- (0000000000403284) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_02_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (00000000004033F2) ----------------------------------------------------
int good1_5()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004034F8) ----------------------------------------------------
int good2_5()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004035FE) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_02_good()
{
  good1_5();
  return good2_5();
}

//----- (0000000000403618) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_15_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (00000000004036AC) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_09_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000403796) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_11_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}

//----- (0000000000403916) ----------------------------------------------------
int good1_6()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000403A39) ----------------------------------------------------
int good2_6()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000403B51) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_11_good()
{
  good1_6();
  return good2_6();
}

//----- (0000000000403B6B) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_14_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (0000000000403D25) ----------------------------------------------------
int good1_7()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( globalFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (0000000000403E45) ----------------------------------------------------
int good2_7()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611150: using guessed type int globalFive;

//----- (0000000000403F5A) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_14_good()
{
  good1_7();
  return good2_7();
}

//----- (0000000000403F74) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_18_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (00000000004040E3) ----------------------------------------------------
int good1_8()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004041EA) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_18_good()
{
  return good1_8();
}

//----- (00000000004041FA) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_03_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (00000000004042D6) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_18_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (0000000000404482) ----------------------------------------------------
int good1_9()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000404589) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_18_good()
{
  return good1_9();
}

//----- (0000000000404599) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_14_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 611150: using guessed type int globalFive;

//----- (0000000000404684) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040468F) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_08_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = staticReturnsTrue_0();
  if ( result )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}

//----- (0000000000404734) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_04_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (00000000004048AF) ----------------------------------------------------
int good1_10()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004049CD) ----------------------------------------------------
int good2_8()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000404AE0) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_04_good()
{
  good1_10();
  return good2_8();
}

//----- (0000000000404AFA) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_18_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (0000000000404BD7) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000404BE2) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_08_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = staticReturnsTrue_1();
  if ( result )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}

//----- (0000000000404CD0) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_07_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = staticFive;
  if ( staticFive == 5 )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 61112C: using guessed type int staticFive;

//----- (0000000000404E4D) ----------------------------------------------------
int good1_11()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( staticFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 61112C: using guessed type int staticFive;

//----- (0000000000404F6D) ----------------------------------------------------
int good2_9()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticFive;
  if ( staticFive == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 61112C: using guessed type int staticFive;

//----- (0000000000405082) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_07_good()
{
  good1_11();
  return good2_9();
}

//----- (000000000040509C) ----------------------------------------------------
void CWE510_Trapdoor__ip_based_logic_17_bad()
{
  char *v0; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v4; // [rsp+22h] [rbp-1Eh]
  int v5; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+34h] [rbp-Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    len = 16;
    fd = -1;
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = 0;
      v4 = htons(0x4E20u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 && getsockname(v7, &addr, &len) != -1 )
        {
          v0 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
          if ( !strcmp("192.168.30.123", v0) )
          {
            send(v7, "Welcome, admin!", 0xFuLL, 0);
          }
          else if ( send(v7, "Welcome!", 8uLL, 0) == -1 )
          {
            printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
}

//----- (0000000000405224) ----------------------------------------------------
void good1_12()
{
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v1; // [rsp+2h] [rbp-1Eh]
  int v2; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+14h] [rbp-Ch]
  int v4; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v4 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v2 = 0;
      v1 = htons(0x4E20u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v4 = accept(fd, 0LL, 0LL);
        if ( v4 != -1 && send(v4, "Welcome!", 8uLL, 0) == -1 )
          printLine("Send failed!");
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v4 != -1 )
      close(v4);
  }
}

//----- (0000000000405344) ----------------------------------------------------
void CWE510_Trapdoor__ip_based_logic_17_good()
{
  good1_12();
}

//----- (0000000000405354) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_12_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-480h]
  char host; // [rsp+30h] [rbp-460h]
  struct sockaddr v4; // [rsp+440h] [rbp-50h]
  socklen_t len; // [rsp+45Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+460h] [rbp-30h]
  __int16 s; // [rsp+470h] [rbp-20h]
  uint16_t v8; // [rsp+472h] [rbp-1Eh]
  int v9; // [rsp+474h] [rbp-1Ch]
  int v10; // [rsp+480h] [rbp-10h]
  int fd; // [rsp+484h] [rbp-Ch]
  int v12; // [rsp+488h] [rbp-8h]
  int v13; // [rsp+48Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    len = 16;
    v13 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v9 = 0;
      v8 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v13 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v13, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v13, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v13, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v13 != -1 )
      LODWORD(v0) = close(v13);
  }
  else
  {
    v12 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    v10 = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&v4, 0, 0x10uLL);
      v4.sa_family = 2;
      *(_DWORD *)&v4.sa_data[2] = 0;
      *(_WORD *)v4.sa_data = htons(0x4E20u);
      LODWORD(v0) = bind(v10, &v4, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(v10, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(v10, 0LL, 0LL);
          v12 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v12, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
    if ( v12 != -1 )
      LODWORD(v0) = close(v12);
  }
  return v0;
}

//----- (0000000000405617) ----------------------------------------------------
int good1_13()
{
  ssize_t v0; // rax
  struct sockaddr addr; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v4; // [rsp+12h] [rbp-1Eh]
  int v5; // [rsp+14h] [rbp-1Ch]
  int v6; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v8; // [rsp+28h] [rbp-8h]
  int v9; // [rsp+2Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = 0;
      v4 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v9, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  else
  {
    v8 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    v6 = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x4E20u);
      LODWORD(v0) = bind(v6, &addr, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(v6, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(v6, 0LL, 0LL);
          v8 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v8, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
    if ( v8 != -1 )
      LODWORD(v0) = close(v8);
  }
  return v0;
}

//----- (0000000000405835) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_12_good()
{
  return good1_13();
}

//----- (0000000000405845) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_16_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (0000000000405922) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_04_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (0000000000405ADA) ----------------------------------------------------
int good1_14()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000405BF8) ----------------------------------------------------
int good2_10()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000405D0B) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_04_good()
{
  good1_14();
  return good2_10();
}

//----- (0000000000405D25) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_06_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (0000000000405DC6) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_07_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 611130: using guessed type int staticFive_0;

//----- (0000000000405F80) ----------------------------------------------------
int good1_15()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( staticFive_0 == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 611130: using guessed type int staticFive_0;

//----- (00000000004060A0) ----------------------------------------------------
int good2_11()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611130: using guessed type int staticFive_0;

//----- (00000000004061B5) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_07_good()
{
  good1_15();
  return good2_11();
}

//----- (00000000004061CF) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_16_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (000000000040633E) ----------------------------------------------------
int good1_16()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000406445) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_16_good()
{
  return good1_16();
}

//----- (0000000000406455) ----------------------------------------------------
void CWE510_Trapdoor__hostname_based_logic_17_bad()
{
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v5; // [rsp+452h] [rbp-1Eh]
  int v6; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+464h] [rbp-Ch]
  int v8; // [rsp+468h] [rbp-8h]
  int i; // [rsp+46Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    len = 16;
    fd = -1;
    v8 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x4E20u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v8 = accept(fd, 0LL, 0LL);
        if ( v8 != -1
          && getsockname(v8, &addr, &len) != -1
          && !getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2) )
        {
          if ( !strcmp("admin.google.com", &host) )
          {
            send(v8, "Welcome, admin!", 0xFuLL, 0);
          }
          else if ( send(v8, "Welcome!", 8uLL, 0) == -1 )
          {
            printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v8 != -1 )
      close(v8);
  }
}

//----- (000000000040661A) ----------------------------------------------------
void good1_17()
{
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v1; // [rsp+2h] [rbp-1Eh]
  int v2; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+14h] [rbp-Ch]
  int v4; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v4 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v2 = 0;
      v1 = htons(0x4E20u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v4 = accept(fd, 0LL, 0LL);
        if ( v4 != -1 && send(v4, "Welcome!", 8uLL, 0) == -1 )
          printLine("Send failed!");
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v4 != -1 )
      close(v4);
  }
}

//----- (000000000040673A) ----------------------------------------------------
void CWE510_Trapdoor__hostname_based_logic_17_good()
{
  good1_17();
}

//----- (000000000040674A) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_07_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 611134: using guessed type int staticFive_1;

//----- (00000000004067EC) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_10_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 61114C: using guessed type int globalTrue;

//----- (0000000000406968) ----------------------------------------------------
int good1_18()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( globalFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611168: using guessed type int globalFalse;

//----- (0000000000406A87) ----------------------------------------------------
int good2_12()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 61114C: using guessed type int globalTrue;

//----- (0000000000406B9B) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_10_good()
{
  good1_18();
  return good2_12();
}

//----- (0000000000406BB5) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_11_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}

//----- (0000000000406CA3) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_07_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 611138: using guessed type int staticFive_2;

//----- (0000000000406D8E) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_15_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (0000000000406EFD) ----------------------------------------------------
int good1_19()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000407004) ----------------------------------------------------
int good2_13()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040710B) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_15_good()
{
  good1_19();
  return good2_13();
}

//----- (0000000000407125) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_11_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}

//----- (00000000004072E2) ----------------------------------------------------
int good1_20()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000407405) ----------------------------------------------------
int good2_14()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (000000000040751D) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_11_good()
{
  good1_20();
  return good2_14();
}

//----- (0000000000407537) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_02_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (00000000004076E2) ----------------------------------------------------
int good1_21()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004077E8) ----------------------------------------------------
int good2_15()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (00000000004078EE) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_02_good()
{
  good1_21();
  return good2_15();
}

//----- (0000000000407908) ----------------------------------------------------
void CWE510_Trapdoor__network_listen_17_bad()
{
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v1; // [rsp+2h] [rbp-1Eh]
  int v2; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+14h] [rbp-Ch]
  int v4; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v4 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v2 = 0;
      v1 = htons(0x7530u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
        v4 = accept(fd, 0LL, 0LL);
    }
    if ( fd != -1 )
      close(fd);
    if ( v4 != -1 )
      close(v4);
  }
}

//----- (00000000004079FE) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000407A09) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (0000000000407A14) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_08_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue_2();
  if ( (_DWORD)v0 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}

//----- (0000000000407BD1) ----------------------------------------------------
int good1_22()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse_0() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000407CF4) ----------------------------------------------------
int good2_16()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue_2();
  if ( (_DWORD)v0 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}

//----- (0000000000407E0C) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_08_good()
{
  good1_22();
  return good2_16();
}

//----- (0000000000407E26) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_05_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = staticTrue;
  if ( staticTrue )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 61113C: using guessed type int staticTrue;

//----- (0000000000407FA2) ----------------------------------------------------
int good1_23()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( staticFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 61115C: using guessed type int staticFalse;

//----- (00000000004080C1) ----------------------------------------------------
int good2_17()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticTrue;
  if ( staticTrue )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 61113C: using guessed type int staticTrue;

//----- (00000000004081D5) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_05_good()
{
  good1_23();
  return good2_17();
}

//----- (00000000004081EF) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_01_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  len = 16;
  v9 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v7 = 0;
    v6 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v9 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v9, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
            if ( !strcmp("192.168.30.123", v1) )
            {
              LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
            }
            else
            {
              v0 = send(v9, "Welcome!", 8uLL, 0);
              if ( v0 == -1 )
                LODWORD(v0) = printLine("Send failed!");
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v9 != -1 )
    LODWORD(v0) = close(v9);
  return v0;
}

//----- (000000000040835D) ----------------------------------------------------
int good1_24()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000408463) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_01_good()
{
  return good1_24();
}

//----- (0000000000408473) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_02_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (000000000040854F) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_16_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (00000000004086FB) ----------------------------------------------------
int good1_25()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000408802) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_16_good()
{
  return good1_25();
}

//----- (0000000000408812) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_10_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 61114C: using guessed type int globalTrue;

//----- (00000000004089CB) ----------------------------------------------------
int good1_26()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( globalFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611168: using guessed type int globalFalse;

//----- (0000000000408AEA) ----------------------------------------------------
int good2_18()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 61114C: using guessed type int globalTrue;

//----- (0000000000408BFE) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_10_good()
{
  good1_26();
  return good2_18();
}

//----- (0000000000408C18) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_15_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (0000000000408DC4) ----------------------------------------------------
int good1_27()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000408ECB) ----------------------------------------------------
int good2_19()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (0000000000408FD2) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_15_good()
{
  good1_27();
  return good2_19();
}

//----- (0000000000408FEC) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_03_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (000000000040907F) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_13_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000409121) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_05_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = staticTrue_0;
  if ( staticTrue_0 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 611140: using guessed type int staticTrue_0;

//----- (00000000004092DA) ----------------------------------------------------
int good1_28()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( staticFalse_0 )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611160: using guessed type int staticFalse_0;

//----- (00000000004093F9) ----------------------------------------------------
int good2_20()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = staticTrue_0;
  if ( staticTrue_0 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 611140: using guessed type int staticTrue_0;

//----- (000000000040950D) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_05_good()
{
  good1_28();
  return good2_20();
}

//----- (0000000000409527) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_14_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 611150: using guessed type int globalFive;

//----- (00000000004095C9) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_01_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (0000000000409774) ----------------------------------------------------
int good1_29()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040987A) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_01_good()
{
  return good1_29();
}

//----- (000000000040988A) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_15_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (0000000000409967) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_05_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("123.123.123.123");
      v2 = htons(0x50u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      result = close(fd);
  }
  return result;
}
// 611144: using guessed type int staticTrue_1;

//----- (0000000000409A08) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_18_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (0000000000409A9C) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_05_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 611148: using guessed type int staticTrue_2;

//----- (0000000000409B86) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_09_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000409D02) ----------------------------------------------------
int good1_30()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF14: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000409E21) ----------------------------------------------------
int good2_21()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF10: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000409F35) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_09_good()
{
  good1_30();
  return good2_21();
}

//----- (0000000000409F4F) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_01_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (000000000040A02B) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_04_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (000000000040A0CB) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_13_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  socklen_t len; // [rsp+Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v6; // [rsp+22h] [rbp-1Eh]
  int v7; // [rsp+24h] [rbp-1Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    len = 16;
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v7 = 0;
      v6 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v9, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v9, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v9, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040A248) ----------------------------------------------------
int good1_31()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040A368) ----------------------------------------------------
int good2_22()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040A47D) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_13_good()
{
  good1_31();
  return good2_22();
}

//----- (000000000040A497) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_10_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    v5 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x7530u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v5 = result;
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v5 != -1 )
      result = close(v5);
  }
  return result;
}
// 61114C: using guessed type int globalTrue;

//----- (000000000040A581) ----------------------------------------------------
int CWE510_Trapdoor__network_connection_01_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  in_addr_t v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+1Ch] [rbp-4h]

  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("123.123.123.123");
    v2 = htons(0x50u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
  }
  if ( fd != -1 )
    result = close(fd);
  return result;
}

//----- (000000000040A614) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_04_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (000000000040A6FD) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_06_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  len = 16;
  v10 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v8 = 0;
    v7 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v10 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = getsockname(v10, &addr, &len);
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
            if ( !(_DWORD)v0 )
            {
              if ( !strcmp("admin.google.com", &host) )
              {
                LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v10, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v10 != -1 )
    LODWORD(v0) = close(v10);
  return v0;
}

//----- (000000000040A8B6) ----------------------------------------------------
int good1_32()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040A9D5) ----------------------------------------------------
int good2_23()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  LODWORD(v0) = socket(2, 1, 6);
  fd = v0;
  if ( (_DWORD)v0 != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x4E20u);
    LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( (_DWORD)v0 != -1 )
    {
      LODWORD(v0) = listen(fd, 5);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = accept(fd, 0LL, 0LL);
        v6 = v0;
        if ( (_DWORD)v0 != -1 )
        {
          v0 = send(v6, "Welcome!", 8uLL, 0);
          if ( v0 == -1 )
            LODWORD(v0) = printLine("Send failed!");
        }
      }
    }
  }
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  if ( v6 != -1 )
    LODWORD(v0) = close(v6);
  return v0;
}

//----- (000000000040AAE9) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_06_good()
{
  good1_32();
  return good2_23();
}

//----- (000000000040AB03) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_12_bad()
{
  ssize_t v0; // rax
  char *v1; // rax
  struct sockaddr v3; // [rsp+0h] [rbp-50h]
  socklen_t len; // [rsp+1Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+20h] [rbp-30h]
  __int16 s; // [rsp+30h] [rbp-20h]
  uint16_t v7; // [rsp+32h] [rbp-1Eh]
  int v8; // [rsp+34h] [rbp-1Ch]
  int v9; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    len = 16;
    v12 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v12 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v12, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              v1 = inet_ntoa(*(struct in_addr *)&addr.sa_data[2]);
              if ( !strcmp("192.168.30.123", v1) )
              {
                LODWORD(v0) = send(v12, "Welcome, admin!", 0xFuLL, 0);
              }
              else
              {
                v0 = send(v12, "Welcome!", 8uLL, 0);
                if ( v0 == -1 )
                  LODWORD(v0) = printLine("Send failed!");
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v12 != -1 )
      LODWORD(v0) = close(v12);
  }
  else
  {
    v11 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    v9 = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&v3, 0, 0x10uLL);
      v3.sa_family = 2;
      *(_DWORD *)&v3.sa_data[2] = 0;
      *(_WORD *)v3.sa_data = htons(0x4E20u);
      LODWORD(v0) = bind(v9, &v3, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(v9, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(v9, 0LL, 0LL);
          v11 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v11, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
    if ( v11 != -1 )
      LODWORD(v0) = close(v11);
  }
  return v0;
}

//----- (000000000040AD89) ----------------------------------------------------
int good1_33()
{
  ssize_t v0; // rax
  struct sockaddr addr; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v4; // [rsp+12h] [rbp-1Eh]
  int v5; // [rsp+14h] [rbp-1Ch]
  int v6; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v8; // [rsp+28h] [rbp-8h]
  int v9; // [rsp+2Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v9 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v5 = 0;
      v4 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v9 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v9, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v9 != -1 )
      LODWORD(v0) = close(v9);
  }
  else
  {
    v8 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    v6 = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x4E20u);
      LODWORD(v0) = bind(v6, &addr, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(v6, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(v6, 0LL, 0LL);
          v8 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v8, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
    if ( v8 != -1 )
      LODWORD(v0) = close(v8);
  }
  return v0;
}

//----- (000000000040AFA7) ----------------------------------------------------
int CWE510_Trapdoor__ip_based_logic_12_good()
{
  return good1_33();
}

//----- (000000000040AFB7) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_13_bad()
{
  ssize_t v0; // rax
  char serv; // [rsp+10h] [rbp-460h]
  char host; // [rsp+30h] [rbp-440h]
  socklen_t len; // [rsp+43Ch] [rbp-34h]
  struct sockaddr addr; // [rsp+440h] [rbp-30h]
  __int16 s; // [rsp+450h] [rbp-20h]
  uint16_t v7; // [rsp+452h] [rbp-1Eh]
  int v8; // [rsp+454h] [rbp-1Ch]
  int fd; // [rsp+468h] [rbp-8h]
  int v10; // [rsp+46Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    len = 16;
    v10 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v8 = 0;
      v7 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v10 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            LODWORD(v0) = getsockname(v10, &addr, &len);
            if ( (_DWORD)v0 != -1 )
            {
              LODWORD(v0) = getnameinfo(&addr, 0x10u, &host, 0x401u, &serv, 0x20u, 2);
              if ( !(_DWORD)v0 )
              {
                if ( !strcmp("admin.google.com", &host) )
                {
                  LODWORD(v0) = send(v10, "Welcome, admin!", 0xFuLL, 0);
                }
                else
                {
                  v0 = send(v10, "Welcome!", 8uLL, 0);
                  if ( v0 == -1 )
                    LODWORD(v0) = printLine("Send failed!");
                }
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v10 != -1 )
      LODWORD(v0) = close(v10);
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B171) ----------------------------------------------------
int good1_34()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B291) ----------------------------------------------------
int good2_24()
{
  ssize_t v0; // rax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v3; // [rsp+2h] [rbp-1Eh]
  int v4; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v6 = -1;
    LODWORD(v0) = socket(2, 1, 6);
    fd = v0;
    if ( (_DWORD)v0 != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x4E20u);
      LODWORD(v0) = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( (_DWORD)v0 != -1 )
      {
        LODWORD(v0) = listen(fd, 5);
        if ( (_DWORD)v0 != -1 )
        {
          LODWORD(v0) = accept(fd, 0LL, 0LL);
          v6 = v0;
          if ( (_DWORD)v0 != -1 )
          {
            v0 = send(v6, "Welcome!", 8uLL, 0);
            if ( v0 == -1 )
              LODWORD(v0) = printLine("Send failed!");
          }
        }
      }
    }
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
    if ( v6 != -1 )
      LODWORD(v0) = close(v6);
  }
  return v0;
}
// 40DF18: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B3A6) ----------------------------------------------------
int CWE510_Trapdoor__hostname_based_logic_13_good()
{
  good1_34();
  return good2_24();
}

//----- (000000000040B3C0) ----------------------------------------------------
int CWE510_Trapdoor__network_listen_06_bad()
{
  int result; // eax
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v2; // [rsp+2h] [rbp-1Eh]
  int v3; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x7530u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v5 = result;
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v5 != -1 )
    result = close(v5);
  return result;
}

//----- (000000000040B4AA) ----------------------------------------------------
void CWE510_Trapdoor__network_connection_17_bad()
{
  __int16 s; // [rsp+0h] [rbp-20h]
  uint16_t v1; // [rsp+2h] [rbp-1Eh]
  in_addr_t v2; // [rsp+4h] [rbp-1Ch]
  int fd; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v2 = inet_addr("123.123.123.123");
      v1 = htons(0x50u);
      connect(fd, (const struct sockaddr *)&s, 0x10u);
    }
    if ( fd != -1 )
      close(fd);
  }
}

//----- (000000000040B557) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000040B578) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000040B5A3) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000040B5C4) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000040B5E9) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000040B60F) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000040B633) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000040B657) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000040B67B) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000040B69F) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000040B6CF) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000040B6F0) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000040B714) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000040B73F) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000040B76B) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000040B7C2) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400C50: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B89B) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400D60: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B94F) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000040B95A) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000040B965) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000040B97B) ----------------------------------------------------
void good1_35()
{
  ;
}

//----- (000000000040B981) ----------------------------------------------------
void good2_25()
{
  ;
}

//----- (000000000040B987) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000040B98D) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000040B993) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000040B999) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000040B99F) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000040B9A5) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000040B9AB) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000040B9B1) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000040B9B7) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000040B9BD) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000040B9C3) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000040B9C9) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000040B9CF) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000040B9D5) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000040B9DB) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000040B9E1) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000040B9E7) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000040BA1A) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000040BABE) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000040BAF2) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000040BB11) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000040BB86) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000040BBA0) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000040BBBA) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000040BBE0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 610DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 610DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000040BC54) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 230 function(s) have been successfully decompiled
