/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400950();
// int printf(const char *format, ...);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int CWE190_Integer_Overflow__int64_t_fscanf_add_02_bad();
int goodB2G1();
int goodB2G2();
int goodG2B1();
int goodG2B2();
int CWE190_Integer_Overflow__int64_t_fscanf_add_02_good();
int CWE190_Integer_Overflow__char_rand_square_68b_badSink();
int CWE190_Integer_Overflow__char_rand_square_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_rand_square_68b_goodB2GSink();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad();
int goodB2G();
int goodG2B();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_good();
int CWE190_Integer_Overflow__char_fscanf_add_54_bad();
int goodG2B_0();
int goodB2G_0();
int CWE190_Integer_Overflow__char_fscanf_add_54_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_10_bad();
int goodB2G1_0();
int goodB2G2_0();
int goodG2B1_0();
int goodG2B2_0();
int CWE190_Integer_Overflow__int64_t_fscanf_add_10_good();
int __fastcall badSink(__int64 a1);
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad();
int __fastcall goodG2BSink(__int64 a1);
int goodG2B_1();
int __fastcall goodB2GSink(__int64 a1);
__int64 goodB2G_1();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good();
int CWE190_Integer_Overflow__char_fscanf_square_68_bad();
int goodG2B_2();
int goodB2G_2();
int CWE190_Integer_Overflow__char_fscanf_square_68_good();
int CWE190_Integer_Overflow__char_fscanf_add_32_bad();
int goodG2B_3();
int goodB2G_3();
int CWE190_Integer_Overflow__char_fscanf_add_32_good();
int CWE190_Integer_Overflow__char_max_add_51_bad();
int goodG2B_4();
int goodB2G_4();
int CWE190_Integer_Overflow__char_max_add_51_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE190_Integer_Overflow__char_rand_multiply_08_bad();
int goodB2G1_1();
int goodB2G2_1();
int goodG2B1_1();
int goodG2B2_1();
int CWE190_Integer_Overflow__char_rand_multiply_08_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_54_bad();
int goodG2B_5();
int goodB2G_5();
int CWE190_Integer_Overflow__char_rand_square_54_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_01_bad();
int goodG2B_6();
int goodB2G_6();
int CWE190_Integer_Overflow__int64_t_fscanf_add_01_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_add_05_bad();
int goodB2G1_2();
int goodB2G2_2();
int goodG2B1_2();
int goodG2B2_2();
int CWE190_Integer_Overflow__char_max_add_05_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_goodB2GSink(char a1);
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_badSource(__int64 a1);
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodG2BSource();
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodB2GSource(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_goodB2GSink(_BYTE *a1);
int CWE190_Integer_Overflow__char_fscanf_square_53_bad();
int goodG2B_7();
int goodB2G_7();
int CWE190_Integer_Overflow__char_fscanf_square_53_good();
int CWE190_Integer_Overflow__char_max_square_15_bad();
int goodB2G1_3();
int goodB2G2_3();
int goodG2B1_3();
int goodG2B2_3();
int CWE190_Integer_Overflow__char_max_square_15_good();
int badSink_0();
int CWE190_Integer_Overflow__char_max_add_45_bad();
int goodG2BSink_0();
int goodG2B_8();
int goodB2GSink_0();
int goodB2G_8();
int CWE190_Integer_Overflow__char_max_add_45_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_add_06_bad();
int goodB2G1_4();
int goodB2G2_4();
int goodG2B1_4();
int goodG2B2_4();
int CWE190_Integer_Overflow__char_max_add_06_good();
__int64 badSource();
int CWE190_Integer_Overflow__char_max_square_42_bad();
__int64 goodG2BSource();
int goodG2B_9();
__int64 goodB2GSource();
int goodB2G_9();
int CWE190_Integer_Overflow__char_max_square_42_good();
int CWE190_Integer_Overflow__char_rand_square_09_bad();
int goodB2G1_5();
int goodB2G2_5();
int goodG2B1_5();
int goodG2B2_5();
int CWE190_Integer_Overflow__char_rand_square_09_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_04_bad();
int goodB2G1_6();
int goodB2G2_6();
int goodG2B1_6();
int goodG2B2_6();
int CWE190_Integer_Overflow__char_fscanf_add_04_good();
int CWE190_Integer_Overflow__char_fscanf_add_31_bad();
int goodG2B_10();
int goodB2G_10();
int CWE190_Integer_Overflow__char_fscanf_add_31_good();
int CWE190_Integer_Overflow__char_rand_square_64_bad();
int goodG2B_11();
int goodB2G_11();
int CWE190_Integer_Overflow__char_rand_square_64_good();
int CWE190_Integer_Overflow__char_rand_add_15_bad();
int goodB2G1_7();
int goodB2G2_7();
int goodG2B1_7();
int goodG2B2_7();
int CWE190_Integer_Overflow__char_rand_add_15_good();
int CWE190_Integer_Overflow__char_rand_multiply_52_bad();
int goodG2B_12();
int goodB2G_12();
int CWE190_Integer_Overflow__char_rand_multiply_52_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_64_bad();
int goodG2B_13();
int goodB2G_13();
int CWE190_Integer_Overflow__char_fscanf_multiply_64_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_goodB2GSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_67_bad();
int goodG2B_14();
int goodB2G_14();
int CWE190_Integer_Overflow__char_fscanf_add_67_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_bad();
int goodG2B_15();
int goodB2G_15();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_good();
int CWE190_Integer_Overflow__char_rand_multiply_16_bad();
int goodB2G_16();
int goodG2B_16();
int CWE190_Integer_Overflow__char_rand_multiply_16_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__char_max_square_05_bad();
int goodB2G1_8();
int goodB2G2_8();
int goodG2B1_8();
int goodG2B2_8();
int CWE190_Integer_Overflow__char_max_square_05_good();
int __fastcall badSink_1(char a1);
int CWE190_Integer_Overflow__char_max_square_41_bad();
int __fastcall goodG2BSink_1(char a1);
int goodG2B_17();
int __fastcall goodB2GSink_1(char a1);
int goodB2G_17();
int CWE190_Integer_Overflow__char_max_square_41_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad();
int goodB2G1_9();
int goodB2G2_9();
int goodG2B1_9();
int goodG2B2_9();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_goodB2GSink(_BYTE *a1);
__int64 CWE190_Integer_Overflow__char_rand_square_65_bad();
int goodG2B_18();
__int64 goodB2G_18();
__int64 CWE190_Integer_Overflow__char_rand_square_65_good();
int CWE190_Integer_Overflow__char_rand_multiply_51_bad();
int goodG2B_19();
int goodB2G_19();
int CWE190_Integer_Overflow__char_rand_multiply_51_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_max_square_34_bad();
int goodG2B_20();
int goodB2G_20();
int CWE190_Integer_Overflow__char_max_square_34_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_fscanf_square_52_bad();
int goodG2B_21();
int goodB2G_21();
int CWE190_Integer_Overflow__char_fscanf_square_52_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_67_bad();
int goodG2B_22();
int goodB2G_22();
int CWE190_Integer_Overflow__char_rand_square_67_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__char_max_square_10_bad();
int goodB2G1_10();
int goodB2G2_10();
int goodG2B1_10();
int goodG2B2_10();
int CWE190_Integer_Overflow__char_max_square_10_good();
int badSink_2();
int CWE190_Integer_Overflow__char_rand_multiply_45_bad();
int goodG2BSink_2();
int goodG2B_23();
int goodB2GSink_2();
int goodB2G_23();
int CWE190_Integer_Overflow__char_rand_multiply_45_good();
int CWE190_Integer_Overflow__char_fscanf_square_16_bad();
int goodB2G_24();
int goodG2B_24();
int CWE190_Integer_Overflow__char_fscanf_square_16_good();
int CWE190_Integer_Overflow__char_max_multiply_14_bad();
int goodB2G1_11();
int goodB2G2_11();
int goodG2B1_11();
int goodG2B2_11();
int CWE190_Integer_Overflow__char_max_multiply_14_good();
int CWE190_Integer_Overflow__char_max_add_64_bad();
int goodG2B_25();
int goodB2G_25();
int CWE190_Integer_Overflow__char_max_add_64_good();
int CWE190_Integer_Overflow__char_rand_multiply_06_bad();
int goodB2G1_12();
int goodB2G2_12();
int goodG2B1_12();
int goodG2B2_12();
int CWE190_Integer_Overflow__char_rand_multiply_06_good();
int CWE190_Integer_Overflow__char_max_multiply_32_bad();
int goodG2B_26();
int goodB2G_26();
int CWE190_Integer_Overflow__char_max_multiply_32_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_54_bad();
int goodG2B_27();
int goodB2G_27();
int CWE190_Integer_Overflow__int64_t_fscanf_add_54_good();
int CWE190_Integer_Overflow__char_rand_add_68_bad();
int goodG2B_28();
int goodB2G_28();
int CWE190_Integer_Overflow__char_rand_add_68_good();
int CWE190_Integer_Overflow__char_fscanf_square_12_bad();
int goodB2G_29();
int goodG2B_29();
int CWE190_Integer_Overflow__char_fscanf_square_12_good();
int CWE190_Integer_Overflow__char_rand_multiply_10_bad();
int goodB2G1_13();
int goodB2G2_13();
int goodG2B1_13();
int goodG2B2_13();
int CWE190_Integer_Overflow__char_rand_multiply_10_good();
int badSink_3();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_bad();
int goodG2BSink_3();
int goodG2B_30();
int goodB2GSink_3();
int goodB2G_30();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_bad();
int goodB2G1_14();
int goodB2G2_14();
int goodG2B1_14();
int goodG2B2_14();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_67_bad();
int goodG2B_31();
int goodB2G_31();
int CWE190_Integer_Overflow__char_rand_add_67_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_fscanf_add_15_bad();
int goodB2G1_15();
int goodB2G2_15();
int goodG2B1_15();
int goodG2B2_15();
int CWE190_Integer_Overflow__char_fscanf_add_15_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_06_bad();
int goodB2G1_16();
int goodB2G2_16();
int goodG2B1_16();
int goodG2B2_16();
int CWE190_Integer_Overflow__char_max_square_06_good();
int CWE190_Integer_Overflow__char_rand_add_07_bad();
int goodB2G1_17();
int goodB2G2_17();
int goodG2B1_17();
int goodG2B2_17();
int CWE190_Integer_Overflow__char_rand_add_07_good();
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_badSource();
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_goodB2GSource();
__int64 __fastcall badSource_0(unsigned __int8 a1);
int CWE190_Integer_Overflow__char_fscanf_add_42_bad();
__int64 goodG2BSource_0();
int goodG2B_32();
__int64 __fastcall goodB2GSource_0(unsigned __int8 a1);
int goodB2G_32();
int CWE190_Integer_Overflow__char_fscanf_add_42_good();
int CWE190_Integer_Overflow__char_fscanf_square_11_bad();
int goodB2G1_18();
int goodB2G2_18();
int goodG2B1_18();
int goodG2B2_18();
int CWE190_Integer_Overflow__char_fscanf_square_11_good();
int CWE190_Integer_Overflow__char_fscanf_square_02_bad();
int goodB2G1_19();
int goodB2G2_19();
int goodG2B1_19();
int goodG2B2_19();
int CWE190_Integer_Overflow__char_fscanf_square_02_good();
int CWE190_Integer_Overflow__char_rand_square_22_bad();
int goodB2G1_20();
int goodB2G2_20();
int goodG2B_33();
int CWE190_Integer_Overflow__char_rand_square_22_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_14_bad();
int goodB2G1_21();
int goodB2G2_21();
int goodG2B1_20();
int goodG2B2_20();
int CWE190_Integer_Overflow__int64_t_fscanf_add_14_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_32_bad();
int goodG2B_34();
int goodB2G_33();
int CWE190_Integer_Overflow__int64_t_fscanf_add_32_good();
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_65_bad();
int goodG2B_35();
__int64 goodB2G_34();
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_65_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_badSink(__int64 *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodG2BSink(__int64 *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodB2GSink(__int64 *a1);
int CWE190_Integer_Overflow__char_fscanf_square_10_bad();
int goodB2G1_22();
int goodB2G2_22();
int goodG2B1_21();
int goodG2B2_21();
int CWE190_Integer_Overflow__char_fscanf_square_10_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_05_bad();
int goodB2G1_23();
int goodB2G2_23();
int goodG2B1_22();
int goodG2B2_22();
int CWE190_Integer_Overflow__char_fscanf_add_05_good();
int CWE190_Integer_Overflow__char_fscanf_square_01_bad();
int goodG2B_36();
int goodB2G_35();
int CWE190_Integer_Overflow__char_fscanf_square_01_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_badSink();
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodB2GSink();
int __fastcall badSink_4(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_41_bad();
int __fastcall goodG2BSink_4(char a1);
int goodG2B_37();
int __fastcall goodB2GSink_4(char a1);
int goodB2G_36();
int CWE190_Integer_Overflow__char_fscanf_add_41_good();
int CWE190_Integer_Overflow__char_rand_square_13_bad();
int goodB2G1_24();
int goodB2G2_24();
int goodG2B1_23();
int goodG2B2_23();
int CWE190_Integer_Overflow__char_rand_square_13_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_04_bad();
int goodB2G1_25();
int goodB2G2_25();
int goodG2B1_24();
int goodG2B2_24();
int CWE190_Integer_Overflow__int64_t_fscanf_add_04_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_31_bad();
int goodG2B_38();
int goodB2G_37();
int CWE190_Integer_Overflow__int64_t_fscanf_add_31_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_68_bad();
int goodG2B_39();
int goodB2G_38();
int CWE190_Integer_Overflow__int64_t_fscanf_add_68_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_34_bad();
int goodG2B_40();
int goodB2G_39();
int CWE190_Integer_Overflow__char_fscanf_add_34_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_bad();
int goodG2B_41();
int goodB2G_40();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodB2GSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_67_bad();
int goodG2B_42();
int goodB2G_41();
int CWE190_Integer_Overflow__int64_t_fscanf_add_67_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_add_12_bad();
int goodB2G_42();
int goodG2B_43();
int CWE190_Integer_Overflow__char_max_add_12_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_max_add_65_bad();
int goodG2B_44();
int goodB2G_43();
int CWE190_Integer_Overflow__char_max_add_65_good();
int CWE190_Integer_Overflow__char_rand_square_03_bad();
int goodB2G1_26();
int goodB2G2_26();
int goodG2B1_25();
int goodG2B2_25();
int CWE190_Integer_Overflow__char_rand_square_03_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_68_bad();
int goodG2B_45();
int goodB2G_44();
int CWE190_Integer_Overflow__char_fscanf_multiply_68_good();
int CWE190_Integer_Overflow__char_max_square_17_bad();
int goodB2G_45();
int goodG2B_46();
int CWE190_Integer_Overflow__char_max_square_17_good();
int __fastcall badSink_5(char a1);
int CWE190_Integer_Overflow__char_max_add_44_bad();
int __fastcall goodG2BSink_5(char a1);
int goodG2B_47();
int __fastcall goodB2GSink_5(char a1);
int goodB2G_46();
int CWE190_Integer_Overflow__char_max_add_44_good();
int CWE190_Integer_Overflow__char_max_add_09_bad();
int goodB2G1_27();
int goodB2G2_27();
int goodG2B1_26();
int goodG2B2_26();
int CWE190_Integer_Overflow__char_max_add_09_good();
int __fastcall badSink_6(char a1);
int CWE190_Integer_Overflow__char_max_square_44_bad();
int __fastcall goodG2BSink_6(char a1);
int goodG2B_48();
int __fastcall goodB2GSink_6(char a1);
int goodB2G_47();
int CWE190_Integer_Overflow__char_max_square_44_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad();
int goodB2G1_28();
int goodB2G2_28();
int goodG2B1_27();
int goodG2B2_27();
int CWE190_Integer_Overflow__int64_t_fscanf_add_15_good();
int CWE190_Integer_Overflow__char_rand_square_18_bad();
int goodB2G_48();
int goodG2B_49();
int CWE190_Integer_Overflow__char_rand_square_18_good();
int CWE190_Integer_Overflow__char_rand_multiply_54_bad();
int goodG2B_50();
int goodB2G_49();
int CWE190_Integer_Overflow__char_rand_multiply_54_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_add_68b_badSink();
int CWE190_Integer_Overflow__char_max_add_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_max_add_68b_goodB2GSink();
int CWE190_Integer_Overflow__char_fscanf_multiply_53_bad();
int goodG2B_51();
int goodB2G_50();
int CWE190_Integer_Overflow__char_fscanf_multiply_53_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_goodB2GSink(char a1);
__int64 CWE190_Integer_Overflow__char_max_square_61b_badSource();
__int64 CWE190_Integer_Overflow__char_max_square_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_max_square_61b_goodB2GSource();
int CWE190_Integer_Overflow__char_rand_square_12_bad();
int goodB2G_51();
int goodG2B_52();
int CWE190_Integer_Overflow__char_rand_square_12_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_bad();
int goodB2G1_29();
int goodB2G2_29();
int goodG2B_53();
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_good();
__int64 badSource_1();
int CWE190_Integer_Overflow__char_max_multiply_42_bad();
__int64 goodG2BSource_1();
int goodG2B_54();
__int64 goodB2GSource_1();
int goodB2G_52();
int CWE190_Integer_Overflow__char_max_multiply_42_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_goodB2GSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_add_68_bad();
int goodG2B_55();
int goodB2G_53();
int CWE190_Integer_Overflow__char_max_add_68_good();
int CWE190_Integer_Overflow__char_rand_multiply_15_bad();
int goodB2G1_30();
int goodB2G2_30();
int goodG2B1_28();
int goodG2B2_28();
int CWE190_Integer_Overflow__char_rand_multiply_15_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_61_bad();
int goodG2B_56();
int goodB2G_54();
int CWE190_Integer_Overflow__char_max_square_61_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_54_bad();
int goodG2B_57();
int goodB2G_55();
int CWE190_Integer_Overflow__char_fscanf_square_54_good();
__int64 badSource_2();
int CWE190_Integer_Overflow__char_rand_add_42_bad();
__int64 goodG2BSource_2();
int goodG2B_58();
__int64 goodB2GSource_2();
int goodB2G_56();
int CWE190_Integer_Overflow__char_rand_add_42_good();
int CWE190_Integer_Overflow__char_rand_square_11_bad();
int goodB2G1_31();
int goodB2G2_31();
int goodG2B1_29();
int goodG2B2_29();
int CWE190_Integer_Overflow__char_rand_square_11_good();
int CWE190_Integer_Overflow__char_rand_square_02_bad();
int goodB2G1_32();
int goodB2G2_32();
int goodG2B1_30();
int goodG2B2_30();
int CWE190_Integer_Overflow__char_rand_square_02_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_13_bad();
int goodB2G1_33();
int goodB2G2_33();
int goodG2B1_31();
int goodG2B2_31();
int CWE190_Integer_Overflow__int64_t_fscanf_add_13_good();
int CWE190_Integer_Overflow__char_max_multiply_05_bad();
int goodB2G1_34();
int goodB2G2_34();
int goodG2B1_32();
int goodG2B2_32();
int CWE190_Integer_Overflow__char_max_multiply_05_good();
int __fastcall badSink_7(int a1);
int CWE190_Integer_Overflow__char_max_multiply_41_bad();
int __fastcall goodG2BSink_7(int a1);
int goodG2B_59();
int __fastcall goodB2GSink_7(int a1);
int goodB2G_57();
int CWE190_Integer_Overflow__char_max_multiply_41_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodG2BSink(char a1);
__int64 CWE190_Integer_Overflow__char_rand_multiply_65_bad();
int goodG2B_60();
__int64 goodB2G_58();
__int64 CWE190_Integer_Overflow__char_rand_multiply_65_good();
int CWE190_Integer_Overflow__char_max_square_07_bad();
int goodB2G1_35();
int goodB2G2_35();
int goodG2B1_33();
int goodG2B2_33();
int CWE190_Integer_Overflow__char_max_square_07_good();
int CWE190_Integer_Overflow__char_rand_square_10_bad();
int goodB2G1_36();
int goodB2G2_36();
int goodG2B1_34();
int goodG2B2_34();
int CWE190_Integer_Overflow__char_rand_square_10_good();
int CWE190_Integer_Overflow__char_max_add_53_bad();
int goodG2B_61();
int goodB2G_59();
int CWE190_Integer_Overflow__char_max_add_53_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_multiply_34_bad();
int goodG2B_62();
int goodB2G_60();
int CWE190_Integer_Overflow__char_max_multiply_34_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_badSink(__int64 *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodG2BSink(__int64 *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodB2GSink(__int64 *a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_52_bad();
int goodG2B_63();
int goodB2G_61();
int CWE190_Integer_Overflow__char_fscanf_multiply_52_good();
int CWE190_Integer_Overflow__char_rand_add_05_bad();
int goodB2G1_37();
int goodB2G2_37();
int goodG2B1_35();
int goodG2B2_35();
int CWE190_Integer_Overflow__char_rand_add_05_good();
int CWE190_Integer_Overflow__char_rand_square_01_bad();
int goodG2B_64();
int goodB2G_62();
int CWE190_Integer_Overflow__char_rand_square_01_good();
int CWE190_Integer_Overflow__char_rand_multiply_68b_badSink();
int CWE190_Integer_Overflow__char_rand_multiply_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_rand_multiply_68b_goodB2GSink();
int __fastcall badSink_8(char a1);
int CWE190_Integer_Overflow__char_rand_add_41_bad();
int __fastcall goodG2BSink_8(char a1);
int goodG2B_65();
int __fastcall goodB2GSink_8(char a1);
int goodB2G_63();
int CWE190_Integer_Overflow__char_rand_add_41_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodB2GSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_goodB2GSink(char a1);
int __fastcall badSink_9(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_21_bad();
int __fastcall goodB2G1Sink(__int64 a1);
int goodB2G1_38();
int __fastcall goodB2G2Sink(__int64 a1);
int goodB2G2_38();
int __fastcall goodG2BSink_9(__int64 a1);
int goodG2B_66();
int CWE190_Integer_Overflow__int64_t_fscanf_add_21_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_03_bad();
int goodB2G1_39();
int goodB2G2_39();
int goodG2B1_36();
int goodG2B2_36();
int CWE190_Integer_Overflow__int64_t_fscanf_add_03_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_16_bad();
int goodB2G_64();
int goodG2B_67();
int CWE190_Integer_Overflow__char_fscanf_multiply_16_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_18_bad();
int goodB2G_65();
int goodG2B_68();
int CWE190_Integer_Overflow__int64_t_fscanf_add_18_good();
int CWE190_Integer_Overflow__char_rand_add_34_bad();
int goodG2B_69();
int goodB2G_66();
int CWE190_Integer_Overflow__char_rand_add_34_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_max_multiply_66_bad();
int goodG2B_70();
int goodB2G_67();
int CWE190_Integer_Overflow__char_max_multiply_66_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_goodB2GSink(int a1);
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE190_Integer_Overflow__char_rand_square_08_bad();
int goodB2G1_40();
int goodB2G2_40();
int goodG2B1_37();
int goodG2B2_37();
int CWE190_Integer_Overflow__char_rand_square_08_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_51_bad();
int goodG2B_71();
int goodB2G_68();
int CWE190_Integer_Overflow__char_fscanf_multiply_51_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_12_bad();
int goodB2G_69();
int goodG2B_72();
int CWE190_Integer_Overflow__int64_t_fscanf_add_12_good();
int CWE190_Integer_Overflow__char_max_add_10_bad();
int goodB2G1_41();
int goodB2G2_41();
int goodG2B1_38();
int goodG2B2_38();
int CWE190_Integer_Overflow__char_max_add_10_good();
int CWE190_Integer_Overflow__char_rand_multiply_68_bad();
int goodG2B_73();
int goodB2G_70();
int CWE190_Integer_Overflow__char_rand_multiply_68_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_05_bad();
int goodB2G1_42();
int goodB2G2_42();
int goodG2B1_39();
int goodG2B2_39();
int CWE190_Integer_Overflow__int64_t_fscanf_add_05_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_16_bad();
int goodB2G_71();
int goodG2B_74();
int CWE190_Integer_Overflow__int64_t_fscanf_add_16_good();
int CWE190_Integer_Overflow__char_fscanf_square_68b_badSink();
int CWE190_Integer_Overflow__char_fscanf_square_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_fscanf_square_68b_goodB2GSink();
int CWE190_Integer_Overflow__char_rand_add_63_bad();
int goodG2B_75();
int goodB2G_72();
int CWE190_Integer_Overflow__char_rand_add_63_good();
int badSink_10();
int CWE190_Integer_Overflow__char_fscanf_multiply_45_bad();
int goodG2BSink_10();
int goodG2B_76();
int goodB2GSink_9();
int goodB2G_73();
int CWE190_Integer_Overflow__char_fscanf_multiply_45_good();
int CWE190_Integer_Overflow__char_max_add_52_bad();
int goodG2B_77();
int goodB2G_74();
int CWE190_Integer_Overflow__char_max_add_52_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_66_bad();
int goodG2B_78();
int goodB2G_75();
int CWE190_Integer_Overflow__char_rand_add_66_good();
int CWE190_Integer_Overflow__char_rand_multiply_53_bad();
int goodG2B_79();
int goodB2G_76();
int CWE190_Integer_Overflow__char_rand_multiply_53_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_06_bad();
int goodB2G1_43();
int goodB2G2_43();
int goodG2B1_40();
int goodG2B2_40();
int CWE190_Integer_Overflow__char_fscanf_multiply_06_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_add_16_bad();
int goodB2G_77();
int goodG2B_80();
int CWE190_Integer_Overflow__char_max_add_16_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_11_bad();
int goodB2G1_44();
int goodB2G2_44();
int goodG2B1_41();
int goodG2B2_41();
int CWE190_Integer_Overflow__int64_t_fscanf_add_11_good();
__int64 badSource_3();
int CWE190_Integer_Overflow__char_max_add_42_bad();
__int64 goodG2BSource_3();
int goodG2B_81();
__int64 goodB2GSource_3();
int goodB2G_78();
int CWE190_Integer_Overflow__char_max_add_42_good();
int CWE190_Integer_Overflow__char_max_square_11_bad();
int goodB2G1_45();
int goodB2G2_45();
int goodG2B1_42();
int goodG2B2_42();
int CWE190_Integer_Overflow__char_max_square_11_good();
int CWE190_Integer_Overflow__char_max_square_02_bad();
int goodB2G1_46();
int goodB2G2_46();
int goodG2B1_43();
int goodG2B2_43();
int CWE190_Integer_Overflow__char_max_square_02_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_64_bad();
int goodG2B_82();
int goodB2G_79();
int CWE190_Integer_Overflow__char_fscanf_square_64_good();
int CWE190_Integer_Overflow__char_rand_multiply_12_bad();
int goodB2G_80();
int goodG2B_83();
int CWE190_Integer_Overflow__char_rand_multiply_12_good();
int CWE190_Integer_Overflow__char_fscanf_add_13_bad();
int goodB2G1_47();
int goodB2G2_47();
int goodG2B1_44();
int goodG2B2_44();
int CWE190_Integer_Overflow__char_fscanf_add_13_good();
int CWE190_Integer_Overflow__char_max_multiply_65_bad();
int goodG2B_84();
int goodB2G_81();
int CWE190_Integer_Overflow__char_max_multiply_65_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_multiply_09_bad();
int goodB2G1_48();
int goodB2G2_48();
int goodG2B1_45();
int goodG2B2_45();
int CWE190_Integer_Overflow__char_rand_multiply_09_good();
int CWE190_Integer_Overflow__char_max_square_68_bad();
int goodG2B_85();
int goodB2G_82();
int CWE190_Integer_Overflow__char_max_square_68_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_max_square_01_bad();
int goodG2B_86();
int goodB2G_83();
int CWE190_Integer_Overflow__char_max_square_01_good();
int __fastcall badSink_11(char a1);
int CWE190_Integer_Overflow__char_max_add_41_bad();
int __fastcall goodG2BSink_11(char a1);
int goodG2B_87();
int __fastcall goodB2GSink_10(char a1);
int goodB2G_84();
int CWE190_Integer_Overflow__char_max_add_41_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_34_bad();
int goodG2B_88();
int goodB2G_85();
int CWE190_Integer_Overflow__char_rand_square_34_good();
void CWE190_Integer_Overflow__char_rand_square_17_bad();
void goodB2G_86();
int goodG2B_89();
int CWE190_Integer_Overflow__char_rand_square_17_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_bad();
int goodB2G1_49();
int goodB2G2_49();
int goodG2B_90();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_good();
int __fastcall badSink_12(char a1);
__int64 CWE190_Integer_Overflow__char_rand_square_44_bad();
int __fastcall goodG2BSink_12(char a1);
int goodG2B_91();
int __fastcall goodB2GSink_11(char a1);
__int64 goodB2G_87();
__int64 CWE190_Integer_Overflow__char_rand_square_44_good();
int CWE190_Integer_Overflow__char_max_square_14_bad();
int goodB2G1_50();
int goodB2G2_50();
int goodG2B1_46();
int goodG2B2_46();
int CWE190_Integer_Overflow__char_max_square_14_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_badSink(_QWORD *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodG2BSink(_QWORD *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodB2GSink(_QWORD *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_52_bad();
int goodG2B_92();
int goodB2G_88();
int CWE190_Integer_Overflow__char_fscanf_add_52_good();
int CWE190_Integer_Overflow__char_rand_add_68b_badSink();
int CWE190_Integer_Overflow__char_rand_add_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_rand_add_68b_goodB2GSink();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_goodB2GSink(int a1);
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE190_Integer_Overflow__char_max_square_08_bad();
int goodB2G1_51();
int goodB2G2_51();
int goodG2B1_47();
int goodG2B2_47();
int CWE190_Integer_Overflow__char_max_square_08_good();
int CWE190_Integer_Overflow__char_fscanf_add_16_bad();
int goodB2G_89();
int goodG2B_93();
int CWE190_Integer_Overflow__char_fscanf_add_16_good();
int CWE190_Integer_Overflow__char_max_multiply_68_bad();
int goodG2B_94();
int goodB2G_90();
int CWE190_Integer_Overflow__char_max_multiply_68_good();
__int64 badSource_4();
int CWE190_Integer_Overflow__char_rand_multiply_42_bad();
__int64 goodG2BSource_4();
int goodG2B_95();
__int64 goodB2GSource_4();
int goodB2G_91();
int CWE190_Integer_Overflow__char_rand_multiply_42_good();
int CWE190_Integer_Overflow__char_rand_add_14_bad();
int goodB2G1_52();
int goodB2G2_52();
int goodG2B1_48();
int goodG2B2_48();
int CWE190_Integer_Overflow__char_rand_add_14_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_bad();
int goodB2G1_53();
int goodB2G2_53();
int goodG2B1_49();
int goodG2B2_49();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_good();
int CWE190_Integer_Overflow__char_rand_multiply_67_bad();
int goodG2B_96();
int goodB2G_92();
int CWE190_Integer_Overflow__char_rand_multiply_67_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_badSink();
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodG2BSink();
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodB2GSink();
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_63_bad();
int goodG2B_97();
int goodB2G_93();
int CWE190_Integer_Overflow__int64_t_fscanf_add_63_good();
int CWE190_Integer_Overflow__char_max_add_66_bad();
int goodG2B_98();
int goodB2G_94();
int CWE190_Integer_Overflow__char_max_add_66_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_multiply_53_bad();
int goodG2B_99();
int goodB2G_95();
int CWE190_Integer_Overflow__char_max_multiply_53_good();
int CWE190_Integer_Overflow__char_fscanf_add_51_bad();
int goodG2B_100();
int goodB2G_96();
int CWE190_Integer_Overflow__char_fscanf_add_51_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_61_bad();
int goodG2B_101();
int goodB2G_97();
int CWE190_Integer_Overflow__char_rand_square_61_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodB2GSink(char *a1);
int CWE190_Integer_Overflow__char_rand_multiply_05_bad();
int goodB2G1_54();
int goodB2G2_54();
int goodG2B1_50();
int goodG2B2_50();
int CWE190_Integer_Overflow__char_rand_multiply_05_good();
int __fastcall badSink_13(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad();
int __fastcall goodB2G1Sink_0(__int64 a1);
int goodB2G1_55();
int __fastcall goodB2G2Sink_0(__int64 a1);
int goodB2G2_55();
int __fastcall goodG2BSink_13(__int64 a1);
int goodG2B_102();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_bad();
int goodB2G1_56();
int goodB2G2_56();
int goodG2B1_51();
int goodG2B2_51();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_good();
int CWE190_Integer_Overflow__char_fscanf_square_15_bad();
int goodB2G1_57();
int goodB2G2_57();
int goodG2B1_52();
int goodG2B2_52();
int CWE190_Integer_Overflow__char_fscanf_square_15_good();
void CWE190_Integer_Overflow__char_rand_multiply_17_bad();
void goodB2G_98();
int goodG2B_103();
int CWE190_Integer_Overflow__char_rand_multiply_17_good();
int badSink_14();
int CWE190_Integer_Overflow__char_fscanf_add_45_bad();
int goodG2BSink_14();
int goodG2B_104();
int goodB2GSink_12();
int goodB2G_99();
int CWE190_Integer_Overflow__char_fscanf_add_45_good();
int CWE190_Integer_Overflow__char_rand_square_07_bad();
int goodB2G1_58();
int goodB2G2_58();
int goodG2B1_53();
int goodG2B2_53();
int CWE190_Integer_Overflow__char_rand_square_07_good();
int CWE190_Integer_Overflow__char_rand_add_53_bad();
int goodG2B_105();
int goodB2G_100();
int CWE190_Integer_Overflow__char_rand_add_53_good();
int CWE190_Integer_Overflow__char_fscanf_add_06_bad();
int goodB2G1_59();
int goodB2G2_59();
int goodG2B1_54();
int goodG2B2_54();
int CWE190_Integer_Overflow__char_fscanf_add_06_good();
__int64 __fastcall badSource_5(unsigned __int8 a1);
int CWE190_Integer_Overflow__char_fscanf_square_42_bad();
__int64 goodG2BSource_5();
int goodG2B_106();
__int64 __fastcall goodB2GSource_5(unsigned __int8 a1);
int goodB2G_101();
int CWE190_Integer_Overflow__char_fscanf_square_42_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad();
int goodB2G_102();
int goodG2B_107();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_good();
int CWE190_Integer_Overflow__char_rand_multiply_34_bad();
int goodG2B_108();
int goodB2G_103();
int CWE190_Integer_Overflow__char_rand_multiply_34_good();
__int64 __fastcall badSource_6(unsigned __int8 a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_42_bad();
__int64 goodG2BSource_6();
int goodG2B_109();
__int64 __fastcall goodB2GSource_6(unsigned __int8 a1);
int goodB2G_104();
int CWE190_Integer_Overflow__char_fscanf_multiply_42_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_bad();
int goodG2B_110();
int goodB2G_105();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_54_bad();
int goodG2B_111();
int goodB2G_106();
int CWE190_Integer_Overflow__char_max_square_54_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_09_bad();
int goodB2G1_60();
int goodB2G2_60();
int goodG2B1_55();
int goodG2B2_55();
int CWE190_Integer_Overflow__int64_t_fscanf_add_09_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad();
int goodB2G_107();
int goodG2B_112();
int CWE190_Integer_Overflow__int64_t_fscanf_add_17_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_bad();
int goodB2G1_61();
int goodB2G2_61();
int goodG2B1_56();
int goodG2B2_56();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_good();
int __fastcall badSink_15(__int64 a1);
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_44_bad();
int __fastcall goodG2BSink_15(__int64 a1);
int goodG2B_113();
int __fastcall goodB2GSink_13(__int64 a1);
__int64 goodB2G_108();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_44_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_badSink();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodG2BSink();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodB2GSink();
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_05_bad();
int goodB2G1_62();
int goodB2G2_62();
int goodG2B1_57();
int goodG2B2_57();
int CWE190_Integer_Overflow__char_fscanf_square_05_good();
int __fastcall badSink_16(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_41_bad();
int __fastcall goodG2BSink_16(char a1);
int goodG2B_114();
int __fastcall goodB2GSink_14(char a1);
int goodB2G_109();
int CWE190_Integer_Overflow__char_fscanf_square_41_good();
int CWE190_Integer_Overflow__char_rand_multiply_01_bad();
int goodG2B_115();
int goodB2G_110();
int CWE190_Integer_Overflow__char_rand_multiply_01_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_goodB2GSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_multiply_52_bad();
int goodG2B_116();
int goodB2G_111();
int CWE190_Integer_Overflow__char_max_multiply_52_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_goodB2GSink(int a1);
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_61b_badSource(__int64 a1);
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodG2BSource();
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodB2GSource(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_goodB2GSink(char a1);
int __fastcall badSink_17(char a1);
__int64 CWE190_Integer_Overflow__char_fscanf_add_44_bad();
int __fastcall goodG2BSink_17(char a1);
int goodG2B_117();
int __fastcall goodB2GSink_15(char a1);
__int64 goodB2G_112();
__int64 CWE190_Integer_Overflow__char_fscanf_add_44_good();
int CWE190_Integer_Overflow__char_fscanf_add_09_bad();
int goodB2G1_63();
int goodB2G2_63();
int goodG2B1_58();
int goodG2B2_58();
int CWE190_Integer_Overflow__char_fscanf_add_09_good();
int CWE190_Integer_Overflow__char_fscanf_square_34_bad();
int goodG2B_118();
int goodB2G_113();
int CWE190_Integer_Overflow__char_fscanf_square_34_good();
int CWE190_Integer_Overflow__char_max_multiply_16_bad();
int goodB2G_114();
int goodG2B_119();
int CWE190_Integer_Overflow__char_max_multiply_16_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad();
int goodB2G1_64();
int goodB2G2_64();
int goodG2B1_59();
int goodG2B2_59();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
int CWE190_Integer_Overflow__int64_t_fscanf_add_08_bad();
int goodB2G1_65();
int goodB2G2_65();
int goodG2B1_60();
int goodG2B2_60();
int CWE190_Integer_Overflow__int64_t_fscanf_add_08_good();
int CWE190_Integer_Overflow__char_max_multiply_64_bad();
int goodG2B_120();
int goodB2G_115();
int CWE190_Integer_Overflow__char_max_multiply_64_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_square_65_bad();
int goodG2B_121();
int goodB2G_116();
int CWE190_Integer_Overflow__char_max_square_65_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad();
int goodB2G1_66();
int goodB2G2_66();
int goodG2B1_61();
int goodG2B2_61();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_good();
int CWE190_Integer_Overflow__char_rand_add_52_bad();
int goodG2B_122();
int goodB2G_117();
int CWE190_Integer_Overflow__char_rand_add_52_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_14_bad();
int goodB2G1_67();
int goodB2G2_67();
int goodG2B1_62();
int goodG2B2_62();
int CWE190_Integer_Overflow__char_fscanf_multiply_14_good();
int CWE190_Integer_Overflow__char_fscanf_add_64_bad();
int goodG2B_123();
int goodB2G_118();
int CWE190_Integer_Overflow__char_fscanf_add_64_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_32_bad();
int goodG2B_124();
int goodB2G_119();
int CWE190_Integer_Overflow__char_fscanf_multiply_32_good();
int CWE190_Integer_Overflow__char_max_multiply_51_bad();
int goodG2B_125();
int goodB2G_120();
int CWE190_Integer_Overflow__char_max_multiply_51_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_61_bad();
int goodG2B_126();
int goodB2G_121();
int CWE190_Integer_Overflow__int64_t_fscanf_add_61_good();
int CWE190_Integer_Overflow__char_rand_add_16_bad();
int goodB2G_122();
int goodG2B_127();
int CWE190_Integer_Overflow__char_rand_add_16_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Sink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Sink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad();
int goodG2B_128();
int goodB2G_123();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_fscanf_square_66_bad();
int goodG2B_129();
int goodB2G_124();
int CWE190_Integer_Overflow__char_fscanf_square_66_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_07_bad();
int goodB2G1_68();
int goodB2G2_68();
int goodG2B1_63();
int goodG2B2_63();
int CWE190_Integer_Overflow__int64_t_fscanf_add_07_good();
int badSink_18();
int CWE190_Integer_Overflow__char_max_multiply_45_bad();
int goodG2BSink_18();
int goodG2B_130();
int goodB2GSink_16();
int goodB2G_125();
int CWE190_Integer_Overflow__char_max_multiply_45_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_multiply_06_bad();
int goodB2G1_69();
int goodB2G2_69();
int goodG2B1_64();
int goodG2B2_64();
int CWE190_Integer_Overflow__char_max_multiply_06_good();
int CWE190_Integer_Overflow__char_fscanf_square_31_bad();
int goodG2B_131();
int goodB2G_126();
int CWE190_Integer_Overflow__char_fscanf_square_31_good();
int CWE190_Integer_Overflow__char_rand_add_51_bad();
int goodG2B_132();
int goodB2G_127();
int CWE190_Integer_Overflow__char_rand_add_51_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_04_bad();
int goodB2G1_70();
int goodB2G2_70();
int goodG2B1_65();
int goodG2B2_65();
int CWE190_Integer_Overflow__char_fscanf_multiply_04_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_31_bad();
int goodG2B_133();
int goodB2G_128();
int CWE190_Integer_Overflow__char_fscanf_multiply_31_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_15_bad();
int goodB2G1_71();
int goodB2G2_71();
int goodG2B1_66();
int goodG2B2_66();
int CWE190_Integer_Overflow__char_rand_square_15_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_67_bad();
int goodG2B_134();
int goodB2G_129();
int CWE190_Integer_Overflow__char_fscanf_multiply_67_good();
int badSink_19();
int CWE190_Integer_Overflow__char_rand_add_45_bad();
int goodG2BSink_19();
int goodG2B_135();
int goodB2GSink_17();
int goodB2G_130();
int CWE190_Integer_Overflow__char_rand_add_45_good();
int CWE190_Integer_Overflow__char_max_add_14_bad();
int goodB2G1_72();
int goodB2G2_72();
int goodG2B1_67();
int goodG2B2_67();
int CWE190_Integer_Overflow__char_max_add_14_good();
int CWE190_Integer_Overflow__char_rand_add_06_bad();
int goodB2G1_73();
int goodB2G2_73();
int goodG2B1_68();
int goodG2B2_68();
int CWE190_Integer_Overflow__char_rand_add_06_good();
int CWE190_Integer_Overflow__char_max_add_32_bad();
int goodG2B_136();
int goodB2G_131();
int CWE190_Integer_Overflow__char_max_add_32_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_53_bad();
int goodG2B_137();
int goodB2G_132();
int CWE190_Integer_Overflow__char_max_square_53_good();
int CWE190_Integer_Overflow__char_rand_square_05_bad();
int goodB2G1_74();
int goodB2G2_74();
int goodG2B1_69();
int goodG2B2_69();
int CWE190_Integer_Overflow__char_rand_square_05_good();
int CWE190_Integer_Overflow__char_max_add_04_bad();
int goodB2G1_75();
int goodB2G2_75();
int goodG2B1_70();
int goodG2B2_70();
int CWE190_Integer_Overflow__char_max_add_04_good();
int CWE190_Integer_Overflow__char_max_add_31_bad();
int goodG2B_138();
int goodB2G_133();
int CWE190_Integer_Overflow__char_max_add_31_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_22_bad();
int goodB2G1_76();
int goodB2G2_76();
int goodG2B_139();
int CWE190_Integer_Overflow__char_fscanf_multiply_22_good();
int CWE190_Integer_Overflow__char_max_multiply_68b_badSink();
int CWE190_Integer_Overflow__char_max_multiply_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_max_multiply_68b_goodB2GSink();
int CWE190_Integer_Overflow__char_fscanf_square_18_bad();
int goodB2G_134();
int goodG2B_140();
int CWE190_Integer_Overflow__char_fscanf_square_18_good();
int CWE190_Integer_Overflow__char_max_multiply_10_bad();
int goodB2G1_77();
int goodB2G2_77();
int goodG2B1_71();
int goodG2B2_71();
int CWE190_Integer_Overflow__char_max_multiply_10_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_goodB2GSink(_BYTE *a1);
int CWE190_Integer_Overflow__char_max_add_67_bad();
int goodG2B_141();
int goodB2G_135();
int CWE190_Integer_Overflow__char_max_add_67_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodB2GSink(char a1);
int badSink_20();
int CWE190_Integer_Overflow__char_rand_square_45_bad();
int goodG2BSink_20();
int goodG2B_142();
int goodB2GSink_18();
int goodB2G_136();
int CWE190_Integer_Overflow__char_rand_square_45_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_multiply_63_bad();
int goodG2B_143();
int goodB2G_137();
int CWE190_Integer_Overflow__char_rand_multiply_63_good();
int CWE190_Integer_Overflow__char_fscanf_add_68b_badSink();
int CWE190_Integer_Overflow__char_fscanf_add_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_fscanf_add_68b_goodB2GSink();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_bad();
int goodG2B_144();
int goodB2G_138();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_13_bad();
int goodB2G1_78();
int goodB2G2_78();
int goodG2B1_72();
int goodG2B2_72();
int CWE190_Integer_Overflow__char_fscanf_multiply_13_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_rand_multiply_14_bad();
int goodB2G1_79();
int goodB2G2_79();
int goodG2B1_73();
int goodG2B2_73();
int CWE190_Integer_Overflow__char_rand_multiply_14_good();
int CWE190_Integer_Overflow__char_rand_add_64_bad();
int goodG2B_145();
int goodB2G_139();
int CWE190_Integer_Overflow__char_rand_add_64_good();
int CWE190_Integer_Overflow__char_fscanf_add_22_bad();
int goodB2G1_80();
int goodB2G2_80();
int goodG2B_146();
int CWE190_Integer_Overflow__char_fscanf_add_22_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_rand_multiply_32_bad();
int goodG2B_147();
int goodB2G_140();
int CWE190_Integer_Overflow__char_rand_multiply_32_good();
int CWE190_Integer_Overflow__char_max_multiply_31_bad();
int goodG2B_148();
int goodB2G_141();
int CWE190_Integer_Overflow__char_max_multiply_31_good();
int CWE190_Integer_Overflow__char_fscanf_add_63_bad();
int goodG2B_149();
int goodB2G_142();
int CWE190_Integer_Overflow__char_fscanf_add_63_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_goodB2GSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_badSink(_QWORD *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodG2BSink(_QWORD *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodB2GSink(_QWORD *a1);
int CWE190_Integer_Overflow__char_max_square_52_bad();
int goodG2B_150();
int goodB2G_143();
int CWE190_Integer_Overflow__char_max_square_52_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_66_bad();
int goodG2B_151();
int goodB2G_144();
int CWE190_Integer_Overflow__char_rand_square_66_good();
int CWE190_Integer_Overflow__char_max_add_22_bad();
int goodB2G1_81();
int goodB2G2_81();
int goodG2B_152();
int CWE190_Integer_Overflow__char_max_add_22_good();
int CWE190_Integer_Overflow__char_max_square_16_bad();
int goodB2G_145();
int goodG2B_153();
int CWE190_Integer_Overflow__char_max_square_16_good();
__int64 __fastcall badSource_7(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_42_bad();
__int64 goodG2BSource_7();
int goodG2B_154();
__int64 __fastcall goodB2GSource_7(__int64 a1);
int goodB2G_146();
int CWE190_Integer_Overflow__int64_t_fscanf_add_42_good();
int __fastcall badSink_21(char a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_21_bad();
int __fastcall goodB2G1Sink_1(char a1);
int goodB2G1_82();
int __fastcall goodB2G2Sink_1(char a1);
int goodB2G2_82();
int __fastcall goodG2BSink_21(char a1);
int goodG2B_155();
int CWE190_Integer_Overflow__char_fscanf_multiply_21_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_03_bad();
int goodB2G1_83();
int goodB2G2_83();
int goodG2B1_74();
int goodG2B2_74();
int CWE190_Integer_Overflow__char_fscanf_multiply_03_good();
int CWE190_Integer_Overflow__char_rand_add_13_bad();
int goodB2G1_84();
int goodB2G2_84();
int goodG2B1_75();
int goodG2B2_75();
int CWE190_Integer_Overflow__char_rand_add_13_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_rand_multiply_04_bad();
int goodB2G1_85();
int goodB2G2_85();
int goodG2B1_76();
int goodG2B2_76();
int CWE190_Integer_Overflow__char_rand_multiply_04_good();
int CWE190_Integer_Overflow__char_rand_multiply_31_bad();
int goodG2B_156();
int goodB2G_147();
int CWE190_Integer_Overflow__char_rand_multiply_31_good();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_bad();
int goodG2B_157();
__int64 goodB2G_148();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_18_bad();
int goodB2G_149();
int goodG2B_158();
int CWE190_Integer_Overflow__char_fscanf_multiply_18_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_fscanf_square_13_bad();
int goodB2G1_86();
int goodB2G2_86();
int goodG2B1_77();
int goodG2B2_77();
int CWE190_Integer_Overflow__char_fscanf_square_13_good();
int CWE190_Integer_Overflow__char_fscanf_square_14_bad();
int goodB2G1_87();
int goodB2G2_87();
int goodG2B1_78();
int goodG2B2_78();
int CWE190_Integer_Overflow__char_fscanf_square_14_good();
int CWE190_Integer_Overflow__char_fscanf_square_32_bad();
int goodG2B_159();
int goodB2G_150();
int CWE190_Integer_Overflow__char_fscanf_square_32_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_goodB2GSink(char *a1);
int CWE190_Integer_Overflow__char_max_square_51_bad();
int goodG2B_160();
int goodB2G_151();
int CWE190_Integer_Overflow__char_max_square_51_good();
int CWE190_Integer_Overflow__char_rand_multiply_64_bad();
int goodG2B_161();
int goodB2G_152();
int CWE190_Integer_Overflow__char_rand_multiply_64_good();
int CWE190_Integer_Overflow__char_max_add_13_bad();
int goodB2G1_88();
int goodB2G2_88();
int goodG2B1_79();
int goodG2B2_79();
int CWE190_Integer_Overflow__char_max_add_13_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodB2GSink(char a1);
__int64 CWE190_Integer_Overflow__char_rand_add_61b_badSource();
__int64 CWE190_Integer_Overflow__char_rand_add_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_rand_add_61b_goodB2GSource();
int CWE190_Integer_Overflow__char_fscanf_add_17_bad();
int goodB2G_153();
int goodG2B_162();
int CWE190_Integer_Overflow__char_fscanf_add_17_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_12_bad();
int goodB2G_154();
int goodG2B_163();
int CWE190_Integer_Overflow__char_fscanf_multiply_12_good();
int __fastcall badSink_22(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_41_bad();
int __fastcall goodG2BSink_22(__int64 a1);
int goodG2B_164();
int __fastcall goodB2GSink_19(__int64 a1);
int goodB2G_155();
int CWE190_Integer_Overflow__int64_t_fscanf_add_41_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_bad();
int goodB2G1_89();
int goodB2G2_89();
int goodG2B1_80();
int goodG2B2_80();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_good();
int CWE190_Integer_Overflow__char_max_square_68b_badSink();
int CWE190_Integer_Overflow__char_max_square_68b_goodG2BSink();
int CWE190_Integer_Overflow__char_max_square_68b_goodB2GSink();
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_goodB2GSink(char a1);
int badSink_23();
int CWE190_Integer_Overflow__char_max_square_45_bad();
int goodG2BSink_23();
int goodG2B_165();
int goodB2GSink_20();
int goodB2G_156();
int CWE190_Integer_Overflow__char_max_square_45_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad();
int goodG2B_166();
int goodB2G_157();
int CWE190_Integer_Overflow__int64_t_fscanf_add_34_good();
int CWE190_Integer_Overflow__char_fscanf_square_09_bad();
int goodB2G1_90();
int goodB2G2_90();
int goodG2B1_81();
int goodG2B2_81();
int CWE190_Integer_Overflow__char_fscanf_square_09_good();
int CWE190_Integer_Overflow__char_fscanf_square_04_bad();
int goodB2G1_91();
int goodB2G2_91();
int goodG2B1_82();
int goodG2B2_82();
int CWE190_Integer_Overflow__char_fscanf_square_04_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodB2GSink(__int64 a1);
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_add_61b_badSource(unsigned __int8 a1);
__int64 CWE190_Integer_Overflow__char_fscanf_add_61b_goodG2BSource();
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_add_61b_goodB2GSource(unsigned __int8 a1);
int __fastcall badSink_24(char a1);
int CWE190_Integer_Overflow__char_max_add_21_bad();
int __fastcall goodB2G1Sink_2(char a1);
int goodB2G1_92();
int __fastcall goodB2G2Sink_2(char a1);
int goodB2G2_92();
int __fastcall goodG2BSink_24(char a1);
int goodG2B_167();
int CWE190_Integer_Overflow__char_max_add_21_good();
int CWE190_Integer_Overflow__char_max_add_03_bad();
int goodB2G1_93();
int goodB2G2_93();
int goodG2B1_83();
int goodG2B2_83();
int CWE190_Integer_Overflow__char_max_add_03_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_11_bad();
int goodB2G1_94();
int goodB2G2_94();
int goodG2B1_84();
int goodG2B2_84();
int CWE190_Integer_Overflow__char_fscanf_multiply_11_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_02_bad();
int goodB2G1_95();
int goodB2G2_95();
int goodG2B1_85();
int goodG2B2_85();
int CWE190_Integer_Overflow__char_fscanf_multiply_02_good();
int CWE190_Integer_Overflow__char_fscanf_square_67_bad();
int goodG2B_168();
int goodB2G_158();
int CWE190_Integer_Overflow__char_fscanf_square_67_good();
int CWE190_Integer_Overflow__char_max_add_18_bad();
int goodB2G_159();
int goodG2B_169();
int CWE190_Integer_Overflow__char_max_add_18_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_goodB2GSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(char *a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_66_bad();
int goodG2B_170();
int goodB2G_160();
int CWE190_Integer_Overflow__int64_t_fscanf_add_66_good();
int CWE190_Integer_Overflow__char_fscanf_add_61_bad();
int goodG2B_171();
int goodB2G_161();
int CWE190_Integer_Overflow__char_fscanf_add_61_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_bad();
int goodG2B_172();
int goodB2G_162();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_01_bad();
int goodG2B_173();
int goodB2G_163();
int CWE190_Integer_Overflow__char_fscanf_multiply_01_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_fscanf_add_07_bad();
int goodB2G1_96();
int goodB2G2_96();
int goodG2B1_86();
int goodG2B2_86();
int CWE190_Integer_Overflow__char_fscanf_add_07_good();
int __fastcall badSink_25(char a1);
int CWE190_Integer_Overflow__char_rand_add_21_bad();
int __fastcall goodB2G1Sink_3(char a1);
int goodB2G1_97();
int __fastcall goodB2G2Sink_3(char a1);
int goodB2G2_97();
int __fastcall goodG2BSink_25(char a1);
int goodG2B_174();
int CWE190_Integer_Overflow__char_rand_add_21_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad();
int goodB2G_164();
int goodG2B_175();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_good();
int CWE190_Integer_Overflow__char_fscanf_square_22_bad();
int goodB2G1_98();
int goodB2G2_98();
int goodG2B_176();
int CWE190_Integer_Overflow__char_fscanf_square_22_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_bad();
int goodB2G1_99();
int goodB2G2_99();
int goodG2B1_87();
int goodG2B2_87();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_good();
int CWE190_Integer_Overflow__char_max_add_11_bad();
int goodB2G1_100();
int goodB2G2_100();
int goodG2B1_88();
int goodG2B2_88();
int CWE190_Integer_Overflow__char_max_add_11_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE190_Integer_Overflow__char_fscanf_square_08_bad();
int goodB2G1_101();
int goodB2G2_101();
int goodG2B1_89();
int goodG2B2_89();
int CWE190_Integer_Overflow__char_fscanf_square_08_good();
int CWE190_Integer_Overflow__char_rand_square_53_bad();
int goodG2B_177();
int goodB2G_165();
int CWE190_Integer_Overflow__char_rand_square_53_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_09_bad();
int goodB2G1_102();
int goodB2G2_102();
int goodG2B1_90();
int goodG2B2_90();
int CWE190_Integer_Overflow__char_fscanf_multiply_09_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_goodB2GSink(char a1);
int __fastcall badSink_26(char a1);
int CWE190_Integer_Overflow__char_rand_multiply_21_bad();
int __fastcall goodB2G1Sink_4(char a1);
int goodB2G1_103();
int __fastcall goodB2G2Sink_4(char a1);
int goodB2G2_103();
int __fastcall goodG2BSink_26(char a1);
int goodG2B_178();
int CWE190_Integer_Overflow__char_rand_multiply_21_good();
int CWE190_Integer_Overflow__char_rand_multiply_03_bad();
int goodB2G1_104();
int goodB2G2_104();
int goodG2B1_91();
int goodG2B2_91();
int CWE190_Integer_Overflow__char_rand_multiply_03_good();
int CWE190_Integer_Overflow__char_max_multiply_63_bad();
int goodG2B_179();
int goodB2G_166();
int CWE190_Integer_Overflow__char_max_multiply_63_good();
int CWE190_Integer_Overflow__char_max_multiply_17_bad();
int goodB2G_167();
int goodG2B_180();
int CWE190_Integer_Overflow__char_max_multiply_17_good();
int __fastcall badSink_27(int a1);
int CWE190_Integer_Overflow__char_max_multiply_44_bad();
int __fastcall goodG2BSink_27(int a1);
int goodG2B_181();
int __fastcall goodB2GSink_21(int a1);
int goodB2G_168();
int CWE190_Integer_Overflow__char_max_multiply_44_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_66_bad();
int goodG2B_182();
int goodB2G_169();
int CWE190_Integer_Overflow__char_fscanf_multiply_66_good();
int CWE190_Integer_Overflow__char_rand_square_14_bad();
int goodB2G1_105();
int goodB2G2_105();
int goodG2B1_92();
int goodG2B2_92();
int CWE190_Integer_Overflow__char_rand_square_14_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_32_bad();
int goodG2B_183();
int goodB2G_170();
int CWE190_Integer_Overflow__char_rand_square_32_good();
int CWE190_Integer_Overflow__char_max_add_01_bad();
int goodG2B_184();
int goodB2G_171();
int CWE190_Integer_Overflow__char_max_add_01_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_bad();
int goodG2B_185();
int goodB2G_172();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodB2GSink(__int64 a1);
void CWE190_Integer_Overflow__char_rand_add_17_bad();
void goodB2G_173();
int goodG2B_186();
int CWE190_Integer_Overflow__char_rand_add_17_good();
int __fastcall badSink_28(char a1);
__int64 CWE190_Integer_Overflow__char_rand_add_44_bad();
int __fastcall goodG2BSink_28(char a1);
int goodG2B_187();
int __fastcall goodB2GSink_22(char a1);
__int64 goodB2G_174();
__int64 CWE190_Integer_Overflow__char_rand_add_44_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad();
int goodB2G_175();
int goodG2B_188();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_good();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE190_Integer_Overflow__char_max_multiply_08_bad();
int goodB2G1_106();
int goodB2G2_106();
int goodG2B1_93();
int goodG2B2_93();
int CWE190_Integer_Overflow__char_max_multiply_08_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_goodB2GSink(char a1);
int __fastcall badSink_29(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_21_bad();
int __fastcall goodB2G1Sink_5(char a1);
int goodB2G1_107();
int __fastcall goodB2G2Sink_5(char a1);
int goodB2G2_107();
int __fastcall goodG2BSink_29(char a1);
int goodG2B_189();
int CWE190_Integer_Overflow__char_fscanf_square_21_good();
int CWE190_Integer_Overflow__char_fscanf_square_03_bad();
int goodB2G1_108();
int goodB2G2_108();
int goodG2B1_94();
int goodG2B2_94();
int CWE190_Integer_Overflow__char_fscanf_square_03_good();
int CWE190_Integer_Overflow__char_rand_square_04_bad();
int goodB2G1_109();
int goodB2G2_109();
int goodG2B1_95();
int goodG2B2_95();
int CWE190_Integer_Overflow__char_rand_square_04_good();
int CWE190_Integer_Overflow__char_rand_square_31_bad();
int goodG2B_190();
int goodB2G_176();
int CWE190_Integer_Overflow__char_rand_square_31_good();
__int64 staticReturnsTrue_6();
__int64 staticReturnsFalse_6();
int CWE190_Integer_Overflow__char_max_add_08_bad();
int goodB2G1_110();
int goodB2G2_110();
int goodG2B1_96();
int goodG2B2_96();
int CWE190_Integer_Overflow__char_max_add_08_good();
int CWE190_Integer_Overflow__char_max_multiply_15_bad();
int goodB2G1_111();
int goodB2G2_111();
int goodG2B1_97();
int goodG2B2_97();
int CWE190_Integer_Overflow__char_max_multiply_15_good();
int CWE190_Integer_Overflow__char_max_multiply_61_bad();
int goodG2B_191();
int goodB2G_177();
int CWE190_Integer_Overflow__char_max_multiply_61_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_54_bad();
int goodG2B_192();
int goodB2G_178();
int CWE190_Integer_Overflow__char_fscanf_multiply_54_good();
int CWE190_Integer_Overflow__char_rand_multiply_11_bad();
int goodB2G1_112();
int goodB2G2_112();
int goodG2B1_98();
int goodG2B2_98();
int CWE190_Integer_Overflow__char_rand_multiply_11_good();
int CWE190_Integer_Overflow__char_rand_multiply_02_bad();
int goodB2G1_113();
int goodB2G2_113();
int goodG2B1_99();
int goodG2B2_99();
int CWE190_Integer_Overflow__char_rand_multiply_02_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_bad();
int goodG2B_193();
int goodB2G_179();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_goodB2GSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_multiply_07_bad();
int goodB2G1_114();
int goodB2G2_114();
int goodG2B1_100();
int goodG2B2_100();
int CWE190_Integer_Overflow__char_max_multiply_07_good();
int __fastcall badSink_30(int a1);
int CWE190_Integer_Overflow__char_rand_multiply_41_bad();
int __fastcall goodG2BSink_30(int a1);
int goodG2B_194();
int __fastcall goodB2GSink_23(int a1);
int goodB2G_180();
int CWE190_Integer_Overflow__char_rand_multiply_41_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_61_bad();
int goodG2B_195();
int goodB2G_181();
int CWE190_Integer_Overflow__char_fscanf_multiply_61_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_badSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_goodG2BSink(unsigned __int8 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_goodB2GSink(unsigned __int8 a1);
int CWE190_Integer_Overflow__char_max_square_66_bad();
int goodG2B_196();
int goodB2G_182();
int CWE190_Integer_Overflow__char_max_square_66_good();
int CWE190_Integer_Overflow__char_max_add_02_bad();
int goodB2G1_115();
int goodB2G2_115();
int goodG2B1_101();
int goodG2B2_101();
int CWE190_Integer_Overflow__char_max_add_02_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_square_51_bad();
int goodG2B_197();
int goodB2G_183();
int CWE190_Integer_Overflow__char_fscanf_square_51_good();
int CWE190_Integer_Overflow__char_rand_square_68_bad();
int goodG2B_198();
int goodB2G_184();
int CWE190_Integer_Overflow__char_rand_square_68_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_rand_add_32_bad();
int goodG2B_199();
int goodB2G_185();
int CWE190_Integer_Overflow__char_rand_add_32_good();
int __fastcall badSink_31(char a1);
int CWE190_Integer_Overflow__char_rand_square_21_bad();
int __fastcall goodB2G1Sink_6(char a1);
int goodB2G1_116();
int __fastcall goodB2G2Sink_6(char a1);
int goodB2G2_116();
int __fastcall goodG2BSink_31(char a1);
int goodG2B_200();
int CWE190_Integer_Overflow__char_rand_square_21_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_multiply_67_bad();
int goodG2B_201();
int goodB2G_186();
int CWE190_Integer_Overflow__char_max_multiply_67_good();
int __fastcall badSink_32(char a1);
int CWE190_Integer_Overflow__char_fscanf_add_21_bad();
int __fastcall goodB2G1Sink_7(char a1);
int goodB2G1_117();
int __fastcall goodB2G2Sink_7(char a1);
int goodB2G2_117();
int __fastcall goodG2BSink_32(char a1);
int goodG2B_202();
int CWE190_Integer_Overflow__char_fscanf_add_21_good();
int CWE190_Integer_Overflow__char_fscanf_add_03_bad();
int goodB2G1_118();
int goodB2G2_118();
int goodG2B1_102();
int goodG2B2_102();
int CWE190_Integer_Overflow__char_fscanf_add_03_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_04_bad();
int goodB2G1_119();
int goodB2G2_119();
int goodG2B1_103();
int goodG2B2_103();
int CWE190_Integer_Overflow__char_rand_add_04_good();
int CWE190_Integer_Overflow__char_rand_add_31_bad();
int goodG2B_203();
int goodB2G_187();
int CWE190_Integer_Overflow__char_rand_add_31_good();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_65_bad();
int goodG2B_204();
__int64 goodB2G_188();
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_65_good();
int CWE190_Integer_Overflow__char_rand_multiply_66_bad();
int goodG2B_205();
int goodB2G_189();
int CWE190_Integer_Overflow__char_rand_multiply_66_good();
int CWE190_Integer_Overflow__char_max_square_12_bad();
int goodB2G_190();
int goodG2B_206();
int CWE190_Integer_Overflow__char_max_square_12_good();
int CWE190_Integer_Overflow__char_fscanf_add_18_bad();
int goodB2G_191();
int goodG2B_207();
int CWE190_Integer_Overflow__char_fscanf_add_18_good();
int CWE190_Integer_Overflow__char_rand_add_61_bad();
int goodG2B_208();
int goodB2G_192();
int CWE190_Integer_Overflow__char_rand_add_61_good();
int CWE190_Integer_Overflow__char_max_square_09_bad();
int goodB2G1_120();
int goodB2G2_120();
int goodG2B1_104();
int goodG2B2_104();
int CWE190_Integer_Overflow__char_max_square_09_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_63_bad();
int goodG2B_209();
int goodB2G_193();
int CWE190_Integer_Overflow__char_fscanf_multiply_63_good();
int CWE190_Integer_Overflow__char_max_square_64_bad();
int goodG2B_210();
int goodB2G_194();
int CWE190_Integer_Overflow__char_max_square_64_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_goodB2GSink(char *a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_bad();
int goodG2B_211();
int goodB2G_195();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_good();
int CWE190_Integer_Overflow__char_fscanf_add_12_bad();
int goodB2G_196();
int goodG2B_212();
int CWE190_Integer_Overflow__char_fscanf_add_12_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad();
int goodB2G1_121();
int goodB2G2_121();
int goodG2B1_105();
int goodG2B2_105();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_good();
int CWE190_Integer_Overflow__char_max_multiply_22_bad();
int goodB2G1_122();
int goodB2G2_122();
int goodG2B_213();
int CWE190_Integer_Overflow__char_max_multiply_22_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodB2GSink(__int64 a1);
__int64 __fastcall badSource_8(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_bad();
__int64 goodG2BSource_8();
int goodG2B_214();
__int64 __fastcall goodB2GSource_8(__int64 a1);
int goodB2G_197();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_good();
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_goodB2GSink(_BYTE *a1);
__int64 staticReturnsTrue_7();
__int64 staticReturnsFalse_7();
int CWE190_Integer_Overflow__char_fscanf_multiply_08_bad();
int goodB2G1_123();
int goodB2G2_123();
int goodG2B1_106();
int goodG2B2_106();
int CWE190_Integer_Overflow__char_fscanf_multiply_08_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_52_bad();
int goodG2B_215();
int goodB2G_198();
int CWE190_Integer_Overflow__char_rand_square_52_good();
int CWE190_Integer_Overflow__char_fscanf_add_11_bad();
int goodB2G1_124();
int goodB2G2_124();
int goodG2B1_107();
int goodG2B2_107();
int CWE190_Integer_Overflow__char_fscanf_add_11_good();
int CWE190_Integer_Overflow__char_fscanf_add_02_bad();
int goodB2G1_125();
int goodB2G2_125();
int goodG2B1_108();
int goodG2B2_108();
int CWE190_Integer_Overflow__char_fscanf_add_02_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_22_bad();
int goodB2G1_126();
int goodB2G2_126();
int goodG2B_216();
int CWE190_Integer_Overflow__char_rand_add_22_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_rand_square_16_bad();
int goodB2G_199();
int goodG2B_217();
int CWE190_Integer_Overflow__char_rand_square_16_good();
int CWE190_Integer_Overflow__char_max_multiply_13_bad();
int goodB2G1_127();
int goodB2G2_127();
int goodG2B1_109();
int goodG2B2_109();
int CWE190_Integer_Overflow__char_max_multiply_13_good();
int CWE190_Integer_Overflow__char_fscanf_add_14_bad();
int goodB2G1_128();
int goodB2G2_128();
int goodG2B1_110();
int goodG2B2_110();
int CWE190_Integer_Overflow__char_fscanf_add_14_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_bad();
int goodB2G1_129();
int goodB2G2_129();
int goodG2B1_111();
int goodG2B2_111();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_17_bad();
int goodB2G_200();
int goodG2B_218();
int CWE190_Integer_Overflow__char_fscanf_multiply_17_good();
int __fastcall badSink_33(__int64 a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_bad();
int __fastcall goodG2BSink_33(__int64 a1);
int goodG2B_219();
int __fastcall goodB2GSink_24(__int64 a1);
int goodB2G_201();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_good();
int CWE190_Integer_Overflow__char_fscanf_add_10_bad();
int goodB2G1_130();
int goodB2G2_130();
int goodG2B1_112();
int goodG2B2_112();
int CWE190_Integer_Overflow__char_fscanf_add_10_good();
int __fastcall badSink_34(int a1);
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_44_bad();
int __fastcall goodG2BSink_34(int a1);
int goodG2B_220();
int __fastcall goodB2GSink_25(int a1);
__int64 goodB2G_202();
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_44_good();
__int64 CWE190_Integer_Overflow__char_max_add_61b_badSource();
__int64 CWE190_Integer_Overflow__char_max_add_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_max_add_61b_goodB2GSource();
int CWE190_Integer_Overflow__char_max_add_63_bad();
int goodG2B_221();
int goodB2G_203();
int CWE190_Integer_Overflow__char_max_add_63_good();
int CWE190_Integer_Overflow__char_max_square_67_bad();
int goodG2B_222();
int goodB2G_204();
int CWE190_Integer_Overflow__char_max_square_67_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_53_bad();
int goodG2B_223();
int goodB2G_205();
int CWE190_Integer_Overflow__int64_t_fscanf_add_53_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad();
int goodG2B_224();
int goodB2G_206();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_good();
int CWE190_Integer_Overflow__char_fscanf_add_01_bad();
int goodG2B_225();
int goodB2G_207();
int CWE190_Integer_Overflow__char_fscanf_add_01_good();
int CWE190_Integer_Overflow__char_rand_square_51_bad();
int goodG2B_226();
int goodB2G_208();
int CWE190_Integer_Overflow__char_rand_square_51_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodB2GSink(__int64 a1);
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_61b_badSource(unsigned __int8 a1);
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodG2BSource();
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodB2GSource(unsigned __int8 a1);
int __fastcall badSink_35(char a1);
int CWE190_Integer_Overflow__char_max_multiply_21_bad();
int __fastcall goodB2G1Sink_8(char a1);
int goodB2G1_131();
int __fastcall goodB2G2Sink_8(char a1);
int goodB2G2_131();
int __fastcall goodG2BSink_35(char a1);
int goodG2B_227();
int CWE190_Integer_Overflow__char_max_multiply_21_good();
int CWE190_Integer_Overflow__char_max_multiply_03_bad();
int goodB2G1_132();
int goodB2G2_132();
int goodG2B1_113();
int goodG2B2_113();
int CWE190_Integer_Overflow__char_max_multiply_03_good();
int CWE190_Integer_Overflow__char_rand_add_09_bad();
int goodB2G1_133();
int goodB2G2_133();
int goodG2B1_114();
int goodG2B2_114();
int CWE190_Integer_Overflow__char_rand_add_09_good();
int CWE190_Integer_Overflow__char_max_multiply_18_bad();
int goodB2G_209();
int goodG2B_228();
int CWE190_Integer_Overflow__char_max_multiply_18_good();
int CWE190_Integer_Overflow__char_rand_square_06_bad();
int goodB2G1_134();
int goodB2G2_134();
int goodG2B1_115();
int goodG2B2_115();
int CWE190_Integer_Overflow__char_rand_square_06_good();
int CWE190_Integer_Overflow__char_max_square_32_bad();
int goodG2B_229();
int goodB2G_210();
int CWE190_Integer_Overflow__char_max_square_32_good();
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodB2GSink(__int64 a1);
__int64 staticReturnsTrue_8();
__int64 staticReturnsFalse_8();
int CWE190_Integer_Overflow__char_fscanf_add_08_bad();
int goodB2G1_135();
int goodB2G2_135();
int goodG2B1_116();
int goodG2B2_116();
int CWE190_Integer_Overflow__char_fscanf_add_08_good();
int CWE190_Integer_Overflow__char_rand_add_03_bad();
int goodB2G1_136();
int goodB2G2_136();
int goodG2B1_117();
int goodG2B2_117();
int CWE190_Integer_Overflow__char_rand_add_03_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_add_17_bad();
int goodB2G_211();
int goodG2B_230();
int CWE190_Integer_Overflow__char_max_add_17_good();
int CWE190_Integer_Overflow__char_max_multiply_12_bad();
int goodB2G_212();
int goodG2B_231();
int CWE190_Integer_Overflow__char_max_multiply_12_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_18_bad();
int goodB2G_213();
int goodG2B_232();
int CWE190_Integer_Overflow__char_rand_add_18_good();
int CWE190_Integer_Overflow__char_max_multiply_04_bad();
int goodB2G1_137();
int goodB2G2_137();
int goodG2B1_118();
int goodG2B2_118();
int CWE190_Integer_Overflow__char_max_multiply_04_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_07_bad();
int goodB2G1_138();
int goodB2G2_138();
int goodG2B1_119();
int goodG2B2_119();
int CWE190_Integer_Overflow__char_fscanf_multiply_07_good();
int CWE190_Integer_Overflow__char_max_square_04_bad();
int goodB2G1_139();
int goodB2G2_139();
int goodG2B1_120();
int goodG2B2_120();
int CWE190_Integer_Overflow__char_max_square_04_good();
int CWE190_Integer_Overflow__char_max_square_31_bad();
int goodG2B_233();
int goodB2G_214();
int CWE190_Integer_Overflow__char_max_square_31_good();
int CWE190_Integer_Overflow__char_fscanf_add_66_bad();
int goodG2B_234();
int goodB2G_215();
int CWE190_Integer_Overflow__char_fscanf_add_66_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_goodB2GSink(char *a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_goodB2GSink(char a1);
int CWE190_Integer_Overflow__int64_t_fscanf_add_52_bad();
int goodG2B_235();
int goodB2G_216();
int CWE190_Integer_Overflow__int64_t_fscanf_add_52_good();
int CWE190_Integer_Overflow__char_rand_add_12_bad();
int goodB2G_217();
int goodG2B_236();
int CWE190_Integer_Overflow__char_rand_add_12_good();
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodB2GSink(__int64 a1);
int CWE190_Integer_Overflow__char_max_multiply_11_bad();
int goodB2G1_140();
int goodB2G2_140();
int goodG2B1_121();
int goodG2B2_121();
int CWE190_Integer_Overflow__char_max_multiply_11_good();
int CWE190_Integer_Overflow__char_max_multiply_02_bad();
int goodB2G1_141();
int goodB2G2_141();
int goodG2B1_122();
int goodG2B2_122();
int CWE190_Integer_Overflow__char_max_multiply_02_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_goodB2GSink(char *a1);
int CWE190_Integer_Overflow__char_max_add_34_bad();
int goodG2B_237();
int goodB2G_218();
int CWE190_Integer_Overflow__char_max_add_34_good();
__int64 CWE190_Integer_Overflow__char_rand_square_61b_badSource();
__int64 CWE190_Integer_Overflow__char_rand_square_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_rand_square_61b_goodB2GSource();
int CWE190_Integer_Overflow__char_rand_add_54_bad();
int goodG2B_238();
int goodB2G_219();
int CWE190_Integer_Overflow__char_rand_add_54_good();
int __fastcall CWE190_Integer_Overflow__char_max_square_22_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodB2G1Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodB2G2Sink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodG2BSink(char a1);
int CWE190_Integer_Overflow__char_max_add_61_bad();
int goodG2B_239();
int goodB2G_220();
int CWE190_Integer_Overflow__char_max_add_61_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_add_11_bad();
int goodB2G1_142();
int goodB2G2_142();
int goodG2B1_123();
int goodG2B2_123();
int CWE190_Integer_Overflow__char_rand_add_11_good();
int CWE190_Integer_Overflow__char_rand_add_02_bad();
int goodB2G1_143();
int goodB2G2_143();
int goodG2B1_124();
int goodG2B2_124();
int CWE190_Integer_Overflow__char_rand_add_02_good();
int __fastcall badSink_36(char a1);
int CWE190_Integer_Overflow__char_rand_square_41_bad();
int __fastcall goodG2BSink_36(char a1);
int goodG2B_240();
int __fastcall goodB2GSink_26(char a1);
int goodB2G_221();
int CWE190_Integer_Overflow__char_rand_square_41_good();
int CWE190_Integer_Overflow__char_max_multiply_01_bad();
int goodG2B_241();
int goodB2G_222();
int CWE190_Integer_Overflow__char_max_multiply_01_good();
int CWE190_Integer_Overflow__char_rand_multiply_13_bad();
int goodB2G1_144();
int goodB2G2_144();
int goodG2B1_125();
int goodG2B2_125();
int CWE190_Integer_Overflow__char_rand_multiply_13_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_fscanf_square_63_bad();
int goodG2B_242();
int goodB2G_223();
int CWE190_Integer_Overflow__char_fscanf_square_63_good();
int CWE190_Integer_Overflow__char_max_add_07_bad();
int goodB2G1_145();
int goodB2G2_145();
int goodG2B1_126();
int goodG2B2_126();
int CWE190_Integer_Overflow__char_max_add_07_good();
int CWE190_Integer_Overflow__char_rand_add_10_bad();
int goodB2G1_146();
int goodB2G2_146();
int goodG2B1_127();
int goodG2B2_127();
int CWE190_Integer_Overflow__char_rand_add_10_good();
int __fastcall badSink_37(int a1);
__int64 CWE190_Integer_Overflow__char_rand_multiply_44_bad();
int __fastcall goodG2BSink_37(int a1);
int goodG2B_243();
int __fastcall goodB2GSink_27(int a1);
__int64 goodB2G_224();
__int64 CWE190_Integer_Overflow__char_rand_multiply_44_good();
int badSink_38();
int CWE190_Integer_Overflow__int64_t_fscanf_add_45_bad();
int goodG2BSink_38();
int goodG2B_244();
int goodB2GSink_28();
int goodB2G_225();
int CWE190_Integer_Overflow__int64_t_fscanf_add_45_good();
int CWE190_Integer_Overflow__char_max_square_22_bad();
int goodB2G1_147();
int goodB2G2_147();
int goodG2B_245();
int CWE190_Integer_Overflow__char_max_square_22_good();
int CWE190_Integer_Overflow__char_fscanf_square_07_bad();
int goodB2G1_148();
int goodB2G2_148();
int goodG2B1_128();
int goodG2B2_128();
int CWE190_Integer_Overflow__char_fscanf_square_07_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_06_bad();
int goodB2G1_149();
int goodB2G2_149();
int goodG2B1_129();
int goodG2B2_129();
int CWE190_Integer_Overflow__int64_t_fscanf_add_06_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_10_bad();
int goodB2G1_150();
int goodB2G2_150();
int goodG2B1_130();
int goodG2B2_130();
int CWE190_Integer_Overflow__char_fscanf_multiply_10_good();
int CWE190_Integer_Overflow__char_rand_add_01_bad();
int goodG2B_246();
int goodB2G_226();
int CWE190_Integer_Overflow__char_rand_add_01_good();
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_multiply_09_bad();
int goodB2G1_151();
int goodB2G2_151();
int goodG2B1_131();
int goodG2B2_131();
int CWE190_Integer_Overflow__char_max_multiply_09_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_goodB2GSink(char a1);
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_badSource();
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_goodG2BSource();
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_goodB2GSource();
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_13_bad();
int goodB2G1_152();
int goodB2G2_152();
int goodG2B1_132();
int goodG2B2_132();
int CWE190_Integer_Overflow__char_max_square_13_good();
__int64 CWE190_Integer_Overflow__char_fscanf_add_65_bad();
int goodG2B_247();
__int64 goodB2G_227();
__int64 CWE190_Integer_Overflow__char_fscanf_add_65_good();
int CWE190_Integer_Overflow__char_rand_multiply_18_bad();
int goodB2G_228();
int goodG2B_248();
int CWE190_Integer_Overflow__char_rand_multiply_18_good();
int CWE190_Integer_Overflow__char_fscanf_square_17_bad();
int goodB2G_229();
int goodG2B_249();
int CWE190_Integer_Overflow__char_fscanf_square_17_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_goodB2GSink(char a1);
__int64 staticReturnsTrue_9();
__int64 staticReturnsFalse_9();
int CWE190_Integer_Overflow__char_rand_add_08_bad();
int goodB2G1_153();
int goodB2G2_153();
int goodG2B1_133();
int goodG2B2_133();
int CWE190_Integer_Overflow__char_rand_add_08_good();
int __fastcall badSink_39(char a1);
__int64 CWE190_Integer_Overflow__char_fscanf_square_44_bad();
int __fastcall goodG2BSink_39(char a1);
int goodG2B_250();
int __fastcall goodB2GSink_29(char a1);
__int64 goodB2G_230();
__int64 CWE190_Integer_Overflow__char_fscanf_square_44_good();
int CWE190_Integer_Overflow__char_rand_multiply_61_bad();
int goodG2B_251();
int goodB2G_231();
int CWE190_Integer_Overflow__char_rand_multiply_61_good();
int CWE190_Integer_Overflow__char_rand_multiply_22_bad();
int goodB2G1_154();
int goodB2G2_154();
int goodG2B_252();
int CWE190_Integer_Overflow__char_rand_multiply_22_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_bad();
int goodG2B_253();
int goodB2G_232();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_15_bad();
int goodB2G1_155();
int goodB2G2_155();
int goodG2B1_134();
int goodG2B2_134();
int CWE190_Integer_Overflow__char_fscanf_multiply_15_good();
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_square_61b_badSource(unsigned __int8 a1);
__int64 CWE190_Integer_Overflow__char_fscanf_square_61b_goodG2BSource();
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_square_61b_goodB2GSource(unsigned __int8 a1);
int CWE190_Integer_Overflow__char_rand_multiply_07_bad();
int goodB2G1_156();
int goodB2G2_156();
int goodG2B1_135();
int goodG2B2_135();
int CWE190_Integer_Overflow__char_rand_multiply_07_good();
int __fastcall badSink_40(char a1);
int CWE190_Integer_Overflow__char_max_square_21_bad();
int __fastcall goodB2G1Sink_9(char a1);
int goodB2G1_157();
int __fastcall goodB2G2Sink_9(char a1);
int goodB2G2_157();
int __fastcall goodG2BSink_40(char a1);
int goodG2B_254();
int CWE190_Integer_Overflow__char_max_square_21_good();
int CWE190_Integer_Overflow__char_max_square_03_bad();
int goodB2G1_158();
int goodB2G2_158();
int goodG2B1_136();
int goodG2B2_136();
int CWE190_Integer_Overflow__char_max_square_03_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_bad();
int goodB2G1_159();
int goodB2G2_159();
int goodG2B1_137();
int goodG2B2_137();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_64_bad();
int goodG2B_255();
int goodB2G_233();
int CWE190_Integer_Overflow__int64_t_fscanf_add_64_good();
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_max_square_18_bad();
int goodB2G_234();
int goodG2B_256();
int CWE190_Integer_Overflow__char_max_square_18_good();
int CWE190_Integer_Overflow__int64_t_fscanf_add_51_bad();
int goodG2B_257();
int goodB2G_235();
int CWE190_Integer_Overflow__int64_t_fscanf_add_51_good();
int CWE190_Integer_Overflow__char_fscanf_square_06_bad();
int goodB2G1_160();
int goodB2G2_160();
int goodG2B1_138();
int goodG2B2_138();
int CWE190_Integer_Overflow__char_fscanf_square_06_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad();
int goodG2B_258();
int goodB2G_236();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_good();
__int64 CWE190_Integer_Overflow__char_rand_add_65_bad();
int goodG2B_259();
__int64 goodB2G_237();
__int64 CWE190_Integer_Overflow__char_rand_add_65_good();
int CWE190_Integer_Overflow__char_max_multiply_54_bad();
int goodG2B_260();
int goodB2G_238();
int CWE190_Integer_Overflow__char_max_multiply_54_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_badSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_goodG2BSink(_BYTE *a1);
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_goodB2GSink(char *a1);
int badSink_41();
int CWE190_Integer_Overflow__char_fscanf_square_45_bad();
int goodG2BSink_41();
int goodG2B_261();
int goodB2GSink_30();
int goodB2G_239();
int CWE190_Integer_Overflow__char_fscanf_square_45_good();
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_goodB2GSink(char a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_badSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodG2BSink(__int64 a1);
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodB2GSink(__int64 a1);
__int64 CWE190_Integer_Overflow__char_fscanf_square_65_bad();
int goodG2B_262();
__int64 goodB2G_240();
__int64 CWE190_Integer_Overflow__char_fscanf_square_65_good();
int CWE190_Integer_Overflow__char_fscanf_add_68_bad();
int goodG2B_263();
int goodB2G_241();
int CWE190_Integer_Overflow__char_fscanf_add_68_good();
int CWE190_Integer_Overflow__char_fscanf_square_61_bad();
int goodG2B_264();
int goodB2G_242();
int CWE190_Integer_Overflow__char_fscanf_square_61_good();
int CWE190_Integer_Overflow__char_max_square_63_bad();
int goodG2B_265();
int goodB2G_243();
int CWE190_Integer_Overflow__char_max_square_63_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_badSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_goodG2BSink(int a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_goodB2GSink(int a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_05_bad();
int goodB2G1_161();
int goodB2G2_161();
int goodG2B1_139();
int goodG2B2_139();
int CWE190_Integer_Overflow__char_fscanf_multiply_05_good();
int __fastcall badSink_42(int a1);
int CWE190_Integer_Overflow__char_fscanf_multiply_41_bad();
int __fastcall goodG2BSink_42(int a1);
int goodG2B_266();
int __fastcall goodB2GSink_31(int a1);
int goodB2G_244();
int CWE190_Integer_Overflow__char_fscanf_multiply_41_good();
__int64 badSource_9();
int CWE190_Integer_Overflow__char_rand_square_42_bad();
__int64 goodG2BSource_9();
int goodG2B_267();
__int64 goodB2GSource_9();
int goodB2G_245();
int CWE190_Integer_Overflow__char_rand_square_42_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_bad();
int goodB2G1_162();
int goodB2G2_162();
int goodG2B1_140();
int goodG2B2_140();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad();
int goodG2B_268();
int goodB2G_246();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_good();
int CWE190_Integer_Overflow__char_max_add_54_bad();
int goodG2B_269();
int goodB2G_247();
int CWE190_Integer_Overflow__char_max_add_54_good();
int CWE190_Integer_Overflow__char_fscanf_add_53_bad();
int goodG2B_270();
int goodB2G_248();
int CWE190_Integer_Overflow__char_fscanf_add_53_good();
int CWE190_Integer_Overflow__char_max_add_15_bad();
int goodB2G1_163();
int goodB2G2_163();
int goodG2B1_141();
int goodG2B2_141();
int CWE190_Integer_Overflow__char_max_add_15_good();
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_badSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_goodG2BSink(char a1);
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_goodB2GSink(char a1);
int CWE190_Integer_Overflow__char_rand_square_63_bad();
int goodG2B_271();
int goodB2G_249();
int CWE190_Integer_Overflow__char_rand_square_63_good();
int CWE190_Integer_Overflow__char_fscanf_multiply_34_bad();
int goodG2B_272();
int goodB2G_250();
int CWE190_Integer_Overflow__char_fscanf_multiply_34_good();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_bad();
int goodG2B_273();
int goodB2G_251();
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_43BCE8; // weak
_UNKNOWN unk_43C3C4; // weak
_UNKNOWN unk_43C970; // weak
_UNKNOWN unk_43D80C; // weak
_UNKNOWN unk_43E2DC; // weak
_UNKNOWN unk_43ED28; // weak
_UNKNOWN unk_43FB18; // weak
_UNKNOWN unk_441C1C; // weak
_UNKNOWN unk_44211C; // weak
_UNKNOWN unk_4423E0; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_65F010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue_1 = 1; // weak
int staticTrue_2 = 1; // weak
int staticFive_1 = 5; // weak
int staticTrue_3 = 1; // weak
int staticTrue_4 = 1; // weak
int staticTrue_5 = 1; // weak
int staticFive_2 = 5; // weak
int staticTrue_6 = 1; // weak
int staticFive_3 = 5; // weak
int staticTrue_7 = 1; // weak
int staticFive_4 = 5; // weak
int staticFive_5 = 5; // weak
int staticTrue_8 = 1; // weak
int staticFive_6 = 5; // weak
int staticFive_7 = 5; // weak
int staticFive_8 = 5; // weak
int staticFive_9 = 5; // weak
int staticTrue_9 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
__int64 stdin; // weak
char completed_6355; // weak
int staticFalse; // weak
char CWE190_Integer_Overflow__char_max_add_45_badData; // weak
char CWE190_Integer_Overflow__char_max_add_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_max_add_45_goodB2GData; // weak
int staticFalse_0; // weak
char CWE190_Integer_Overflow__char_rand_multiply_45_badData; // weak
char CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData; // weak
int CWE190_Integer_Overflow__char_rand_square_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal; // weak
int staticFalse_1; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal; // weak
int staticFalse_2; // weak
int staticFalse_3; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
int staticFalse_4; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_45_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal; // weak
int staticFalse_5; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
char CWE190_Integer_Overflow__char_fscanf_add_45_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_add_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData; // weak
int staticFalse_6; // weak
char CWE190_Integer_Overflow__char_max_multiply_45_badData; // weak
char CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData; // weak
char CWE190_Integer_Overflow__char_rand_add_45_badData; // weak
char CWE190_Integer_Overflow__char_rand_add_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_add_45_goodB2GData; // weak
int staticFalse_7; // weak
int CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal; // weak
char CWE190_Integer_Overflow__char_rand_square_45_badData; // weak
char CWE190_Integer_Overflow__char_rand_square_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_square_45_goodB2GData; // weak
int CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal; // weak
int CWE190_Integer_Overflow__char_max_add_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_max_add_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
char CWE190_Integer_Overflow__char_max_square_45_badData; // weak
char CWE190_Integer_Overflow__char_max_square_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_max_square_45_goodB2GData; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
int badStatic_3; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
int CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal; // weak
int badStatic_4; // weak
int goodB2G1Static_4; // weak
int goodB2G2Static_4; // weak
int goodG2BStatic_4; // weak
int badStatic_5; // weak
int goodB2G1Static_5; // weak
int goodB2G2Static_5; // weak
int goodG2BStatic_5; // weak
int badStatic_6; // weak
int goodB2G1Static_6; // weak
int goodB2G2Static_6; // weak
int goodG2BStatic_6; // weak
int badStatic_7; // weak
int goodB2G1Static_7; // weak
int goodB2G2Static_7; // weak
int goodG2BStatic_7; // weak
int CWE190_Integer_Overflow__char_max_multiply_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal; // weak
int CWE190_Integer_Overflow__char_rand_add_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal; // weak
int staticFalse_8; // weak
int badStatic_8; // weak
int goodB2G1Static_8; // weak
int goodB2G2Static_8; // weak
int goodG2BStatic_8; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_badData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodG2BData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData; // weak
int CWE190_Integer_Overflow__char_max_square_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_max_square_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal; // weak
int CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal; // weak
int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global; // weak
int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global; // weak
int CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal; // weak
int badStatic_9; // weak
int goodB2G1Static_9; // weak
int goodB2G2Static_9; // weak
int goodG2BStatic_9; // weak
char CWE190_Integer_Overflow__char_fscanf_square_45_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData; // weak
int staticFalse_9; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
char CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_square_68_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_rand_add_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_rand_add_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_add_68_badData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_badData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_68_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_max_add_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_max_add_68_badData; // weak
char CWE190_Integer_Overflow__char_max_add_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_rand_multiply_68_badData; // weak
char CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_max_square_68_badData; // weak
char CWE190_Integer_Overflow__char_max_square_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_max_square_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_max_multiply_68_badData; // weak
char CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_square_68_goodG2BData; // weak
char CWE190_Integer_Overflow__char_rand_square_68_badData; // weak
char CWE190_Integer_Overflow__char_rand_square_68_goodB2GData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData; // weak
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData; // weak
char CWE190_Integer_Overflow__char_fscanf_add_68_badData; // weak
char CWE190_Integer_Overflow__char_fscanf_add_68_goodG2BData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400928) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400AB0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400950) ----------------------------------------------------
__int64 sub_400950()
{
  return qword_65F010();
}
// 65F010: using guessed type __int64 (*qword_65F010)(void);

//----- (0000000000400AC0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400AC6: positive sp value 8 has been found

//----- (0000000000400AF0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6680879LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6680879LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}
// 65F128: using guessed type __int64 stdin;

//----- (0000000000400B20) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400B60) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 65F130: using guessed type char completed_6355;

//----- (0000000000400B80) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400B80: could not find valid save-restore pair for rbp

//----- (0000000000400BAD) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE190_Integer_Overflow__char_max_square_67_good();");
  CWE190_Integer_Overflow__char_max_square_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_08_good();");
  CWE190_Integer_Overflow__char_max_square_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_02_good();");
  CWE190_Integer_Overflow__char_fscanf_add_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_17_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_14_good();");
  CWE190_Integer_Overflow__char_rand_add_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_32_good();");
  CWE190_Integer_Overflow__char_rand_add_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_09_good();");
  CWE190_Integer_Overflow__char_max_square_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_45_good();");
  CWE190_Integer_Overflow__char_max_square_45_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_13_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_01_good();");
  CWE190_Integer_Overflow__char_max_square_01_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_22_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_41_good();");
  CWE190_Integer_Overflow__char_rand_multiply_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_68_good();");
  CWE190_Integer_Overflow__char_rand_add_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_11_good();");
  CWE190_Integer_Overflow__char_fscanf_square_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_04_good();");
  CWE190_Integer_Overflow__char_rand_square_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_32_good();");
  CWE190_Integer_Overflow__char_max_multiply_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_08_good();");
  CWE190_Integer_Overflow__char_max_multiply_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_63_good();");
  CWE190_Integer_Overflow__char_fscanf_square_63_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_01_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_64_good();");
  CWE190_Integer_Overflow__char_fscanf_add_64_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_53_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_53_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_41_good();");
  CWE190_Integer_Overflow__char_rand_add_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_08_good();");
  CWE190_Integer_Overflow__char_rand_square_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_65_good();");
  CWE190_Integer_Overflow__char_fscanf_square_65_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_53_good();");
  CWE190_Integer_Overflow__char_max_multiply_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_42_good();");
  CWE190_Integer_Overflow__char_fscanf_square_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_03_good();");
  CWE190_Integer_Overflow__char_rand_multiply_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_12_good();");
  CWE190_Integer_Overflow__char_rand_add_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_08_good();");
  CWE190_Integer_Overflow__char_max_add_08_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_12_good();");
  CWE190_Integer_Overflow__char_fscanf_add_12_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_67_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_65_good();");
  CWE190_Integer_Overflow__char_rand_multiply_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_66_good();");
  CWE190_Integer_Overflow__char_rand_multiply_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_12_good();");
  CWE190_Integer_Overflow__char_rand_square_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_04_good();");
  CWE190_Integer_Overflow__char_max_multiply_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_52_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_44_good();");
  CWE190_Integer_Overflow__char_max_add_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_68_good();");
  CWE190_Integer_Overflow__char_rand_square_68_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_44_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_10_good();");
  CWE190_Integer_Overflow__char_max_add_10_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_45_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_11_good();");
  CWE190_Integer_Overflow__char_max_multiply_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_06_good();");
  CWE190_Integer_Overflow__char_max_multiply_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_34_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_02_good();");
  CWE190_Integer_Overflow__char_rand_multiply_02_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_44_good();");
  CWE190_Integer_Overflow__char_max_multiply_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_42_good();");
  CWE190_Integer_Overflow__char_rand_multiply_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_16_good();");
  CWE190_Integer_Overflow__char_rand_add_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_03_good();");
  CWE190_Integer_Overflow__char_fscanf_square_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_03_good();");
  CWE190_Integer_Overflow__char_max_add_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_04_good();");
  CWE190_Integer_Overflow__char_rand_multiply_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_02_good();");
  CWE190_Integer_Overflow__char_max_multiply_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_02_good();");
  CWE190_Integer_Overflow__char_rand_square_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_10_good();");
  CWE190_Integer_Overflow__char_rand_square_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_51_good();");
  CWE190_Integer_Overflow__char_max_multiply_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_17_good();");
  CWE190_Integer_Overflow__char_max_multiply_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_45_good();");
  CWE190_Integer_Overflow__char_rand_square_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_52_good();");
  CWE190_Integer_Overflow__char_rand_square_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_42_good();");
  CWE190_Integer_Overflow__char_max_multiply_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_52_good();");
  CWE190_Integer_Overflow__char_max_add_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_63_good();");
  CWE190_Integer_Overflow__char_rand_multiply_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_42_good();");
  CWE190_Integer_Overflow__char_max_square_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_08_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_44_good();");
  CWE190_Integer_Overflow__char_rand_add_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_14_good();");
  CWE190_Integer_Overflow__char_max_square_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_13_good();");
  CWE190_Integer_Overflow__char_fscanf_square_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_31_good();");
  CWE190_Integer_Overflow__char_max_add_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_52_good();");
  CWE190_Integer_Overflow__char_rand_multiply_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_17_good();");
  CWE190_Integer_Overflow__char_fscanf_add_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_18_good();");
  CWE190_Integer_Overflow__char_max_square_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_54_good();");
  CWE190_Integer_Overflow__char_max_add_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_42_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_66_good();");
  CWE190_Integer_Overflow__char_rand_add_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_07_good();");
  CWE190_Integer_Overflow__char_rand_add_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_63_good();");
  CWE190_Integer_Overflow__char_fscanf_add_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_17_good();");
  CWE190_Integer_Overflow__char_fscanf_square_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_01_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_21_good();");
  CWE190_Integer_Overflow__char_rand_multiply_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_18_good();");
  CWE190_Integer_Overflow__char_rand_add_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_67_good();");
  CWE190_Integer_Overflow__char_max_add_67_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_52_good();");
  CWE190_Integer_Overflow__char_fscanf_add_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_51_good();");
  CWE190_Integer_Overflow__char_max_square_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_06_good();");
  CWE190_Integer_Overflow__char_rand_square_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_17_good();");
  CWE190_Integer_Overflow__char_rand_multiply_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_12_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_14_good();");
  CWE190_Integer_Overflow__char_fscanf_add_14_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_06_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_02_good();");
  CWE190_Integer_Overflow__char_max_add_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_64_good();");
  CWE190_Integer_Overflow__char_max_add_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_32_good();");
  CWE190_Integer_Overflow__char_fscanf_square_32_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_42_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_42_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_31_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_03_good();");
  CWE190_Integer_Overflow__char_max_multiply_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_06_good();");
  CWE190_Integer_Overflow__char_max_square_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_54_good();");
  CWE190_Integer_Overflow__char_rand_square_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_06_good();");
  CWE190_Integer_Overflow__char_rand_add_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_21_good();");
  CWE190_Integer_Overflow__char_max_square_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_51_good();");
  CWE190_Integer_Overflow__char_max_add_51_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_11_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_66_good();");
  CWE190_Integer_Overflow__char_max_square_66_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_16_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_53_good();");
  CWE190_Integer_Overflow__char_max_square_53_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_44_good();");
  CWE190_Integer_Overflow__char_max_square_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_66_good();");
  CWE190_Integer_Overflow__char_max_multiply_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_42_good();");
  CWE190_Integer_Overflow__char_max_add_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_07_good();");
  CWE190_Integer_Overflow__char_max_multiply_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_05_good();");
  CWE190_Integer_Overflow__char_max_add_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_51_good();");
  CWE190_Integer_Overflow__char_rand_multiply_51_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_54_good();");
  CWE190_Integer_Overflow__char_fscanf_add_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_13_good();");
  CWE190_Integer_Overflow__char_max_multiply_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_64_good();");
  CWE190_Integer_Overflow__char_rand_square_64_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_02_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_52_good();");
  CWE190_Integer_Overflow__char_rand_add_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_13_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_10_good();");
  CWE190_Integer_Overflow__char_fscanf_square_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_68_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_11_good();");
  CWE190_Integer_Overflow__char_rand_square_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_12_good();");
  CWE190_Integer_Overflow__char_rand_multiply_12_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_34_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_11_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_11_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_15_good();");
  CWE190_Integer_Overflow__char_rand_add_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_10_good();");
  CWE190_Integer_Overflow__char_rand_add_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_10_good();");
  CWE190_Integer_Overflow__char_rand_multiply_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_34_good();");
  CWE190_Integer_Overflow__char_rand_square_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_54_good();");
  CWE190_Integer_Overflow__char_rand_multiply_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_53_good();");
  CWE190_Integer_Overflow__char_rand_square_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_32_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_05_good();");
  CWE190_Integer_Overflow__char_rand_square_05_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_65_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_02_good();");
  CWE190_Integer_Overflow__char_fscanf_square_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_34_good();");
  CWE190_Integer_Overflow__char_fscanf_square_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_07_good();");
  CWE190_Integer_Overflow__char_max_add_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_34_good();");
  CWE190_Integer_Overflow__char_rand_multiply_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_53_good();");
  CWE190_Integer_Overflow__char_fscanf_add_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_61_good();");
  CWE190_Integer_Overflow__char_rand_square_61_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_15_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_15_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_66_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_41_good();");
  CWE190_Integer_Overflow__char_max_multiply_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_02_good();");
  CWE190_Integer_Overflow__char_rand_add_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_67_good();");
  CWE190_Integer_Overflow__char_rand_multiply_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_05_good();");
  CWE190_Integer_Overflow__char_fscanf_add_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_63_good();");
  CWE190_Integer_Overflow__char_rand_square_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_63_good();");
  CWE190_Integer_Overflow__char_max_multiply_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_67_good();");
  CWE190_Integer_Overflow__char_fscanf_square_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_22_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_22_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_61_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_05_good();");
  CWE190_Integer_Overflow__char_fscanf_square_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_32_good();");
  CWE190_Integer_Overflow__char_rand_square_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_14_good();");
  CWE190_Integer_Overflow__char_fscanf_square_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_67_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_02_good();");
  CWE190_Integer_Overflow__char_max_square_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_16_good();");
  CWE190_Integer_Overflow__char_max_square_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_18_good();");
  CWE190_Integer_Overflow__char_max_add_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_05_good();");
  CWE190_Integer_Overflow__char_max_multiply_05_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_63_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_65_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_05_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_05_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_66_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_67_good();");
  CWE190_Integer_Overflow__char_rand_add_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_53_good();");
  CWE190_Integer_Overflow__char_rand_add_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_32_good();");
  CWE190_Integer_Overflow__char_fscanf_add_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_22_good();");
  CWE190_Integer_Overflow__char_rand_multiply_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_14_good();");
  CWE190_Integer_Overflow__char_rand_multiply_14_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_68_good();");
  CWE190_Integer_Overflow__char_rand_multiply_68_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_64_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_64_good();");
  CWE190_Integer_Overflow__char_max_multiply_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_41_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_17_good();");
  CWE190_Integer_Overflow__char_rand_add_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_65_good();");
  CWE190_Integer_Overflow__char_max_add_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_32_good();");
  CWE190_Integer_Overflow__char_max_square_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_41_good();");
  CWE190_Integer_Overflow__char_fscanf_square_41_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_18_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_03_good();");
  CWE190_Integer_Overflow__char_rand_add_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_18_good();");
  CWE190_Integer_Overflow__char_fscanf_square_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_09_good();");
  CWE190_Integer_Overflow__char_max_multiply_09_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_05_good();");
  CWE190_Integer_Overflow__char_max_square_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_65_good();");
  CWE190_Integer_Overflow__char_rand_square_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_05_good();");
  CWE190_Integer_Overflow__char_rand_multiply_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_03_good();");
  CWE190_Integer_Overflow__char_fscanf_add_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_45_good();");
  CWE190_Integer_Overflow__char_fscanf_add_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_21_good();");
  CWE190_Integer_Overflow__char_rand_square_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_61_good();");
  CWE190_Integer_Overflow__char_fscanf_add_61_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_67_good();");
  CWE190_Integer_Overflow__char_fscanf_add_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_11_good();");
  CWE190_Integer_Overflow__char_rand_add_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_21_good();");
  CWE190_Integer_Overflow__char_rand_add_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_09_good();");
  CWE190_Integer_Overflow__char_rand_square_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_44_good();");
  CWE190_Integer_Overflow__char_rand_multiply_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_01_good();");
  CWE190_Integer_Overflow__char_rand_multiply_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_22_good();");
  CWE190_Integer_Overflow__char_rand_add_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_42_good();");
  CWE190_Integer_Overflow__char_rand_add_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_41_good();");
  CWE190_Integer_Overflow__char_rand_square_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_51_good();");
  CWE190_Integer_Overflow__char_fscanf_add_51_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_15_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_01_good();");
  CWE190_Integer_Overflow__char_rand_add_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_41_good();");
  CWE190_Integer_Overflow__char_fscanf_add_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_17_good();");
  CWE190_Integer_Overflow__char_max_add_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_52_good();");
  CWE190_Integer_Overflow__char_max_multiply_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_16_good();");
  CWE190_Integer_Overflow__char_rand_square_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_01_good();");
  CWE190_Integer_Overflow__char_fscanf_add_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_09_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_12_good();");
  CWE190_Integer_Overflow__char_max_multiply_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_01_good();");
  CWE190_Integer_Overflow__char_max_add_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_51_good();");
  CWE190_Integer_Overflow__char_rand_square_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_16_good();");
  CWE190_Integer_Overflow__char_fscanf_add_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_31_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_18_good();");
  CWE190_Integer_Overflow__char_rand_square_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_68_good();");
  CWE190_Integer_Overflow__char_max_add_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_15_good();");
  CWE190_Integer_Overflow__char_max_add_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_15_good();");
  CWE190_Integer_Overflow__char_max_multiply_15_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_22_good();");
  CWE190_Integer_Overflow__char_fscanf_square_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_66_good();");
  CWE190_Integer_Overflow__char_rand_square_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_18_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_63_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_61_good();");
  CWE190_Integer_Overflow__char_max_add_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_08_good();");
  CWE190_Integer_Overflow__char_rand_multiply_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_68_good();");
  CWE190_Integer_Overflow__char_max_multiply_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_04_good();");
  CWE190_Integer_Overflow__char_fscanf_add_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_11_good();");
  CWE190_Integer_Overflow__char_fscanf_add_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_21_good();");
  CWE190_Integer_Overflow__char_max_multiply_21_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_06_good();");
  CWE190_Integer_Overflow__char_max_add_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_31_good();");
  CWE190_Integer_Overflow__char_max_multiply_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_07_good();");
  CWE190_Integer_Overflow__char_fscanf_add_07_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_06_good();");
  CWE190_Integer_Overflow__char_rand_multiply_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_01_good();");
  CWE190_Integer_Overflow__char_fscanf_square_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_45_good();");
  CWE190_Integer_Overflow__char_fscanf_square_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_09_good();");
  CWE190_Integer_Overflow__char_rand_multiply_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_51_good();");
  CWE190_Integer_Overflow__char_rand_add_51_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_09_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_08_good();");
  CWE190_Integer_Overflow__char_fscanf_add_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_18_good();");
  CWE190_Integer_Overflow__char_max_multiply_18_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_11_good();");
  CWE190_Integer_Overflow__char_rand_multiply_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_53_good();");
  CWE190_Integer_Overflow__char_fscanf_square_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_13_good();");
  CWE190_Integer_Overflow__char_fscanf_add_13_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_16_good();");
  CWE190_Integer_Overflow__char_fscanf_square_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_61_good();");
  CWE190_Integer_Overflow__char_rand_add_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_06_good();");
  CWE190_Integer_Overflow__char_fscanf_add_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_07_good();");
  CWE190_Integer_Overflow__char_rand_square_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_15_good();");
  CWE190_Integer_Overflow__char_rand_multiply_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_32_good();");
  CWE190_Integer_Overflow__char_rand_multiply_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_12_good();");
  CWE190_Integer_Overflow__char_max_square_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_51_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_41_good();");
  CWE190_Integer_Overflow__char_max_square_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_66_good();");
  CWE190_Integer_Overflow__char_fscanf_square_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_21_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_21_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_45_good();");
  CWE190_Integer_Overflow__char_max_add_45_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_05_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_04_good();");
  CWE190_Integer_Overflow__char_max_add_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_34_good();");
  CWE190_Integer_Overflow__char_fscanf_add_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_14_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_07_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_61_good();");
  CWE190_Integer_Overflow__char_rand_multiply_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_61_good();");
  CWE190_Integer_Overflow__char_max_multiply_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_17_good();");
  CWE190_Integer_Overflow__char_rand_square_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_15_good();");
  CWE190_Integer_Overflow__char_fscanf_square_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_22_good();");
  CWE190_Integer_Overflow__char_fscanf_add_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_14_good();");
  CWE190_Integer_Overflow__char_max_multiply_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_64_good();");
  CWE190_Integer_Overflow__char_rand_multiply_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_01_good();");
  CWE190_Integer_Overflow__char_rand_square_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_63_good();");
  CWE190_Integer_Overflow__char_max_add_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_54_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_64_good();");
  CWE190_Integer_Overflow__char_rand_add_64_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_22_good();");
  CWE190_Integer_Overflow__char_max_square_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_64_good();");
  CWE190_Integer_Overflow__char_max_square_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_64_good();");
  CWE190_Integer_Overflow__char_fscanf_square_64_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_51_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_51_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_07_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_44_good();");
  CWE190_Integer_Overflow__char_fscanf_square_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_32_good();");
  CWE190_Integer_Overflow__char_max_add_32_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_31_good();");
  CWE190_Integer_Overflow__char_rand_add_31_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_14_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_15_good();");
  CWE190_Integer_Overflow__char_max_square_15_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_04_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_12_good();");
  CWE190_Integer_Overflow__char_fscanf_square_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_54_good();");
  CWE190_Integer_Overflow__char_max_multiply_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_04_good();");
  CWE190_Integer_Overflow__char_fscanf_square_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_31_good();");
  CWE190_Integer_Overflow__char_rand_multiply_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_10_good();");
  CWE190_Integer_Overflow__char_max_square_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_42_good();");
  CWE190_Integer_Overflow__char_rand_square_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_09_good();");
  CWE190_Integer_Overflow__char_fscanf_square_09_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_52_good();");
  CWE190_Integer_Overflow__char_max_square_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_65_good();");
  CWE190_Integer_Overflow__char_max_square_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_45_good();");
  CWE190_Integer_Overflow__char_max_multiply_45_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_15_good();");
  CWE190_Integer_Overflow__char_fscanf_add_15_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_22_good();");
  CWE190_Integer_Overflow__char_max_add_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_03_good();");
  CWE190_Integer_Overflow__char_rand_square_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_34_good();");
  CWE190_Integer_Overflow__char_rand_add_34_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_12_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_12_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_04_good();");
  CWE190_Integer_Overflow__char_max_square_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_07_good();");
  CWE190_Integer_Overflow__char_max_square_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_09_good();");
  CWE190_Integer_Overflow__char_max_add_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_53_good();");
  CWE190_Integer_Overflow__char_max_add_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_34_good();");
  CWE190_Integer_Overflow__char_max_square_34_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_17_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_17_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_68_good();");
  CWE190_Integer_Overflow__char_max_square_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_08_good();");
  CWE190_Integer_Overflow__char_rand_add_08_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_68_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_11_good();");
  CWE190_Integer_Overflow__char_max_add_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_07_good();");
  CWE190_Integer_Overflow__char_rand_multiply_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_61_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_31_good();");
  CWE190_Integer_Overflow__char_fscanf_add_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_14_good();");
  CWE190_Integer_Overflow__char_rand_square_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_31_good();");
  CWE190_Integer_Overflow__char_max_square_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_44_good();");
  CWE190_Integer_Overflow__char_fscanf_add_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_52_good();");
  CWE190_Integer_Overflow__char_fscanf_square_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_04_good();");
  CWE190_Integer_Overflow__char_rand_add_04_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_52_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_53_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_67_good();");
  CWE190_Integer_Overflow__char_max_multiply_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_44_good();");
  CWE190_Integer_Overflow__char_rand_square_44_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_09_good();");
  CWE190_Integer_Overflow__char_fscanf_add_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_13_good();");
  CWE190_Integer_Overflow__char_max_add_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_07_good();");
  CWE190_Integer_Overflow__char_fscanf_square_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_16_good();");
  CWE190_Integer_Overflow__char_max_add_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_18_good();");
  CWE190_Integer_Overflow__char_fscanf_add_18_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_11_good();");
  CWE190_Integer_Overflow__char_max_square_11_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_68_good();");
  CWE190_Integer_Overflow__char_fscanf_square_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_45_good();");
  CWE190_Integer_Overflow__char_rand_multiply_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_68_good();");
  CWE190_Integer_Overflow__char_fscanf_add_68_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_54_good();");
  CWE190_Integer_Overflow__char_fscanf_square_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_14_good();");
  CWE190_Integer_Overflow__char_max_add_14_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_45_good();");
  CWE190_Integer_Overflow__char_rand_add_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_06_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_42_good();");
  CWE190_Integer_Overflow__char_fscanf_add_42_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_22_good();");
  CWE190_Integer_Overflow__char_max_multiply_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_05_good();");
  CWE190_Integer_Overflow__char_rand_add_05_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_31_good();");
  CWE190_Integer_Overflow__char_fscanf_square_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_63_good();");
  CWE190_Integer_Overflow__char_max_square_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_45_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_45_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_12_good();");
  CWE190_Integer_Overflow__char_max_add_12_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_04_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_04_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_16_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_66_good();");
  CWE190_Integer_Overflow__char_fscanf_add_66_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_41_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_54_good();");
  CWE190_Integer_Overflow__char_rand_add_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_53_good();");
  CWE190_Integer_Overflow__char_rand_multiply_53_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_13_good();");
  CWE190_Integer_Overflow__char_rand_add_13_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_61_good();");
  CWE190_Integer_Overflow__char_max_square_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_03_good();");
  CWE190_Integer_Overflow__char_max_square_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_34_good();");
  CWE190_Integer_Overflow__char_max_multiply_34_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_15_good();");
  CWE190_Integer_Overflow__char_rand_square_15_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_65_good();");
  CWE190_Integer_Overflow__char_fscanf_add_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_17_good();");
  CWE190_Integer_Overflow__char_max_square_17_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_61_good();");
  CWE190_Integer_Overflow__char_fscanf_square_61_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_08_good();");
  CWE190_Integer_Overflow__char_fscanf_square_08_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_41_good();");
  CWE190_Integer_Overflow__char_max_add_41_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_64_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_64_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_09_good();");
  CWE190_Integer_Overflow__char_rand_add_09_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_51_good();");
  CWE190_Integer_Overflow__char_fscanf_square_51_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_10_good();");
  CWE190_Integer_Overflow__char_fscanf_add_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_13_good();");
  CWE190_Integer_Overflow__char_rand_square_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_63_good();");
  CWE190_Integer_Overflow__char_rand_add_63_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_54_good();");
  CWE190_Integer_Overflow__char_max_square_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_06_good();");
  CWE190_Integer_Overflow__char_fscanf_square_06_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_01_good();");
  CWE190_Integer_Overflow__char_max_multiply_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_03_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_21_good();");
  CWE190_Integer_Overflow__char_max_add_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_31_good();");
  CWE190_Integer_Overflow__char_rand_square_31_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_02_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_02_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_16_good();");
  CWE190_Integer_Overflow__char_max_multiply_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_22_good();");
  CWE190_Integer_Overflow__char_rand_square_22_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_67_good();");
  CWE190_Integer_Overflow__char_rand_square_67_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_16_good();");
  CWE190_Integer_Overflow__char_rand_multiply_16_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_21_good();");
  CWE190_Integer_Overflow__char_fscanf_add_21_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_54_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_34_good();");
  CWE190_Integer_Overflow__char_max_add_34_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_18_good();");
  CWE190_Integer_Overflow__char_rand_multiply_18_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_21_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_21_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_32_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_32_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_44_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_44_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_03_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_03_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_10_good();");
  CWE190_Integer_Overflow__char_fscanf_multiply_10_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_08_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_08_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_10_good();");
  CWE190_Integer_Overflow__char_max_multiply_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_65_good();");
  CWE190_Integer_Overflow__char_max_multiply_65_good();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_10_good();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_10_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_65_good();");
  CWE190_Integer_Overflow__char_rand_add_65_good();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_13_good();");
  CWE190_Integer_Overflow__char_rand_multiply_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_21_good();");
  CWE190_Integer_Overflow__char_fscanf_square_21_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_13_good();");
  CWE190_Integer_Overflow__char_max_square_13_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_66_good();");
  CWE190_Integer_Overflow__char_max_add_66_good();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_67_bad();");
  CWE190_Integer_Overflow__char_max_square_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_08_bad();");
  CWE190_Integer_Overflow__char_max_square_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_02_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_17_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_14_bad();");
  CWE190_Integer_Overflow__char_rand_add_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_32_bad();");
  CWE190_Integer_Overflow__char_rand_add_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_09_bad();");
  CWE190_Integer_Overflow__char_max_square_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_45_bad();");
  CWE190_Integer_Overflow__char_max_square_45_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_13_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_01_bad();");
  CWE190_Integer_Overflow__char_max_square_01_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_22_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_41_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_68_bad();");
  CWE190_Integer_Overflow__char_rand_add_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_11_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_04_bad();");
  CWE190_Integer_Overflow__char_rand_square_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_32_bad();");
  CWE190_Integer_Overflow__char_max_multiply_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_08_bad();");
  CWE190_Integer_Overflow__char_max_multiply_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_63_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_63_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_01_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_64_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_64_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_53_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_53_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_41_bad();");
  CWE190_Integer_Overflow__char_rand_add_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_08_bad();");
  CWE190_Integer_Overflow__char_rand_square_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_65_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_65_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_53_bad();");
  CWE190_Integer_Overflow__char_max_multiply_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_42_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_03_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_12_bad();");
  CWE190_Integer_Overflow__char_rand_add_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_08_bad();");
  CWE190_Integer_Overflow__char_max_add_08_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_12_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_12_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_67_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_65_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_66_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_12_bad();");
  CWE190_Integer_Overflow__char_rand_square_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_04_bad();");
  CWE190_Integer_Overflow__char_max_multiply_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_52_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_44_bad();");
  CWE190_Integer_Overflow__char_max_add_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_68_bad();");
  CWE190_Integer_Overflow__char_rand_square_68_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_44_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_10_bad();");
  CWE190_Integer_Overflow__char_max_add_10_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_45_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_11_bad();");
  CWE190_Integer_Overflow__char_max_multiply_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_06_bad();");
  CWE190_Integer_Overflow__char_max_multiply_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_34_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_02_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_02_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_44_bad();");
  CWE190_Integer_Overflow__char_max_multiply_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_42_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_16_bad();");
  CWE190_Integer_Overflow__char_rand_add_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_03_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_03_bad();");
  CWE190_Integer_Overflow__char_max_add_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_04_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_02_bad();");
  CWE190_Integer_Overflow__char_max_multiply_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_02_bad();");
  CWE190_Integer_Overflow__char_rand_square_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_10_bad();");
  CWE190_Integer_Overflow__char_rand_square_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_51_bad();");
  CWE190_Integer_Overflow__char_max_multiply_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_17_bad();");
  CWE190_Integer_Overflow__char_max_multiply_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_45_bad();");
  CWE190_Integer_Overflow__char_rand_square_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_52_bad();");
  CWE190_Integer_Overflow__char_rand_square_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_42_bad();");
  CWE190_Integer_Overflow__char_max_multiply_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_52_bad();");
  CWE190_Integer_Overflow__char_max_add_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_63_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_42_bad();");
  CWE190_Integer_Overflow__char_max_square_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_08_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_44_bad();");
  CWE190_Integer_Overflow__char_rand_add_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_14_bad();");
  CWE190_Integer_Overflow__char_max_square_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_13_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_31_bad();");
  CWE190_Integer_Overflow__char_max_add_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_52_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_17_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_18_bad();");
  CWE190_Integer_Overflow__char_max_square_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_54_bad();");
  CWE190_Integer_Overflow__char_max_add_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_42_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_66_bad();");
  CWE190_Integer_Overflow__char_rand_add_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_07_bad();");
  CWE190_Integer_Overflow__char_rand_add_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_63_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_17_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_01_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_21_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_18_bad();");
  CWE190_Integer_Overflow__char_rand_add_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_67_bad();");
  CWE190_Integer_Overflow__char_max_add_67_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_52_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_51_bad();");
  CWE190_Integer_Overflow__char_max_square_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_06_bad();");
  CWE190_Integer_Overflow__char_rand_square_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_17_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_12_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_14_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_14_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_06_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_02_bad();");
  CWE190_Integer_Overflow__char_max_add_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_64_bad();");
  CWE190_Integer_Overflow__char_max_add_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_32_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_32_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_42_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_42_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_31_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_03_bad();");
  CWE190_Integer_Overflow__char_max_multiply_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_06_bad();");
  CWE190_Integer_Overflow__char_max_square_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_54_bad();");
  CWE190_Integer_Overflow__char_rand_square_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_06_bad();");
  CWE190_Integer_Overflow__char_rand_add_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_21_bad();");
  CWE190_Integer_Overflow__char_max_square_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_51_bad();");
  CWE190_Integer_Overflow__char_max_add_51_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_11_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_66_bad();");
  CWE190_Integer_Overflow__char_max_square_66_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_16_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_53_bad();");
  CWE190_Integer_Overflow__char_max_square_53_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_44_bad();");
  CWE190_Integer_Overflow__char_max_square_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_66_bad();");
  CWE190_Integer_Overflow__char_max_multiply_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_42_bad();");
  CWE190_Integer_Overflow__char_max_add_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_07_bad();");
  CWE190_Integer_Overflow__char_max_multiply_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_05_bad();");
  CWE190_Integer_Overflow__char_max_add_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_51_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_51_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_54_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_13_bad();");
  CWE190_Integer_Overflow__char_max_multiply_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_64_bad();");
  CWE190_Integer_Overflow__char_rand_square_64_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_02_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_52_bad();");
  CWE190_Integer_Overflow__char_rand_add_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_13_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_10_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_68_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_11_bad();");
  CWE190_Integer_Overflow__char_rand_square_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_12_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_12_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_11_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_11_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_15_bad();");
  CWE190_Integer_Overflow__char_rand_add_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_10_bad();");
  CWE190_Integer_Overflow__char_rand_add_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_10_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_34_bad();");
  CWE190_Integer_Overflow__char_rand_square_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_54_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_53_bad();");
  CWE190_Integer_Overflow__char_rand_square_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_32_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_05_bad();");
  CWE190_Integer_Overflow__char_rand_square_05_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_65_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_02_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_34_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_07_bad();");
  CWE190_Integer_Overflow__char_max_add_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_34_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_53_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_61_bad();");
  CWE190_Integer_Overflow__char_rand_square_61_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_15_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_15_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_66_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_41_bad();");
  CWE190_Integer_Overflow__char_max_multiply_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_02_bad();");
  CWE190_Integer_Overflow__char_rand_add_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_67_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_05_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_63_bad();");
  CWE190_Integer_Overflow__char_rand_square_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_63_bad();");
  CWE190_Integer_Overflow__char_max_multiply_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_67_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_22_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_22_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_61_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_05_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_32_bad();");
  CWE190_Integer_Overflow__char_rand_square_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_14_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_67_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_02_bad();");
  CWE190_Integer_Overflow__char_max_square_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_16_bad();");
  CWE190_Integer_Overflow__char_max_square_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_18_bad();");
  CWE190_Integer_Overflow__char_max_add_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_05_bad();");
  CWE190_Integer_Overflow__char_max_multiply_05_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_63_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_65_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_05_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_05_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_66_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_67_bad();");
  CWE190_Integer_Overflow__char_rand_add_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_53_bad();");
  CWE190_Integer_Overflow__char_rand_add_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_32_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_22_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_14_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_14_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_68_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_68_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_64_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_64_bad();");
  CWE190_Integer_Overflow__char_max_multiply_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_41_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_17_bad();");
  CWE190_Integer_Overflow__char_rand_add_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_65_bad();");
  CWE190_Integer_Overflow__char_max_add_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_32_bad();");
  CWE190_Integer_Overflow__char_max_square_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_41_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_41_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_18_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_03_bad();");
  CWE190_Integer_Overflow__char_rand_add_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_18_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_09_bad();");
  CWE190_Integer_Overflow__char_max_multiply_09_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_05_bad();");
  CWE190_Integer_Overflow__char_max_square_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_65_bad();");
  CWE190_Integer_Overflow__char_rand_square_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_05_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_03_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_45_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_21_bad();");
  CWE190_Integer_Overflow__char_rand_square_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_61_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_61_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_67_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_11_bad();");
  CWE190_Integer_Overflow__char_rand_add_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_21_bad();");
  CWE190_Integer_Overflow__char_rand_add_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_09_bad();");
  CWE190_Integer_Overflow__char_rand_square_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_44_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_01_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_22_bad();");
  CWE190_Integer_Overflow__char_rand_add_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_42_bad();");
  CWE190_Integer_Overflow__char_rand_add_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_41_bad();");
  CWE190_Integer_Overflow__char_rand_square_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_51_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_51_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_01_bad();");
  CWE190_Integer_Overflow__char_rand_add_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_41_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_17_bad();");
  CWE190_Integer_Overflow__char_max_add_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_52_bad();");
  CWE190_Integer_Overflow__char_max_multiply_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_16_bad();");
  CWE190_Integer_Overflow__char_rand_square_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_01_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_09_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_12_bad();");
  CWE190_Integer_Overflow__char_max_multiply_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_01_bad();");
  CWE190_Integer_Overflow__char_max_add_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_51_bad();");
  CWE190_Integer_Overflow__char_rand_square_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_16_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_31_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_18_bad();");
  CWE190_Integer_Overflow__char_rand_square_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_68_bad();");
  CWE190_Integer_Overflow__char_max_add_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_15_bad();");
  CWE190_Integer_Overflow__char_max_add_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_15_bad();");
  CWE190_Integer_Overflow__char_max_multiply_15_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_22_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_66_bad();");
  CWE190_Integer_Overflow__char_rand_square_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_18_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_63_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_61_bad();");
  CWE190_Integer_Overflow__char_max_add_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_08_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_68_bad();");
  CWE190_Integer_Overflow__char_max_multiply_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_04_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_11_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_21_bad();");
  CWE190_Integer_Overflow__char_max_multiply_21_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_06_bad();");
  CWE190_Integer_Overflow__char_max_add_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_31_bad();");
  CWE190_Integer_Overflow__char_max_multiply_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_07_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_07_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_06_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_01_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_45_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_09_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_51_bad();");
  CWE190_Integer_Overflow__char_rand_add_51_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_09_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_08_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_18_bad();");
  CWE190_Integer_Overflow__char_max_multiply_18_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_11_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_53_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_13_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_13_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_16_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_61_bad();");
  CWE190_Integer_Overflow__char_rand_add_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_06_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_07_bad();");
  CWE190_Integer_Overflow__char_rand_square_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_15_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_32_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_12_bad();");
  CWE190_Integer_Overflow__char_max_square_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_51_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_41_bad();");
  CWE190_Integer_Overflow__char_max_square_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_66_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_66_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_21_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_21_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_45_bad();");
  CWE190_Integer_Overflow__char_max_add_45_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_05_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_04_bad();");
  CWE190_Integer_Overflow__char_max_add_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_34_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_14_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_07_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_61_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_61_bad();");
  CWE190_Integer_Overflow__char_max_multiply_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_17_bad();");
  CWE190_Integer_Overflow__char_rand_square_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_15_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_22_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_14_bad();");
  CWE190_Integer_Overflow__char_max_multiply_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_64_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_01_bad();");
  CWE190_Integer_Overflow__char_rand_square_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_63_bad();");
  CWE190_Integer_Overflow__char_max_add_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_54_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_64_bad();");
  CWE190_Integer_Overflow__char_rand_add_64_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_22_bad();");
  CWE190_Integer_Overflow__char_max_square_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_64_bad();");
  CWE190_Integer_Overflow__char_max_square_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_64_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_64_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_51_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_51_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_07_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_44_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_32_bad();");
  CWE190_Integer_Overflow__char_max_add_32_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_31_bad();");
  CWE190_Integer_Overflow__char_rand_add_31_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_14_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_15_bad();");
  CWE190_Integer_Overflow__char_max_square_15_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_04_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_12_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_54_bad();");
  CWE190_Integer_Overflow__char_max_multiply_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_04_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_31_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_10_bad();");
  CWE190_Integer_Overflow__char_max_square_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_42_bad();");
  CWE190_Integer_Overflow__char_rand_square_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_09_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_09_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_52_bad();");
  CWE190_Integer_Overflow__char_max_square_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_65_bad();");
  CWE190_Integer_Overflow__char_max_square_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_45_bad();");
  CWE190_Integer_Overflow__char_max_multiply_45_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_15_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_15_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_22_bad();");
  CWE190_Integer_Overflow__char_max_add_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_03_bad();");
  CWE190_Integer_Overflow__char_rand_square_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_34_bad();");
  CWE190_Integer_Overflow__char_rand_add_34_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_12_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_12_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_04_bad();");
  CWE190_Integer_Overflow__char_max_square_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_07_bad();");
  CWE190_Integer_Overflow__char_max_square_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_09_bad();");
  CWE190_Integer_Overflow__char_max_add_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_53_bad();");
  CWE190_Integer_Overflow__char_max_add_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_34_bad();");
  CWE190_Integer_Overflow__char_max_square_34_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_68_bad();");
  CWE190_Integer_Overflow__char_max_square_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_08_bad();");
  CWE190_Integer_Overflow__char_rand_add_08_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_68_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_11_bad();");
  CWE190_Integer_Overflow__char_max_add_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_07_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_61_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_31_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_14_bad();");
  CWE190_Integer_Overflow__char_rand_square_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_31_bad();");
  CWE190_Integer_Overflow__char_max_square_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_44_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_52_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_04_bad();");
  CWE190_Integer_Overflow__char_rand_add_04_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_52_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_53_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_67_bad();");
  CWE190_Integer_Overflow__char_max_multiply_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_44_bad();");
  CWE190_Integer_Overflow__char_rand_square_44_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_09_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_13_bad();");
  CWE190_Integer_Overflow__char_max_add_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_07_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_16_bad();");
  CWE190_Integer_Overflow__char_max_add_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_18_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_18_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_11_bad();");
  CWE190_Integer_Overflow__char_max_square_11_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_68_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_45_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_68_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_68_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_54_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_14_bad();");
  CWE190_Integer_Overflow__char_max_add_14_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_45_bad();");
  CWE190_Integer_Overflow__char_rand_add_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_06_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_42_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_42_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_22_bad();");
  CWE190_Integer_Overflow__char_max_multiply_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_05_bad();");
  CWE190_Integer_Overflow__char_rand_add_05_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_31_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_63_bad();");
  CWE190_Integer_Overflow__char_max_square_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_45_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_45_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_12_bad();");
  CWE190_Integer_Overflow__char_max_add_12_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_04_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_04_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_16_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_66_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_66_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_41_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_54_bad();");
  CWE190_Integer_Overflow__char_rand_add_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_53_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_53_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_13_bad();");
  CWE190_Integer_Overflow__char_rand_add_13_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_61_bad();");
  CWE190_Integer_Overflow__char_max_square_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_03_bad();");
  CWE190_Integer_Overflow__char_max_square_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_34_bad();");
  CWE190_Integer_Overflow__char_max_multiply_34_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_15_bad();");
  CWE190_Integer_Overflow__char_rand_square_15_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_65_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_17_bad();");
  CWE190_Integer_Overflow__char_max_square_17_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_61_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_61_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_08_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_08_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_41_bad();");
  CWE190_Integer_Overflow__char_max_add_41_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_64_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_64_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_09_bad();");
  CWE190_Integer_Overflow__char_rand_add_09_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_51_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_51_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_10_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_13_bad();");
  CWE190_Integer_Overflow__char_rand_square_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_63_bad();");
  CWE190_Integer_Overflow__char_rand_add_63_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_54_bad();");
  CWE190_Integer_Overflow__char_max_square_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_06_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_06_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_01_bad();");
  CWE190_Integer_Overflow__char_max_multiply_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_03_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_21_bad();");
  CWE190_Integer_Overflow__char_max_add_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_31_bad();");
  CWE190_Integer_Overflow__char_rand_square_31_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_02_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_02_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_16_bad();");
  CWE190_Integer_Overflow__char_max_multiply_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_22_bad();");
  CWE190_Integer_Overflow__char_rand_square_22_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_square_67_bad();");
  CWE190_Integer_Overflow__char_rand_square_67_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_16_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_16_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_add_21_bad();");
  CWE190_Integer_Overflow__char_fscanf_add_21_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_54_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_34_bad();");
  CWE190_Integer_Overflow__char_max_add_34_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_18_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_18_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_21_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_21_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_32_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_32_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_44_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_44_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_03_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_03_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_multiply_10_bad();");
  CWE190_Integer_Overflow__char_fscanf_multiply_10_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_08_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_08_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_10_bad();");
  CWE190_Integer_Overflow__char_max_multiply_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_multiply_65_bad();");
  CWE190_Integer_Overflow__char_max_multiply_65_bad();
  printLine("Calling CWE190_Integer_Overflow__int64_t_fscanf_add_10_bad();");
  CWE190_Integer_Overflow__int64_t_fscanf_add_10_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_add_65_bad();");
  CWE190_Integer_Overflow__char_rand_add_65_bad();
  printLine("Calling CWE190_Integer_Overflow__char_rand_multiply_13_bad();");
  CWE190_Integer_Overflow__char_rand_multiply_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_fscanf_square_21_bad();");
  CWE190_Integer_Overflow__char_fscanf_square_21_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_square_13_bad();");
  CWE190_Integer_Overflow__char_max_square_13_bad();
  printLine("Calling CWE190_Integer_Overflow__char_max_add_66_bad();");
  CWE190_Integer_Overflow__char_max_add_66_bad();
  return 0;
}
// 65F31C: using guessed type int globalArgc;
// 65F320: using guessed type __int64 globalArgv;

//----- (0000000000404D38) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_02_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000404D7F) ----------------------------------------------------
int goodB2G1()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000404DE5) ----------------------------------------------------
int goodB2G2()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000404E4B) ----------------------------------------------------
int goodG2B1()
{
  return printLongLongLine(3LL);
}

//----- (0000000000404E7D) ----------------------------------------------------
int goodG2B2()
{
  return printLongLongLine(3LL);
}

//----- (0000000000404EAF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_02_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  return goodG2B2();
}

//----- (0000000000404EDD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_68b_badSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_square_68_badData * CWE190_Integer_Overflow__char_rand_square_68_badData);
}
// 65F358: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_badData;

//----- (0000000000404F0A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_68b_goodG2BSink()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_rand_square_68_goodG2BData
         * CWE190_Integer_Overflow__char_rand_square_68_goodG2BData);
}
// 65F357: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_goodG2BData;

//----- (0000000000404F37) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_rand_square_68_goodB2GData < -11
    || CWE190_Integer_Overflow__char_rand_square_68_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_rand_square_68_goodB2GData
             * CWE190_Integer_Overflow__char_rand_square_68_goodB2GData);
  }
  return result;
}
// 65F359: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_goodB2GData;

//----- (0000000000404F82) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53c_badSink(a1);
}

//----- (0000000000404F9C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53c_goodG2BSink(a1);
}

//----- (0000000000404FB6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53c_goodB2GSink(a1);
}

//----- (0000000000404FD0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000404FF8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000405020) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000405066) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004050DB) ----------------------------------------------------
int goodB2G()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040516F) ----------------------------------------------------
int goodG2B()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = 2LL;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (00000000004051CD) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_good()
{
  goodB2G();
  return goodG2B();
}

//----- (00000000004051E7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_54_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405220) ----------------------------------------------------
int goodG2B_0()
{
  return CWE190_Integer_Overflow__char_fscanf_add_54b_goodG2BSink(2);
}

//----- (000000000040523D) ----------------------------------------------------
int goodB2G_0()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405276) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_54_good()
{
  goodG2B_0();
  return goodB2G_0();
}

//----- (0000000000405290) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004052EB) ----------------------------------------------------
int goodB2G1_0()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;
// 65F318: using guessed type int globalFalse;

//----- (0000000000405371) ----------------------------------------------------
int goodB2G2_0()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004053EB) ----------------------------------------------------
int goodG2B1_0()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000040543D) ----------------------------------------------------
int goodG2B2_0()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 2LL;
  result = globalTrue;
  if ( globalTrue )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000405483) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_10_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (00000000004054B1) ----------------------------------------------------
int __fastcall badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004054DD) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405521) ----------------------------------------------------
int __fastcall goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040554D) ----------------------------------------------------
int goodG2B_1()
{
  return goodG2BSink(2LL);
}

//----- (000000000040557C) ----------------------------------------------------
int __fastcall goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (00000000004055C4) ----------------------------------------------------
__int64 goodB2G_1()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405608) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good()
{
  goodG2B_1();
  return goodB2G_1();
}

//----- (0000000000405622) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_68_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_68_badData = v1;
  return CWE190_Integer_Overflow__char_fscanf_square_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F329: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_badData;

//----- (0000000000405661) ----------------------------------------------------
int goodG2B_2()
{
  CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_fscanf_square_68b_goodG2BSink();
}
// 65F328: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData;

//----- (0000000000405687) ----------------------------------------------------
int goodB2G_2()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData = v1;
  return CWE190_Integer_Overflow__char_fscanf_square_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F32A: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData;

//----- (00000000004056C6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_68_good()
{
  goodG2B_2();
  return goodB2G_2();
}

//----- (00000000004056E0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v4 = v1;
  return printHexCharLine(*v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040574E) ----------------------------------------------------
int goodG2B_3()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 3;
  return printHexCharLine(3);
}

//----- (00000000004057A3) ----------------------------------------------------
int goodB2G_3()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  v4 = *v5;
  if ( v4 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v3 = v4 + 1;
  return printHexCharLine(v4 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405823) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_32_good()
{
  goodG2B_3();
  return goodB2G_3();
}

//----- (000000000040583D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_51_bad()
{
  return CWE190_Integer_Overflow__char_max_add_51b_badSink(127);
}

//----- (000000000040585A) ----------------------------------------------------
int goodG2B_4()
{
  return CWE190_Integer_Overflow__char_max_add_51b_goodG2BSink(2);
}

//----- (0000000000405877) ----------------------------------------------------
int goodB2G_4()
{
  return CWE190_Integer_Overflow__char_max_add_51b_goodB2GSink(127);
}

//----- (0000000000405894) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_51_good()
{
  goodG2B_4();
  return goodB2G_4();
}

//----- (00000000004058AE) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (00000000004058B9) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (00000000004058C4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_08_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue();
  if ( result )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000405939) ----------------------------------------------------
int goodB2G1_1()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004059CC) ----------------------------------------------------
int goodB2G2_1()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue();
  if ( result && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000405A53) ----------------------------------------------------
int goodG2B1_1()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000405AA7) ----------------------------------------------------
int goodG2B2_1()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue() )
    v1 = 2;
  result = staticReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000405AEF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_08_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_1();
  return goodG2B2_1();
}

//----- (0000000000405B1D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54d_badSink(a1);
}

//----- (0000000000405B37) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodG2BSink(a1);
}

//----- (0000000000405B51) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodB2GSink(a1);
}

//----- (0000000000405B6B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000405BA5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000405BDF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000405C2B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(a1);
}

//----- (0000000000405C45) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_52c_goodG2BSink(a1);
}

//----- (0000000000405C5F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_52c_goodB2GSink(a1);
}

//----- (0000000000405C79) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_54_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_54b_badSink(v0);
}

//----- (0000000000405CC3) ----------------------------------------------------
int goodG2B_5()
{
  return CWE190_Integer_Overflow__char_rand_square_54b_goodG2BSink(2);
}

//----- (0000000000405CE0) ----------------------------------------------------
int goodB2G_5()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_54b_goodB2GSink(v0);
}

//----- (0000000000405D2A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_54_good()
{
  goodG2B_5();
  return goodB2G_5();
}

//----- (0000000000405D44) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_01_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405D8B) ----------------------------------------------------
int goodG2B_6()
{
  return printLongLongLine(3LL);
}

//----- (0000000000405DBD) ----------------------------------------------------
int goodB2G_6()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000405E23) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_01_good()
{
  goodG2B_6();
  return goodB2G_6();
}

//----- (0000000000405E3D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000405E63) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000405E89) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (0000000000405ECB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_05_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue )
    v1 = 127;
  result = staticTrue;
  if ( staticTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0C4: using guessed type int staticTrue;

//----- (0000000000405F06) ----------------------------------------------------
int goodB2G1_2()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue )
    v1 = 127;
  if ( staticFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 65F0C4: using guessed type int staticTrue;
// 65F134: using guessed type int staticFalse;

//----- (0000000000405F5F) ----------------------------------------------------
int goodB2G2_2()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue )
    v1 = 127;
  result = staticTrue;
  if ( staticTrue )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 65F0C4: using guessed type int staticTrue;

//----- (0000000000405FAC) ----------------------------------------------------
int goodG2B1_2()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue;
  if ( staticTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0C4: using guessed type int staticTrue;
// 65F134: using guessed type int staticFalse;

//----- (0000000000405FF3) ----------------------------------------------------
int goodG2B2_2()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue )
    v1 = 2;
  result = staticTrue;
  if ( staticTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0C4: using guessed type int staticTrue;

//----- (000000000040602E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_05_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (000000000040605C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000406080) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004060A4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (00000000004060DA) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406109) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000040611F) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040614E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000406183) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (00000000004061B8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (00000000004061FF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_53_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406238) ----------------------------------------------------
int goodG2B_7()
{
  return CWE190_Integer_Overflow__char_fscanf_square_53b_goodG2BSink(2);
}

//----- (0000000000406255) ----------------------------------------------------
int goodB2G_7()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040628E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_53_good()
{
  goodG2B_7();
  return goodB2G_7();
}

//----- (00000000004062A8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_15_bad()
{
  return printHexCharLine(1);
}

//----- (00000000004062D5) ----------------------------------------------------
int goodB2G1_3()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000406320) ----------------------------------------------------
int goodB2G2_3()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000040636B) ----------------------------------------------------
int goodG2B1_3()
{
  return printHexCharLine(4);
}

//----- (0000000000406398) ----------------------------------------------------
int goodG2B2_3()
{
  return printHexCharLine(4);
}

//----- (00000000004063C5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_15_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (00000000004063F3) ----------------------------------------------------
int badSink_0()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_add_45_badData + 1);
}
// 65F138: using guessed type char CWE190_Integer_Overflow__char_max_add_45_badData;

//----- (000000000040641C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_45_bad()
{
  CWE190_Integer_Overflow__char_max_add_45_badData = 127;
  return badSink_0();
}
// 65F138: using guessed type char CWE190_Integer_Overflow__char_max_add_45_badData;

//----- (0000000000406442) ----------------------------------------------------
int goodG2BSink_0()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_add_45_goodG2BData + 1);
}
// 65F139: using guessed type char CWE190_Integer_Overflow__char_max_add_45_goodG2BData;

//----- (000000000040646B) ----------------------------------------------------
int goodG2B_8()
{
  CWE190_Integer_Overflow__char_max_add_45_goodG2BData = 2;
  return goodG2BSink_0();
}
// 65F139: using guessed type char CWE190_Integer_Overflow__char_max_add_45_goodG2BData;

//----- (0000000000406491) ----------------------------------------------------
int goodB2GSink_0()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_max_add_45_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_max_add_45_goodB2GData + 1);
  return result;
}
// 65F13A: using guessed type char CWE190_Integer_Overflow__char_max_add_45_goodB2GData;

//----- (00000000004064CC) ----------------------------------------------------
int goodB2G_8()
{
  CWE190_Integer_Overflow__char_max_add_45_goodB2GData = 127;
  return goodB2GSink_0();
}
// 65F13A: using guessed type char CWE190_Integer_Overflow__char_max_add_45_goodB2GData;

//----- (00000000004064F2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_45_good()
{
  goodG2B_8();
  return goodB2G_8();
}

//----- (000000000040650C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53c_badSink(a1);
}

//----- (0000000000406526) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodG2BSink(a1);
}

//----- (0000000000406540) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodB2GSink(a1);
}

//----- (000000000040655A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_06_bad()
{
  return printHexCharLine(128);
}

//----- (0000000000406595) ----------------------------------------------------
int goodB2G1_4()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004065EE) ----------------------------------------------------
int goodB2G2_4()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000040663B) ----------------------------------------------------
int goodG2B1_4()
{
  return printHexCharLine(3);
}

//----- (0000000000406682) ----------------------------------------------------
int goodG2B2_4()
{
  return printHexCharLine(3);
}

//----- (00000000004066BD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_06_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (00000000004066EB) ----------------------------------------------------
__int64 badSource()
{
  return 127LL;
}

//----- (00000000004066FE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_42_bad()
{
  char v0; // al

  v0 = badSource();
  return printHexCharLine(v0 * v0);
}

//----- (0000000000406733) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 2LL;
}

//----- (0000000000406746) ----------------------------------------------------
int goodG2B_9()
{
  char v0; // al

  v0 = goodG2BSource();
  return printHexCharLine(v0 * v0);
}

//----- (000000000040677B) ----------------------------------------------------
__int64 goodB2GSource()
{
  return 127LL;
}

//----- (000000000040678E) ----------------------------------------------------
int goodB2G_9()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource();
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004067E1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_42_good()
{
  goodB2G_9();
  return goodG2B_9();
}

//----- (00000000004067FB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_09_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406867) ----------------------------------------------------
int goodB2G1_5()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004068FD) ----------------------------------------------------
int goodB2G2_5()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406987) ----------------------------------------------------
int goodG2B1_5()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004069D2) ----------------------------------------------------
int goodG2B2_5()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406A11) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_09_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_5();
  return goodG2B2_5();
}

//----- (0000000000406A3F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000406A67) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000406A8F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000406AD5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_04_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43BCE8, &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406B27) ----------------------------------------------------
int goodB2G1_6()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43BCE8, &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406B99) ----------------------------------------------------
int goodB2G2_6()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43BCE8, &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406BFF) ----------------------------------------------------
int goodG2B1_6()
{
  return printHexCharLine(3);
}

//----- (0000000000406C44) ----------------------------------------------------
int goodG2B2_6()
{
  return printHexCharLine(3);
}

//----- (0000000000406C7D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_04_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (0000000000406CAB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_31_bad()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406CF9) ----------------------------------------------------
int goodG2B_10()
{
  return printHexCharLine(3);
}

//----- (0000000000406D2E) ----------------------------------------------------
int goodB2G_10()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 + 1;
  return printHexCharLine(v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000406D8E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_31_good()
{
  goodG2B_10();
  return goodB2G_10();
}

//----- (0000000000406DA8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_64_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_square_64b_badSink(&v2);
}

//----- (0000000000406DF3) ----------------------------------------------------
int goodG2B_11()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_square_64b_goodG2BSink(&v1);
}

//----- (0000000000406E11) ----------------------------------------------------
int goodB2G_11()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_square_64b_goodB2GSink(&v2);
}

//----- (0000000000406E5C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_64_good()
{
  goodG2B_11();
  return goodB2G_11();
}

//----- (0000000000406E76) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_15_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (0000000000406ECC) ----------------------------------------------------
int goodB2G1_7()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000406F34) ----------------------------------------------------
int goodB2G2_7()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000406F9C) ----------------------------------------------------
int goodG2B1_7()
{
  return printHexCharLine(3);
}

//----- (0000000000406FC5) ----------------------------------------------------
int goodG2B2_7()
{
  return printHexCharLine(3);
}

//----- (0000000000406FEE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_15_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_7();
  return goodG2B2_7();
}

//----- (000000000040701C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_52_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_52b_badSink(v0);
}

//----- (0000000000407066) ----------------------------------------------------
int goodG2B_12()
{
  return CWE190_Integer_Overflow__char_rand_multiply_52b_goodG2BSink(2);
}

//----- (0000000000407083) ----------------------------------------------------
int goodB2G_12()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_52b_goodB2GSink(v0);
}

//----- (00000000004070CD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_52_good()
{
  goodG2B_12();
  return goodB2G_12();
}

//----- (00000000004070E7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040711E) ----------------------------------------------------
int goodG2B_13()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000040713C) ----------------------------------------------------
int goodB2G_13()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000407173) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_64_good()
{
  goodG2B_13();
  return goodB2G_13();
}

//----- (000000000040718D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004071B6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004071DF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040721A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53d_badSink(a1);
}

//----- (0000000000407234) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53d_goodG2BSink(a1);
}

//----- (000000000040724E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53d_goodB2GSink(a1);
}

//----- (0000000000407268) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_67_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004072A5) ----------------------------------------------------
int goodG2B_14()
{
  return CWE190_Integer_Overflow__char_fscanf_add_67b_goodG2BSink(2);
}

//----- (00000000004072C9) ----------------------------------------------------
int goodB2G_14()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000407306) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_67_good()
{
  goodG2B_14();
  return goodB2G_14();
}

//----- (0000000000407320) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_bad()
{
  __int64 v0; // rax

  v0 = CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_badSource(0LL);
  if ( v0 > 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (0000000000407360) ----------------------------------------------------
int goodG2B_15()
{
  __int64 v0; // rax

  v0 = CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodG2BSource();
  if ( v0 > 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (00000000004073A0) ----------------------------------------------------
int goodB2G_15()
{
  __int64 v0; // rax

  v0 = CWE190_Integer_Overflow__int64_t_fscanf_multiply_61b_goodB2GSource(0LL);
  if ( v0 > 0 )
  {
    if ( v0 > 4611686018427387902LL )
      LODWORD(v0) = printLine("data value is too large to perform arithmetic safely.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (00000000004073FC) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_61_good()
{
  goodG2B_15();
  return goodB2G_15();
}

//----- (0000000000407416) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_16_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000407471) ----------------------------------------------------
int goodB2G_16()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (00000000004074DE) ----------------------------------------------------
int goodG2B_16()
{
  return printHexCharLine(4);
}

//----- (000000000040750C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_16_good()
{
  goodB2G_16();
  return goodG2B_16();
}

//----- (0000000000407526) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_52c_badSink(a1);
}

//----- (0000000000407540) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_52c_goodG2BSink(a1);
}

//----- (000000000040755A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_52c_goodB2GSink(a1);
}

//----- (0000000000407574) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F1F0: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal;

//----- (00000000004075A2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F1F4: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Global;

//----- (00000000004075EE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F1F8: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global;

//----- (000000000040762E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F1FC: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal;

//----- (000000000040765C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_05_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_0 )
    v1 = 127;
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0C8: using guessed type int staticTrue_0;

//----- (000000000040769B) ----------------------------------------------------
int goodB2G1_8()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_0 )
    v1 = 127;
  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 65F0C8: using guessed type int staticTrue_0;
// 65F13C: using guessed type int staticFalse_0;

//----- (0000000000407704) ----------------------------------------------------
int goodB2G2_8()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_0 )
    v1 = 127;
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 65F0C8: using guessed type int staticTrue_0;

//----- (0000000000407761) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_0 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0C8: using guessed type int staticTrue_0;
// 65F13C: using guessed type int staticFalse_0;

//----- (00000000004077AC) ----------------------------------------------------
int goodG2B2_8()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_0 )
    v1 = 2;
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0C8: using guessed type int staticTrue_0;

//----- (00000000004077EB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_05_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (0000000000407819) ----------------------------------------------------
int __fastcall badSink_1(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000407841) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_41_bad()
{
  return badSink_1(127);
}

//----- (000000000040785E) ----------------------------------------------------
int __fastcall goodG2BSink_1(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000407886) ----------------------------------------------------
int goodG2B_17()
{
  return goodG2BSink_1(2);
}

//----- (00000000004078A3) ----------------------------------------------------
int __fastcall goodB2GSink_1(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004078E9) ----------------------------------------------------
int goodB2G_17()
{
  return goodB2GSink_1(127);
}

//----- (0000000000407906) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_41_good()
{
  goodB2G_17();
  return goodG2B_17();
}

//----- (0000000000407920) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive;
  if ( staticFive == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0CC: using guessed type int staticFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000407985) ----------------------------------------------------
int goodB2G1_9()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0CC: using guessed type int staticFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000407A15) ----------------------------------------------------
int goodB2G2_9()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive;
  if ( staticFive == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0CC: using guessed type int staticFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000407A99) ----------------------------------------------------
int goodG2B1_9()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive;
  if ( staticFive == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 65F0CC: using guessed type int staticFive;

//----- (0000000000407AF3) ----------------------------------------------------
int goodG2B2_9()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive == 5 )
    v1 = 2LL;
  result = staticFive;
  if ( staticFive == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 65F0CC: using guessed type int staticFive;

//----- (0000000000407B41) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_07_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (0000000000407B6F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000407BA4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000407BD9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (0000000000407C20) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_65_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_square_65b_badSink)((unsigned int)(char)v0);
}

//----- (0000000000407C73) ----------------------------------------------------
int goodG2B_18()
{
  return CWE190_Integer_Overflow__char_rand_square_65b_goodG2BSink(2);
}

//----- (0000000000407C99) ----------------------------------------------------
__int64 goodB2G_18()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_square_65b_goodB2GSink)((unsigned int)(char)v0);
}

//----- (0000000000407CEC) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_65_good()
{
  goodG2B_18();
  return goodB2G_18();
}

//----- (0000000000407D06) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_51_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_51b_badSink((char)v0);
}

//----- (0000000000407D50) ----------------------------------------------------
int goodG2B_19()
{
  return CWE190_Integer_Overflow__char_rand_multiply_51b_goodG2BSink(2);
}

//----- (0000000000407D6D) ----------------------------------------------------
int goodB2G_19()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_51b_goodB2GSink((char)v0);
}

//----- (0000000000407DB7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_51_good()
{
  goodG2B_19();
  return goodB2G_19();
}

//----- (0000000000407DD1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000407DFA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000407E23) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000407E5E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_34_bad()
{
  return printHexCharLine(1);
}

//----- (0000000000407E97) ----------------------------------------------------
int goodG2B_20()
{
  return printHexCharLine(4);
}

//----- (0000000000407ED0) ----------------------------------------------------
int goodB2G_20()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000407F27) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_34_good()
{
  goodG2B_20();
  return goodB2G_20();
}

//----- (0000000000407F41) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (0000000000407F73) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (0000000000407FA5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (0000000000407FF5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_52_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040802E) ----------------------------------------------------
int goodG2B_21()
{
  return CWE190_Integer_Overflow__char_fscanf_square_52b_goodG2BSink(2);
}

//----- (000000000040804B) ----------------------------------------------------
int goodB2G_21()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000408084) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_52_good()
{
  goodG2B_21();
  return goodB2G_21();
}

//----- (000000000040809E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004080C6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004080EE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000408134) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_67_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_67b_badSink(v0);
}

//----- (0000000000408185) ----------------------------------------------------
int goodG2B_22()
{
  return CWE190_Integer_Overflow__char_rand_square_67b_goodG2BSink(2);
}

//----- (00000000004081A9) ----------------------------------------------------
int goodB2G_22()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_67b_goodB2GSink(v0);
}

//----- (00000000004081FA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_67_good()
{
  goodG2B_22();
  return goodB2G_22();
}

//----- (0000000000408214) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_square_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_rand_square_22_badGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F160: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_badGlobal;

//----- (0000000000408246) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F164: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Global;

//----- (00000000004082A2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F168: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global;

//----- (00000000004082F2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F16C: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal;

//----- (0000000000408324) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_10_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000408363) ----------------------------------------------------
int goodB2G1_10()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (00000000004083CC) ----------------------------------------------------
int goodB2G2_10()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000408429) ----------------------------------------------------
int goodG2B1_10()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000408474) ----------------------------------------------------
int goodG2B2_10()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (00000000004084B3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_10_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (00000000004084E1) ----------------------------------------------------
int badSink_2()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_45_badData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_45_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_45_badData);
  return result;
}
// 65F140: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_badData;

//----- (000000000040850F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_45_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_45_badData = v0;
  return badSink_2();
}
// 65F140: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_badData;

//----- (0000000000408562) ----------------------------------------------------
int goodG2BSink_2()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData);
  return result;
}
// 65F141: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData;

//----- (0000000000408590) ----------------------------------------------------
int goodG2B_23()
{
  CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData = 2;
  return goodG2BSink_2();
}
// 65F141: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData;

//----- (00000000004085B6) ----------------------------------------------------
int goodB2GSink_2()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData);
  }
  return result;
}
// 65F142: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData;

//----- (00000000004085F6) ----------------------------------------------------
int goodB2G_23()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData = v0;
  return goodB2GSink_2();
}
// 65F142: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData;

//----- (0000000000408649) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_45_good()
{
  goodG2B_23();
  return goodB2G_23();
}

//----- (0000000000408663) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_16_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004086A9) ----------------------------------------------------
int goodB2G_24()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000408713) ----------------------------------------------------
int goodG2B_24()
{
  return printHexCharLine(4);
}

//----- (0000000000408740) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_16_good()
{
  goodB2G_24();
  return goodG2B_24();
}

//----- (000000000040875A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_14_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000040879C) ----------------------------------------------------
int goodB2G1_11()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 65F120: using guessed type int globalFive;

//----- (00000000004087FC) ----------------------------------------------------
int goodB2G2_11()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000408850) ----------------------------------------------------
int goodG2B1_11()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000040889E) ----------------------------------------------------
int goodG2B2_11()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004088E0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_14_good()
{
  goodB2G1_11();
  goodB2G2_11();
  goodG2B1_11();
  return goodG2B2_11();
}

//----- (000000000040890E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_add_64b_badSink(&v1);
}

//----- (000000000040892C) ----------------------------------------------------
int goodG2B_25()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_add_64b_goodG2BSink(&v1);
}

//----- (000000000040894A) ----------------------------------------------------
int goodB2G_25()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_add_64b_goodB2GSink(&v1);
}

//----- (0000000000408968) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_64_good()
{
  goodG2B_25();
  return goodB2G_25();
}

//----- (0000000000408982) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_06_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004089EF) ----------------------------------------------------
int goodB2G1_12()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000408A7A) ----------------------------------------------------
int goodB2G2_12()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 5;
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000408AF9) ----------------------------------------------------
int goodG2B1_12()
{
  return printHexCharLine(4);
}

//----- (0000000000408B45) ----------------------------------------------------
int goodG2B2_12()
{
  return printHexCharLine(4);
}

//----- (0000000000408B85) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_06_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (0000000000408BB3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 127;
  v1 = 127;
  return printHexCharLine(254);
}

//----- (0000000000408C0D) ----------------------------------------------------
int goodG2B_26()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 2;
  v1 = 2;
  return printHexCharLine(4);
}

//----- (0000000000408C67) ----------------------------------------------------
int goodB2G_26()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Eh] [rbp-12h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 127;
  v1 = 127;
  v2 = 127;
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000408CD3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_32_good()
{
  goodG2B_26();
  return goodB2G_26();
}

//----- (0000000000408CED) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_54_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000408D28) ----------------------------------------------------
int goodG2B_27()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodG2BSink(2LL);
}

//----- (0000000000408D4E) ----------------------------------------------------
int goodB2G_27()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000408D89) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_54_good()
{
  goodG2B_27();
  return goodB2G_27();
}

//----- (0000000000408DA3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_68_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_68_badData = v0;
  return CWE190_Integer_Overflow__char_rand_add_68b_badSink();
}
// 65F32D: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_badData;

//----- (0000000000408DF6) ----------------------------------------------------
int goodG2B_28()
{
  CWE190_Integer_Overflow__char_rand_add_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_rand_add_68b_goodG2BSink();
}
// 65F32C: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_goodG2BData;

//----- (0000000000408E1C) ----------------------------------------------------
int goodB2G_28()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_68_goodB2GData = v0;
  return CWE190_Integer_Overflow__char_rand_add_68b_goodB2GSink();
}
// 65F32B: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_goodB2GData;

//----- (0000000000408E6F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_68_good()
{
  goodG2B_28();
  return goodB2G_28();
}

//----- (0000000000408E89) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_12_bad()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%c", &v1);
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  else if ( v1 < -11 || v1 > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000408F2E) ----------------------------------------------------
int goodB2G_29()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v3 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  else if ( v1 < -11 || v1 > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000409011) ----------------------------------------------------
int goodG2B_29()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (0000000000409079) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_12_good()
{
  goodB2G_29();
  return goodG2B_29();
}

//----- (0000000000409093) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_10_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000409100) ----------------------------------------------------
int goodB2G1_13()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000040918B) ----------------------------------------------------
int goodB2G2_13()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000040920A) ----------------------------------------------------
int goodG2B1_13()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000409256) ----------------------------------------------------
int goodG2B2_13()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000409296) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_10_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_13();
  return goodG2B2_13();
}

//----- (00000000004092C4) ----------------------------------------------------
int badSink_3()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData > 0 )
    result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData);
  return result;
}
// 65F148: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData;

//----- (00000000004092F7) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData = v1;
  return badSink_3();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F148: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_badData;

//----- (000000000040933B) ----------------------------------------------------
int goodG2BSink_3()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData > 0 )
    result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData);
  return result;
}
// 65F150: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData;

//----- (000000000040936E) ----------------------------------------------------
int goodG2B_30()
{
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData = 2LL;
  return goodG2BSink_3();
}
// 65F150: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodG2BData;

//----- (000000000040939D) ----------------------------------------------------
int goodB2GSink_3()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData);
  }
  return result;
}
// 65F158: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData;

//----- (00000000004093EC) ----------------------------------------------------
int goodB2G_30()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData = v1;
  return goodB2GSink_3();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F158: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_goodB2GData;

//----- (0000000000409430) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_45_good()
{
  goodG2B_30();
  return goodB2G_30();
}

//----- (000000000040944A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54c_badSink(a1);
}

//----- (0000000000409464) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54c_goodG2BSink(a1);
}

//----- (000000000040947E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54c_goodB2GSink(a1);
}

//----- (0000000000409498) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004094CB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004094FE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000409543) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C3C4, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004095A6) ----------------------------------------------------
int goodB2G1_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C3C4, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000409634) ----------------------------------------------------
int goodB2G2_14()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C3C4, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004096B6) ----------------------------------------------------
int goodG2B1_14()
{
  return printLongLongLine(4LL);
}

//----- (000000000040970E) ----------------------------------------------------
int goodG2B2_14()
{
  return printLongLongLine(4LL);
}

//----- (000000000040975A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_06_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (0000000000409788) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54d_badSink(a1);
}

//----- (00000000004097A2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54d_goodG2BSink(a1);
}

//----- (00000000004097BC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54d_goodB2GSink(a1);
}

//----- (00000000004097D6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_67_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_67b_badSink(v0);
}

//----- (0000000000409827) ----------------------------------------------------
int goodG2B_31()
{
  return CWE190_Integer_Overflow__char_rand_add_67b_goodG2BSink(2);
}

//----- (000000000040984B) ----------------------------------------------------
int goodB2G_31()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_67b_goodB2GSink(v0);
}

//----- (000000000040989C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_67_good()
{
  goodG2B_31();
  return goodB2G_31();
}

//----- (00000000004098B6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (00000000004098E7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (0000000000409918) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (0000000000409967) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000409990) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004099B9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004099F4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_15_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000409A36) ----------------------------------------------------
int goodB2G1_15()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000409A8C) ----------------------------------------------------
int goodB2G2_15()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000409AE2) ----------------------------------------------------
int goodG2B1_15()
{
  return printHexCharLine(3);
}

//----- (0000000000409B0B) ----------------------------------------------------
int goodG2B2_15()
{
  return printHexCharLine(3);
}

//----- (0000000000409B34) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_15_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (0000000000409B62) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000409B86) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000409BAA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000409BE0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_06_bad()
{
  return printHexCharLine(1);
}

//----- (0000000000409C1F) ----------------------------------------------------
int goodB2G1_16()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000409C88) ----------------------------------------------------
int goodB2G2_16()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000409CE5) ----------------------------------------------------
int goodG2B1_16()
{
  return printHexCharLine(4);
}

//----- (0000000000409D30) ----------------------------------------------------
int goodG2B2_16()
{
  return printHexCharLine(4);
}

//----- (0000000000409D6F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_06_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (0000000000409D9D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_07_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 65F0D0: using guessed type int staticFive_0;

//----- (0000000000409E07) ----------------------------------------------------
int goodB2G1_17()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 65F0D0: using guessed type int staticFive_0;

//----- (0000000000409E8F) ----------------------------------------------------
int goodB2G2_17()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 65F0D0: using guessed type int staticFive_0;

//----- (0000000000409F0B) ----------------------------------------------------
int goodG2B1_17()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_0 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0D0: using guessed type int staticFive_0;

//----- (0000000000409F54) ----------------------------------------------------
int goodG2B2_17()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_0 == 5 )
    v1 = 2;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0D0: using guessed type int staticFive_0;

//----- (0000000000409F91) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_07_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (0000000000409FBF) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_badSource()
{
  return 127LL;
}

//----- (0000000000409FD2) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_goodG2BSource()
{
  return 2LL;
}

//----- (0000000000409FE5) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_multiply_61b_goodB2GSource()
{
  return 127LL;
}

//----- (0000000000409FF8) ----------------------------------------------------
__int64 __fastcall badSource_0(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A028) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_42_bad()
{
  char v0; // al

  v0 = badSource_0(0x20u);
  return printHexCharLine(v0 + 1);
}

//----- (000000000040A059) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 2LL;
}

//----- (000000000040A06C) ----------------------------------------------------
int goodG2B_32()
{
  char v0; // al

  v0 = goodG2BSource_0();
  return printHexCharLine(v0 + 1);
}

//----- (000000000040A09D) ----------------------------------------------------
__int64 __fastcall goodB2GSource_0(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A0CD) ----------------------------------------------------
int goodB2G_32()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_0(0x20u);
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000040A110) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_42_good()
{
  goodB2G_32();
  return goodG2B_32();
}

//----- (000000000040A12A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_11_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A18A) ----------------------------------------------------
int goodB2G1_18()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A21A) ----------------------------------------------------
int goodB2G2_18()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A29E) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040A2F1) ----------------------------------------------------
int goodG2B2_18()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040A338) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_11_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000040A366) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_02_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A3AA) ----------------------------------------------------
int goodB2G1_19()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A412) ----------------------------------------------------
int goodB2G2_19()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A47A) ----------------------------------------------------
int goodG2B1_19()
{
  return printHexCharLine(4);
}

//----- (000000000040A4A5) ----------------------------------------------------
int goodG2B2_19()
{
  return printHexCharLine(4);
}

//----- (000000000040A4D0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_02_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (000000000040A4FE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_22_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_square_22_badSink(v0);
}
// 65F160: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_badGlobal;

//----- (000000000040A552) ----------------------------------------------------
int goodB2G1_20()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Sink(v0);
}
// 65F164: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Global;

//----- (000000000040A5A6) ----------------------------------------------------
int goodB2G2_20()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Sink(v0);
}
// 65F168: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global;

//----- (000000000040A5FA) ----------------------------------------------------
int goodG2B_33()
{
  CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_square_22_goodG2BSink(2);
}
// 65F16C: using guessed type int CWE190_Integer_Overflow__char_rand_square_22_goodG2BGlobal;

//----- (000000000040A621) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_22_good()
{
  goodB2G1_20();
  goodB2G2_20();
  return goodG2B_33();
}

//----- (000000000040A645) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A6A2) ----------------------------------------------------
int goodB2G1_21()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A72A) ----------------------------------------------------
int goodB2G2_21()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A7A6) ----------------------------------------------------
int goodG2B1_20()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000040A7FA) ----------------------------------------------------
int goodG2B2_20()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 2LL;
  result = globalFive;
  if ( globalFive == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000040A842) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_14_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (000000000040A870) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_32_bad()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = 0LL;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  *v4 = v1;
  return printLongLongLine(*v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A8E8) ----------------------------------------------------
int goodG2B_34()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2LL;
  v1 = 2LL;
  v3 = 2LL;
  v2 = 3LL;
  return printLongLongLine(3LL);
}

//----- (000000000040A94B) ----------------------------------------------------
int goodB2G_33()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+8h] [rbp-28h]
  __int64 v3; // [rsp+10h] [rbp-20h]
  __int64 v4; // [rsp+18h] [rbp-18h]
  __int64 *v5; // [rsp+20h] [rbp-10h]
  __int64 *v6; // [rsp+28h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 0LL;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  *v6 = v1;
  v4 = *v5;
  if ( v4 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v3 = v4 + 1;
  return printLongLongLine(v4 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040A9DF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_32_good()
{
  goodG2B_34();
  return goodB2G_33();
}

//----- (000000000040A9F9) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_65_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_multiply_65b_badSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040AA3B) ----------------------------------------------------
int goodG2B_35()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodG2BSink(2);
}

//----- (000000000040AA61) ----------------------------------------------------
__int64 goodB2G_34()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodB2GSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040AAA3) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_65_good()
{
  goodG2B_35();
  return goodB2G_34();
}

//----- (000000000040AABD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 > 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000040AAFC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 > 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000040AB3B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+20h] [rbp-10h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 > 0 )
  {
    if ( v3 > 4611686018427387902LL )
      LODWORD(v1) = printLine("data value is too large to perform arithmetic safely.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (000000000040AB96) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_10_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040ABEE) ----------------------------------------------------
int goodB2G1_22()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;
// 65F318: using guessed type int globalFalse;

//----- (000000000040AC76) ----------------------------------------------------
int goodB2G2_22()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040ACF2) ----------------------------------------------------
int goodG2B1_21()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000040AD3D) ----------------------------------------------------
int goodG2B2_21()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000040AD7C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_10_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_21();
  return goodG2B2_21();
}

//----- (000000000040ADAA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000040ADD8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000040AE06) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (000000000040AE50) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54d_badSink(a1);
}

//----- (000000000040AE6A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54d_goodG2BSink(a1);
}

//----- (000000000040AE84) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54d_goodB2GSink(a1);
}

//----- (000000000040AE9E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040AEC2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040AEE6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040AF1C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_05_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0D4: using guessed type int staticTrue_1;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040AF70) ----------------------------------------------------
int goodB2G1_23()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0D4: using guessed type int staticTrue_1;
// 65F128: using guessed type __int64 stdin;
// 65F170: using guessed type int staticFalse_1;

//----- (000000000040AFE4) ----------------------------------------------------
int goodB2G2_23()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_1 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0D4: using guessed type int staticTrue_1;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B04C) ----------------------------------------------------
int goodG2B1_22()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0D4: using guessed type int staticTrue_1;
// 65F170: using guessed type int staticFalse_1;

//----- (000000000040B093) ----------------------------------------------------
int goodG2B2_22()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_1 )
    v1 = 2;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0D4: using guessed type int staticTrue_1;

//----- (000000000040B0CE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_05_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (000000000040B0FC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_01_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B140) ----------------------------------------------------
int goodG2B_36()
{
  return printHexCharLine(4);
}

//----- (000000000040B16B) ----------------------------------------------------
int goodB2G_35()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B1D3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_01_good()
{
  goodG2B_36();
  return goodB2G_35();
}

//----- (000000000040B1ED) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_68_badData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_68_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_68_badData);
  return result;
}
// 65F349: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_badData;

//----- (000000000040B21B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData);
  return result;
}
// 65F348: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData;

//----- (000000000040B249) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData);
  }
  return result;
}
// 65F34A: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData;

//----- (000000000040B289) ----------------------------------------------------
int __fastcall badSink_4(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040B2AD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_41_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return badSink_4(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B2E6) ----------------------------------------------------
int __fastcall goodG2BSink_4(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040B30A) ----------------------------------------------------
int goodG2B_37()
{
  return goodG2BSink_4(2);
}

//----- (000000000040B327) ----------------------------------------------------
int __fastcall goodB2GSink_4(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040B35D) ----------------------------------------------------
int goodB2G_36()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return goodB2GSink_4(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B396) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_41_good()
{
  goodB2G_36();
  return goodG2B_37();
}

//----- (000000000040B3B0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_13_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B41E) ----------------------------------------------------
int goodB2G1_24()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B4B6) ----------------------------------------------------
int goodB2G2_24()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B542) ----------------------------------------------------
int goodG2B1_23()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B58F) ----------------------------------------------------
int goodG2B2_23()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040B5D0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_13_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_23();
  return goodG2B2_23();
}

//----- (000000000040B5FE) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_04_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C970, &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B657) ----------------------------------------------------
int goodB2G1_25()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C970, &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B6DB) ----------------------------------------------------
int goodB2G2_25()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_43C970, &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B753) ----------------------------------------------------
int goodG2B1_24()
{
  return printLongLongLine(3LL);
}

//----- (000000000040B7A3) ----------------------------------------------------
int goodG2B2_24()
{
  return printLongLongLine(3LL);
}

//----- (000000000040B7E7) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_04_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (000000000040B815) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_31_bad()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  v3 = v1;
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B86C) ----------------------------------------------------
int goodG2B_38()
{
  return printLongLongLine(3LL);
}

//----- (000000000040B8AE) ----------------------------------------------------
int goodB2G_37()
{
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  v3 = v1;
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 + 1;
  return printLongLongLine(v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040B921) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_31_good()
{
  goodG2B_38();
  return goodB2G_37();
}

//----- (000000000040B93B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_68_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_68_badData = v1;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F338: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_badData;

//----- (000000000040B97F) ----------------------------------------------------
int goodG2B_39()
{
  CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodG2BData = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodG2BSink();
}
// 65F340: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodG2BData;

//----- (000000000040B9AE) ----------------------------------------------------
int goodB2G_38()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData = v1;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F330: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData;

//----- (000000000040B9F2) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_68_good()
{
  goodG2B_39();
  return goodB2G_38();
}

//----- (000000000040BA0C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54e_badSink(a1);
}

//----- (000000000040BA26) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54e_goodG2BSink(a1);
}

//----- (000000000040BA40) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54e_goodB2GSink(a1);
}

//----- (000000000040BA5A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53d_badSink(a1);
}

//----- (000000000040BA74) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53d_goodG2BSink(a1);
}

//----- (000000000040BA8E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53d_goodB2GSink(a1);
}

//----- (000000000040BAA8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_34_bad()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BAF6) ----------------------------------------------------
int goodG2B_40()
{
  return printHexCharLine(3);
}

//----- (000000000040BB2B) ----------------------------------------------------
int goodB2G_39()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 + 1;
  return printHexCharLine(v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BB8B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_34_good()
{
  goodG2B_40();
  return goodB2G_39();
}

//----- (000000000040BBA5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BBE0) ----------------------------------------------------
int goodG2B_41()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000040BC06) ----------------------------------------------------
int goodB2G_40()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BC41) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_64_good()
{
  goodG2B_41();
  return goodB2G_40();
}

//----- (000000000040BC5B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040BC8A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040BCB9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040BCFA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (000000000040BD28) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (000000000040BD56) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 + 1);
  return result;
}

//----- (000000000040BD96) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_67_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BDD9) ----------------------------------------------------
int goodG2B_42()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodG2BSink(2LL);
}

//----- (000000000040BE07) ----------------------------------------------------
int goodB2G_41()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040BE4A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_67_good()
{
  goodG2B_42();
  return goodB2G_41();
}

//----- (000000000040BE64) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53c_badSink(a1);
}

//----- (000000000040BE7E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodG2BSink(a1);
}

//----- (000000000040BE98) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodB2GSink(a1);
}

//----- (000000000040BEB2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_12_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 127;
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v1 + 1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}

//----- (000000000040BF24) ----------------------------------------------------
int goodB2G_42()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000040BFA8) ----------------------------------------------------
int goodG2B_43()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(3);
}

//----- (000000000040C008) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_12_good()
{
  goodB2G_42();
  return goodG2B_43();
}

//----- (000000000040C022) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040C04B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040C074) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040C0AF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_65_bad()
{
  return CWE190_Integer_Overflow__char_max_add_65b_badSink(127);
}

//----- (000000000040C0D5) ----------------------------------------------------
int goodG2B_44()
{
  return CWE190_Integer_Overflow__char_max_add_65b_goodG2BSink(2);
}

//----- (000000000040C0FB) ----------------------------------------------------
int goodB2G_43()
{
  return CWE190_Integer_Overflow__char_max_add_65b_goodB2GSink(127);
}

//----- (000000000040C121) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_65_good()
{
  goodG2B_44();
  return goodB2G_43();
}

//----- (000000000040C13B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_03_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (000000000040C193) ----------------------------------------------------
int goodB2G1_26()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040C209) ----------------------------------------------------
int goodB2G2_26()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040C27F) ----------------------------------------------------
int goodG2B1_25()
{
  return printHexCharLine(4);
}

//----- (000000000040C2AA) ----------------------------------------------------
int goodG2B2_25()
{
  return printHexCharLine(4);
}

//----- (000000000040C2D5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_03_good()
{
  goodB2G1_26();
  goodB2G2_26();
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (000000000040C303) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_68_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_68_badData = v1;
  return CWE190_Integer_Overflow__char_fscanf_multiply_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F349: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_badData;

//----- (000000000040C342) ----------------------------------------------------
int goodG2B_45()
{
  CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodG2BSink();
}
// 65F348: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2BData;

//----- (000000000040C368) ----------------------------------------------------
int goodB2G_44()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData = v1;
  return CWE190_Integer_Overflow__char_fscanf_multiply_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F34A: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2GData;

//----- (000000000040C3A7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_68_good()
{
  goodG2B_45();
  return goodB2G_44();
}

//----- (000000000040C3C1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_17_bad()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040C412) ----------------------------------------------------
int goodB2G_45()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}

//----- (000000000040C481) ----------------------------------------------------
int goodG2B_46()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040C4D2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_17_good()
{
  goodB2G_45();
  return goodG2B_46();
}

//----- (000000000040C4EC) ----------------------------------------------------
int __fastcall badSink_5(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040C510) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_44_bad()
{
  return badSink_5(127);
}

//----- (000000000040C536) ----------------------------------------------------
int __fastcall goodG2BSink_5(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040C55A) ----------------------------------------------------
int goodG2B_47()
{
  return goodG2BSink_5(2);
}

//----- (000000000040C580) ----------------------------------------------------
int __fastcall goodB2GSink_5(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040C5B6) ----------------------------------------------------
int goodB2G_46()
{
  return goodB2GSink_5(127);
}

//----- (000000000040C5DC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_44_good()
{
  goodG2B_47();
  return goodB2G_46();
}

//----- (000000000040C5F6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_09_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C631) ----------------------------------------------------
int goodB2G1_27()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040C68A) ----------------------------------------------------
int goodB2G2_27()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C6D7) ----------------------------------------------------
int goodG2B1_26()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040C71E) ----------------------------------------------------
int goodG2B2_26()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C759) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_09_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_26();
  return goodG2B2_26();
}

//----- (000000000040C787) ----------------------------------------------------
int __fastcall badSink_6(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040C7AF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_44_bad()
{
  return badSink_6(127);
}

//----- (000000000040C7D5) ----------------------------------------------------
int __fastcall goodG2BSink_6(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040C7FD) ----------------------------------------------------
int goodG2B_48()
{
  return goodG2BSink_6(2);
}

//----- (000000000040C823) ----------------------------------------------------
int __fastcall goodB2GSink_6(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000040C869) ----------------------------------------------------
int goodB2G_47()
{
  return goodB2GSink_6(127);
}

//----- (000000000040C88F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_44_good()
{
  goodG2B_48();
  return goodB2G_47();
}

//----- (000000000040C8A9) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040C8F2) ----------------------------------------------------
int goodB2G1_28()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040C95A) ----------------------------------------------------
int goodB2G2_28()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040C9C2) ----------------------------------------------------
int goodG2B1_27()
{
  return printLongLongLine(3LL);
}

//----- (000000000040C9F6) ----------------------------------------------------
int goodG2B2_27()
{
  return printLongLongLine(3LL);
}

//----- (000000000040CA2A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_15_good()
{
  goodB2G1_28();
  goodB2G2_28();
  goodG2B1_27();
  return goodG2B2_27();
}

//----- (000000000040CA58) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_18_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (000000000040CAB2) ----------------------------------------------------
int goodB2G_48()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040CB2A) ----------------------------------------------------
int goodG2B_49()
{
  return printHexCharLine(4);
}

//----- (000000000040CB57) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_18_good()
{
  goodB2G_48();
  return goodG2B_49();
}

//----- (000000000040CB71) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_54_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_54b_badSink(v0);
}

//----- (000000000040CBBB) ----------------------------------------------------
int goodG2B_50()
{
  return CWE190_Integer_Overflow__char_rand_multiply_54b_goodG2BSink(2);
}

//----- (000000000040CBD8) ----------------------------------------------------
int goodB2G_49()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_54b_goodB2GSink(v0);
}

//----- (000000000040CC22) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_54_good()
{
  goodG2B_50();
  return goodB2G_49();
}

//----- (000000000040CC3C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040CC60) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040CC84) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040CCBA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_68b_badSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_add_68_badData + 1);
}
// 65F34C: using guessed type char CWE190_Integer_Overflow__char_max_add_68_badData;

//----- (000000000040CCE3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_68b_goodG2BSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_add_68_goodG2BData + 1);
}
// 65F34D: using guessed type char CWE190_Integer_Overflow__char_max_add_68_goodG2BData;

//----- (000000000040CD0C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_max_add_68_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_max_add_68_goodB2GData + 1);
  return result;
}
// 65F34B: using guessed type char CWE190_Integer_Overflow__char_max_add_68_goodB2GData;

//----- (000000000040CD47) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_53_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040CD80) ----------------------------------------------------
int goodG2B_51()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodG2BSink(2);
}

//----- (000000000040CD9D) ----------------------------------------------------
int goodB2G_50()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040CDD6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_53_good()
{
  goodG2B_51();
  return goodB2G_50();
}

//----- (000000000040CDF0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54c_badSink(a1);
}

//----- (000000000040CE0A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54c_goodG2BSink(a1);
}

//----- (000000000040CE24) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54c_goodB2GSink(a1);
}

//----- (000000000040CE3E) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_square_61b_badSource()
{
  return 127LL;
}

//----- (000000000040CE51) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_square_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000040CE64) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_square_61b_goodB2GSource()
{
  return 127LL;
}

//----- (000000000040CE77) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_12_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  else
  {
    v2 = 2;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v2 * v2);
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}

//----- (000000000040CF2A) ----------------------------------------------------
int goodB2G_51()
{
  int v0; // eax
  int v1; // eax
  int result; // eax
  char v3; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v3 = v0;
  }
  else
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v1) = rand();
    }
    else
    {
      rand();
      rand();
      v1 = ~rand();
    }
    v3 = v1;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v3 < -11 || v3 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v3 * v3);
  }
  else if ( v3 < -11 || v3 > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(v3 * v3);
  }
  return result;
}

//----- (000000000040D029) ----------------------------------------------------
int goodG2B_52()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (000000000040D091) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_12_good()
{
  goodB2G_51();
  return goodG2B_52();
}

//----- (000000000040D0AB) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F174: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal;

//----- (000000000040D0F0) ----------------------------------------------------
int goodB2G1_29()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F178: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Global;

//----- (000000000040D135) ----------------------------------------------------
int goodB2G2_29()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F17C: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global;

//----- (000000000040D17A) ----------------------------------------------------
int goodG2B_53()
{
  CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BSink(2LL);
}
// 65F180: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal;

//----- (000000000040D1AA) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_22_good()
{
  goodB2G1_29();
  goodB2G2_29();
  return goodG2B_53();
}

//----- (000000000040D1CE) ----------------------------------------------------
__int64 badSource_1()
{
  return 127LL;
}

//----- (000000000040D1E1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_42_bad()
{
  int result; // eax

  result = badSource_1();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040D217) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 2LL;
}

//----- (000000000040D22A) ----------------------------------------------------
int goodG2B_54()
{
  int result; // eax

  result = goodG2BSource_1();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040D260) ----------------------------------------------------
__int64 goodB2GSource_1()
{
  return 127LL;
}

//----- (000000000040D273) ----------------------------------------------------
int goodB2G_52()
{
  int result; // eax

  result = goodB2GSource_1();
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040D2BB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_42_good()
{
  goodB2G_52();
  return goodG2B_54();
}

//----- (000000000040D2D5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040D2FE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040D327) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040D362) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53c_badSink(a1);
}

//----- (000000000040D37C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53c_goodG2BSink(a1);
}

//----- (000000000040D396) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_53c_goodB2GSink(a1);
}

//----- (000000000040D3B0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_68_bad()
{
  CWE190_Integer_Overflow__char_max_add_68_badData = 127;
  return CWE190_Integer_Overflow__char_max_add_68b_badSink();
}
// 65F34C: using guessed type char CWE190_Integer_Overflow__char_max_add_68_badData;

//----- (000000000040D3D6) ----------------------------------------------------
int goodG2B_55()
{
  CWE190_Integer_Overflow__char_max_add_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_max_add_68b_goodG2BSink();
}
// 65F34D: using guessed type char CWE190_Integer_Overflow__char_max_add_68_goodG2BData;

//----- (000000000040D3FC) ----------------------------------------------------
int goodB2G_53()
{
  CWE190_Integer_Overflow__char_max_add_68_goodB2GData = 127;
  return CWE190_Integer_Overflow__char_max_add_68b_goodB2GSink();
}
// 65F34B: using guessed type char CWE190_Integer_Overflow__char_max_add_68_goodB2GData;

//----- (000000000040D422) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_68_good()
{
  goodG2B_55();
  return goodB2G_53();
}

//----- (000000000040D43C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_15_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000040D497) ----------------------------------------------------
int goodB2G1_30()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040D504) ----------------------------------------------------
int goodB2G2_30()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000040D571) ----------------------------------------------------
int goodG2B1_28()
{
  return printHexCharLine(4);
}

//----- (000000000040D59F) ----------------------------------------------------
int goodG2B2_28()
{
  return printHexCharLine(4);
}

//----- (000000000040D5CD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_15_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (000000000040D5FB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54e_badSink(a1);
}

//----- (000000000040D615) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodG2BSink(a1);
}

//----- (000000000040D62F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54d_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodB2GSink(a1);
}

//----- (000000000040D649) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040D66D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040D691) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040D6C7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040D6F3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000040D71F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000040D767) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53d_badSink(a1);
}

//----- (000000000040D781) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53d_goodG2BSink(a1);
}

//----- (000000000040D79B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53d_goodB2GSink(a1);
}

//----- (000000000040D7B5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_max_square_61b_badSource();
  return printHexCharLine(v0 * v0);
}

//----- (000000000040D7EA) ----------------------------------------------------
int goodG2B_56()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_max_square_61b_goodG2BSource();
  return printHexCharLine(v0 * v0);
}

//----- (000000000040D81F) ----------------------------------------------------
int goodB2G_54()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_max_square_61b_goodB2GSource();
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040D872) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_61_good()
{
  goodG2B_56();
  return goodB2G_54();
}

//----- (000000000040D88C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_52c_badSink(a1);
}

//----- (000000000040D8A6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodG2BSink(a1);
}

//----- (000000000040D8C0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_52c_goodB2GSink(a1);
}

//----- (000000000040D8DA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_54_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040D913) ----------------------------------------------------
int goodG2B_57()
{
  return CWE190_Integer_Overflow__char_fscanf_square_54b_goodG2BSink(2);
}

//----- (000000000040D930) ----------------------------------------------------
int goodB2G_55()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040D969) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_54_good()
{
  goodG2B_57();
  return goodB2G_55();
}

//----- (000000000040D983) ----------------------------------------------------
__int64 badSource_2()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000040D9C7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_42_bad()
{
  char v0; // al

  v0 = badSource_2();
  return printHexCharLine(v0 + 1);
}

//----- (000000000040D9F8) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 2LL;
}

//----- (000000000040DA0B) ----------------------------------------------------
int goodG2B_58()
{
  char v0; // al

  v0 = goodG2BSource_2();
  return printHexCharLine(v0 + 1);
}

//----- (000000000040DA3C) ----------------------------------------------------
__int64 goodB2GSource_2()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000040DA80) ----------------------------------------------------
int goodB2G_56()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_2();
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000040DAC3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_42_good()
{
  goodB2G_56();
  return goodG2B_58();
}

//----- (000000000040DADD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_11_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000040DB51) ----------------------------------------------------
int goodB2G1_31()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}

//----- (000000000040DBEF) ----------------------------------------------------
int goodB2G2_31()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}

//----- (000000000040DC81) ----------------------------------------------------
int goodG2B1_29()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040DCD4) ----------------------------------------------------
int goodG2B2_29()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000040DD1B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_11_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (000000000040DD49) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_02_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (000000000040DDA1) ----------------------------------------------------
int goodB2G1_32()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040DE17) ----------------------------------------------------
int goodB2G2_32()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040DE8D) ----------------------------------------------------
int goodG2B1_30()
{
  return printHexCharLine(4);
}

//----- (000000000040DEB8) ----------------------------------------------------
int goodG2B2_30()
{
  return printHexCharLine(4);
}

//----- (000000000040DEE3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_02_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_30();
  return goodG2B2_30();
}

//----- (000000000040DF11) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040DF6E) ----------------------------------------------------
int goodB2G1_33()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040DFF6) ----------------------------------------------------
int goodB2G2_33()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000040E072) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E0C6) ----------------------------------------------------
int goodG2B2_31()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E10E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_13_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (000000000040E13C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_05_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_2 )
    v1 = 127;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F0D8: using guessed type int staticTrue_2;

//----- (000000000040E17C) ----------------------------------------------------
int goodB2G1_34()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_2 )
    v1 = 127;
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 65F0D8: using guessed type int staticTrue_2;
// 65F184: using guessed type int staticFalse_2;

//----- (000000000040E1DA) ----------------------------------------------------
int goodB2G2_34()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_2 )
    v1 = 127;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 65F0D8: using guessed type int staticTrue_2;

//----- (000000000040E22C) ----------------------------------------------------
int goodG2B1_32()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F0D8: using guessed type int staticTrue_2;
// 65F184: using guessed type int staticFalse_2;

//----- (000000000040E278) ----------------------------------------------------
int goodG2B2_32()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_2 )
    v1 = 2;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F0D8: using guessed type int staticTrue_2;

//----- (000000000040E2B8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_05_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (000000000040E2E6) ----------------------------------------------------
int __fastcall badSink_7(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040E30F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_41_bad()
{
  return badSink_7(127);
}

//----- (000000000040E32C) ----------------------------------------------------
int __fastcall goodG2BSink_7(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040E355) ----------------------------------------------------
int goodG2B_59()
{
  return goodG2BSink_7(2);
}

//----- (000000000040E372) ----------------------------------------------------
int __fastcall goodB2GSink_7(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040E3AD) ----------------------------------------------------
int goodB2G_57()
{
  return goodB2GSink_7(127);
}

//----- (000000000040E3CA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_41_good()
{
  goodB2G_57();
  return goodG2B_59();
}

//----- (000000000040E3E4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_add_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_max_add_22_badGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F200: using guessed type int CWE190_Integer_Overflow__char_max_add_22_badGlobal;

//----- (000000000040E412) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_max_add_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F204: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodB2G1Global;

//----- (000000000040E45E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F208: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global;

//----- (000000000040E49E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F20C: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal;

//----- (000000000040E4CC) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_65_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_multiply_65b_badSink)((unsigned int)(char)v0);
}

//----- (000000000040E51F) ----------------------------------------------------
int goodG2B_60()
{
  return CWE190_Integer_Overflow__char_rand_multiply_65b_goodG2BSink(2);
}

//----- (000000000040E545) ----------------------------------------------------
__int64 goodB2G_58()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_multiply_65b_goodB2GSink)((unsigned int)(char)v0);
}

//----- (000000000040E598) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_65_good()
{
  goodG2B_60();
  return goodB2G_58();
}

//----- (000000000040E5B2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_07_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = 127;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0DC: using guessed type int staticFive_1;

//----- (000000000040E5F3) ----------------------------------------------------
int goodB2G1_35()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = 127;
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 65F0DC: using guessed type int staticFive_1;

//----- (000000000040E65E) ----------------------------------------------------
int goodB2G2_35()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = 127;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 65F0DC: using guessed type int staticFive_1;

//----- (000000000040E6BD) ----------------------------------------------------
int goodG2B1_33()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0DC: using guessed type int staticFive_1;

//----- (000000000040E70A) ----------------------------------------------------
int goodG2B2_33()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_1 == 5 )
    v1 = 2;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0DC: using guessed type int staticFive_1;

//----- (000000000040E74B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_07_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (000000000040E779) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_10_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000040E7E5) ----------------------------------------------------
int goodB2G1_36()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000040E87B) ----------------------------------------------------
int goodB2G2_36()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000040E905) ----------------------------------------------------
int goodG2B1_34()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000040E950) ----------------------------------------------------
int goodG2B2_34()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000040E98F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_10_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (000000000040E9BD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_53_bad()
{
  return CWE190_Integer_Overflow__char_max_add_53b_badSink(127);
}

//----- (000000000040E9DA) ----------------------------------------------------
int goodG2B_61()
{
  return CWE190_Integer_Overflow__char_max_add_53b_goodG2BSink(2);
}

//----- (000000000040E9F7) ----------------------------------------------------
int goodB2G_59()
{
  return CWE190_Integer_Overflow__char_max_add_53b_goodB2GSink(127);
}

//----- (000000000040EA14) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_53_good()
{
  goodG2B_61();
  return goodB2G_59();
}

//----- (000000000040EA2E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040EA56) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040EA7E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000040EAC4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_34_bad()
{
  return printHexCharLine(254);
}

//----- (000000000040EAFE) ----------------------------------------------------
int goodG2B_62()
{
  return printHexCharLine(4);
}

//----- (000000000040EB38) ----------------------------------------------------
int goodB2G_60()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000040EB84) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_34_good()
{
  goodG2B_62();
  return goodB2G_60();
}

//----- (000000000040EB9E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54c_badSink(a1);
}

//----- (000000000040EBB8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54c_goodG2BSink(a1);
}

//----- (000000000040EBD2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54c_goodB2GSink(a1);
}

//----- (000000000040EBEC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000040EC12) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000040EC38) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (000000000040EC7A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_badSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 > 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000040ECB1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodG2BSink(__int64 *a1)
{
  __int64 v1; // rax

  v1 = *a1;
  if ( *a1 > 0 )
    LODWORD(v1) = printLongLongLine(2 * *a1);
  return v1;
}

//----- (000000000040ECE8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodB2GSink(__int64 *a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *a1;
  v3 = *a1;
  if ( *a1 > 0 )
  {
    if ( v3 > 4611686018427387902LL )
      LODWORD(v1) = printLine("data value is too large to perform arithmetic safely.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (000000000040ED3B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_52_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040ED74) ----------------------------------------------------
int goodG2B_63()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodG2BSink(2);
}

//----- (000000000040ED91) ----------------------------------------------------
int goodB2G_61()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040EDCA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_52_good()
{
  goodG2B_63();
  return goodB2G_61();
}

//----- (000000000040EDE4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_05_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 65F0E0: using guessed type int staticTrue_3;

//----- (000000000040EE4C) ----------------------------------------------------
int goodB2G1_37()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFalse_3 )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 65F0E0: using guessed type int staticTrue_3;
// 65F188: using guessed type int staticFalse_3;

//----- (000000000040EED2) ----------------------------------------------------
int goodB2G2_37()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 65F0E0: using guessed type int staticTrue_3;

//----- (000000000040EF4C) ----------------------------------------------------
int goodG2B1_35()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0E0: using guessed type int staticTrue_3;
// 65F188: using guessed type int staticFalse_3;

//----- (000000000040EF93) ----------------------------------------------------
int goodG2B2_35()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_3 )
    v1 = 2;
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0E0: using guessed type int staticTrue_3;

//----- (000000000040EFCE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_05_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_35();
  return goodG2B2_35();
}

//----- (000000000040EFFC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_01_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (000000000040F054) ----------------------------------------------------
int goodG2B_64()
{
  return printHexCharLine(4);
}

//----- (000000000040F07F) ----------------------------------------------------
int goodB2G_62()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000040F0F5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_01_good()
{
  goodG2B_64();
  return goodB2G_62();
}

//----- (000000000040F10F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_68_badData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_68_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_68_badData);
  return result;
}
// 65F34F: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_badData;

//----- (000000000040F13D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData);
  return result;
}
// 65F350: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData;

//----- (000000000040F16B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData;
  if ( CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData);
  }
  return result;
}
// 65F34E: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData;

//----- (000000000040F1AB) ----------------------------------------------------
int __fastcall badSink_8(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040F1CF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_41_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return badSink_8(v0);
}

//----- (000000000040F219) ----------------------------------------------------
int __fastcall goodG2BSink_8(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000040F23D) ----------------------------------------------------
int goodG2B_65()
{
  return goodG2BSink_8(2);
}

//----- (000000000040F25A) ----------------------------------------------------
int __fastcall goodB2GSink_8(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000040F290) ----------------------------------------------------
int goodB2G_63()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return goodB2GSink_8(v0);
}

//----- (000000000040F2DA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_41_good()
{
  goodB2G_63();
  return goodG2B_65();
}

//----- (000000000040F2F4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040F31D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040F346) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040F381) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040F3A9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000040F3D1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000040F417) ----------------------------------------------------
int __fastcall badSink_9(__int64 a1)
{
  int result; // eax

  result = badStatic;
  if ( badStatic )
    result = printLongLongLine(a1 + 1);
  return result;
}
// 65F18C: using guessed type int badStatic;

//----- (000000000040F447) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_21_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  badStatic = 1;
  return badSink_9(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F18C: using guessed type int badStatic;

//----- (000000000040F48C) ----------------------------------------------------
int __fastcall goodB2G1Sink(__int64 a1)
{
  if ( goodB2G1Static )
    return printLine("Benign, fixed string");
  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  return printLongLongLine(a1 + 1);
}
// 65F190: using guessed type int goodB2G1Static;

//----- (000000000040F4E4) ----------------------------------------------------
int goodB2G1_38()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G1Static = 0;
  return goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F190: using guessed type int goodB2G1Static;

//----- (000000000040F529) ----------------------------------------------------
int __fastcall goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static;
  if ( goodB2G2Static )
  {
    if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(a1 + 1);
  }
  return result;
}
// 65F194: using guessed type int goodB2G2Static;

//----- (000000000040F575) ----------------------------------------------------
int goodB2G2_38()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G2Static = 1;
  return goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F194: using guessed type int goodB2G2Static;

//----- (000000000040F5BA) ----------------------------------------------------
int __fastcall goodG2BSink_9(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic;
  if ( goodG2BStatic )
    result = printLongLongLine(a1 + 1);
  return result;
}
// 65F198: using guessed type int goodG2BStatic;

//----- (000000000040F5EA) ----------------------------------------------------
int goodG2B_66()
{
  goodG2BStatic = 1;
  return goodG2BSink_9(2LL);
}
// 65F198: using guessed type int goodG2BStatic;

//----- (000000000040F61A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_21_good()
{
  goodB2G1_38();
  goodB2G2_38();
  return goodG2B_66();
}

//----- (000000000040F63E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_03_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F685) ----------------------------------------------------
int goodB2G1_39()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F6EB) ----------------------------------------------------
int goodB2G2_39()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F751) ----------------------------------------------------
int goodG2B1_36()
{
  return printLongLongLine(3LL);
}

//----- (000000000040F783) ----------------------------------------------------
int goodG2B2_36()
{
  return printLongLongLine(3LL);
}

//----- (000000000040F7B5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_03_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (000000000040F7E3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(a1);
}

//----- (000000000040F7FD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53d_goodG2BSink(a1);
}

//----- (000000000040F817) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_53d_goodB2GSink(a1);
}

//----- (000000000040F831) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_16_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F87A) ----------------------------------------------------
int goodB2G_64()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F8D7) ----------------------------------------------------
int goodG2B_67()
{
  return printHexCharLine(4);
}

//----- (000000000040F905) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_16_good()
{
  goodB2G_64();
  return goodG2B_67();
}

//----- (000000000040F91F) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_18_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F968) ----------------------------------------------------
int goodB2G_65()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000040F9D0) ----------------------------------------------------
int goodG2B_68()
{
  return printLongLongLine(3LL);
}

//----- (000000000040FA04) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_18_good()
{
  goodB2G_65();
  return goodG2B_68();
}

//----- (000000000040FA1E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_34_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (000000000040FA80) ----------------------------------------------------
int goodG2B_69()
{
  return printHexCharLine(3);
}

//----- (000000000040FAB5) ----------------------------------------------------
int goodB2G_66()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (000000000040FB29) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_34_good()
{
  goodG2B_69();
  return goodB2G_66();
}

//----- (000000000040FB43) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (000000000040FB71) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (000000000040FB9F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 + 1);
  return result;
}

//----- (000000000040FBDF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_52c_badSink(a1);
}

//----- (000000000040FBF9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_52c_goodG2BSink(a1);
}

//----- (000000000040FC13) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_52c_goodB2GSink(a1);
}

//----- (000000000040FC2D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53c_badSink(a1);
}

//----- (000000000040FC47) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53c_goodG2BSink(a1);
}

//----- (000000000040FC61) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_53c_goodB2GSink(a1);
}

//----- (000000000040FC7B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040FCA4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040FCCD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040FD08) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_66b_badSink((__int64)&v1);
}

//----- (000000000040FD2D) ----------------------------------------------------
int goodG2B_70()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_max_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040FD52) ----------------------------------------------------
int goodB2G_67()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_66b_goodB2GSink((__int64)&v1);
}

//----- (000000000040FD77) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_66_good()
{
  goodG2B_70();
  return goodB2G_67();
}

//----- (000000000040FD91) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040FDBA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000040FDE3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000040FE1E) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040FE29) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040FE34) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_08_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_0();
  if ( result )
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000040FEA8) ----------------------------------------------------
int goodB2G1_40()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}

//----- (000000000040FF46) ----------------------------------------------------
int goodB2G2_40()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_0();
  if ( result )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}

//----- (000000000040FFD8) ----------------------------------------------------
int goodG2B1_37()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_0();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000041002B) ----------------------------------------------------
int goodG2B2_37()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = 2;
  result = staticReturnsTrue_0();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (0000000000410072) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_08_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (00000000004100A0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_51_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004100D9) ----------------------------------------------------
int goodG2B_71()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodG2BSink(2);
}

//----- (00000000004100F6) ----------------------------------------------------
int goodB2G_68()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041012F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_51_good()
{
  goodG2B_71();
  return goodB2G_68();
}

//----- (0000000000410149) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  else
    v1 = 2LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  else if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004101EF) ----------------------------------------------------
int goodB2G_69()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v3 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  else if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004102C9) ----------------------------------------------------
int goodG2B_72()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(3LL);
}

//----- (000000000041033B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_12_good()
{
  goodB2G_69();
  return goodG2B_72();
}

//----- (0000000000410355) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_10_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000410390) ----------------------------------------------------
int goodB2G1_41()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (00000000004103E9) ----------------------------------------------------
int goodB2G2_41()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000410436) ----------------------------------------------------
int goodG2B1_38()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000041047D) ----------------------------------------------------
int goodG2B2_38()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (00000000004104B8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_10_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_38();
  return goodG2B2_38();
}

//----- (00000000004104E6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_68_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_68_badData = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_68b_badSink();
}
// 65F34F: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_badData;

//----- (0000000000410539) ----------------------------------------------------
int goodG2B_73()
{
  CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_rand_multiply_68b_goodG2BSink();
}
// 65F350: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_goodG2BData;

//----- (000000000041055F) ----------------------------------------------------
int goodB2G_70()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_68b_goodB2GSink();
}
// 65F34E: using guessed type char CWE190_Integer_Overflow__char_rand_multiply_68_goodB2GData;

//----- (00000000004105B2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_68_good()
{
  goodG2B_73();
  return goodB2G_70();
}

//----- (00000000004105CC) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0E4: using guessed type int staticTrue_4;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410627) ----------------------------------------------------
int goodB2G1_42()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFalse_4 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0E4: using guessed type int staticTrue_4;
// 65F128: using guessed type __int64 stdin;
// 65F19C: using guessed type int staticFalse_4;

//----- (00000000004106AD) ----------------------------------------------------
int goodB2G2_42()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_4 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0E4: using guessed type int staticTrue_4;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410727) ----------------------------------------------------
int goodG2B1_39()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_4 )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = staticTrue_4;
  if ( staticTrue_4 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F0E4: using guessed type int staticTrue_4;
// 65F19C: using guessed type int staticFalse_4;

//----- (0000000000410779) ----------------------------------------------------
int goodG2B2_39()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_4 )
    v1 = 2LL;
  result = staticTrue_4;
  if ( staticTrue_4 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F0E4: using guessed type int staticTrue_4;

//----- (00000000004107BF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_05_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (00000000004107ED) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_16_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410836) ----------------------------------------------------
int goodB2G_71()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041089E) ----------------------------------------------------
int goodG2B_74()
{
  return printLongLongLine(3LL);
}

//----- (00000000004108D2) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_16_good()
{
  goodB2G_71();
  return goodG2B_74();
}

//----- (00000000004108EC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_68b_badSink()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_fscanf_square_68_badData
         * CWE190_Integer_Overflow__char_fscanf_square_68_badData);
}
// 65F329: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_badData;

//----- (0000000000410919) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_68b_goodG2BSink()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData
         * CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData);
}
// 65F328: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_goodG2BData;

//----- (0000000000410946) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData < -11
    || CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData
             * CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData);
  }
  return result;
}
// 65F32A: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData;

//----- (0000000000410991) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_63_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_add_63b_badSink(&v2);
}

//----- (00000000004109DC) ----------------------------------------------------
int goodG2B_75()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_add_63b_goodG2BSink(&v1);
}

//----- (00000000004109FA) ----------------------------------------------------
int goodB2G_72()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_add_63b_goodB2GSink(&v2);
}

//----- (0000000000410A45) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_63_good()
{
  goodG2B_75();
  return goodB2G_72();
}

//----- (0000000000410A5F) ----------------------------------------------------
int badSink_10()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_45_badData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_45_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_45_badData);
  return result;
}
// 65F1A0: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_badData;

//----- (0000000000410A8D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_45_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_45_badData = v1;
  return badSink_10();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1A0: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_badData;

//----- (0000000000410ACC) ----------------------------------------------------
int goodG2BSink_10()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData);
  return result;
}
// 65F1A1: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData;

//----- (0000000000410AFA) ----------------------------------------------------
int goodG2B_76()
{
  CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData = 2;
  return goodG2BSink_10();
}
// 65F1A1: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodG2BData;

//----- (0000000000410B20) ----------------------------------------------------
int goodB2GSink_9()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData);
  }
  return result;
}
// 65F1A2: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData;

//----- (0000000000410B60) ----------------------------------------------------
int goodB2G_73()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData = v1;
  return goodB2GSink_9();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1A2: using guessed type char CWE190_Integer_Overflow__char_fscanf_multiply_45_goodB2GData;

//----- (0000000000410B9F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_45_good()
{
  goodG2B_76();
  return goodB2G_73();
}

//----- (0000000000410BB9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_52_bad()
{
  return CWE190_Integer_Overflow__char_max_add_52b_badSink(127);
}

//----- (0000000000410BD6) ----------------------------------------------------
int goodG2B_77()
{
  return CWE190_Integer_Overflow__char_max_add_52b_goodG2BSink(2);
}

//----- (0000000000410BF3) ----------------------------------------------------
int goodB2G_74()
{
  return CWE190_Integer_Overflow__char_max_add_52b_goodB2GSink(127);
}

//----- (0000000000410C10) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_52_good()
{
  goodG2B_77();
  return goodB2G_74();
}

//----- (0000000000410C2A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000410C4E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000410C72) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000410CA8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_66_bad()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_add_66b_badSink((__int64)&v2);
}

//----- (0000000000410CFA) ----------------------------------------------------
int goodG2B_78()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_rand_add_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000410D1F) ----------------------------------------------------
int goodB2G_75()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_add_66b_goodB2GSink((__int64)&v2);
}

//----- (0000000000410D71) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_66_good()
{
  goodG2B_78();
  return goodB2G_75();
}

//----- (0000000000410D8B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_53_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_53b_badSink(v0);
}

//----- (0000000000410DD5) ----------------------------------------------------
int goodG2B_79()
{
  return CWE190_Integer_Overflow__char_rand_multiply_53b_goodG2BSink(2);
}

//----- (0000000000410DF2) ----------------------------------------------------
int goodB2G_76()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_53b_goodB2GSink(v0);
}

//----- (0000000000410E3C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_53_good()
{
  goodG2B_79();
  return goodB2G_76();
}

//----- (0000000000410E56) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_06_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43D80C, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410EB1) ----------------------------------------------------
int goodB2G1_43()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43D80C, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410F2C) ----------------------------------------------------
int goodB2G2_43()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43D80C, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000410F9B) ----------------------------------------------------
int goodG2B1_40()
{
  return printHexCharLine(4);
}

//----- (0000000000410FE7) ----------------------------------------------------
int goodG2B2_40()
{
  return printHexCharLine(4);
}

//----- (0000000000411027) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_06_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (0000000000411055) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54c_badSink(a1);
}

//----- (000000000041106F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54c_goodG2BSink(a1);
}

//----- (0000000000411089) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54c_goodB2GSink(a1);
}

//----- (00000000004110A3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_16_bad()
{
  return printHexCharLine(-128);
}

//----- (00000000004110CC) ----------------------------------------------------
int goodB2G_77()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000411107) ----------------------------------------------------
int goodG2B_80()
{
  return printHexCharLine(3);
}

//----- (0000000000411130) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_16_good()
{
  goodB2G_77();
  return goodG2B_80();
}

//----- (000000000041114A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004111AD) ----------------------------------------------------
int goodB2G1_44()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041123B) ----------------------------------------------------
int goodB2G2_44()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004112BD) ----------------------------------------------------
int goodG2B1_41()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (0000000000411317) ----------------------------------------------------
int goodG2B2_41()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2LL;
  result = globalReturnsTrue();
  if ( result )
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (0000000000411365) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_11_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (0000000000411393) ----------------------------------------------------
__int64 badSource_3()
{
  return 127LL;
}

//----- (00000000004113A6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_42_bad()
{
  char v0; // al

  v0 = badSource_3();
  return printHexCharLine(v0 + 1);
}

//----- (00000000004113D7) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 2LL;
}

//----- (00000000004113EA) ----------------------------------------------------
int goodG2B_81()
{
  char v0; // al

  v0 = goodG2BSource_3();
  return printHexCharLine(v0 + 1);
}

//----- (000000000041141B) ----------------------------------------------------
__int64 goodB2GSource_3()
{
  return 127LL;
}

//----- (000000000041142E) ----------------------------------------------------
int goodB2G_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_3();
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000411471) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_42_good()
{
  goodB2G_78();
  return goodG2B_81();
}

//----- (000000000041148B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_11_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004114D2) ----------------------------------------------------
int goodB2G1_45()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}

//----- (0000000000411543) ----------------------------------------------------
int goodB2G2_45()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}

//----- (00000000004115A8) ----------------------------------------------------
int goodG2B1_42()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004115FB) ----------------------------------------------------
int goodG2B2_42()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (0000000000411642) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_11_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (0000000000411670) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_02_bad()
{
  return printHexCharLine(1);
}

//----- (000000000041169B) ----------------------------------------------------
int goodB2G1_46()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004116E4) ----------------------------------------------------
int goodB2G2_46()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041172D) ----------------------------------------------------
int goodG2B1_43()
{
  return printHexCharLine(4);
}

//----- (0000000000411758) ----------------------------------------------------
int goodG2B2_43()
{
  return printHexCharLine(4);
}

//----- (0000000000411783) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_02_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (00000000004117B1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004117D5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004117F9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000041182F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000411866) ----------------------------------------------------
int goodG2B_82()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_square_64b_goodG2BSink(&v1);
}

//----- (0000000000411884) ----------------------------------------------------
int goodB2G_79()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004118BB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_64_good()
{
  goodG2B_82();
  return goodB2G_79();
}

//----- (00000000004118D5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_12_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  else
  {
    v2 = 2;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  else if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041197E) ----------------------------------------------------
int goodB2G_80()
{
  int v0; // eax
  int v1; // eax
  int result; // eax
  char v3; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v3 = v0;
  }
  else
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v1) = rand();
    }
    else
    {
      rand();
      rand();
      v1 = ~rand();
    }
    v3 = v1;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v3 > 0 )
    {
      if ( v3 > 62 )
        result = printLine("data value is too large to perform arithmetic safely.");
      else
        result = printHexCharLine(2 * v3);
    }
  }
  else if ( v3 > 0 )
  {
    if ( v3 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v3);
  }
  return result;
}

//----- (0000000000411A66) ----------------------------------------------------
int goodG2B_83()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (0000000000411AD0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_12_good()
{
  goodB2G_80();
  return goodG2B_83();
}

//----- (0000000000411AEA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_13_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000411B40) ----------------------------------------------------
int goodB2G1_47()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000411BB6) ----------------------------------------------------
int goodB2G2_47()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000411C20) ----------------------------------------------------
int goodG2B1_44()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000411C69) ----------------------------------------------------
int goodG2B2_44()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000411CA6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_13_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (0000000000411CD4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_65_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_65b_badSink(127);
}

//----- (0000000000411CFA) ----------------------------------------------------
int goodG2B_84()
{
  return CWE190_Integer_Overflow__char_max_multiply_65b_goodG2BSink(2);
}

//----- (0000000000411D20) ----------------------------------------------------
int goodB2G_81()
{
  return CWE190_Integer_Overflow__char_max_multiply_65b_goodB2GSink(127);
}

//----- (0000000000411D46) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_65_good()
{
  goodG2B_84();
  return goodB2G_81();
}

//----- (0000000000411D60) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal )
  {
    if ( a1 > 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1A4: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal;

//----- (0000000000411D96) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Sink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1A8: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global;

//----- (0000000000411DF4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global && a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1AC: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global;

//----- (0000000000411E46) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal )
  {
    if ( a1 > 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1B0: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal;

//----- (0000000000411E7C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53d_badSink(a1);
}

//----- (0000000000411E96) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53d_goodG2BSink(a1);
}

//----- (0000000000411EB0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53d_goodB2GSink(a1);
}

//----- (0000000000411ECA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_09_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000411F37) ----------------------------------------------------
int goodB2G1_48()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000411FC2) ----------------------------------------------------
int goodB2G2_48()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000412041) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041208D) ----------------------------------------------------
int goodG2B2_45()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004120CD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_09_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (00000000004120FB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_68_bad()
{
  CWE190_Integer_Overflow__char_max_square_68_badData = 127;
  return CWE190_Integer_Overflow__char_max_square_68b_badSink();
}
// 65F351: using guessed type char CWE190_Integer_Overflow__char_max_square_68_badData;

//----- (0000000000412121) ----------------------------------------------------
int goodG2B_85()
{
  CWE190_Integer_Overflow__char_max_square_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_max_square_68b_goodG2BSink();
}
// 65F353: using guessed type char CWE190_Integer_Overflow__char_max_square_68_goodG2BData;

//----- (0000000000412147) ----------------------------------------------------
int goodB2G_82()
{
  CWE190_Integer_Overflow__char_max_square_68_goodB2GData = 127;
  return CWE190_Integer_Overflow__char_max_square_68b_goodB2GSink();
}
// 65F352: using guessed type char CWE190_Integer_Overflow__char_max_square_68_goodB2GData;

//----- (000000000041216D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_68_good()
{
  goodG2B_85();
  return goodB2G_82();
}

//----- (0000000000412187) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_52c_badSink(a1);
}

//----- (00000000004121A1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_52c_goodG2BSink(a1);
}

//----- (00000000004121BB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_52c_goodB2GSink(a1);
}

//----- (00000000004121D5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54d_badSink(a1);
}

//----- (00000000004121EF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54d_goodG2BSink(a1);
}

//----- (0000000000412209) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54d_goodB2GSink(a1);
}

//----- (0000000000412223) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041224C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000412275) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004122B0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_01_bad()
{
  return printHexCharLine(1);
}

//----- (00000000004122DB) ----------------------------------------------------
int goodG2B_86()
{
  return printHexCharLine(4);
}

//----- (0000000000412306) ----------------------------------------------------
int goodB2G_83()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041234F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_01_good()
{
  goodG2B_86();
  return goodB2G_83();
}

//----- (0000000000412369) ----------------------------------------------------
int __fastcall badSink_11(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000041238D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_41_bad()
{
  return badSink_11(127);
}

//----- (00000000004123AA) ----------------------------------------------------
int __fastcall goodG2BSink_11(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004123CE) ----------------------------------------------------
int goodG2B_87()
{
  return goodG2BSink_11(2);
}

//----- (00000000004123EB) ----------------------------------------------------
int __fastcall goodB2GSink_10(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000412421) ----------------------------------------------------
int goodB2G_84()
{
  return goodB2GSink_10(127);
}

//----- (000000000041243E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_41_good()
{
  goodB2G_84();
  return goodG2B_87();
}

//----- (0000000000412458) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000412480) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004124A8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004124EE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_34_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (0000000000412554) ----------------------------------------------------
int goodG2B_88()
{
  return printHexCharLine(4);
}

//----- (000000000041258D) ----------------------------------------------------
int goodB2G_85()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000412611) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_34_good()
{
  goodG2B_88();
  return goodB2G_85();
}

//----- (000000000041262B) ----------------------------------------------------
void CWE190_Integer_Overflow__char_rand_square_17_bad()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
    printHexCharLine(v1 * v1);
}

//----- (00000000004126A9) ----------------------------------------------------
void goodB2G_86()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < -11 || v1 > 11 )
      printLine("data value is too large to perform arithmetic safely.");
    else
      printHexCharLine(v1 * v1);
  }
}

//----- (0000000000412745) ----------------------------------------------------
int goodG2B_89()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (0000000000412796) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_17_good()
{
  goodB2G_86();
  return goodG2B_89();
}

//----- (00000000004127B0) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1A4: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_badGlobal;

//----- (00000000004127F5) ----------------------------------------------------
int goodB2G1_49()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1A8: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G1Global;

//----- (000000000041283A) ----------------------------------------------------
int goodB2G2_49()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1AC: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodB2G2Global;

//----- (000000000041287F) ----------------------------------------------------
int goodG2B_90()
{
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BSink(2LL);
}
// 65F1B0: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_goodG2BGlobal;

//----- (00000000004128AF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_22_good()
{
  goodB2G1_49();
  goodB2G2_49();
  return goodG2B_90();
}

//----- (00000000004128D3) ----------------------------------------------------
int __fastcall badSink_12(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004128FB) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_44_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_12)((unsigned int)(char)v0);
}

//----- (000000000041294E) ----------------------------------------------------
int __fastcall goodG2BSink_12(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000412976) ----------------------------------------------------
int goodG2B_91()
{
  return goodG2BSink_12(2);
}

//----- (000000000041299C) ----------------------------------------------------
int __fastcall goodB2GSink_11(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004129E2) ----------------------------------------------------
__int64 goodB2G_87()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_11)((unsigned int)(char)v0);
}

//----- (0000000000412A35) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_44_good()
{
  goodG2B_91();
  return goodB2G_87();
}

//----- (0000000000412A4F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_14_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000412A90) ----------------------------------------------------
int goodB2G1_50()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 65F120: using guessed type int globalFive;

//----- (0000000000412AFB) ----------------------------------------------------
int goodB2G2_50()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000412B5A) ----------------------------------------------------
int goodG2B1_46()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000412BA7) ----------------------------------------------------
int goodG2B2_46()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000412BE8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_14_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (0000000000412C16) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 + 1LL);
}

//----- (0000000000412C4F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 + 1LL);
}

//----- (0000000000412C88) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(*a1 + 1LL);
  return result;
}

//----- (0000000000412CDD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (0000000000412D0B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) + 1);
}

//----- (0000000000412D39) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 + 1);
  return result;
}

//----- (0000000000412D79) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53c_badSink(a1);
}

//----- (0000000000412D93) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53c_goodG2BSink(a1);
}

//----- (0000000000412DAD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53c_goodB2GSink(a1);
}

//----- (0000000000412DC7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_52_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000412E00) ----------------------------------------------------
int goodG2B_92()
{
  return CWE190_Integer_Overflow__char_fscanf_add_52b_goodG2BSink(2);
}

//----- (0000000000412E1D) ----------------------------------------------------
int goodB2G_88()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000412E56) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_52_good()
{
  goodG2B_92();
  return goodB2G_88();
}

//----- (0000000000412E70) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_68b_badSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_add_68_badData + 1);
}
// 65F32D: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_badData;

//----- (0000000000412E99) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_68b_goodG2BSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_add_68_goodG2BData + 1);
}
// 65F32C: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_goodG2BData;

//----- (0000000000412EC2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_rand_add_68_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_rand_add_68_goodB2GData + 1);
  return result;
}
// 65F32B: using guessed type char CWE190_Integer_Overflow__char_rand_add_68_goodB2GData;

//----- (0000000000412EFD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_badSink(a1);
}

//----- (0000000000412F17) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodG2BSink(a1);
}

//----- (0000000000412F31) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodB2GSink(a1);
}

//----- (0000000000412F4B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000412F6F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000412F93) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000412FC9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000412FF2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041301B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52c_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000413056) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000413061) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000041306C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_08_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 127;
  result = staticReturnsTrue_1();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004130B3) ----------------------------------------------------
int goodB2G1_51()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 127;
  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}

//----- (0000000000413124) ----------------------------------------------------
int goodB2G2_51()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 127;
  result = staticReturnsTrue_1();
  if ( result )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}

//----- (0000000000413189) ----------------------------------------------------
int goodG2B1_47()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_1();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004131DC) ----------------------------------------------------
int goodG2B2_47()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 2;
  result = staticReturnsTrue_1();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (0000000000413223) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_08_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (0000000000413251) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_16_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413293) ----------------------------------------------------
int goodB2G_89()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004132E9) ----------------------------------------------------
int goodG2B_93()
{
  return printHexCharLine(3);
}

//----- (0000000000413312) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_16_good()
{
  goodB2G_89();
  return goodG2B_93();
}

//----- (000000000041332C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_68_bad()
{
  CWE190_Integer_Overflow__char_max_multiply_68_badData = 127;
  return CWE190_Integer_Overflow__char_max_multiply_68b_badSink();
}
// 65F354: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_badData;

//----- (0000000000413352) ----------------------------------------------------
int goodG2B_94()
{
  CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_max_multiply_68b_goodG2BSink();
}
// 65F356: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData;

//----- (0000000000413378) ----------------------------------------------------
int goodB2G_90()
{
  CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData = 127;
  return CWE190_Integer_Overflow__char_max_multiply_68b_goodB2GSink();
}
// 65F355: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData;

//----- (000000000041339E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_68_good()
{
  goodG2B_94();
  return goodB2G_90();
}

//----- (00000000004133B8) ----------------------------------------------------
__int64 badSource_4()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (00000000004133FC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_42_bad()
{
  int result; // eax

  result = badSource_4();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000413432) ----------------------------------------------------
__int64 goodG2BSource_4()
{
  return 2LL;
}

//----- (0000000000413445) ----------------------------------------------------
int goodG2B_95()
{
  int result; // eax

  result = goodG2BSource_4();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041347B) ----------------------------------------------------
__int64 goodB2GSource_4()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (00000000004134BF) ----------------------------------------------------
int goodB2G_91()
{
  int result; // eax

  result = goodB2GSource_4();
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000413507) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_42_good()
{
  goodB2G_91();
  return goodG2B_95();
}

//----- (0000000000413521) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_14_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041358B) ----------------------------------------------------
int goodB2G1_52()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 65F120: using guessed type int globalFive;

//----- (0000000000413613) ----------------------------------------------------
int goodB2G2_52()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041368F) ----------------------------------------------------
int goodG2B1_48()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004136D8) ----------------------------------------------------
int goodG2B2_48()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000413715) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_14_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (0000000000413743) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004137A8) ----------------------------------------------------
int goodB2G1_53()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413838) ----------------------------------------------------
int goodB2G2_53()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004138BC) ----------------------------------------------------
int goodG2B1_49()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413916) ----------------------------------------------------
int goodG2B2_49()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2LL;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000413964) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_13_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (0000000000413992) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_67_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_67b_badSink(v0);
}

//----- (00000000004139E3) ----------------------------------------------------
int goodG2B_96()
{
  return CWE190_Integer_Overflow__char_rand_multiply_67b_goodG2BSink(2u);
}

//----- (0000000000413A07) ----------------------------------------------------
int goodB2G_92()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_multiply_67b_goodB2GSink(v0);
}

//----- (0000000000413A58) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_67_good()
{
  goodG2B_96();
  return goodB2G_92();
}

//----- (0000000000413A72) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53c_badSink(a1);
}

//----- (0000000000413A8C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53c_goodG2BSink(a1);
}

//----- (0000000000413AA6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_53c_goodB2GSink(a1);
}

//----- (0000000000413AC0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000413AE8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000413B10) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000413B56) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_badSink()
{
  return printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_68_badData + 1);
}
// 65F338: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_badData;

//----- (0000000000413B83) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodG2BSink()
{
  return printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodG2BData + 1);
}
// 65F340: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodG2BData;

//----- (0000000000413BB0) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData + 1);
  return result;
}
// 65F330: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_68_goodB2GData;

//----- (0000000000413BF9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000413C1D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000413C41) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000413C77) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413CB2) ----------------------------------------------------
int goodG2B_97()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodG2BSink(&v1);
}

//----- (0000000000413CD8) ----------------------------------------------------
int goodB2G_93()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413D13) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_63_good()
{
  goodG2B_97();
  return goodB2G_93();
}

//----- (0000000000413D2D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_add_66b_badSink((__int64)&v1);
}

//----- (0000000000413D52) ----------------------------------------------------
int goodG2B_98()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_max_add_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000413D77) ----------------------------------------------------
int goodB2G_94()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_add_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000413D9C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_66_good()
{
  goodG2B_98();
  return goodB2G_94();
}

//----- (0000000000413DB6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000413DDA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000413DFE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000413E34) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_53_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_53b_badSink(127);
}

//----- (0000000000413E51) ----------------------------------------------------
int goodG2B_99()
{
  return CWE190_Integer_Overflow__char_max_multiply_53b_goodG2BSink(2);
}

//----- (0000000000413E6E) ----------------------------------------------------
int goodB2G_95()
{
  return CWE190_Integer_Overflow__char_max_multiply_53b_goodB2GSink(127);
}

//----- (0000000000413E8B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_53_good()
{
  goodG2B_99();
  return goodB2G_95();
}

//----- (0000000000413EA5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_51_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413EDE) ----------------------------------------------------
int goodG2B_100()
{
  return CWE190_Integer_Overflow__char_fscanf_add_51b_goodG2BSink(2);
}

//----- (0000000000413EFB) ----------------------------------------------------
int goodB2G_96()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000413F34) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_51_good()
{
  goodG2B_100();
  return goodB2G_96();
}

//----- (0000000000413F4E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54c_badSink(a1);
}

//----- (0000000000413F68) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54c_goodG2BSink(a1);
}

//----- (0000000000413F82) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54c_goodB2GSink(a1);
}

//----- (0000000000413F9C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_rand_square_61b_badSource();
  return printHexCharLine(v0 * v0);
}

//----- (0000000000413FD1) ----------------------------------------------------
int goodG2B_101()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_rand_square_61b_goodG2BSource();
  return printHexCharLine(v0 * v0);
}

//----- (0000000000414006) ----------------------------------------------------
int goodB2G_97()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_rand_square_61b_goodB2GSource();
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (0000000000414059) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_61_good()
{
  goodG2B_101();
  return goodB2G_97();
}

//----- (0000000000414073) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (00000000004140A5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (00000000004140D7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041411B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_05_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F0E8: using guessed type int staticTrue_5;

//----- (0000000000414188) ----------------------------------------------------
int goodB2G1_54()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFalse_5;
  if ( staticFalse_5 )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F0E8: using guessed type int staticTrue_5;
// 65F1B4: using guessed type int staticFalse_5;

//----- (0000000000414213) ----------------------------------------------------
int goodB2G2_54()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_5;
  if ( staticTrue_5 && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F0E8: using guessed type int staticTrue_5;

//----- (0000000000414292) ----------------------------------------------------
int goodG2B1_50()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_5 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_5;
  if ( staticTrue_5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F0E8: using guessed type int staticTrue_5;
// 65F1B4: using guessed type int staticFalse_5;

//----- (00000000004142DE) ----------------------------------------------------
int goodG2B2_50()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_5 )
    v1 = 2;
  result = staticTrue_5;
  if ( staticTrue_5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F0E8: using guessed type int staticTrue_5;

//----- (000000000041431E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_05_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000041434C) ----------------------------------------------------
int __fastcall badSink_13(__int64 a1)
{
  int result; // eax

  result = badStatic_0;
  if ( badStatic_0 )
  {
    if ( a1 > 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1B8: using guessed type int badStatic_0;

//----- (0000000000414382) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  badStatic_0 = 1;
  return badSink_13(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1B8: using guessed type int badStatic_0;

//----- (00000000004143C7) ----------------------------------------------------
int __fastcall goodB2G1Sink_0(__int64 a1)
{
  int result; // eax

  result = goodB2G1Static_0;
  if ( goodB2G1Static_0 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1BC: using guessed type int goodB2G1Static_0;

//----- (0000000000414425) ----------------------------------------------------
int goodB2G1_55()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G1Static_0 = 0;
  return goodB2G1Sink_0(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1BC: using guessed type int goodB2G1Static_0;

//----- (000000000041446A) ----------------------------------------------------
int __fastcall goodB2G2Sink_0(__int64 a1)
{
  int result; // eax

  result = goodB2G2Static_0;
  if ( goodB2G2Static_0 && a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1C0: using guessed type int goodB2G2Static_0;

//----- (00000000004144BC) ----------------------------------------------------
int goodB2G2_55()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  goodB2G2Static_0 = 1;
  return goodB2G2Sink_0(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1C0: using guessed type int goodB2G2Static_0;

//----- (0000000000414501) ----------------------------------------------------
int __fastcall goodG2BSink_13(__int64 a1)
{
  int result; // eax

  result = goodG2BStatic_0;
  if ( goodG2BStatic_0 )
  {
    if ( a1 > 0 )
      result = printLongLongLine(2 * a1);
  }
  return result;
}
// 65F1C4: using guessed type int goodG2BStatic_0;

//----- (0000000000414537) ----------------------------------------------------
int goodG2B_102()
{
  goodG2BStatic_0 = 1;
  return goodG2BSink_13(2LL);
}
// 65F1C4: using guessed type int goodG2BStatic_0;

//----- (0000000000414567) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good()
{
  goodB2G1_55();
  goodB2G2_55();
  return goodG2B_102();
}

//----- (000000000041458B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004145DA) ----------------------------------------------------
int goodB2G1_56()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000414648) ----------------------------------------------------
int goodB2G2_56()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004146B6) ----------------------------------------------------
int goodG2B1_51()
{
  return printLongLongLine(4LL);
}

//----- (00000000004146EE) ----------------------------------------------------
int goodG2B2_51()
{
  return printLongLongLine(4LL);
}

//----- (0000000000414726) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_03_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_51();
  return goodG2B2_51();
}

//----- (0000000000414754) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_15_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041479A) ----------------------------------------------------
int goodB2G1_57()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000414804) ----------------------------------------------------
int goodB2G2_57()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041486E) ----------------------------------------------------
int goodG2B1_52()
{
  return printHexCharLine(4);
}

//----- (000000000041489B) ----------------------------------------------------
int goodG2B2_52()
{
  return printHexCharLine(4);
}

//----- (00000000004148C8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_15_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_52();
  return goodG2B2_52();
}

//----- (00000000004148F6) ----------------------------------------------------
void CWE190_Integer_Overflow__char_rand_multiply_17_bad()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 > 0 )
      printHexCharLine(2 * v1);
  }
}

//----- (0000000000414975) ----------------------------------------------------
void goodB2G_98()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 > 0 )
    {
      if ( v1 > 62 )
        printLine("data value is too large to perform arithmetic safely.");
      else
        printHexCharLine(2 * v1);
    }
  }
}

//----- (0000000000414A06) ----------------------------------------------------
int goodG2B_103()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000414A58) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_17_good()
{
  goodB2G_98();
  return goodG2B_103();
}

//----- (0000000000414A72) ----------------------------------------------------
int badSink_14()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_45_badData + 1);
}
// 65F1C8: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_badData;

//----- (0000000000414A9B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_45_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_45_badData = v1;
  return badSink_14();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1C8: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_badData;

//----- (0000000000414ADA) ----------------------------------------------------
int goodG2BSink_14()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_45_goodG2BData + 1);
}
// 65F1C9: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_goodG2BData;

//----- (0000000000414B03) ----------------------------------------------------
int goodG2B_104()
{
  CWE190_Integer_Overflow__char_fscanf_add_45_goodG2BData = 2;
  return goodG2BSink_14();
}
// 65F1C9: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_goodG2BData;

//----- (0000000000414B29) ----------------------------------------------------
int goodB2GSink_12()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData + 1);
  return result;
}
// 65F1CA: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData;

//----- (0000000000414B64) ----------------------------------------------------
int goodB2G_99()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData = v1;
  return goodB2GSink_12();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1CA: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_45_goodB2GData;

//----- (0000000000414BA3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_45_good()
{
  goodG2B_104();
  return goodB2G_99();
}

//----- (0000000000414BBD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_07_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 65F0EC: using guessed type int staticFive_2;

//----- (0000000000414C2B) ----------------------------------------------------
int goodB2G1_58()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFive_2 != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 65F0EC: using guessed type int staticFive_2;

//----- (0000000000414CC3) ----------------------------------------------------
int goodB2G2_58()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 65F0EC: using guessed type int staticFive_2;

//----- (0000000000414D4F) ----------------------------------------------------
int goodG2B1_53()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_2 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0EC: using guessed type int staticFive_2;

//----- (0000000000414D9C) ----------------------------------------------------
int goodG2B2_53()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_2 == 5 )
    v1 = 2;
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0EC: using guessed type int staticFive_2;

//----- (0000000000414DDD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_07_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_53();
  return goodG2B2_53();
}

//----- (0000000000414E0B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_53_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_53b_badSink(v0);
}

//----- (0000000000414E55) ----------------------------------------------------
int goodG2B_105()
{
  return CWE190_Integer_Overflow__char_rand_add_53b_goodG2BSink(2);
}

//----- (0000000000414E72) ----------------------------------------------------
int goodB2G_100()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_53b_goodB2GSink(v0);
}

//----- (0000000000414EBC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_53_good()
{
  goodG2B_105();
  return goodB2G_100();
}

//----- (0000000000414ED6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_06_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43E2DC, &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000414F2A) ----------------------------------------------------
int goodB2G1_59()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43E2DC, &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000414F9E) ----------------------------------------------------
int goodB2G2_59()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43E2DC, &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415006) ----------------------------------------------------
int goodG2B1_54()
{
  return printHexCharLine(3);
}

//----- (000000000041504D) ----------------------------------------------------
int goodG2B2_54()
{
  return printHexCharLine(3);
}

//----- (0000000000415088) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_06_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_54();
  return goodG2B2_54();
}

//----- (00000000004150B6) ----------------------------------------------------
__int64 __fastcall badSource_5(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004150E6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_42_bad()
{
  char v0; // al

  v0 = badSource_5(0x20u);
  return printHexCharLine(v0 * v0);
}

//----- (000000000041511B) ----------------------------------------------------
__int64 goodG2BSource_5()
{
  return 2LL;
}

//----- (000000000041512E) ----------------------------------------------------
int goodG2B_106()
{
  char v0; // al

  v0 = goodG2BSource_5();
  return printHexCharLine(v0 * v0);
}

//----- (0000000000415163) ----------------------------------------------------
__int64 __fastcall goodB2GSource_5(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415193) ----------------------------------------------------
int goodB2G_101()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_5(0x20u);
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (00000000004151E6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_42_good()
{
  goodB2G_101();
  return goodG2B_106();
}

//----- (0000000000415200) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415251) ----------------------------------------------------
int goodB2G_102()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004152C1) ----------------------------------------------------
int goodG2B_107()
{
  return printLongLongLine(4LL);
}

//----- (00000000004152FB) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_18_good()
{
  goodB2G_102();
  return goodG2B_107();
}

//----- (0000000000415315) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_34_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041537C) ----------------------------------------------------
int goodG2B_108()
{
  return printHexCharLine(4);
}

//----- (00000000004153B6) ----------------------------------------------------
int goodB2G_103()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041542F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_34_good()
{
  goodG2B_108();
  return goodB2G_103();
}

//----- (0000000000415449) ----------------------------------------------------
__int64 __fastcall badSource_6(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415479) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_42_bad()
{
  int result; // eax

  result = badSource_6(0x20u);
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004154AF) ----------------------------------------------------
__int64 goodG2BSource_6()
{
  return 2LL;
}

//----- (00000000004154C2) ----------------------------------------------------
int goodG2B_109()
{
  int result; // eax

  result = goodG2BSource_6();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004154F8) ----------------------------------------------------
__int64 __fastcall goodB2GSource_6(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415528) ----------------------------------------------------
int goodB2G_104()
{
  int result; // eax

  result = goodB2GSource_6(0x20u);
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000415570) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_42_good()
{
  goodB2G_104();
  return goodG2B_109();
}

//----- (000000000041558A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004155CD) ----------------------------------------------------
int goodG2B_110()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 2LL;
  v2 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004155FB) ----------------------------------------------------
int goodB2G_105()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041563E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_66_good()
{
  goodG2B_110();
  return goodB2G_105();
}

//----- (0000000000415658) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000041568B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004156BE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000415703) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_52c_badSink(a1);
}

//----- (000000000041571D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_52c_goodG2BSink(a1);
}

//----- (0000000000415737) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_52c_goodB2GSink(a1);
}

//----- (0000000000415751) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_54_bad()
{
  return CWE190_Integer_Overflow__char_max_square_54b_badSink(127);
}

//----- (000000000041576E) ----------------------------------------------------
int goodG2B_111()
{
  return CWE190_Integer_Overflow__char_max_square_54b_goodG2BSink(2);
}

//----- (000000000041578B) ----------------------------------------------------
int goodB2G_106()
{
  return CWE190_Integer_Overflow__char_max_square_54b_goodB2GSink(127);
}

//----- (00000000004157A8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_54_good()
{
  goodG2B_111();
  return goodB2G_106();
}

//----- (00000000004157C2) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041581D) ----------------------------------------------------
int goodB2G1_60()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004158A3) ----------------------------------------------------
int goodB2G2_60()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041591D) ----------------------------------------------------
int goodG2B1_55()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041596F) ----------------------------------------------------
int goodG2B2_55()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004159B5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_09_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B1_55();
  return goodG2B2_55();
}

//----- (00000000004159E3) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415A50) ----------------------------------------------------
int goodB2G_107()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%ld", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415ADC) ----------------------------------------------------
int goodG2B_112()
{
  int result; // eax
  __int64 v1; // [rsp+10h] [rbp-10h]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v1 = 0LL;
  for ( i = 0; i <= 0; ++i )
    v1 = 2LL;
  for ( j = 0; j <= 0; ++j )
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (0000000000415B34) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_17_good()
{
  goodB2G_107();
  return goodG2B_112();
}

//----- (0000000000415B4E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000415B78) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000415BA2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000415BDE) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415C49) ----------------------------------------------------
int goodB2G1_61()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415CDF) ----------------------------------------------------
int goodB2G2_61()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415D69) ----------------------------------------------------
int goodG2B1_56()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000415DC9) ----------------------------------------------------
int goodG2B2_56()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2LL;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (0000000000415E1D) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_11_good()
{
  goodB2G1_61();
  goodB2G2_61();
  goodG2B1_56();
  return goodG2B2_56();
}

//----- (0000000000415E4B) ----------------------------------------------------
int __fastcall badSink_15(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000415E71) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_44_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = badSink_15;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415EB5) ----------------------------------------------------
int __fastcall goodG2BSink_15(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000415EDB) ----------------------------------------------------
int goodG2B_113()
{
  return goodG2BSink_15(2LL);
}

//----- (0000000000415F0A) ----------------------------------------------------
int __fastcall goodB2GSink_13(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (0000000000415F4C) ----------------------------------------------------
__int64 goodB2G_108()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_13;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000415F90) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_44_good()
{
  goodG2B_113();
  return goodB2G_108();
}

//----- (0000000000415FAA) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_badSink()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData > 0 )
    result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData);
  return result;
}
// 65F370: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData;

//----- (0000000000415FDD) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData > 0 )
    result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData);
  return result;
}
// 65F368: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData;

//----- (0000000000416010) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData);
  }
  return result;
}
// 65F360: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData;

//----- (000000000041605F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000416087) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004160AF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_65b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004160F5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_05_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F0: using guessed type int staticTrue_6;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041614D) ----------------------------------------------------
int goodB2G1_62()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFalse_6 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F0: using guessed type int staticTrue_6;
// 65F128: using guessed type __int64 stdin;
// 65F1CC: using guessed type int staticFalse_6;

//----- (00000000004161D5) ----------------------------------------------------
int goodB2G2_62()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F0: using guessed type int staticTrue_6;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416251) ----------------------------------------------------
int goodG2B1_57()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_6 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_6;
  if ( staticTrue_6 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0F0: using guessed type int staticTrue_6;
// 65F1CC: using guessed type int staticFalse_6;

//----- (000000000041629C) ----------------------------------------------------
int goodG2B2_57()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_6 )
    v1 = 2;
  result = staticTrue_6;
  if ( staticTrue_6 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0F0: using guessed type int staticTrue_6;

//----- (00000000004162DB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_05_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_57();
  return goodG2B2_57();
}

//----- (0000000000416309) ----------------------------------------------------
int __fastcall badSink_16(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000416331) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_41_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return badSink_16(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041636A) ----------------------------------------------------
int __fastcall goodG2BSink_16(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000416392) ----------------------------------------------------
int goodG2B_114()
{
  return goodG2BSink_16(2);
}

//----- (00000000004163AF) ----------------------------------------------------
int __fastcall goodB2GSink_14(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004163F5) ----------------------------------------------------
int goodB2G_109()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return goodB2GSink_14(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041642E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_41_good()
{
  goodB2G_109();
  return goodG2B_114();
}

//----- (0000000000416448) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_01_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004164A1) ----------------------------------------------------
int goodG2B_115()
{
  return printHexCharLine(4);
}

//----- (00000000004164CD) ----------------------------------------------------
int goodB2G_110()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000416538) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_01_good()
{
  goodG2B_115();
  return goodB2G_110();
}

//----- (0000000000416552) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000416587) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (00000000004165BC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_64b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (0000000000416603) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_52c_badSink(a1);
}

//----- (000000000041661D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_52c_goodG2BSink(a1);
}

//----- (0000000000416637) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_52c_goodB2GSink(a1);
}

//----- (0000000000416651) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_52_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_52b_badSink(127);
}

//----- (000000000041666E) ----------------------------------------------------
int goodG2B_116()
{
  return CWE190_Integer_Overflow__char_max_multiply_52b_goodG2BSink(2);
}

//----- (000000000041668B) ----------------------------------------------------
int goodB2G_111()
{
  return CWE190_Integer_Overflow__char_max_multiply_52b_goodB2GSink(127);
}

//----- (00000000004166A8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_52_good()
{
  goodG2B_116();
  return goodB2G_111();
}

//----- (00000000004166C2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004166EB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000416714) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_51b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041674F) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_61b_badSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041677E) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodG2BSource()
{
  return 2LL;
}

//----- (0000000000416794) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodB2GSource(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004167C3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53d_badSink(a1);
}

//----- (00000000004167DD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53d_goodG2BSink(a1);
}

//----- (00000000004167F7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53d_goodB2GSink(a1);
}

//----- (0000000000416811) ----------------------------------------------------
int __fastcall badSink_17(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000416835) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_add_44_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = badSink_17;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416877) ----------------------------------------------------
int __fastcall goodG2BSink_17(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000041689B) ----------------------------------------------------
int goodG2B_117()
{
  return goodG2BSink_17(2);
}

//----- (00000000004168C1) ----------------------------------------------------
int __fastcall goodB2GSink_15(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (00000000004168F7) ----------------------------------------------------
__int64 goodB2G_112()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_15;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416939) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_add_44_good()
{
  goodG2B_117();
  return goodB2G_112();
}

//----- (0000000000416953) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_09_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004169A7) ----------------------------------------------------
int goodB2G1_63()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416A1B) ----------------------------------------------------
int goodB2G2_63()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416A83) ----------------------------------------------------
int goodG2B1_58()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000416ACA) ----------------------------------------------------
int goodG2B2_58()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000416B05) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_09_good()
{
  goodB2G1_63();
  goodB2G2_63();
  goodG2B1_58();
  return goodG2B2_58();
}

//----- (0000000000416B33) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_34_bad()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416B85) ----------------------------------------------------
int goodG2B_118()
{
  return printHexCharLine(4);
}

//----- (0000000000416BBE) ----------------------------------------------------
int goodB2G_113()
{
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v3 = v1;
  if ( v1 < -11 || v3 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 * v3;
  return printHexCharLine(v3 * v3);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416C2E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_34_good()
{
  goodG2B_118();
  return goodB2G_113();
}

//----- (0000000000416C48) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_16_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000416C76) ----------------------------------------------------
int goodB2G_114()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000416CB6) ----------------------------------------------------
int goodG2B_119()
{
  return printHexCharLine(4);
}

//----- (0000000000416CE4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_16_good()
{
  goodB2G_114();
  return goodG2B_119();
}

//----- (0000000000416CFE) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416D4D) ----------------------------------------------------
int goodB2G1_64()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416DBB) ----------------------------------------------------
int goodB2G2_64()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416E29) ----------------------------------------------------
int goodG2B1_59()
{
  return printLongLongLine(4LL);
}

//----- (0000000000416E61) ----------------------------------------------------
int goodG2B2_59()
{
  return printLongLongLine(4LL);
}

//----- (0000000000416E99) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_02_good()
{
  goodB2G1_64();
  goodB2G2_64();
  goodG2B1_59();
  return goodG2B2_59();
}

//----- (0000000000416EC7) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000416ED2) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (0000000000416EDD) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_2();
  if ( result )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416F40) ----------------------------------------------------
int goodB2G1_65()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)staticReturnsFalse_2() )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000416FCE) ----------------------------------------------------
int goodB2G2_65()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417050) ----------------------------------------------------
int goodG2B1_60()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_2() )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = staticReturnsTrue_2();
  if ( result )
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (00000000004170AA) ----------------------------------------------------
int goodG2B2_60()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_2() )
    v1 = 2LL;
  result = staticReturnsTrue_2();
  if ( result )
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (00000000004170F8) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_08_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_60();
  return goodG2B2_60();
}

//----- (0000000000417126) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_64b_badSink(&v1);
}

//----- (0000000000417144) ----------------------------------------------------
int goodG2B_120()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_multiply_64b_goodG2BSink(&v1);
}

//----- (0000000000417162) ----------------------------------------------------
int goodB2G_115()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_64b_goodB2GSink(&v1);
}

//----- (0000000000417180) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_64_good()
{
  goodG2B_120();
  return goodB2G_115();
}

//----- (000000000041719A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (00000000004171CC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (00000000004171FE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000041724E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_65_bad()
{
  return CWE190_Integer_Overflow__char_max_square_65b_badSink(127);
}

//----- (0000000000417274) ----------------------------------------------------
int goodG2B_121()
{
  return CWE190_Integer_Overflow__char_max_square_65b_goodG2BSink(2);
}

//----- (000000000041729A) ----------------------------------------------------
int goodB2G_116()
{
  return CWE190_Integer_Overflow__char_max_square_65b_goodB2GSink(127);
}

//----- (00000000004172C0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_65_good()
{
  goodG2B_121();
  return goodB2G_116();
}

//----- (00000000004172DA) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041733D) ----------------------------------------------------
int goodB2G1_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;
// 65F318: using guessed type int globalFalse;

//----- (00000000004173CB) ----------------------------------------------------
int goodB2G2_66()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041744D) ----------------------------------------------------
int goodG2B1_61()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (00000000004174A5) ----------------------------------------------------
int goodG2B2_61()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalTrue )
    v1 = 2LL;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (00000000004174F1) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_61();
  return goodG2B2_61();
}

//----- (000000000041751F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_52_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_52b_badSink(v0);
}

//----- (0000000000417569) ----------------------------------------------------
int goodG2B_122()
{
  return CWE190_Integer_Overflow__char_rand_add_52b_goodG2BSink(2);
}

//----- (0000000000417586) ----------------------------------------------------
int goodB2G_117()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_52b_goodB2GSink(v0);
}

//----- (00000000004175D0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_52_good()
{
  goodG2B_122();
  return goodB2G_117();
}

//----- (00000000004175EA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_14_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417647) ----------------------------------------------------
int goodB2G1_67()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004176C4) ----------------------------------------------------
int goodB2G2_67()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417735) ----------------------------------------------------
int goodG2B1_62()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000417783) ----------------------------------------------------
int goodG2B2_62()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004177C5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_14_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_62();
  return goodG2B2_62();
}

//----- (00000000004177F3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041782A) ----------------------------------------------------
int goodG2B_123()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_add_64b_goodG2BSink(&v1);
}

//----- (0000000000417848) ----------------------------------------------------
int goodB2G_118()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041787F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_64_good()
{
  goodG2B_123();
  return goodB2G_118();
}

//----- (0000000000417899) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004178BD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004178E1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000417917) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_32_bad()
{
  int result; // eax
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  result = (unsigned __int8)*v5;
  v4 = *v5;
  if ( v4 > 0 )
  {
    v3 = 2 * v4;
    result = printHexCharLine(2 * v4);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041798A) ----------------------------------------------------
int goodG2B_124()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 2;
  v1 = 2;
  return printHexCharLine(4);
}

//----- (00000000004179E4) ----------------------------------------------------
int goodB2G_119()
{
  int result; // eax
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  result = (unsigned __int8)*v5;
  v4 = *v5;
  if ( v4 > 0 )
  {
    if ( v4 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v3 = 2 * v4;
      result = printHexCharLine(2 * v4);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417A69) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_32_good()
{
  goodG2B_124();
  return goodB2G_119();
}

//----- (0000000000417A83) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_51_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_51b_badSink(127);
}

//----- (0000000000417AA0) ----------------------------------------------------
int goodG2B_125()
{
  return CWE190_Integer_Overflow__char_max_multiply_51b_goodG2BSink(2);
}

//----- (0000000000417ABD) ----------------------------------------------------
int goodB2G_120()
{
  return CWE190_Integer_Overflow__char_max_multiply_51b_goodB2GSink(127);
}

//----- (0000000000417ADA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_51_good()
{
  goodG2B_125();
  return goodB2G_120();
}

//----- (0000000000417AF4) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_61_bad()
{
  __int64 v0; // rax

  v0 = CWE190_Integer_Overflow__int64_t_fscanf_add_61b_badSource(0LL);
  return printLongLongLine(v0 + 1);
}

//----- (0000000000417B2E) ----------------------------------------------------
int goodG2B_126()
{
  __int64 v0; // rax

  v0 = CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodG2BSource();
  return printLongLongLine(v0 + 1);
}

//----- (0000000000417B68) ----------------------------------------------------
int goodB2G_121()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = CWE190_Integer_Overflow__int64_t_fscanf_add_61b_goodB2GSource(0LL);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (0000000000417BBE) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_61_good()
{
  goodG2B_126();
  return goodB2G_121();
}

//----- (0000000000417BD8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_16_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (0000000000417C2E) ----------------------------------------------------
int goodB2G_122()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000417C96) ----------------------------------------------------
int goodG2B_127()
{
  return printHexCharLine(3);
}

//----- (0000000000417CBF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_16_good()
{
  goodB2G_122();
  return goodG2B_127();
}

//----- (0000000000417CD9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_badSink(a1);
}

//----- (0000000000417CF3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodG2BSink(a1);
}

//----- (0000000000417D0D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54d_goodB2GSink(a1);
}

//----- (0000000000417D27) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_badSink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal )
    result = printLongLongLine(a1 + 1);
  return result;
}
// 65F174: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_badGlobal;

//----- (0000000000417D57) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Sink(__int64 a1)
{
  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  return printLongLongLine(a1 + 1);
}
// 65F178: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G1Global;

//----- (0000000000417DAF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Sink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global )
  {
    if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(a1 + 1);
  }
  return result;
}
// 65F17C: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodB2G2Global;

//----- (0000000000417DFB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal )
    result = printLongLongLine(a1 + 1);
  return result;
}
// 65F180: using guessed type int CWE190_Integer_Overflow__int64_t_fscanf_add_22_goodG2BGlobal;

//----- (0000000000417E2B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000417E53) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000417E7B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000417EC1) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417F10) ----------------------------------------------------
int goodG2B_128()
{
  return printLongLongLine(4LL);
}

//----- (0000000000417F48) ----------------------------------------------------
int goodB2G_123()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000417FB6) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_good()
{
  goodG2B_128();
  return goodB2G_123();
}

//----- (0000000000417FD0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000417FFC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000418028) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000418070) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_square_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004180AE) ----------------------------------------------------
int goodG2B_129()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_fscanf_square_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004180D3) ----------------------------------------------------
int goodB2G_124()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_square_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418111) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_66_good()
{
  goodG2B_129();
  return goodB2G_124();
}

//----- (000000000041812B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_07_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    v2 = v1 + 1;
    result = printLongLongLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F4: using guessed type int staticFive_3;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418188) ----------------------------------------------------
int goodB2G1_68()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFive_3 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F4: using guessed type int staticFive_3;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418210) ----------------------------------------------------
int goodB2G2_68()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_3 == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printLongLongLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0F4: using guessed type int staticFive_3;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041828C) ----------------------------------------------------
int goodG2B1_63()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_3 == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F0F4: using guessed type int staticFive_3;

//----- (00000000004182E0) ----------------------------------------------------
int goodG2B2_63()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFive_3 == 5 )
    v1 = 2LL;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    result = printLongLongLine(v1 + 1);
  return result;
}
// 65F0F4: using guessed type int staticFive_3;

//----- (0000000000418328) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_07_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_63();
  return goodG2B2_63();
}

//----- (0000000000418356) ----------------------------------------------------
int badSink_18()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_45_badData;
  if ( CWE190_Integer_Overflow__char_max_multiply_45_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_45_badData);
  return result;
}
// 65F1D0: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_badData;

//----- (0000000000418384) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_45_bad()
{
  CWE190_Integer_Overflow__char_max_multiply_45_badData = 127;
  return badSink_18();
}
// 65F1D0: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_badData;

//----- (00000000004183AA) ----------------------------------------------------
int goodG2BSink_18()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData;
  if ( CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData);
  return result;
}
// 65F1D1: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData;

//----- (00000000004183D8) ----------------------------------------------------
int goodG2B_130()
{
  CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData = 2;
  return goodG2BSink_18();
}
// 65F1D1: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_goodG2BData;

//----- (00000000004183FE) ----------------------------------------------------
int goodB2GSink_16()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData;
  if ( CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData);
  }
  return result;
}
// 65F1D2: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData;

//----- (000000000041843E) ----------------------------------------------------
int goodB2G_125()
{
  CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData = 127;
  return goodB2GSink_16();
}
// 65F1D2: using guessed type char CWE190_Integer_Overflow__char_max_multiply_45_goodB2GData;

//----- (0000000000418464) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_45_good()
{
  goodG2B_130();
  return goodB2G_125();
}

//----- (000000000041847E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_badSink(a1);
}

//----- (0000000000418498) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodG2BSink(a1);
}

//----- (00000000004184B2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54c_goodB2GSink(a1);
}

//----- (00000000004184CC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_06_bad()
{
  return printHexCharLine(254);
}

//----- (000000000041850C) ----------------------------------------------------
int goodB2G1_69()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041856A) ----------------------------------------------------
int goodB2G2_69()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004185BC) ----------------------------------------------------
int goodG2B1_64()
{
  return printHexCharLine(4);
}

//----- (0000000000418608) ----------------------------------------------------
int goodG2B2_64()
{
  return printHexCharLine(4);
}

//----- (0000000000418648) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_06_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B1_64();
  return goodG2B2_64();
}

//----- (0000000000418676) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_31_bad()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004186C8) ----------------------------------------------------
int goodG2B_131()
{
  return printHexCharLine(4);
}

//----- (0000000000418701) ----------------------------------------------------
int goodB2G_126()
{
  char v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  char v3; // [rsp+Eh] [rbp-2h]
  char v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  v3 = v1;
  if ( v1 < -11 || v3 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 * v3;
  return printHexCharLine(v3 * v3);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418771) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_31_good()
{
  goodG2B_131();
  return goodB2G_126();
}

//----- (000000000041878B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_51_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_51b_badSink(v0);
}

//----- (00000000004187D5) ----------------------------------------------------
int goodG2B_132()
{
  return CWE190_Integer_Overflow__char_rand_add_51b_goodG2BSink(2);
}

//----- (00000000004187F2) ----------------------------------------------------
int goodB2G_127()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_51b_goodB2GSink(v0);
}

//----- (000000000041883C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_51_good()
{
  goodG2B_132();
  return goodB2G_127();
}

//----- (0000000000418856) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_04_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43ED28, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004188AF) ----------------------------------------------------
int goodB2G1_70()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43ED28, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418928) ----------------------------------------------------
int goodB2G2_70()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43ED28, &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418995) ----------------------------------------------------
int goodG2B1_65()
{
  return printHexCharLine(4);
}

//----- (00000000004189DF) ----------------------------------------------------
int goodG2B2_65()
{
  return printHexCharLine(4);
}

//----- (0000000000418A1D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_04_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_65();
  return goodG2B2_65();
}

//----- (0000000000418A4B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_31_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  unsigned __int8 v3; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v3;
    result = printHexCharLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418A9E) ----------------------------------------------------
int goodG2B_133()
{
  return printHexCharLine(4);
}

//----- (0000000000418AD8) ----------------------------------------------------
int goodB2G_128()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Ch] [rbp-4h]
  char v2; // [rsp+Dh] [rbp-3h]
  unsigned __int8 v3; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v4; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v3 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v3;
      result = printHexCharLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418B3D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_31_good()
{
  goodG2B_133();
  return goodB2G_128();
}

//----- (0000000000418B57) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54c_badSink(a1);
}

//----- (0000000000418B71) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000418B8B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54c_goodB2GSink(a1);
}

//----- (0000000000418BA5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53c_badSink(a1);
}

//----- (0000000000418BBF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53c_goodG2BSink(a1);
}

//----- (0000000000418BD9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_53c_goodB2GSink(a1);
}

//----- (0000000000418BF3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_15_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (0000000000418C4D) ----------------------------------------------------
int goodB2G1_71()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000418CC5) ----------------------------------------------------
int goodB2G2_71()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000418D3D) ----------------------------------------------------
int goodG2B1_66()
{
  return printHexCharLine(4);
}

//----- (0000000000418D6A) ----------------------------------------------------
int goodG2B2_66()
{
  return printHexCharLine(4);
}

//----- (0000000000418D97) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_15_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_66();
  return goodG2B2_66();
}

//----- (0000000000418DC5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_67_bad()
{
  unsigned __int8 v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418E02) ----------------------------------------------------
int goodG2B_134()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodG2BSink(2u);
}

//----- (0000000000418E26) ----------------------------------------------------
int goodB2G_129()
{
  unsigned __int8 v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000418E63) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_67_good()
{
  goodG2B_134();
  return goodB2G_129();
}

//----- (0000000000418E7D) ----------------------------------------------------
int badSink_19()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_add_45_badData + 1);
}
// 65F1D3: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_badData;

//----- (0000000000418EA6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_45_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_45_badData = v0;
  return badSink_19();
}
// 65F1D3: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_badData;

//----- (0000000000418EF9) ----------------------------------------------------
int goodG2BSink_19()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_add_45_goodG2BData + 1);
}
// 65F1D4: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_goodG2BData;

//----- (0000000000418F22) ----------------------------------------------------
int goodG2B_135()
{
  CWE190_Integer_Overflow__char_rand_add_45_goodG2BData = 2;
  return goodG2BSink_19();
}
// 65F1D4: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_goodG2BData;

//----- (0000000000418F48) ----------------------------------------------------
int goodB2GSink_17()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_rand_add_45_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_rand_add_45_goodB2GData + 1);
  return result;
}
// 65F1D5: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_goodB2GData;

//----- (0000000000418F83) ----------------------------------------------------
int goodB2G_130()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_45_goodB2GData = v0;
  return goodB2GSink_17();
}
// 65F1D5: using guessed type char CWE190_Integer_Overflow__char_rand_add_45_goodB2GData;

//----- (0000000000418FD6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_45_good()
{
  goodG2B_135();
  return goodB2G_130();
}

//----- (0000000000418FF0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_14_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041902D) ----------------------------------------------------
int goodB2G1_72()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 65F120: using guessed type int globalFive;

//----- (0000000000419088) ----------------------------------------------------
int goodB2G2_72()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 127;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004190D7) ----------------------------------------------------
int goodG2B1_67()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000419120) ----------------------------------------------------
int goodG2B2_67()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041915D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_14_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B1_67();
  return goodG2B2_67();
}

//----- (000000000041918B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_06_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (00000000004191F3) ----------------------------------------------------
int goodB2G1_73()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000419279) ----------------------------------------------------
int goodB2G2_73()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (00000000004192F3) ----------------------------------------------------
int goodG2B1_68()
{
  return printHexCharLine(3);
}

//----- (000000000041933A) ----------------------------------------------------
int goodG2B2_68()
{
  return printHexCharLine(3);
}

//----- (0000000000419375) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_06_good()
{
  goodB2G1_73();
  goodB2G2_73();
  goodG2B1_68();
  return goodG2B2_68();
}

//----- (00000000004193A3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 127;
  v1 = 127;
  v3 = 127;
  v2 = -128;
  return printHexCharLine(-128);
}

//----- (00000000004193F8) ----------------------------------------------------
int goodG2B_136()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 3;
  return printHexCharLine(3);
}

//----- (000000000041944D) ----------------------------------------------------
int goodB2G_131()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Eh] [rbp-12h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 127;
  v1 = 127;
  v2 = 127;
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004194B4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_32_good()
{
  goodG2B_136();
  return goodB2G_131();
}

//----- (00000000004194CE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F1DC: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal;

//----- (0000000000419501) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F1E0: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global;

//----- (0000000000419552) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F1E4: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global;

//----- (0000000000419597) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F1E8: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal;

//----- (00000000004195CA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000419604) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000041963E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041968A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004196B4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004196DE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000041971A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_53_bad()
{
  return CWE190_Integer_Overflow__char_max_square_53b_badSink(127);
}

//----- (0000000000419737) ----------------------------------------------------
int goodG2B_137()
{
  return CWE190_Integer_Overflow__char_max_square_53b_goodG2BSink(2);
}

//----- (0000000000419754) ----------------------------------------------------
int goodB2G_132()
{
  return CWE190_Integer_Overflow__char_max_square_53b_goodB2GSink(127);
}

//----- (0000000000419771) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_53_good()
{
  goodG2B_137();
  return goodB2G_132();
}

//----- (000000000041978B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_05_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 65F0F8: using guessed type int staticTrue_7;

//----- (00000000004197F7) ----------------------------------------------------
int goodB2G1_74()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( staticFalse_7 )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 65F0F8: using guessed type int staticTrue_7;
// 65F1D8: using guessed type int staticFalse_7;

//----- (000000000041988D) ----------------------------------------------------
int goodB2G2_74()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticTrue_7 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticTrue_7;
  if ( staticTrue_7 )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 65F0F8: using guessed type int staticTrue_7;

//----- (0000000000419917) ----------------------------------------------------
int goodG2B1_69()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_7 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0F8: using guessed type int staticTrue_7;
// 65F1D8: using guessed type int staticFalse_7;

//----- (0000000000419962) ----------------------------------------------------
int goodG2B2_69()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_7 )
    v1 = 2;
  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F0F8: using guessed type int staticTrue_7;

//----- (00000000004199A1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_05_good()
{
  goodB2G1_74();
  goodB2G2_74();
  goodG2B1_69();
  return goodG2B2_69();
}

//----- (00000000004199CF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_04_bad()
{
  return printHexCharLine(128);
}

//----- (0000000000419A08) ----------------------------------------------------
int goodB2G1_75()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000419A5F) ----------------------------------------------------
int goodB2G2_75()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000419AAA) ----------------------------------------------------
int goodG2B1_70()
{
  return printHexCharLine(3);
}

//----- (0000000000419AEF) ----------------------------------------------------
int goodG2B2_70()
{
  return printHexCharLine(3);
}

//----- (0000000000419B28) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_04_good()
{
  goodB2G1_75();
  goodB2G2_75();
  goodG2B1_70();
  return goodG2B2_70();
}

//----- (0000000000419B56) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_31_bad()
{
  return printHexCharLine(-128);
}

//----- (0000000000419B8B) ----------------------------------------------------
int goodG2B_138()
{
  return printHexCharLine(3);
}

//----- (0000000000419BC0) ----------------------------------------------------
int goodB2G_133()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000419C07) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_31_good()
{
  goodG2B_138();
  return goodB2G_133();
}

//----- (0000000000419C21) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_22_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_multiply_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1DC: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_badGlobal;

//----- (0000000000419C64) ----------------------------------------------------
int goodB2G1_76()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1E0: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G1Global;

//----- (0000000000419CA7) ----------------------------------------------------
int goodB2G2_76()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1E4: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodB2G2Global;

//----- (0000000000419CEA) ----------------------------------------------------
int goodG2B_139()
{
  CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BSink(2);
}
// 65F1E8: using guessed type int CWE190_Integer_Overflow__char_fscanf_multiply_22_goodG2BGlobal;

//----- (0000000000419D11) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_22_good()
{
  goodB2G1_76();
  goodB2G2_76();
  return goodG2B_139();
}

//----- (0000000000419D35) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_68b_badSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_68_badData;
  if ( CWE190_Integer_Overflow__char_max_multiply_68_badData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_68_badData);
  return result;
}
// 65F354: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_badData;

//----- (0000000000419D63) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_68b_goodG2BSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData;
  if ( CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData > 0 )
    result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData);
  return result;
}
// 65F356: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_goodG2BData;

//----- (0000000000419D91) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_68b_goodB2GSink()
{
  int result; // eax

  result = (unsigned __int8)CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData;
  if ( CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData > 0 )
  {
    if ( CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData);
  }
  return result;
}
// 65F355: using guessed type char CWE190_Integer_Overflow__char_max_multiply_68_goodB2GData;

//----- (0000000000419DD1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_18_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000419E17) ----------------------------------------------------
int goodB2G_134()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000419E81) ----------------------------------------------------
int goodG2B_140()
{
  return printHexCharLine(4);
}

//----- (0000000000419EAE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_18_good()
{
  goodB2G_134();
  return goodG2B_140();
}

//----- (0000000000419EC8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_10_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000419F08) ----------------------------------------------------
int goodB2G1_77()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000419F66) ----------------------------------------------------
int goodB2G2_77()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 127;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000419FB8) ----------------------------------------------------
int goodG2B1_71()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000041A004) ----------------------------------------------------
int goodG2B2_71()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000041A044) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_10_good()
{
  goodB2G1_77();
  goodB2G2_77();
  goodG2B1_71();
  return goodG2B2_71();
}

//----- (000000000041A072) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (000000000041A09F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (000000000041A0CC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (000000000041A10B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_67_bad()
{
  return CWE190_Integer_Overflow__char_max_add_67b_badSink(127);
}

//----- (000000000041A12F) ----------------------------------------------------
int goodG2B_141()
{
  return CWE190_Integer_Overflow__char_max_add_67b_goodG2BSink(2);
}

//----- (000000000041A153) ----------------------------------------------------
int goodB2G_135()
{
  return CWE190_Integer_Overflow__char_max_add_67b_goodB2GSink(127);
}

//----- (000000000041A177) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_67_good()
{
  goodG2B_141();
  return goodB2G_135();
}

//----- (000000000041A191) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54e_badSink(a1);
}

//----- (000000000041A1AB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodG2BSink(a1);
}

//----- (000000000041A1C5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54e_goodB2GSink(a1);
}

//----- (000000000041A1DF) ----------------------------------------------------
int badSink_20()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_rand_square_45_badData * CWE190_Integer_Overflow__char_rand_square_45_badData);
}
// 65F1EC: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_badData;

//----- (000000000041A20C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_45_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_45_badData = v0;
  return badSink_20();
}
// 65F1EC: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_badData;

//----- (000000000041A25F) ----------------------------------------------------
int goodG2BSink_20()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_rand_square_45_goodG2BData
         * CWE190_Integer_Overflow__char_rand_square_45_goodG2BData);
}
// 65F1ED: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_goodG2BData;

//----- (000000000041A28C) ----------------------------------------------------
int goodG2B_142()
{
  CWE190_Integer_Overflow__char_rand_square_45_goodG2BData = 2;
  return goodG2BSink_20();
}
// 65F1ED: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_goodG2BData;

//----- (000000000041A2B2) ----------------------------------------------------
int goodB2GSink_18()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_rand_square_45_goodB2GData < -11
    || CWE190_Integer_Overflow__char_rand_square_45_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_rand_square_45_goodB2GData
             * CWE190_Integer_Overflow__char_rand_square_45_goodB2GData);
  }
  return result;
}
// 65F1EE: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_goodB2GData;

//----- (000000000041A2FD) ----------------------------------------------------
int goodB2G_136()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_45_goodB2GData = v0;
  return goodB2GSink_18();
}
// 65F1EE: using guessed type char CWE190_Integer_Overflow__char_rand_square_45_goodB2GData;

//----- (000000000041A350) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_45_good()
{
  goodG2B_142();
  return goodB2G_136();
}

//----- (000000000041A36A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_52c_badSink(a1);
}

//----- (000000000041A384) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_52c_goodG2BSink(a1);
}

//----- (000000000041A39E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_52c_goodB2GSink(a1);
}

//----- (000000000041A3B8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_63_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(&v2);
}

//----- (000000000041A403) ----------------------------------------------------
int goodG2B_143()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_multiply_63b_goodG2BSink(&v1);
}

//----- (000000000041A421) ----------------------------------------------------
int goodB2G_137()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_63b_goodB2GSink(&v2);
}

//----- (000000000041A46C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_63_good()
{
  goodG2B_143();
  return goodB2G_137();
}

//----- (000000000041A486) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_68b_badSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_68_badData + 1);
}
// 65F379: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_badData;

//----- (000000000041A4AF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_68b_goodG2BSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_68_goodG2BData + 1);
}
// 65F37A: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_goodG2BData;

//----- (000000000041A4D8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData + 1);
  return result;
}
// 65F378: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData;

//----- (000000000041A513) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041A54E) ----------------------------------------------------
int goodG2B_144()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodG2BSink(2LL);
}

//----- (000000000041A574) ----------------------------------------------------
int goodB2G_138()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041A5AF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_54_good()
{
  goodG2B_144();
  return goodB2G_138();
}

//----- (000000000041A5C9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_13_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041A626) ----------------------------------------------------
int goodB2G1_78()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041A6A3) ----------------------------------------------------
int goodB2G2_78()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041A714) ----------------------------------------------------
int goodG2B1_72()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041A762) ----------------------------------------------------
int goodG2B2_72()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041A7A4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_13_good()
{
  goodB2G1_78();
  goodB2G2_78();
  goodG2B1_72();
  return goodG2B2_72();
}

//----- (000000000041A7D2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_badSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) + 1LL);
}

//----- (000000000041A804) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(*(_QWORD *)(a1 + 16) + 1LL);
}

//----- (000000000041A836) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  __int64 v2; // [rsp+18h] [rbp-8h]

  v2 = *(_QWORD *)(a1 + 16);
  if ( v2 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(v2 + 1);
  return result;
}

//----- (000000000041A884) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_14_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 && v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041A8F3) ----------------------------------------------------
int goodB2G1_79()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041A980) ----------------------------------------------------
int goodB2G2_79()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041AA01) ----------------------------------------------------
int goodG2B1_73()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041AA4F) ----------------------------------------------------
int goodG2B2_73()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041AA91) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_14_good()
{
  goodB2G1_79();
  goodB2G2_79();
  goodG2B1_73();
  return goodG2B2_73();
}

//----- (000000000041AABF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_64_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_add_64b_badSink(&v2);
}

//----- (000000000041AB0A) ----------------------------------------------------
int goodG2B_145()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_add_64b_goodG2BSink(&v1);
}

//----- (000000000041AB28) ----------------------------------------------------
int goodB2G_139()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_add_64b_goodB2GSink(&v2);
}

//----- (000000000041AB73) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_64_good()
{
  goodG2B_145();
  return goodB2G_139();
}

//----- (000000000041AB8D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_22_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_add_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1F0: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_badGlobal;

//----- (000000000041ABD0) ----------------------------------------------------
int goodB2G1_80()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1F4: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G1Global;

//----- (000000000041AC13) ----------------------------------------------------
int goodB2G2_80()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F1F8: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodB2G2Global;

//----- (000000000041AC56) ----------------------------------------------------
int goodG2B_146()
{
  CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BSink(2);
}
// 65F1FC: using guessed type int CWE190_Integer_Overflow__char_fscanf_add_22_goodG2BGlobal;

//----- (000000000041AC7D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_22_good()
{
  goodB2G1_80();
  goodB2G2_80();
  return goodG2B_146();
}

//----- (000000000041ACA1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041ACCD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041ACF9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041AD41) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_32_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  result = (unsigned __int8)*v6;
  v4 = *v6;
  if ( v4 > 0 )
  {
    v3 = 2 * v4;
    result = printHexCharLine(2 * v4);
  }
  return result;
}

//----- (000000000041ADC8) ----------------------------------------------------
int goodG2B_147()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Fh] [rbp-11h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 2;
  v1 = 2;
  return printHexCharLine(4);
}

//----- (000000000041AE22) ----------------------------------------------------
int goodB2G_140()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  result = (unsigned __int8)*v6;
  v4 = *v6;
  if ( v4 > 0 )
  {
    if ( v4 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v3 = 2 * v4;
      result = printHexCharLine(2 * v4);
    }
  }
  return result;
}

//----- (000000000041AEBB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_32_good()
{
  goodG2B_147();
  return goodB2G_140();
}

//----- (000000000041AED5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_31_bad()
{
  return printHexCharLine(254);
}

//----- (000000000041AF0F) ----------------------------------------------------
int goodG2B_148()
{
  return printHexCharLine(4);
}

//----- (000000000041AF49) ----------------------------------------------------
int goodB2G_141()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041AF95) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_31_good()
{
  goodG2B_148();
  return goodB2G_141();
}

//----- (000000000041AFAF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041AFE6) ----------------------------------------------------
int goodG2B_149()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_add_63b_goodG2BSink(&v1);
}

//----- (000000000041B004) ----------------------------------------------------
int goodB2G_142()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B03B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_63_good()
{
  goodG2B_149();
  return goodB2G_142();
}

//----- (000000000041B055) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041B084) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041B0B3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041B0F4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_badSink(_QWORD *a1)
{
  return printLongLongLine(*a1 + 1LL);
}

//----- (000000000041B125) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodG2BSink(_QWORD *a1)
{
  return printLongLongLine(*a1 + 1LL);
}

//----- (000000000041B156) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_63b_goodB2GSink(_QWORD *a1)
{
  int result; // eax

  if ( *a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(*a1 + 1LL);
  return result;
}

//----- (000000000041B1A3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_52_bad()
{
  return CWE190_Integer_Overflow__char_max_square_52b_badSink(127);
}

//----- (000000000041B1C0) ----------------------------------------------------
int goodG2B_150()
{
  return CWE190_Integer_Overflow__char_max_square_52b_goodG2BSink(2);
}

//----- (000000000041B1DD) ----------------------------------------------------
int goodB2G_143()
{
  return CWE190_Integer_Overflow__char_max_square_52b_goodB2GSink(127);
}

//----- (000000000041B1FA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_52_good()
{
  goodG2B_150();
  return goodB2G_143();
}

//----- (000000000041B214) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000041B23C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000041B264) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54e_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000041B2AA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_66_bad()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_square_66b_badSink((__int64)&v2);
}

//----- (000000000041B2FC) ----------------------------------------------------
int goodG2B_151()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_rand_square_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041B321) ----------------------------------------------------
int goodB2G_144()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_square_66b_goodB2GSink((__int64)&v2);
}

//----- (000000000041B373) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_66_good()
{
  goodG2B_151();
  return goodB2G_144();
}

//----- (000000000041B38D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_22_bad()
{
  CWE190_Integer_Overflow__char_max_add_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_max_add_22_badSink(127);
}
// 65F200: using guessed type int CWE190_Integer_Overflow__char_max_add_22_badGlobal;

//----- (000000000041B3B4) ----------------------------------------------------
int goodB2G1_81()
{
  CWE190_Integer_Overflow__char_max_add_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_max_add_22_goodB2G1Sink(127);
}
// 65F204: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodB2G1Global;

//----- (000000000041B3DB) ----------------------------------------------------
int goodB2G2_81()
{
  CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_max_add_22_goodB2G2Sink(127);
}
// 65F208: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodB2G2Global;

//----- (000000000041B402) ----------------------------------------------------
int goodG2B_152()
{
  CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_max_add_22_goodG2BSink(2);
}
// 65F20C: using guessed type int CWE190_Integer_Overflow__char_max_add_22_goodG2BGlobal;

//----- (000000000041B429) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_22_good()
{
  goodB2G1_81();
  goodB2G2_81();
  return goodG2B_152();
}

//----- (000000000041B44D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_16_bad()
{
  return printHexCharLine(1);
}

//----- (000000000041B47A) ----------------------------------------------------
int goodB2G_145()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041B4C5) ----------------------------------------------------
int goodG2B_153()
{
  return printHexCharLine(4);
}

//----- (000000000041B4F2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_16_good()
{
  goodB2G_145();
  return goodG2B_153();
}

//----- (000000000041B50C) ----------------------------------------------------
__int64 __fastcall badSource_7(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B53B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_42_bad()
{
  __int64 v0; // rax

  v0 = badSource_7(0LL);
  return printLongLongLine(v0 + 1);
}

//----- (000000000041B575) ----------------------------------------------------
__int64 goodG2BSource_7()
{
  return 2LL;
}

//----- (000000000041B58B) ----------------------------------------------------
int goodG2B_154()
{
  __int64 v0; // rax

  v0 = goodG2BSource_7();
  return printLongLongLine(v0 + 1);
}

//----- (000000000041B5C5) ----------------------------------------------------
__int64 __fastcall goodB2GSource_7(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B5F4) ----------------------------------------------------
int goodB2G_146()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = goodB2GSource_7(0LL);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(v1 + 1);
  return result;
}

//----- (000000000041B64A) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_42_good()
{
  goodB2G_146();
  return goodG2B_154();
}

//----- (000000000041B664) ----------------------------------------------------
int __fastcall badSink_21(char a1)
{
  int result; // eax

  result = badStatic_1;
  if ( badStatic_1 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F210: using guessed type int badStatic_1;

//----- (000000000041B697) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_21_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  badStatic_1 = 1;
  return badSink_21(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F210: using guessed type int badStatic_1;

//----- (000000000041B6DA) ----------------------------------------------------
int __fastcall goodB2G1Sink_1(char a1)
{
  int result; // eax

  result = goodB2G1Static_1;
  if ( goodB2G1Static_1 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F214: using guessed type int goodB2G1Static_1;

//----- (000000000041B72B) ----------------------------------------------------
int goodB2G1_82()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G1Static_1 = 0;
  return goodB2G1Sink_1(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F214: using guessed type int goodB2G1Static_1;

//----- (000000000041B76E) ----------------------------------------------------
int __fastcall goodB2G2Sink_1(char a1)
{
  int result; // eax

  result = goodB2G2Static_1;
  if ( goodB2G2Static_1 && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F218: using guessed type int goodB2G2Static_1;

//----- (000000000041B7B3) ----------------------------------------------------
int goodB2G2_82()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G2Static_1 = 1;
  return goodB2G2Sink_1(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F218: using guessed type int goodB2G2Static_1;

//----- (000000000041B7F6) ----------------------------------------------------
int __fastcall goodG2BSink_21(char a1)
{
  int result; // eax

  result = goodG2BStatic_1;
  if ( goodG2BStatic_1 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F21C: using guessed type int goodG2BStatic_1;

//----- (000000000041B829) ----------------------------------------------------
int goodG2B_155()
{
  goodG2BStatic_1 = 1;
  return goodG2BSink_21(2);
}
// 65F21C: using guessed type int goodG2BStatic_1;

//----- (000000000041B850) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_21_good()
{
  goodB2G1_82();
  goodB2G2_82();
  return goodG2B_155();
}

//----- (000000000041B874) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_03_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B8BB) ----------------------------------------------------
int goodB2G1_83()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B916) ----------------------------------------------------
int goodB2G2_83()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041B971) ----------------------------------------------------
int goodG2B1_74()
{
  return printHexCharLine(4);
}

//----- (000000000041B99D) ----------------------------------------------------
int goodG2B2_74()
{
  return printHexCharLine(4);
}

//----- (000000000041B9C9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_03_good()
{
  goodB2G1_83();
  goodB2G2_83();
  goodG2B1_74();
  return goodG2B2_74();
}

//----- (000000000041B9F7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_13_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041BA61) ----------------------------------------------------
int goodB2G1_84()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041BAE9) ----------------------------------------------------
int goodB2G2_84()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041BB65) ----------------------------------------------------
int goodG2B1_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041BBAE) ----------------------------------------------------
int goodG2B2_75()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041BBEB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_13_good()
{
  goodB2G1_84();
  goodB2G2_84();
  goodG2B1_75();
  return goodG2B2_75();
}

//----- (000000000041BC19) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_badSink(a1);
}

//----- (000000000041BC33) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodG2BSink(a1);
}

//----- (000000000041BC4D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53d_goodB2GSink(a1);
}

//----- (000000000041BC67) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_04_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 1;
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000041BCD2) ----------------------------------------------------
int goodB2G1_85()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 0;
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041BD5B) ----------------------------------------------------
int goodB2G2_85()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  result = 1;
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041BDD8) ----------------------------------------------------
int goodG2B1_76()
{
  return printHexCharLine(4);
}

//----- (000000000041BE22) ----------------------------------------------------
int goodG2B2_76()
{
  return printHexCharLine(4);
}

//----- (000000000041BE60) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_04_good()
{
  goodB2G1_85();
  goodB2G2_85();
  goodG2B1_76();
  return goodG2B2_76();
}

//----- (000000000041BE8E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_31_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000041BEF5) ----------------------------------------------------
int goodG2B_156()
{
  return printHexCharLine(4);
}

//----- (000000000041BF2F) ----------------------------------------------------
int goodB2G_147()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  result = (unsigned __int8)result;
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000041BFA8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_31_good()
{
  goodG2B_156();
  return goodB2G_147();
}

//----- (000000000041BFC2) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C006) ----------------------------------------------------
int goodG2B_157()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodG2BSink(2LL);
}

//----- (000000000041C035) ----------------------------------------------------
__int64 goodB2G_148()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__int64_t_fscanf_multiply_65b_goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C079) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_65_good()
{
  goodG2B_157();
  return goodB2G_148();
}

//----- (000000000041C093) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54e_badSink(a1);
}

//----- (000000000041C0AD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54e_goodG2BSink(a1);
}

//----- (000000000041C0C7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54e_goodB2GSink(a1);
}

//----- (000000000041C0E1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_18_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C12A) ----------------------------------------------------
int goodB2G_149()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C187) ----------------------------------------------------
int goodG2B_158()
{
  return printHexCharLine(4);
}

//----- (000000000041C1B5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_18_good()
{
  goodB2G_149();
  return goodG2B_158();
}

//----- (000000000041C1CF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041C1F8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041C221) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041C25C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_13_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C2B6) ----------------------------------------------------
int goodB2G1_86()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C340) ----------------------------------------------------
int goodB2G2_86()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442568: using guessed type int GLOBAL_CONST_FIVE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C3BE) ----------------------------------------------------
int goodG2B1_77()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041C40B) ----------------------------------------------------
int goodG2B2_77()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041C44C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_13_good()
{
  goodB2G1_86();
  goodB2G2_86();
  goodG2B1_77();
  return goodG2B2_77();
}

//----- (000000000041C47A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_14_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C4D4) ----------------------------------------------------
int goodB2G1_87()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C55E) ----------------------------------------------------
int goodB2G2_87()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C5DC) ----------------------------------------------------
int goodG2B1_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041C629) ----------------------------------------------------
int goodG2B2_78()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000041C66A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_14_good()
{
  goodB2G1_87();
  goodB2G2_87();
  goodG2B1_78();
  return goodG2B2_78();
}

//----- (000000000041C698) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char *v3; // [rsp+10h] [rbp-10h]
  char *v4; // [rsp+18h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v4 = v1;
  return printHexCharLine(*v3 * *v3);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C70A) ----------------------------------------------------
int goodG2B_159()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 4;
  return printHexCharLine(4);
}

//----- (000000000041C763) ----------------------------------------------------
int goodB2G_150()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v2;
  v5 = &v2;
  v2 = 32;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  *v6 = v1;
  v4 = *v5;
  if ( v4 < -11 || v4 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v3 = v4 * v4;
  return printHexCharLine(v4 * v4);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041C7F3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_32_good()
{
  goodG2B_159();
  return goodB2G_150();
}

//----- (000000000041C80D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000041C83F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000041C871) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (000000000041C8B5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_51_bad()
{
  return CWE190_Integer_Overflow__char_max_square_51b_badSink(127);
}

//----- (000000000041C8D2) ----------------------------------------------------
int goodG2B_160()
{
  return CWE190_Integer_Overflow__char_max_square_51b_goodG2BSink(2);
}

//----- (000000000041C8EF) ----------------------------------------------------
int goodB2G_151()
{
  return CWE190_Integer_Overflow__char_max_square_51b_goodB2GSink(127);
}

//----- (000000000041C90C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_51_good()
{
  goodG2B_160();
  return goodB2G_151();
}

//----- (000000000041C926) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_64_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_64b_badSink(&v2);
}

//----- (000000000041C971) ----------------------------------------------------
int goodG2B_161()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_multiply_64b_goodG2BSink(&v1);
}

//----- (000000000041C98F) ----------------------------------------------------
int goodB2G_152()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_64b_goodB2GSink(&v2);
}

//----- (000000000041C9DA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_64_good()
{
  goodG2B_161();
  return goodB2G_152();
}

//----- (000000000041C9F4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_13_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CA31) ----------------------------------------------------
int goodB2G1_88()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CA8C) ----------------------------------------------------
int goodB2G2_88()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CADB) ----------------------------------------------------
int goodG2B1_79()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CB24) ----------------------------------------------------
int goodG2B2_79()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CB61) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_13_good()
{
  goodB2G1_88();
  goodB2G2_88();
  goodG2B1_79();
  return goodG2B2_79();
}

//----- (000000000041CB8F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53d_badSink(a1);
}

//----- (000000000041CBA9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodG2BSink(a1);
}

//----- (000000000041CBC3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodB2GSink(a1);
}

//----- (000000000041CBDD) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_61b_badSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041CC21) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000041CC34) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_61b_goodB2GSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000041CC78) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_17_bad()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041CCDE) ----------------------------------------------------
int goodB2G_153()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041CD58) ----------------------------------------------------
int goodG2B_162()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000041CDA5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_17_good()
{
  goodB2G_153();
  return goodG2B_162();
}

//----- (000000000041CDBF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_12_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%c", &v1);
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v3 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  else
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041CE5A) ----------------------------------------------------
int goodB2G_154()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v3 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  else
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041CF22) ----------------------------------------------------
int goodG2B_163()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (000000000041CF8C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_12_good()
{
  goodB2G_154();
  return goodG2B_163();
}

//----- (000000000041CFA6) ----------------------------------------------------
int __fastcall badSink_22(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000041CFCC) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_41_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return badSink_22(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D007) ----------------------------------------------------
int __fastcall goodG2BSink_22(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (000000000041D02D) ----------------------------------------------------
int goodG2B_164()
{
  return goodG2BSink_22(2LL);
}

//----- (000000000041D053) ----------------------------------------------------
int __fastcall goodB2GSink_19(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (000000000041D095) ----------------------------------------------------
int goodB2G_155()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return goodB2GSink_19(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D0D0) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_41_good()
{
  goodB2G_155();
  return goodG2B_164();
}

//----- (000000000041D0EA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000041D118) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000041D146) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000041D192) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2F0: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal;

//----- (000000000041D1C5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global;
  if ( CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2F4: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global;

//----- (000000000041D216) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2F8: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global;

//----- (000000000041D25B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2FC: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal;

//----- (000000000041D28E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D2F1) ----------------------------------------------------
int goodB2G1_89()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D37F) ----------------------------------------------------
int goodB2G2_89()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D401) ----------------------------------------------------
int goodG2B1_80()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041D459) ----------------------------------------------------
int goodG2B2_80()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2LL;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041D4A5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_09_good()
{
  goodB2G1_89();
  goodB2G2_89();
  goodG2B1_80();
  return goodG2B2_80();
}

//----- (000000000041D4D3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_68b_badSink()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_square_68_badData * CWE190_Integer_Overflow__char_max_square_68_badData);
}
// 65F351: using guessed type char CWE190_Integer_Overflow__char_max_square_68_badData;

//----- (000000000041D500) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_68b_goodG2BSink()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_max_square_68_goodG2BData
         * CWE190_Integer_Overflow__char_max_square_68_goodG2BData);
}
// 65F353: using guessed type char CWE190_Integer_Overflow__char_max_square_68_goodG2BData;

//----- (000000000041D52D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_max_square_68_goodB2GData < -11
    || CWE190_Integer_Overflow__char_max_square_68_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_max_square_68_goodB2GData
             * CWE190_Integer_Overflow__char_max_square_68_goodB2GData);
  }
  return result;
}
// 65F352: using guessed type char CWE190_Integer_Overflow__char_max_square_68_goodB2GData;

//----- (000000000041D578) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000041D59C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000041D5C0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000041D5F6) ----------------------------------------------------
int badSink_23()
{
  return printHexCharLine(CWE190_Integer_Overflow__char_max_square_45_badData * CWE190_Integer_Overflow__char_max_square_45_badData);
}
// 65F220: using guessed type char CWE190_Integer_Overflow__char_max_square_45_badData;

//----- (000000000041D623) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_45_bad()
{
  CWE190_Integer_Overflow__char_max_square_45_badData = 127;
  return badSink_23();
}
// 65F220: using guessed type char CWE190_Integer_Overflow__char_max_square_45_badData;

//----- (000000000041D649) ----------------------------------------------------
int goodG2BSink_23()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_max_square_45_goodG2BData
         * CWE190_Integer_Overflow__char_max_square_45_goodG2BData);
}
// 65F221: using guessed type char CWE190_Integer_Overflow__char_max_square_45_goodG2BData;

//----- (000000000041D676) ----------------------------------------------------
int goodG2B_165()
{
  CWE190_Integer_Overflow__char_max_square_45_goodG2BData = 2;
  return goodG2BSink_23();
}
// 65F221: using guessed type char CWE190_Integer_Overflow__char_max_square_45_goodG2BData;

//----- (000000000041D69C) ----------------------------------------------------
int goodB2GSink_20()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_max_square_45_goodB2GData < -11
    || CWE190_Integer_Overflow__char_max_square_45_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_max_square_45_goodB2GData
             * CWE190_Integer_Overflow__char_max_square_45_goodB2GData);
  }
  return result;
}
// 65F222: using guessed type char CWE190_Integer_Overflow__char_max_square_45_goodB2GData;

//----- (000000000041D6E7) ----------------------------------------------------
int goodB2G_156()
{
  CWE190_Integer_Overflow__char_max_square_45_goodB2GData = 127;
  return goodB2GSink_20();
}
// 65F222: using guessed type char CWE190_Integer_Overflow__char_max_square_45_goodB2GData;

//----- (000000000041D70D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_45_good()
{
  goodG2B_165();
  return goodB2G_156();
}

//----- (000000000041D727) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad()
{
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v3 = v1;
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D77E) ----------------------------------------------------
int goodG2B_166()
{
  return printLongLongLine(3LL);
}

//----- (000000000041D7C0) ----------------------------------------------------
int goodB2G_157()
{
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v3 = v1;
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v3 + 1;
  return printLongLongLine(v3 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D833) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_34_good()
{
  goodG2B_166();
  return goodB2G_157();
}

//----- (000000000041D84D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_09_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D8A5) ----------------------------------------------------
int goodB2G1_90()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D92D) ----------------------------------------------------
int goodB2G2_90()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041D9A9) ----------------------------------------------------
int goodG2B1_81()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041D9F4) ----------------------------------------------------
int goodG2B2_81()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041DA33) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_09_good()
{
  goodB2G1_90();
  goodB2G2_90();
  goodG2B1_81();
  return goodG2B2_81();
}

//----- (000000000041DA61) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_04_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FB18, &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041DAB7) ----------------------------------------------------
int goodB2G1_91()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FB18, &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041DB3D) ----------------------------------------------------
int goodB2G2_91()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_43FB18, &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041DBB7) ----------------------------------------------------
int goodG2B1_82()
{
  return printHexCharLine(4);
}

//----- (000000000041DC00) ----------------------------------------------------
int goodG2B2_82()
{
  return printHexCharLine(4);
}

//----- (000000000041DC3D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_04_good()
{
  goodB2G1_91();
  goodB2G2_91();
  goodG2B1_82();
  return goodG2B2_82();
}

//----- (000000000041DC6B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_badSink(a1);
}

//----- (000000000041DC85) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodG2BSink(a1);
}

//----- (000000000041DC9F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53c_goodB2GSink(a1);
}

//----- (000000000041DCB9) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_add_61b_badSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041DCE9) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_add_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000041DCFC) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_add_61b_goodB2GSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041DD2C) ----------------------------------------------------
int __fastcall badSink_24(char a1)
{
  int result; // eax

  result = badStatic_2;
  if ( badStatic_2 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F224: using guessed type int badStatic_2;

//----- (000000000041DD5A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_21_bad()
{
  badStatic_2 = 1;
  return badSink_24(127);
}
// 65F224: using guessed type int badStatic_2;

//----- (000000000041DD81) ----------------------------------------------------
int __fastcall goodB2G1Sink_2(char a1)
{
  if ( goodB2G1Static_2 )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F228: using guessed type int goodB2G1Static_2;

//----- (000000000041DDCD) ----------------------------------------------------
int goodB2G1_92()
{
  goodB2G1Static_2 = 0;
  return goodB2G1Sink_2(127);
}
// 65F228: using guessed type int goodB2G1Static_2;

//----- (000000000041DDF4) ----------------------------------------------------
int __fastcall goodB2G2Sink_2(char a1)
{
  int result; // eax

  result = goodB2G2Static_2;
  if ( goodB2G2Static_2 )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F22C: using guessed type int goodB2G2Static_2;

//----- (000000000041DE34) ----------------------------------------------------
int goodB2G2_92()
{
  goodB2G2Static_2 = 1;
  return goodB2G2Sink_2(127);
}
// 65F22C: using guessed type int goodB2G2Static_2;

//----- (000000000041DE5B) ----------------------------------------------------
int __fastcall goodG2BSink_24(char a1)
{
  int result; // eax

  result = goodG2BStatic_2;
  if ( goodG2BStatic_2 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F230: using guessed type int goodG2BStatic_2;

//----- (000000000041DE89) ----------------------------------------------------
int goodG2B_167()
{
  goodG2BStatic_2 = 1;
  return goodG2BSink_24(2);
}
// 65F230: using guessed type int goodG2BStatic_2;

//----- (000000000041DEB0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_21_good()
{
  goodB2G1_92();
  goodB2G2_92();
  return goodG2B_167();
}

//----- (000000000041DED4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_03_bad()
{
  return printHexCharLine(-128);
}

//----- (000000000041DEFB) ----------------------------------------------------
int goodB2G1_93()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041DF34) ----------------------------------------------------
int goodB2G2_93()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041DF6D) ----------------------------------------------------
int goodG2B1_83()
{
  return printHexCharLine(3);
}

//----- (000000000041DF94) ----------------------------------------------------
int goodG2B2_83()
{
  return printHexCharLine(3);
}

//----- (000000000041DFBB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_03_good()
{
  goodB2G1_93();
  goodB2G2_93();
  goodG2B1_83();
  return goodG2B2_83();
}

//----- (000000000041DFE9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041E015) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000041E041) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000041E089) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_11_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E0EC) ----------------------------------------------------
int goodB2G1_94()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E16F) ----------------------------------------------------
int goodB2G2_94()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E1E6) ----------------------------------------------------
int goodG2B1_84()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (000000000041E23A) ----------------------------------------------------
int goodG2B2_84()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (000000000041E282) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_11_good()
{
  goodB2G1_94();
  goodB2G2_94();
  goodG2B1_84();
  return goodG2B2_84();
}

//----- (000000000041E2B0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_02_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E2F7) ----------------------------------------------------
int goodB2G1_95()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E352) ----------------------------------------------------
int goodB2G2_95()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E3AD) ----------------------------------------------------
int goodG2B1_85()
{
  return printHexCharLine(4);
}

//----- (000000000041E3D9) ----------------------------------------------------
int goodG2B2_85()
{
  return printHexCharLine(4);
}

//----- (000000000041E405) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_02_good()
{
  goodB2G1_95();
  goodB2G2_95();
  goodG2B1_85();
  return goodG2B2_85();
}

//----- (000000000041E433) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_67_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E470) ----------------------------------------------------
int goodG2B_168()
{
  return CWE190_Integer_Overflow__char_fscanf_square_67b_goodG2BSink(2);
}

//----- (000000000041E494) ----------------------------------------------------
int goodB2G_158()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E4D1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_67_good()
{
  goodG2B_168();
  return goodB2G_158();
}

//----- (000000000041E4EB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_18_bad()
{
  return printHexCharLine(-128);
}

//----- (000000000041E514) ----------------------------------------------------
int goodB2G_159()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000041E54F) ----------------------------------------------------
int goodG2B_169()
{
  return printHexCharLine(3);
}

//----- (000000000041E578) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_18_good()
{
  goodB2G_159();
  return goodG2B_169();
}

//----- (000000000041E592) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54e_badSink(a1);
}

//----- (000000000041E5AC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54e_goodG2BSink(a1);
}

//----- (000000000041E5C6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54e_goodB2GSink(a1);
}

//----- (000000000041E5E0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (000000000041E60D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (000000000041E63A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (000000000041E679) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F244: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal;

//----- (000000000041E6AB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F248: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Global;

//----- (000000000041E707) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F24C: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global;

//----- (000000000041E757) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F250: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal;

//----- (000000000041E789) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54e_badSink(a1);
}

//----- (000000000041E7A3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54e_goodG2BSink(a1);
}

//----- (000000000041E7BD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54e_goodB2GSink(a1);
}

//----- (000000000041E7D7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000041E810) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000041E849) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000041E8A0) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_66_bad()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E8E3) ----------------------------------------------------
int goodG2B_170()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 2LL;
  v2 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041E911) ----------------------------------------------------
int goodB2G_160()
{
  char v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+10h] [rbp-20h]
  __int64 v3; // [rsp+28h] [rbp-8h]

  v3 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041E954) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_66_good()
{
  goodG2B_170();
  return goodB2G_160();
}

//----- (000000000041E96E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_fscanf_add_61b_badSource(0x20u);
  return printHexCharLine(v0 + 1);
}

//----- (000000000041E99F) ----------------------------------------------------
int goodG2B_171()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_fscanf_add_61b_goodG2BSource();
  return printHexCharLine(v0 + 1);
}

//----- (000000000041E9D0) ----------------------------------------------------
int goodB2G_161()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_fscanf_add_61b_goodB2GSource(0x20u);
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000041EA13) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_61_good()
{
  goodG2B_171();
  return goodB2G_161();
}

//----- (000000000041EA2D) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041EA68) ----------------------------------------------------
int goodG2B_172()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodG2BSink(2LL);
}

//----- (000000000041EA8E) ----------------------------------------------------
int goodB2G_162()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041EAC9) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_53_good()
{
  goodG2B_172();
  return goodB2G_162();
}

//----- (000000000041EAE3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_01_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041EB2A) ----------------------------------------------------
int goodG2B_173()
{
  return printHexCharLine(4);
}

//----- (000000000041EB56) ----------------------------------------------------
int goodB2G_163()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041EBB1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_01_good()
{
  goodG2B_173();
  return goodB2G_163();
}

//----- (000000000041EBCB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041EBF4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000041EC1D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000041EC58) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_07_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0FC: using guessed type int staticFive_4;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041ECAE) ----------------------------------------------------
int goodB2G1_96()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFive_4 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0FC: using guessed type int staticFive_4;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041ED24) ----------------------------------------------------
int goodB2G2_96()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F0FC: using guessed type int staticFive_4;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041ED8E) ----------------------------------------------------
int goodG2B1_86()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0FC: using guessed type int staticFive_4;

//----- (000000000041EDD7) ----------------------------------------------------
int goodG2B2_86()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_4 == 5 )
    v1 = 2;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F0FC: using guessed type int staticFive_4;

//----- (000000000041EE14) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_07_good()
{
  goodB2G1_96();
  goodB2G2_96();
  goodG2B1_86();
  return goodG2B2_86();
}

//----- (000000000041EE42) ----------------------------------------------------
int __fastcall badSink_25(char a1)
{
  int result; // eax

  result = badStatic_3;
  if ( badStatic_3 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F234: using guessed type int badStatic_3;

//----- (000000000041EE70) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_21_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  badStatic_3 = 1;
  return badSink_25(v0);
}
// 65F234: using guessed type int badStatic_3;

//----- (000000000041EEC4) ----------------------------------------------------
int __fastcall goodB2G1Sink_3(char a1)
{
  if ( goodB2G1Static_3 )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F238: using guessed type int goodB2G1Static_3;

//----- (000000000041EF10) ----------------------------------------------------
int goodB2G1_97()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G1Static_3 = 0;
  return goodB2G1Sink_3(v0);
}
// 65F238: using guessed type int goodB2G1Static_3;

//----- (000000000041EF64) ----------------------------------------------------
int __fastcall goodB2G2Sink_3(char a1)
{
  int result; // eax

  result = goodB2G2Static_3;
  if ( goodB2G2Static_3 )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F23C: using guessed type int goodB2G2Static_3;

//----- (000000000041EFA4) ----------------------------------------------------
int goodB2G2_97()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G2Static_3 = 1;
  return goodB2G2Sink_3(v0);
}
// 65F23C: using guessed type int goodB2G2Static_3;

//----- (000000000041EFF8) ----------------------------------------------------
int __fastcall goodG2BSink_25(char a1)
{
  int result; // eax

  result = goodG2BStatic_3;
  if ( goodG2BStatic_3 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F240: using guessed type int goodG2BStatic_3;

//----- (000000000041F026) ----------------------------------------------------
int goodG2B_174()
{
  goodG2BStatic_3 = 1;
  return goodG2BSink_25(2);
}
// 65F240: using guessed type int goodG2BStatic_3;

//----- (000000000041F04D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_21_good()
{
  goodB2G1_97();
  goodB2G2_97();
  return goodG2B_174();
}

//----- (000000000041F071) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  else
    v1 = 2LL;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v3 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  else
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F127) ----------------------------------------------------
int goodB2G_164()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v3 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  else
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F211) ----------------------------------------------------
int goodG2B_175()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLongLongLine(4LL);
}

//----- (000000000041F28F) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_12_good()
{
  goodB2G_164();
  return goodG2B_175();
}

//----- (000000000041F2A9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_22_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_square_22_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F244: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_badGlobal;

//----- (000000000041F2EC) ----------------------------------------------------
int goodB2G1_98()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F248: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Global;

//----- (000000000041F32F) ----------------------------------------------------
int goodB2G2_98()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Sink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F24C: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global;

//----- (000000000041F372) ----------------------------------------------------
int goodG2B_176()
{
  CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BSink(2);
}
// 65F250: using guessed type int CWE190_Integer_Overflow__char_fscanf_square_22_goodG2BGlobal;

//----- (000000000041F399) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_22_good()
{
  goodB2G1_98();
  goodB2G2_98();
  return goodG2B_176();
}

//----- (000000000041F3BD) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (000000000041F3C8) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (000000000041F3D3) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_3();
  if ( result )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F43E) ----------------------------------------------------
int goodB2G1_99()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( (unsigned int)staticReturnsFalse_3() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F4D4) ----------------------------------------------------
int goodB2G2_99()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticReturnsTrue_3();
  if ( result )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F55E) ----------------------------------------------------
int goodG2B1_87()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F5BE) ----------------------------------------------------
int goodG2B2_87()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = 2LL;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}

//----- (000000000041F612) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_08_good()
{
  goodB2G1_99();
  goodB2G2_99();
  goodG2B1_87();
  return goodG2B2_87();
}

//----- (000000000041F640) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_11_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000041F683) ----------------------------------------------------
int goodB2G1_100()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}

//----- (000000000041F6E4) ----------------------------------------------------
int goodB2G2_100()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}

//----- (000000000041F739) ----------------------------------------------------
int goodG2B1_88()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000041F788) ----------------------------------------------------
int goodG2B2_88()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000041F7CB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_11_good()
{
  goodB2G1_100();
  goodB2G2_100();
  goodG2B1_88();
  return goodG2B2_88();
}

//----- (000000000041F7F9) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (000000000041F804) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (000000000041F80F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_08_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_4();
  if ( result )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F86F) ----------------------------------------------------
int goodB2G1_101()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)staticReturnsFalse_4() )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F8FF) ----------------------------------------------------
int goodB2G2_101()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_4();
  if ( result )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000041F983) ----------------------------------------------------
int goodG2B1_89()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_4() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_4();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000041F9D6) ----------------------------------------------------
int goodG2B2_89()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = 2;
  result = staticReturnsTrue_4();
  if ( result )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000041FA1D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_08_good()
{
  goodB2G1_101();
  goodB2G2_101();
  goodG2B1_89();
  return goodG2B2_89();
}

//----- (000000000041FA4B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_53_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_53b_badSink(v0);
}

//----- (000000000041FA95) ----------------------------------------------------
int goodG2B_177()
{
  return CWE190_Integer_Overflow__char_rand_square_53b_goodG2BSink(2);
}

//----- (000000000041FAB2) ----------------------------------------------------
int goodB2G_165()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_53b_goodB2GSink(v0);
}

//----- (000000000041FAFC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_53_good()
{
  goodG2B_177();
  return goodB2G_165();
}

//----- (000000000041FB16) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_badSink(a1);
}

//----- (000000000041FB30) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodG2BSink(a1);
}

//----- (000000000041FB4A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52c_goodB2GSink(a1);
}

//----- (000000000041FB64) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_09_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041FBBF) ----------------------------------------------------
int goodB2G1_102()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041FC3A) ----------------------------------------------------
int goodB2G2_102()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 65F128: using guessed type __int64 stdin;

//----- (000000000041FCA9) ----------------------------------------------------
int goodG2B1_90()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041FCF5) ----------------------------------------------------
int goodG2B2_90()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041FD35) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_09_good()
{
  goodB2G1_102();
  goodB2G2_102();
  goodG2B1_90();
  return goodG2B2_90();
}

//----- (000000000041FD63) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54e_badSink(a1);
}

//----- (000000000041FD7D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54e_goodG2BSink(a1);
}

//----- (000000000041FD97) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_square_54e_goodB2GSink(a1);
}

//----- (000000000041FDB1) ----------------------------------------------------
int __fastcall badSink_26(char a1)
{
  int result; // eax

  result = badStatic_4;
  if ( badStatic_4 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F254: using guessed type int badStatic_4;

//----- (000000000041FDE4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_21_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  badStatic_4 = 1;
  return badSink_26(v0);
}
// 65F254: using guessed type int badStatic_4;

//----- (000000000041FE38) ----------------------------------------------------
int __fastcall goodB2G1Sink_4(char a1)
{
  int result; // eax

  result = goodB2G1Static_4;
  if ( goodB2G1Static_4 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F258: using guessed type int goodB2G1Static_4;

//----- (000000000041FE89) ----------------------------------------------------
int goodB2G1_103()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G1Static_4 = 0;
  return goodB2G1Sink_4(v0);
}
// 65F258: using guessed type int goodB2G1Static_4;

//----- (000000000041FEDD) ----------------------------------------------------
int __fastcall goodB2G2Sink_4(char a1)
{
  int result; // eax

  result = goodB2G2Static_4;
  if ( goodB2G2Static_4 && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F25C: using guessed type int goodB2G2Static_4;

//----- (000000000041FF22) ----------------------------------------------------
int goodB2G2_103()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G2Static_4 = 1;
  return goodB2G2Sink_4(v0);
}
// 65F25C: using guessed type int goodB2G2Static_4;

//----- (000000000041FF76) ----------------------------------------------------
int __fastcall goodG2BSink_26(char a1)
{
  int result; // eax

  result = goodG2BStatic_4;
  if ( goodG2BStatic_4 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F260: using guessed type int goodG2BStatic_4;

//----- (000000000041FFA9) ----------------------------------------------------
int goodG2B_178()
{
  goodG2BStatic_4 = 1;
  return goodG2BSink_26(2);
}
// 65F260: using guessed type int goodG2BStatic_4;

//----- (000000000041FFD0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_21_good()
{
  goodB2G1_103();
  goodB2G2_103();
  return goodG2B_178();
}

//----- (000000000041FFF4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_03_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042004D) ----------------------------------------------------
int goodB2G1_104()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (00000000004200B8) ----------------------------------------------------
int goodB2G2_104()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000420123) ----------------------------------------------------
int goodG2B1_91()
{
  return printHexCharLine(4);
}

//----- (000000000042014F) ----------------------------------------------------
int goodG2B2_91()
{
  return printHexCharLine(4);
}

//----- (000000000042017B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_03_good()
{
  goodB2G1_104();
  goodB2G2_104();
  goodG2B1_91();
  return goodG2B2_91();
}

//----- (00000000004201A9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_63b_badSink(&v1);
}

//----- (00000000004201C7) ----------------------------------------------------
int goodG2B_179()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_multiply_63b_goodG2BSink(&v1);
}

//----- (00000000004201E5) ----------------------------------------------------
int goodB2G_166()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_multiply_63b_goodB2GSink(&v1);
}

//----- (0000000000420203) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_63_good()
{
  goodG2B_179();
  return goodB2G_166();
}

//----- (000000000042021D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_17_bad()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (000000000042026F) ----------------------------------------------------
int goodB2G_167()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (00000000004202D3) ----------------------------------------------------
int goodG2B_180()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000420325) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_17_good()
{
  goodB2G_167();
  return goodG2B_180();
}

//----- (000000000042033F) ----------------------------------------------------
int __fastcall badSink_27(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000420368) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_44_bad()
{
  return badSink_27(127);
}

//----- (000000000042038E) ----------------------------------------------------
int __fastcall goodG2BSink_27(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004203B7) ----------------------------------------------------
int goodG2B_181()
{
  return goodG2BSink_27(2);
}

//----- (00000000004203DD) ----------------------------------------------------
int __fastcall goodB2GSink_21(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000420418) ----------------------------------------------------
int goodB2G_168()
{
  return goodB2GSink_21(127);
}

//----- (000000000042043E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_44_good()
{
  goodG2B_181();
  return goodB2G_168();
}

//----- (0000000000420458) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_multiply_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000420496) ----------------------------------------------------
int goodG2B_182()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004204BB) ----------------------------------------------------
int goodB2G_169()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_multiply_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004204F9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_66_good()
{
  goodG2B_182();
  return goodB2G_169();
}

//----- (0000000000420513) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_14_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v2 * v2);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000420581) ----------------------------------------------------
int goodB2G1_105()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v2 < -11 || v2 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 * v2);
}
// 65F120: using guessed type int globalFive;

//----- (0000000000420619) ----------------------------------------------------
int goodB2G2_105()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v2 < -11 || v2 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 * v2);
  }
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004206A5) ----------------------------------------------------
int goodG2B1_92()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (00000000004206F2) ----------------------------------------------------
int goodG2B2_92()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000420733) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_14_good()
{
  goodB2G1_105();
  goodB2G2_105();
  goodG2B1_92();
  return goodG2B2_92();
}

//----- (0000000000420761) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54d_badSink(a1);
}

//----- (000000000042077B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54d_goodG2BSink(a1);
}

//----- (0000000000420795) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_add_54d_goodB2GSink(a1);
}

//----- (00000000004207AF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_32_bad()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v2;
  v4 = &v2;
  v2 = 32;
  v3 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v3 = v0;
  *v5 = v0;
  return printHexCharLine(*v4 * *v4);
}

//----- (0000000000420835) ----------------------------------------------------
int goodG2B_183()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 4;
  return printHexCharLine(4);
}

//----- (000000000042088E) ----------------------------------------------------
int goodB2G_170()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  v4 = *v6;
  if ( v4 < -11 || v4 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v3 = v4 * v4;
  return printHexCharLine(v4 * v4);
}

//----- (0000000000420932) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_32_good()
{
  goodG2B_183();
  return goodB2G_170();
}

//----- (000000000042094C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_01_bad()
{
  return printHexCharLine(-128);
}

//----- (0000000000420973) ----------------------------------------------------
int goodG2B_184()
{
  return printHexCharLine(3);
}

//----- (000000000042099A) ----------------------------------------------------
int goodB2G_171()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004209D3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_01_good()
{
  goodG2B_184();
  return goodB2G_171();
}

//----- (00000000004209ED) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000420A11) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000420A35) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000420A6B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54c_badSink(a1);
}

//----- (0000000000420A85) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000420A9F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodB2GSink(a1);
}

//----- (0000000000420AB9) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000420AF4) ----------------------------------------------------
int goodG2B_185()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodG2BSink(2LL);
}

//----- (0000000000420B1A) ----------------------------------------------------
int goodB2G_172()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000420B55) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_52_good()
{
  goodG2B_185();
  return goodB2G_172();
}

//----- (0000000000420B6F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54c_badSink(a1);
}

//----- (0000000000420B89) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodG2BSink(a1);
}

//----- (0000000000420BA3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_54c_goodB2GSink(a1);
}

//----- (0000000000420BBD) ----------------------------------------------------
void CWE190_Integer_Overflow__char_rand_add_17_bad()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
    printHexCharLine(v1 + 1);
}

//----- (0000000000420C37) ----------------------------------------------------
void goodB2G_173()
{
  int v0; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v1 = v0;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 127 )
      printLine("data value is too large to perform arithmetic safely.");
    else
      printHexCharLine(v1 + 1);
  }
}

//----- (0000000000420CC3) ----------------------------------------------------
int goodG2B_186()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000420D10) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_17_good()
{
  goodB2G_173();
  return goodG2B_186();
}

//----- (0000000000420D2A) ----------------------------------------------------
int __fastcall badSink_28(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000420D4E) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_44_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_28)((unsigned int)(char)v0);
}

//----- (0000000000420DA1) ----------------------------------------------------
int __fastcall goodG2BSink_28(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (0000000000420DC5) ----------------------------------------------------
int goodG2B_187()
{
  return goodG2BSink_28(2);
}

//----- (0000000000420DEB) ----------------------------------------------------
int __fastcall goodB2GSink_22(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000420E21) ----------------------------------------------------
__int64 goodB2G_174()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_22)((unsigned int)(char)v0);
}

//----- (0000000000420E74) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_44_good()
{
  goodG2B_187();
  return goodB2G_174();
}

//----- (0000000000420E8E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000420EBC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000420EEA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000420F36) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000420F87) ----------------------------------------------------
int goodB2G_175()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000420FF7) ----------------------------------------------------
int goodG2B_188()
{
  return printLongLongLine(4LL);
}

//----- (0000000000421031) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_16_good()
{
  goodB2G_175();
  return goodG2B_188();
}

//----- (000000000042104B) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000421056) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (0000000000421061) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_08_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = 127;
  result = staticReturnsTrue_5();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (00000000004210A9) ----------------------------------------------------
int goodB2G1_106()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = 127;
  if ( (unsigned int)staticReturnsFalse_5() )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}

//----- (000000000042110F) ----------------------------------------------------
int goodB2G2_106()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = 127;
  result = staticReturnsTrue_5();
  if ( result )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (0000000000421169) ----------------------------------------------------
int goodG2B1_93()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_5() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_5();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (00000000004211BD) ----------------------------------------------------
int goodG2B2_93()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = 2;
  result = staticReturnsTrue_5();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000421205) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_08_good()
{
  goodB2G1_106();
  goodB2G2_106();
  goodG2B1_93();
  return goodG2B2_93();
}

//----- (0000000000421233) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000042125B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000421283) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004212C9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_52c_badSink(a1);
}

//----- (00000000004212E3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_52c_goodG2BSink(a1);
}

//----- (00000000004212FD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_52c_goodB2GSink(a1);
}

//----- (0000000000421317) ----------------------------------------------------
int __fastcall badSink_29(char a1)
{
  int result; // eax

  result = badStatic_5;
  if ( badStatic_5 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F264: using guessed type int badStatic_5;

//----- (0000000000421349) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_21_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  badStatic_5 = 1;
  return badSink_29(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F264: using guessed type int badStatic_5;

//----- (000000000042138C) ----------------------------------------------------
int __fastcall goodB2G1Sink_5(char a1)
{
  if ( goodB2G1Static_5 )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F268: using guessed type int goodB2G1Static_5;

//----- (00000000004213E8) ----------------------------------------------------
int goodB2G1_107()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G1Static_5 = 0;
  return goodB2G1Sink_5(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F268: using guessed type int goodB2G1Static_5;

//----- (000000000042142B) ----------------------------------------------------
int __fastcall goodB2G2Sink_5(char a1)
{
  int result; // eax

  result = goodB2G2Static_5;
  if ( goodB2G2Static_5 )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F26C: using guessed type int goodB2G2Static_5;

//----- (000000000042147B) ----------------------------------------------------
int goodB2G2_107()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G2Static_5 = 1;
  return goodB2G2Sink_5(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F26C: using guessed type int goodB2G2Static_5;

//----- (00000000004214BE) ----------------------------------------------------
int __fastcall goodG2BSink_29(char a1)
{
  int result; // eax

  result = goodG2BStatic_5;
  if ( goodG2BStatic_5 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F270: using guessed type int goodG2BStatic_5;

//----- (00000000004214F0) ----------------------------------------------------
int goodG2B_189()
{
  goodG2BStatic_5 = 1;
  return goodG2BSink_29(2);
}
// 65F270: using guessed type int goodG2BStatic_5;

//----- (0000000000421517) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_21_good()
{
  goodB2G1_107();
  goodB2G2_107();
  return goodG2B_189();
}

//----- (000000000042153B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_03_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042157F) ----------------------------------------------------
int goodB2G1_108()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004215E7) ----------------------------------------------------
int goodB2G2_108()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042164F) ----------------------------------------------------
int goodG2B1_94()
{
  return printHexCharLine(4);
}

//----- (000000000042167A) ----------------------------------------------------
int goodG2B2_94()
{
  return printHexCharLine(4);
}

//----- (00000000004216A5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_03_good()
{
  goodB2G1_108();
  goodB2G2_108();
  goodG2B1_94();
  return goodG2B2_94();
}

//----- (00000000004216D3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_04_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (000000000042173D) ----------------------------------------------------
int goodB2G1_109()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (00000000004217D1) ----------------------------------------------------
int goodB2G2_109()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000421859) ----------------------------------------------------
int goodG2B1_95()
{
  return printHexCharLine(4);
}

//----- (00000000004218A2) ----------------------------------------------------
int goodG2B2_95()
{
  return printHexCharLine(4);
}

//----- (00000000004218DF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_04_good()
{
  goodB2G1_109();
  goodB2G2_109();
  goodG2B1_95();
  return goodG2B2_95();
}

//----- (000000000042190D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_31_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (0000000000421973) ----------------------------------------------------
int goodG2B_190()
{
  return printHexCharLine(4);
}

//----- (00000000004219AC) ----------------------------------------------------
int goodB2G_176()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000421A30) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_31_good()
{
  goodG2B_190();
  return goodB2G_176();
}

//----- (0000000000421A4A) ----------------------------------------------------
__int64 staticReturnsTrue_6()
{
  return 1LL;
}

//----- (0000000000421A55) ----------------------------------------------------
__int64 staticReturnsFalse_6()
{
  return 0LL;
}

//----- (0000000000421A60) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_08_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 127;
  result = staticReturnsTrue_6();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000421AA3) ----------------------------------------------------
int goodB2G1_110()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 127;
  if ( (unsigned int)staticReturnsFalse_6() )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}

//----- (0000000000421B04) ----------------------------------------------------
int goodB2G2_110()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 127;
  result = staticReturnsTrue_6();
  if ( result )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}

//----- (0000000000421B59) ----------------------------------------------------
int goodG2B1_96()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_6() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_6();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000421BA8) ----------------------------------------------------
int goodG2B2_96()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_6() )
    v1 = 2;
  result = staticReturnsTrue_6();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000421BEB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_08_good()
{
  goodB2G1_110();
  goodB2G2_110();
  goodG2B1_96();
  return goodG2B2_96();
}

//----- (0000000000421C19) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_15_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000421C47) ----------------------------------------------------
int goodB2G1_111()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000421C87) ----------------------------------------------------
int goodB2G2_111()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000421CC7) ----------------------------------------------------
int goodG2B1_97()
{
  return printHexCharLine(4);
}

//----- (0000000000421CF5) ----------------------------------------------------
int goodG2B2_97()
{
  return printHexCharLine(4);
}

//----- (0000000000421D23) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_15_good()
{
  goodB2G1_111();
  goodB2G2_111();
  goodG2B1_97();
  return goodG2B2_97();
}

//----- (0000000000421D51) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_61_bad()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_61b_badSource();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000421D87) ----------------------------------------------------
int goodG2B_191()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_61b_goodG2BSource();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000421DBD) ----------------------------------------------------
int goodB2G_177()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_61b_goodB2GSource();
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000421E05) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_61_good()
{
  goodG2B_191();
  return goodB2G_177();
}

//----- (0000000000421E1F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_54_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_54b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000421E58) ----------------------------------------------------
int goodG2B_192()
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodG2BSink(2);
}

//----- (0000000000421E75) ----------------------------------------------------
int goodB2G_178()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_54b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000421EAE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_54_good()
{
  goodG2B_192();
  return goodB2G_178();
}

//----- (0000000000421EC8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_11_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v2 > 0 )
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000421F3D) ----------------------------------------------------
int goodB2G1_112()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000421FD0) ----------------------------------------------------
int goodB2G2_112()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000422057) ----------------------------------------------------
int goodG2B1_98()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (00000000004220AB) ----------------------------------------------------
int goodG2B2_98()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (00000000004220F3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_11_good()
{
  goodB2G1_112();
  goodB2G2_112();
  goodG2B1_98();
  return goodG2B2_98();
}

//----- (0000000000422121) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_02_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042217A) ----------------------------------------------------
int goodB2G1_113()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (00000000004221E5) ----------------------------------------------------
int goodB2G2_113()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (0000000000422250) ----------------------------------------------------
int goodG2B1_99()
{
  return printHexCharLine(4);
}

//----- (000000000042227C) ----------------------------------------------------
int goodG2B2_99()
{
  return printHexCharLine(4);
}

//----- (00000000004222A8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_02_good()
{
  goodB2G1_113();
  goodB2G2_113();
  goodG2B1_99();
  return goodG2B2_99();
}

//----- (00000000004222D6) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000422311) ----------------------------------------------------
int goodG2B_193()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodG2BSink(2LL);
}

//----- (0000000000422337) ----------------------------------------------------
int goodB2G_179()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000422372) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_51_good()
{
  goodG2B_193();
  return goodB2G_179();
}

//----- (000000000042238C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_badSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (00000000004223BE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_goodG2BSink(__int64 a1)
{
  return printHexCharLine(*(_BYTE *)(a1 + 2) * *(_BYTE *)(a1 + 2));
}

//----- (00000000004223F0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (0000000000422440) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54c_badSink(a1);
}

//----- (000000000042245A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54c_goodG2BSink(a1);
}

//----- (0000000000422474) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_multiply_54c_goodB2GSink(a1);
}

//----- (000000000042248E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_07_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = 127;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F100: using guessed type int staticFive_5;

//----- (00000000004224D0) ----------------------------------------------------
int goodB2G1_114()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = 127;
  if ( staticFive_5 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 65F100: using guessed type int staticFive_5;

//----- (0000000000422530) ----------------------------------------------------
int goodB2G2_114()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = 127;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 65F100: using guessed type int staticFive_5;

//----- (0000000000422584) ----------------------------------------------------
int goodG2B1_100()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F100: using guessed type int staticFive_5;

//----- (00000000004225D2) ----------------------------------------------------
int goodG2B2_100()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_5 == 5 )
    v1 = 2;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F100: using guessed type int staticFive_5;

//----- (0000000000422614) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_07_good()
{
  goodB2G1_114();
  goodB2G2_114();
  goodG2B1_100();
  return goodG2B2_100();
}

//----- (0000000000422642) ----------------------------------------------------
int __fastcall badSink_30(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042266B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_41_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return badSink_30((char)v0);
}

//----- (00000000004226B5) ----------------------------------------------------
int __fastcall goodG2BSink_30(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004226DE) ----------------------------------------------------
int goodG2B_194()
{
  return goodG2BSink_30(2);
}

//----- (00000000004226FB) ----------------------------------------------------
int __fastcall goodB2GSink_23(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000422736) ----------------------------------------------------
int goodB2G_180()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return goodB2GSink_23((char)v0);
}

//----- (0000000000422780) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_41_good()
{
  goodB2G_180();
  return goodG2B_194();
}

//----- (000000000042279A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_61_bad()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_61b_badSource(0x20u);
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (00000000004227D0) ----------------------------------------------------
int goodG2B_195()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodG2BSource();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (0000000000422806) ----------------------------------------------------
int goodB2G_181()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodB2GSource(0x20u);
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042284E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_61_good()
{
  goodG2B_195();
  return goodB2G_181();
}

//----- (0000000000422868) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54e_badSink(a1);
}

//----- (0000000000422882) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54e_goodG2BSink(a1);
}

//----- (000000000042289C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54e_goodB2GSink(a1);
}

//----- (00000000004228B6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53c_badSink(a1);
}

//----- (00000000004228D0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53c_goodG2BSink(a1);
}

//----- (00000000004228EA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_53c_goodB2GSink(a1);
}

//----- (0000000000422904) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_badSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000422933) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_goodG2BSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000422962) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_67b_goodB2GSink(unsigned __int8 a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004229A3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_square_66b_badSink((__int64)&v1);
}

//----- (00000000004229C8) ----------------------------------------------------
int goodG2B_196()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_max_square_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004229ED) ----------------------------------------------------
int goodB2G_182()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 127;
  v2 = 127;
  return CWE190_Integer_Overflow__char_max_square_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000422A12) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_66_good()
{
  goodG2B_196();
  return goodB2G_182();
}

//----- (0000000000422A2C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_02_bad()
{
  return printHexCharLine(-128);
}

//----- (0000000000422A53) ----------------------------------------------------
int goodB2G1_115()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000422A8C) ----------------------------------------------------
int goodB2G2_115()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000422AC5) ----------------------------------------------------
int goodG2B1_101()
{
  return printHexCharLine(3);
}

//----- (0000000000422AEC) ----------------------------------------------------
int goodG2B2_101()
{
  return printHexCharLine(3);
}

//----- (0000000000422B13) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_02_good()
{
  goodB2G1_115();
  goodB2G2_115();
  goodG2B1_101();
  return goodG2B2_101();
}

//----- (0000000000422B41) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000422B69) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000422B91) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000422BD7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_51_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000422C10) ----------------------------------------------------
int goodG2B_197()
{
  return CWE190_Integer_Overflow__char_fscanf_square_51b_goodG2BSink(2);
}

//----- (0000000000422C2D) ----------------------------------------------------
int goodB2G_183()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000422C66) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_51_good()
{
  goodG2B_197();
  return goodB2G_183();
}

//----- (0000000000422C80) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_68_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_68_badData = v0;
  return CWE190_Integer_Overflow__char_rand_square_68b_badSink();
}
// 65F358: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_badData;

//----- (0000000000422CD3) ----------------------------------------------------
int goodG2B_198()
{
  CWE190_Integer_Overflow__char_rand_square_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_rand_square_68b_goodG2BSink();
}
// 65F357: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_goodG2BData;

//----- (0000000000422CF9) ----------------------------------------------------
int goodB2G_184()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_square_68_goodB2GData = v0;
  return CWE190_Integer_Overflow__char_rand_square_68b_goodB2GSink();
}
// 65F359: using guessed type char CWE190_Integer_Overflow__char_rand_square_68_goodB2GData;

//----- (0000000000422D4C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_68_good()
{
  goodG2B_198();
  return goodB2G_184();
}

//----- (0000000000422D66) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000422D8C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000422DB2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (0000000000422DF4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_32_bad()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v2;
  v4 = &v2;
  v2 = 32;
  v3 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v3 = v0;
  *v5 = v0;
  return printHexCharLine(*v4 + 1);
}

//----- (0000000000422E76) ----------------------------------------------------
int goodG2B_199()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 3;
  return printHexCharLine(3);
}

//----- (0000000000422ECB) ----------------------------------------------------
int goodB2G_185()
{
  int v0; // eax
  char v2; // [rsp+Ch] [rbp-14h]
  char v3; // [rsp+Dh] [rbp-13h]
  char v4; // [rsp+Eh] [rbp-12h]
  char v5; // [rsp+Fh] [rbp-11h]
  char *v6; // [rsp+10h] [rbp-10h]
  char *v7; // [rsp+18h] [rbp-8h]

  v7 = &v2;
  v6 = &v2;
  v2 = 32;
  v5 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v5 = v0;
  *v7 = v0;
  v4 = *v6;
  if ( v4 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v3 = v4 + 1;
  return printHexCharLine(v4 + 1);
}

//----- (0000000000422F5F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_32_good()
{
  goodG2B_199();
  return goodB2G_185();
}

//----- (0000000000422F79) ----------------------------------------------------
int __fastcall badSink_31(char a1)
{
  int result; // eax

  result = badStatic_6;
  if ( badStatic_6 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F274: using guessed type int badStatic_6;

//----- (0000000000422FAB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_21_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  badStatic_6 = 1;
  return badSink_31(v0);
}
// 65F274: using guessed type int badStatic_6;

//----- (0000000000422FFF) ----------------------------------------------------
int __fastcall goodB2G1Sink_6(char a1)
{
  if ( goodB2G1Static_6 )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F278: using guessed type int goodB2G1Static_6;

//----- (000000000042305B) ----------------------------------------------------
int goodB2G1_116()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G1Static_6 = 0;
  return goodB2G1Sink_6(v0);
}
// 65F278: using guessed type int goodB2G1Static_6;

//----- (00000000004230AF) ----------------------------------------------------
int __fastcall goodB2G2Sink_6(char a1)
{
  int result; // eax

  result = goodB2G2Static_6;
  if ( goodB2G2Static_6 )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F27C: using guessed type int goodB2G2Static_6;

//----- (00000000004230FF) ----------------------------------------------------
int goodB2G2_116()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  goodB2G2Static_6 = 1;
  return goodB2G2Sink_6(v0);
}
// 65F27C: using guessed type int goodB2G2Static_6;

//----- (0000000000423153) ----------------------------------------------------
int __fastcall goodG2BSink_31(char a1)
{
  int result; // eax

  result = goodG2BStatic_6;
  if ( goodG2BStatic_6 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F280: using guessed type int goodG2BStatic_6;

//----- (0000000000423185) ----------------------------------------------------
int goodG2B_200()
{
  goodG2BStatic_6 = 1;
  return goodG2BSink_31(2);
}
// 65F280: using guessed type int goodG2BStatic_6;

//----- (00000000004231AC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_21_good()
{
  goodB2G1_116();
  goodB2G2_116();
  return goodG2B_200();
}

//----- (00000000004231D0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (000000000042320A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000423244) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000423290) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004232BA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (00000000004232E4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (0000000000423320) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53d_badSink(a1);
}

//----- (000000000042333A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodG2BSink(a1);
}

//----- (0000000000423354) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_53c_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53d_goodB2GSink(a1);
}

//----- (000000000042336E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_67_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_67b_badSink(0x7Fu);
}

//----- (0000000000423392) ----------------------------------------------------
int goodG2B_201()
{
  return CWE190_Integer_Overflow__char_max_multiply_67b_goodG2BSink(2u);
}

//----- (00000000004233B6) ----------------------------------------------------
int goodB2G_186()
{
  return CWE190_Integer_Overflow__char_max_multiply_67b_goodB2GSink(0x7Fu);
}

//----- (00000000004233DA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_67_good()
{
  goodG2B_201();
  return goodB2G_186();
}

//----- (00000000004233F4) ----------------------------------------------------
int __fastcall badSink_32(char a1)
{
  int result; // eax

  result = badStatic_7;
  if ( badStatic_7 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F284: using guessed type int badStatic_7;

//----- (0000000000423422) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_21_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  badStatic_7 = 1;
  return badSink_32(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F284: using guessed type int badStatic_7;

//----- (0000000000423465) ----------------------------------------------------
int __fastcall goodB2G1Sink_7(char a1)
{
  if ( goodB2G1Static_7 )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F288: using guessed type int goodB2G1Static_7;

//----- (00000000004234B1) ----------------------------------------------------
int goodB2G1_117()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G1Static_7 = 0;
  return goodB2G1Sink_7(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F288: using guessed type int goodB2G1Static_7;

//----- (00000000004234F4) ----------------------------------------------------
int __fastcall goodB2G2Sink_7(char a1)
{
  int result; // eax

  result = goodB2G2Static_7;
  if ( goodB2G2Static_7 )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F28C: using guessed type int goodB2G2Static_7;

//----- (0000000000423534) ----------------------------------------------------
int goodB2G2_117()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  goodB2G2Static_7 = 1;
  return goodB2G2Sink_7(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F28C: using guessed type int goodB2G2Static_7;

//----- (0000000000423577) ----------------------------------------------------
int __fastcall goodG2BSink_32(char a1)
{
  int result; // eax

  result = goodG2BStatic_7;
  if ( goodG2BStatic_7 )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F290: using guessed type int goodG2BStatic_7;

//----- (00000000004235A5) ----------------------------------------------------
int goodG2B_202()
{
  goodG2BStatic_7 = 1;
  return goodG2BSink_32(2);
}
// 65F290: using guessed type int goodG2BStatic_7;

//----- (00000000004235CC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_21_good()
{
  goodB2G1_117();
  goodB2G2_117();
  return goodG2B_202();
}

//----- (00000000004235F0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_03_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423630) ----------------------------------------------------
int goodB2G1_118()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423684) ----------------------------------------------------
int goodB2G2_118()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004236D8) ----------------------------------------------------
int goodG2B1_102()
{
  return printHexCharLine(3);
}

//----- (00000000004236FF) ----------------------------------------------------
int goodG2B2_102()
{
  return printHexCharLine(3);
}

//----- (0000000000423726) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_03_good()
{
  goodB2G1_118();
  goodB2G2_118();
  goodG2B1_102();
  return goodG2B2_102();
}

//----- (0000000000423754) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_max_multiply_22_badGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F294: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_badGlobal;

//----- (0000000000423787) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global;
  if ( CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F298: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global;

//----- (00000000004237D8) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F29C: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global;

//----- (000000000042381D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2A0: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal;

//----- (0000000000423850) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_04_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (00000000004238B6) ----------------------------------------------------
int goodB2G1_119()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (000000000042393A) ----------------------------------------------------
int goodB2G2_119()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (00000000004239B2) ----------------------------------------------------
int goodG2B1_103()
{
  return printHexCharLine(3);
}

//----- (00000000004239F7) ----------------------------------------------------
int goodG2B2_103()
{
  return printHexCharLine(3);
}

//----- (0000000000423A30) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_04_good()
{
  goodB2G1_119();
  goodB2G2_119();
  goodG2B1_103();
  return goodG2B2_103();
}

//----- (0000000000423A5E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_31_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (0000000000423AC0) ----------------------------------------------------
int goodG2B_203()
{
  return printHexCharLine(3);
}

//----- (0000000000423AF5) ----------------------------------------------------
int goodB2G_187()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000423B69) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_31_good()
{
  goodG2B_203();
  return goodB2G_187();
}

//----- (0000000000423B83) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_65_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__int64_t_fscanf_add_65b_badSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423BC7) ----------------------------------------------------
int goodG2B_204()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodG2BSink(2LL);
}

//----- (0000000000423BF6) ----------------------------------------------------
__int64 goodB2G_188()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  int (__fastcall *v2)(__int64); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__int64_t_fscanf_add_65b_goodB2GSink;
  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return ((__int64 (__fastcall *)(__int64))v2)(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423C3A) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__int64_t_fscanf_add_65_good()
{
  goodG2B_204();
  return goodB2G_188();
}

//----- (0000000000423C54) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_66_bad()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_66b_badSink((__int64)&v2);
}

//----- (0000000000423CA6) ----------------------------------------------------
int goodG2B_205()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_rand_multiply_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000423CCB) ----------------------------------------------------
int goodB2G_189()
{
  int v0; // eax
  char v2; // [rsp+0h] [rbp-10h]
  char v3; // [rsp+2h] [rbp-Eh]
  char v4; // [rsp+Fh] [rbp-1h]

  v4 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v4 = v0;
  v3 = v0;
  return CWE190_Integer_Overflow__char_rand_multiply_66b_goodB2GSink((__int64)&v2);
}

//----- (0000000000423D1D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_66_good()
{
  goodG2B_205();
  return goodB2G_189();
}

//----- (0000000000423D37) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_12_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 127;
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v1 * v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}

//----- (0000000000423DBD) ----------------------------------------------------
int goodB2G_190()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000423E62) ----------------------------------------------------
int goodG2B_206()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (0000000000423ECA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_12_good()
{
  goodB2G_190();
  return goodG2B_206();
}

//----- (0000000000423EE4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_18_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423F26) ----------------------------------------------------
int goodB2G_191()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000423F7C) ----------------------------------------------------
int goodG2B_207()
{
  return printHexCharLine(3);
}

//----- (0000000000423FA5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_18_good()
{
  goodB2G_191();
  return goodG2B_207();
}

//----- (0000000000423FBF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_rand_add_61b_badSource();
  return printHexCharLine(v0 + 1);
}

//----- (0000000000423FF0) ----------------------------------------------------
int goodG2B_208()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_rand_add_61b_goodG2BSource();
  return printHexCharLine(v0 + 1);
}

//----- (0000000000424021) ----------------------------------------------------
int goodB2G_192()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_rand_add_61b_goodB2GSource();
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000424064) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_61_good()
{
  goodG2B_208();
  return goodB2G_192();
}

//----- (000000000042407E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_09_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004240BD) ----------------------------------------------------
int goodB2G1_120()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000424126) ----------------------------------------------------
int goodB2G2_120()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000424183) ----------------------------------------------------
int goodG2B1_104()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004241CE) ----------------------------------------------------
int goodG2B2_104()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042420D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_09_good()
{
  goodB2G1_120();
  goodB2G2_120();
  goodG2B1_104();
  return goodG2B2_104();
}

//----- (000000000042423B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424272) ----------------------------------------------------
int goodG2B_209()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodG2BSink(&v1);
}

//----- (0000000000424290) ----------------------------------------------------
int goodB2G_193()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_multiply_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004242C7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_63_good()
{
  goodG2B_209();
  return goodB2G_193();
}

//----- (00000000004242E1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_64_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_square_64b_badSink(&v1);
}

//----- (00000000004242FF) ----------------------------------------------------
int goodG2B_210()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_square_64b_goodG2BSink(&v1);
}

//----- (000000000042431D) ----------------------------------------------------
int goodB2G_194()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(&v1);
}

//----- (000000000042433B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_64_good()
{
  goodG2B_210();
  return goodB2G_194();
}

//----- (0000000000424355) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000042438E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (00000000004243C7) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000042441E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData = v1;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F370: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_badData;

//----- (0000000000424462) ----------------------------------------------------
int goodG2B_211()
{
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodG2BSink();
}
// 65F368: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodG2BData;

//----- (0000000000424491) ----------------------------------------------------
int goodB2G_195()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData = v1;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F360: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_goodB2GData;

//----- (00000000004244D5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_68_good()
{
  goodG2B_211();
  return goodB2G_195();
}

//----- (00000000004244EF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_12_bad()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%c", &v1);
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  else if ( v1 == 127 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042457C) ----------------------------------------------------
int goodB2G_196()
{
  int result; // eax
  char v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  char v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v3 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  else if ( v1 == 127 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424636) ----------------------------------------------------
int goodG2B_212()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(3);
}

//----- (0000000000424696) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_12_good()
{
  goodB2G_196();
  return goodG2B_212();
}

//----- (00000000004246B0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_add_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_rand_add_22_badGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F2A4: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_badGlobal;

//----- (00000000004246DE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 + 1);
}
// 65F2A8: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Global;

//----- (000000000042472A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global )
  {
    if ( a1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 + 1);
  }
  return result;
}
// 65F2AC: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global;

//----- (000000000042476A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal )
    result = printHexCharLine(a1 + 1);
  return result;
}
// 65F2B0: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal;

//----- (0000000000424798) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004247E9) ----------------------------------------------------
int goodB2G1_121()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424859) ----------------------------------------------------
int goodB2G2_121()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004248C9) ----------------------------------------------------
int goodG2B1_105()
{
  return printLongLongLine(4LL);
}

//----- (0000000000424903) ----------------------------------------------------
int goodG2B2_105()
{
  return printLongLongLine(4LL);
}

//----- (000000000042493D) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_good()
{
  goodB2G1_121();
  goodB2G2_121();
  goodG2B1_105();
  return goodG2B2_105();
}

//----- (000000000042496B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_22_bad()
{
  CWE190_Integer_Overflow__char_max_multiply_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_max_multiply_22_badSink(127);
}
// 65F294: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_badGlobal;

//----- (0000000000424992) ----------------------------------------------------
int goodB2G1_122()
{
  CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Sink(127);
}
// 65F298: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G1Global;

//----- (00000000004249B9) ----------------------------------------------------
int goodB2G2_122()
{
  CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Sink(127);
}
// 65F29C: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodB2G2Global;

//----- (00000000004249E0) ----------------------------------------------------
int goodG2B_213()
{
  CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_max_multiply_22_goodG2BSink(2);
}
// 65F2A0: using guessed type int CWE190_Integer_Overflow__char_max_multiply_22_goodG2BGlobal;

//----- (0000000000424A07) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_22_good()
{
  goodB2G1_122();
  goodB2G2_122();
  return goodG2B_213();
}

//----- (0000000000424A2B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000424A51) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (0000000000424A77) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (0000000000424AB9) ----------------------------------------------------
__int64 __fastcall badSource_8(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424AE8) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_bad()
{
  __int64 v0; // rax

  v0 = badSource_8(0LL);
  if ( v0 > 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (0000000000424B28) ----------------------------------------------------
__int64 goodG2BSource_8()
{
  return 2LL;
}

//----- (0000000000424B3E) ----------------------------------------------------
int goodG2B_214()
{
  __int64 v0; // rax

  v0 = goodG2BSource_8();
  if ( v0 > 0 )
    LODWORD(v0) = printLongLongLine(2 * v0);
  return v0;
}

//----- (0000000000424B7E) ----------------------------------------------------
__int64 __fastcall goodB2GSource_8(__int64 a1)
{
  __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%ld", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424BAD) ----------------------------------------------------
int goodB2G_197()
{
  __int64 v0; // rax

  v0 = goodB2GSource_8(0LL);
  if ( v0 > 0 )
  {
    if ( v0 > 4611686018427387902LL )
      LODWORD(v0) = printLine("data value is too large to perform arithmetic safely.");
    else
      LODWORD(v0) = printLongLongLine(2 * v0);
  }
  return v0;
}

//----- (0000000000424C09) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_42_good()
{
  goodB2G_197();
  return goodG2B_214();
}

//----- (0000000000424C23) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000424C50) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 + 1);
}

//----- (0000000000424C7D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_add_63b_goodB2GSink(_BYTE *a1)
{
  int result; // eax

  if ( *a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(*a1 + 1);
  return result;
}

//----- (0000000000424CBC) ----------------------------------------------------
__int64 staticReturnsTrue_7()
{
  return 1LL;
}

//----- (0000000000424CC7) ----------------------------------------------------
__int64 staticReturnsFalse_7()
{
  return 0LL;
}

//----- (0000000000424CD2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_08_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_7();
  if ( result )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424D35) ----------------------------------------------------
int goodB2G1_123()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)staticReturnsFalse_7() )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424DB8) ----------------------------------------------------
int goodB2G2_123()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_7() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_7();
  if ( result )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000424E2F) ----------------------------------------------------
int goodG2B1_106()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_7() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_7();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000424E83) ----------------------------------------------------
int goodG2B2_106()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_7() )
    v1 = 2;
  result = staticReturnsTrue_7();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000424ECB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_08_good()
{
  goodB2G1_123();
  goodB2G2_123();
  goodG2B1_106();
  return goodG2B2_106();
}

//----- (0000000000424EF9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54e_badSink(a1);
}

//----- (0000000000424F13) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54e_goodG2BSink(a1);
}

//----- (0000000000424F2D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54e_goodB2GSink(a1);
}

//----- (0000000000424F47) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_52_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_52b_badSink(v0);
}

//----- (0000000000424F91) ----------------------------------------------------
int goodG2B_215()
{
  return CWE190_Integer_Overflow__char_rand_square_52b_goodG2BSink(2);
}

//----- (0000000000424FAE) ----------------------------------------------------
int goodB2G_198()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_52b_goodB2GSink(v0);
}

//----- (0000000000424FF8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_52_good()
{
  goodG2B_215();
  return goodB2G_198();
}

//----- (0000000000425012) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_11_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042506E) ----------------------------------------------------
int goodB2G1_124()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004250EA) ----------------------------------------------------
int goodB2G2_124()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042515A) ----------------------------------------------------
int goodG2B1_107()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (00000000004251A9) ----------------------------------------------------
int goodG2B2_107()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (00000000004251EC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_11_good()
{
  goodB2G1_124();
  goodB2G2_124();
  goodG2B1_107();
  return goodG2B2_107();
}

//----- (000000000042521A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_02_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042525A) ----------------------------------------------------
int goodB2G1_125()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004252AE) ----------------------------------------------------
int goodB2G2_125()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425302) ----------------------------------------------------
int goodG2B1_108()
{
  return printHexCharLine(3);
}

//----- (0000000000425329) ----------------------------------------------------
int goodG2B2_108()
{
  return printHexCharLine(3);
}

//----- (0000000000425350) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_02_good()
{
  goodB2G1_125();
  goodB2G2_125();
  goodG2B1_108();
  return goodG2B2_108();
}

//----- (000000000042537E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004253A6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004253CE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000425414) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_22_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_add_22_badSink(v0);
}
// 65F2A4: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_badGlobal;

//----- (0000000000425468) ----------------------------------------------------
int goodB2G1_126()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Sink(v0);
}
// 65F2A8: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodB2G1Global;

//----- (00000000004254BC) ----------------------------------------------------
int goodB2G2_126()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Sink(v0);
}
// 65F2AC: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodB2G2Global;

//----- (0000000000425510) ----------------------------------------------------
int goodG2B_216()
{
  CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_add_22_goodG2BSink(2);
}
// 65F2B0: using guessed type int CWE190_Integer_Overflow__char_rand_add_22_goodG2BGlobal;

//----- (0000000000425537) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_22_good()
{
  goodB2G1_126();
  goodB2G2_126();
  return goodG2B_216();
}

//----- (000000000042555B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_badSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (000000000042558E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_goodG2BSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}

//----- (00000000004255C1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_BYTE *)(a1 + 2);
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (0000000000425606) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_16_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (0000000000425660) ----------------------------------------------------
int goodB2G_199()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (00000000004256D8) ----------------------------------------------------
int goodG2B_217()
{
  return printHexCharLine(4);
}

//----- (0000000000425705) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_16_good()
{
  goodB2G_199();
  return goodG2B_217();
}

//----- (000000000042571F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_13_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000425761) ----------------------------------------------------
int goodB2G1_127()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004257C1) ----------------------------------------------------
int goodB2G2_127()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000425815) ----------------------------------------------------
int goodG2B1_109()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000425863) ----------------------------------------------------
int goodG2B2_109()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004258A5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_13_good()
{
  goodB2G1_127();
  goodB2G2_127();
  goodG2B1_109();
  return goodG2B2_109();
}

//----- (00000000004258D3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_14_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425929) ----------------------------------------------------
int goodB2G1_128()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042599F) ----------------------------------------------------
int goodB2G2_128()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425A09) ----------------------------------------------------
int goodG2B1_110()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000425A52) ----------------------------------------------------
int goodG2B2_110()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFive == 5 )
    v1 = 2;
  result = globalFive;
  if ( globalFive == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (0000000000425A8F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_14_good()
{
  goodB2G1_128();
  goodB2G2_128();
  goodG2B1_110();
  return goodG2B2_110();
}

//----- (0000000000425ABD) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F104: using guessed type int staticTrue_8;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425B20) ----------------------------------------------------
int goodB2G1_129()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( staticFalse_8 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F104: using guessed type int staticTrue_8;
// 65F128: using guessed type __int64 stdin;
// 65F2B4: using guessed type int staticFalse_8;

//----- (0000000000425BAE) ----------------------------------------------------
int goodB2G2_129()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_8 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F104: using guessed type int staticTrue_8;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425C30) ----------------------------------------------------
int goodG2B1_111()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticFalse_8 )
    printLine("Benign, fixed string");
  else
    v1 = 2LL;
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 65F104: using guessed type int staticTrue_8;
// 65F2B4: using guessed type int staticFalse_8;

//----- (0000000000425C88) ----------------------------------------------------
int goodG2B2_111()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( staticTrue_8 )
    v1 = 2LL;
  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    if ( v1 > 0 )
      result = printLongLongLine(2 * v1);
  }
  return result;
}
// 65F104: using guessed type int staticTrue_8;

//----- (0000000000425CD4) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_05_good()
{
  goodB2G1_129();
  goodB2G2_129();
  goodG2B1_111();
  return goodG2B2_111();
}

//----- (0000000000425D02) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_17_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425D6F) ----------------------------------------------------
int goodB2G_200()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425DF0) ----------------------------------------------------
int goodG2B_218()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (0000000000425E42) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_17_good()
{
  goodB2G_200();
  return goodG2B_218();
}

//----- (0000000000425E5C) ----------------------------------------------------
int __fastcall badSink_33(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000425E88) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return badSink_33(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425EC3) ----------------------------------------------------
int __fastcall goodG2BSink_33(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (0000000000425EEF) ----------------------------------------------------
int goodG2B_219()
{
  return goodG2BSink_33(2LL);
}

//----- (0000000000425F15) ----------------------------------------------------
int __fastcall goodB2GSink_24(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000425F5D) ----------------------------------------------------
int goodB2G_201()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return goodB2GSink_24(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000425F98) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_41_good()
{
  goodB2G_201();
  return goodG2B_219();
}

//----- (0000000000425FB2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_10_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000426006) ----------------------------------------------------
int goodB2G1_130()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;
// 65F318: using guessed type int globalFalse;

//----- (000000000042607A) ----------------------------------------------------
int goodB2G2_130()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (00000000004260E2) ----------------------------------------------------
int goodG2B1_112()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000426129) ----------------------------------------------------
int goodG2B2_112()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000426164) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_10_good()
{
  goodB2G1_130();
  goodB2G2_130();
  goodG2B1_112();
  return goodG2B2_112();
}

//----- (0000000000426192) ----------------------------------------------------
int __fastcall badSink_34(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004261BB) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_44_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_34;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004261FD) ----------------------------------------------------
int __fastcall goodG2BSink_34(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000426226) ----------------------------------------------------
int goodG2B_220()
{
  return goodG2BSink_34(2);
}

//----- (000000000042624C) ----------------------------------------------------
int __fastcall goodB2GSink_25(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000426287) ----------------------------------------------------
__int64 goodB2G_202()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_25;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004262C9) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_44_good()
{
  goodG2B_220();
  return goodB2G_202();
}

//----- (00000000004262E3) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_add_61b_badSource()
{
  return 127LL;
}

//----- (00000000004262F6) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_add_61b_goodG2BSource()
{
  return 2LL;
}

//----- (0000000000426309) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_max_add_61b_goodB2GSource()
{
  return 127LL;
}

//----- (000000000042631C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_add_63b_badSink(&v1);
}

//----- (000000000042633A) ----------------------------------------------------
int goodG2B_221()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_add_63b_goodG2BSink(&v1);
}

//----- (0000000000426358) ----------------------------------------------------
int goodB2G_203()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_add_63b_goodB2GSink(&v1);
}

//----- (0000000000426376) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_63_good()
{
  goodG2B_221();
  return goodB2G_203();
}

//----- (0000000000426390) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_67_bad()
{
  return CWE190_Integer_Overflow__char_max_square_67b_badSink(127);
}

//----- (00000000004263B4) ----------------------------------------------------
int goodG2B_222()
{
  return CWE190_Integer_Overflow__char_max_square_67b_goodG2BSink(2);
}

//----- (00000000004263D8) ----------------------------------------------------
int goodB2G_204()
{
  return CWE190_Integer_Overflow__char_max_square_67b_goodB2GSink(127);
}

//----- (00000000004263FC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_67_good()
{
  goodG2B_222();
  return goodB2G_204();
}

//----- (0000000000426416) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54d_badSink(a1);
}

//----- (0000000000426430) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodG2BSink(a1);
}

//----- (000000000042644A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_multiply_54d_goodB2GSink(a1);
}

//----- (0000000000426464) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_53_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042649F) ----------------------------------------------------
int goodG2B_223()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodG2BSink(2LL);
}

//----- (00000000004264C5) ----------------------------------------------------
int goodB2G_205()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000426500) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_53_good()
{
  goodG2B_223();
  return goodB2G_205();
}

//----- (000000000042651A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54d_badSink(a1);
}

//----- (0000000000426534) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54d_goodG2BSink(a1);
}

//----- (000000000042654E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_54d_goodB2GSink(a1);
}

//----- (0000000000426568) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54c_badSink(a1);
}

//----- (0000000000426582) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54c_goodG2BSink(a1);
}

//----- (000000000042659C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54c_goodB2GSink(a1);
}

//----- (00000000004265B6) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  v3 = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v3;
    result = printLongLongLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000426613) ----------------------------------------------------
int goodG2B_224()
{
  return printLongLongLine(4LL);
}

//----- (000000000042665B) ----------------------------------------------------
int goodB2G_206()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-18h]
  __int64 v2; // [rsp+10h] [rbp-10h]
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  result = v1;
  v3 = v1;
  if ( v1 > 0 )
  {
    if ( v3 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v3;
      result = printLongLongLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004266D4) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_good()
{
  goodG2B_224();
  return goodB2G_206();
}

//----- (00000000004266EE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_01_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042672E) ----------------------------------------------------
int goodG2B_225()
{
  return printHexCharLine(3);
}

//----- (0000000000426755) ----------------------------------------------------
int goodB2G_207()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004267A9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_01_good()
{
  goodG2B_225();
  return goodB2G_207();
}

//----- (00000000004267C3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_51_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_51b_badSink(v0);
}

//----- (000000000042680D) ----------------------------------------------------
int goodG2B_226()
{
  return CWE190_Integer_Overflow__char_rand_square_51b_goodG2BSink(2);
}

//----- (000000000042682A) ----------------------------------------------------
int goodB2G_208()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_square_51b_goodB2GSink(v0);
}

//----- (0000000000426874) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_51_good()
{
  goodG2B_226();
  return goodB2G_208();
}

//----- (000000000042688E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_badSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 > 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (00000000004268C6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodG2BSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 > 0 )
    LODWORD(v1) = printLongLongLine(2 * v3);
  return v1;
}

//----- (00000000004268FE) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_66b_goodB2GSink(__int64 a1)
{
  __int64 v1; // rax
  __int64 v3; // [rsp+18h] [rbp-8h]

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ( v3 > 0 )
  {
    if ( v3 > 4611686018427387902LL )
      LODWORD(v1) = printLine("data value is too large to perform arithmetic safely.");
    else
      LODWORD(v1) = printLongLongLine(2 * v3);
  }
  return v1;
}

//----- (0000000000426952) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_61b_badSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000426982) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodG2BSource()
{
  return 2LL;
}

//----- (0000000000426995) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_multiply_61b_goodB2GSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004269C5) ----------------------------------------------------
int __fastcall badSink_35(char a1)
{
  int result; // eax

  result = badStatic_8;
  if ( badStatic_8 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2B8: using guessed type int badStatic_8;

//----- (00000000004269F8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_21_bad()
{
  badStatic_8 = 1;
  return badSink_35(127);
}
// 65F2B8: using guessed type int badStatic_8;

//----- (0000000000426A1F) ----------------------------------------------------
int __fastcall goodB2G1Sink_8(char a1)
{
  int result; // eax

  result = goodB2G1Static_8;
  if ( goodB2G1Static_8 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2BC: using guessed type int goodB2G1Static_8;

//----- (0000000000426A70) ----------------------------------------------------
int goodB2G1_131()
{
  goodB2G1Static_8 = 0;
  return goodB2G1Sink_8(127);
}
// 65F2BC: using guessed type int goodB2G1Static_8;

//----- (0000000000426A97) ----------------------------------------------------
int __fastcall goodB2G2Sink_8(char a1)
{
  int result; // eax

  result = goodB2G2Static_8;
  if ( goodB2G2Static_8 && a1 > 0 )
  {
    if ( a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2C0: using guessed type int goodB2G2Static_8;

//----- (0000000000426ADC) ----------------------------------------------------
int goodB2G2_131()
{
  goodB2G2Static_8 = 1;
  return goodB2G2Sink_8(127);
}
// 65F2C0: using guessed type int goodB2G2Static_8;

//----- (0000000000426B03) ----------------------------------------------------
int __fastcall goodG2BSink_35(char a1)
{
  int result; // eax

  result = goodG2BStatic_8;
  if ( goodG2BStatic_8 )
  {
    if ( a1 > 0 )
      result = printHexCharLine(2 * a1);
  }
  return result;
}
// 65F2C4: using guessed type int goodG2BStatic_8;

//----- (0000000000426B36) ----------------------------------------------------
int goodG2B_227()
{
  goodG2BStatic_8 = 1;
  return goodG2BSink_35(2);
}
// 65F2C4: using guessed type int goodG2BStatic_8;

//----- (0000000000426B5D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_21_good()
{
  goodB2G1_131();
  goodB2G2_131();
  return goodG2B_227();
}

//----- (0000000000426B81) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_03_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000426BAD) ----------------------------------------------------
int goodB2G1_132()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000426BEB) ----------------------------------------------------
int goodB2G2_132()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000426C29) ----------------------------------------------------
int goodG2B1_113()
{
  return printHexCharLine(4);
}

//----- (0000000000426C55) ----------------------------------------------------
int goodG2B2_113()
{
  return printHexCharLine(4);
}

//----- (0000000000426C81) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_03_good()
{
  goodB2G1_132();
  goodB2G2_132();
  goodG2B1_113();
  return goodG2B2_113();
}

//----- (0000000000426CAF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_09_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426D17) ----------------------------------------------------
int goodB2G1_133()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000426D9D) ----------------------------------------------------
int goodB2G2_133()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426E17) ----------------------------------------------------
int goodG2B1_114()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000426E5E) ----------------------------------------------------
int goodG2B2_114()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000426E99) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_09_good()
{
  goodB2G1_133();
  goodB2G2_133();
  goodG2B1_114();
  return goodG2B2_114();
}

//----- (0000000000426EC7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_18_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000426EF5) ----------------------------------------------------
int goodB2G_209()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000426F35) ----------------------------------------------------
int goodG2B_228()
{
  return printHexCharLine(4);
}

//----- (0000000000426F63) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_18_good()
{
  goodB2G_209();
  return goodG2B_228();
}

//----- (0000000000426F7D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_06_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 * v0);
}

//----- (0000000000426FE9) ----------------------------------------------------
int goodB2G1_134()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (000000000042707F) ----------------------------------------------------
int goodB2G2_134()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (char)v0 < -11 || (char)v0 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 * v0);
  return result;
}

//----- (0000000000427109) ----------------------------------------------------
int goodG2B1_115()
{
  return printHexCharLine(4);
}

//----- (0000000000427154) ----------------------------------------------------
int goodG2B2_115()
{
  return printHexCharLine(4);
}

//----- (0000000000427193) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_06_good()
{
  goodB2G1_134();
  goodB2G2_134();
  goodG2B1_115();
  return goodG2B2_115();
}

//----- (00000000004271C1) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_32_bad()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 127;
  v1 = 127;
  v3 = 127;
  v2 = 1;
  return printHexCharLine(1);
}

//----- (000000000042721A) ----------------------------------------------------
int goodG2B_229()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Dh] [rbp-13h]
  char v3; // [rsp+Eh] [rbp-12h]
  char v4; // [rsp+Fh] [rbp-11h]
  char *v5; // [rsp+10h] [rbp-10h]
  char *v6; // [rsp+18h] [rbp-8h]

  v6 = &v1;
  v5 = &v1;
  v4 = 2;
  v1 = 2;
  v3 = 2;
  v2 = 4;
  return printHexCharLine(4);
}

//----- (0000000000427273) ----------------------------------------------------
int goodB2G_210()
{
  char v1; // [rsp+Ch] [rbp-14h]
  char v2; // [rsp+Eh] [rbp-12h]
  char v3; // [rsp+Fh] [rbp-11h]
  char *v4; // [rsp+10h] [rbp-10h]
  char *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 127;
  v1 = 127;
  v2 = 127;
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004272EA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_32_good()
{
  goodG2B_229();
  return goodB2G_210();
}

//----- (0000000000427304) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000427336) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_goodG2BSink(_BYTE *a1)
{
  int result; // eax

  result = (unsigned __int8)*a1;
  if ( *a1 > 0 )
    result = printHexCharLine(2 * *a1);
  return result;
}

//----- (0000000000427368) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_multiply_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  result = (unsigned __int8)*a1;
  v2 = *a1;
  if ( *a1 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}

//----- (00000000004273AC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_badSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52c_badSink(a1);
}

//----- (00000000004273C6) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodG2BSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodG2BSink(a1);
}

//----- (00000000004273E0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodB2GSink(__int64 a1)
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52c_goodB2GSink(a1);
}

//----- (00000000004273FA) ----------------------------------------------------
__int64 staticReturnsTrue_8()
{
  return 1LL;
}

//----- (0000000000427405) ----------------------------------------------------
__int64 staticReturnsFalse_8()
{
  return 0LL;
}

//----- (0000000000427410) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_08_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_8();
  if ( result )
  {
    v2 = v1 + 1;
    result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042746C) ----------------------------------------------------
int goodB2G1_135()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( (unsigned int)staticReturnsFalse_8() )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printHexCharLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (00000000004274E8) ----------------------------------------------------
int goodB2G2_135()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticReturnsTrue_8();
  if ( result )
  {
    if ( v1 == 127 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 + 1;
      result = printHexCharLine(v1 + 1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000427558) ----------------------------------------------------
int goodG2B1_116()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_8() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_8();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (00000000004275A7) ----------------------------------------------------
int goodG2B2_116()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_8() )
    v1 = 2;
  result = staticReturnsTrue_8();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (00000000004275EA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_08_good()
{
  goodB2G1_135();
  goodB2G2_135();
  goodG2B1_116();
  return goodG2B2_116();
}

//----- (0000000000427618) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_03_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (000000000042766C) ----------------------------------------------------
int goodB2G1_136()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (00000000004276D2) ----------------------------------------------------
int goodB2G2_136()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000427738) ----------------------------------------------------
int goodG2B1_117()
{
  return printHexCharLine(3);
}

//----- (000000000042775F) ----------------------------------------------------
int goodG2B2_117()
{
  return printHexCharLine(3);
}

//----- (0000000000427786) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_03_good()
{
  goodB2G1_136();
  goodB2G2_136();
  goodG2B1_117();
  return goodG2B2_117();
}

//----- (00000000004277B4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_badSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (00000000004277E0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodG2BSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042780C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_54e_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (0000000000427854) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_17_bad()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (00000000004278A1) ----------------------------------------------------
int goodB2G_211()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 127;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}

//----- (0000000000427900) ----------------------------------------------------
int goodG2B_230()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000042794D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_17_good()
{
  goodB2G_211();
  return goodG2B_230();
}

//----- (0000000000427967) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_12_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 127;
  else
    v1 = 2;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(2 * v1);
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}

//----- (00000000004279E3) ----------------------------------------------------
int goodB2G_212()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000427A71) ----------------------------------------------------
int goodG2B_231()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(4);
}

//----- (0000000000427ADB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_12_good()
{
  goodB2G_212();
  return goodG2B_231();
}

//----- (0000000000427AF5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000427B23) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000427B51) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_67b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (0000000000427B9D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_18_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (0000000000427BF3) ----------------------------------------------------
int goodB2G_213()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000427C5B) ----------------------------------------------------
int goodG2B_232()
{
  return printHexCharLine(3);
}

//----- (0000000000427C84) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_18_good()
{
  goodB2G_213();
  return goodG2B_232();
}

//----- (0000000000427C9E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_04_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000427CDC) ----------------------------------------------------
int goodB2G1_137()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000427D38) ----------------------------------------------------
int goodB2G2_137()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000427D88) ----------------------------------------------------
int goodG2B1_118()
{
  return printHexCharLine(4);
}

//----- (0000000000427DD2) ----------------------------------------------------
int goodG2B2_118()
{
  return printHexCharLine(4);
}

//----- (0000000000427E10) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_04_good()
{
  goodB2G1_137();
  goodB2G2_137();
  goodG2B1_118();
  return goodG2B2_118();
}

//----- (0000000000427E3E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_07_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F108: using guessed type int staticFive_6;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000427E9B) ----------------------------------------------------
int goodB2G1_138()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFive_6 != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F108: using guessed type int staticFive_6;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000427F18) ----------------------------------------------------
int goodB2G2_138()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F108: using guessed type int staticFive_6;
// 65F128: using guessed type __int64 stdin;

//----- (0000000000427F89) ----------------------------------------------------
int goodG2B1_119()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_6;
  if ( staticFive_6 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F108: using guessed type int staticFive_6;

//----- (0000000000427FD7) ----------------------------------------------------
int goodG2B2_119()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_6 == 5 )
    v1 = 2;
  result = staticFive_6;
  if ( staticFive_6 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F108: using guessed type int staticFive_6;

//----- (0000000000428019) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_07_good()
{
  goodB2G1_138();
  goodB2G2_138();
  goodG2B1_119();
  return goodG2B2_119();
}

//----- (0000000000428047) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_04_bad()
{
  return printHexCharLine(1);
}

//----- (0000000000428084) ----------------------------------------------------
int goodB2G1_139()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004280EB) ----------------------------------------------------
int goodB2G2_139()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000428146) ----------------------------------------------------
int goodG2B1_120()
{
  return printHexCharLine(4);
}

//----- (000000000042818F) ----------------------------------------------------
int goodG2B2_120()
{
  return printHexCharLine(4);
}

//----- (00000000004281CC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_04_good()
{
  goodB2G1_139();
  goodB2G2_139();
  goodG2B1_120();
  return goodG2B2_120();
}

//----- (00000000004281FA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_31_bad()
{
  return printHexCharLine(1);
}

//----- (0000000000428233) ----------------------------------------------------
int goodG2B_233()
{
  return printHexCharLine(4);
}

//----- (000000000042826C) ----------------------------------------------------
int goodB2G_214()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (00000000004282C3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_31_good()
{
  goodG2B_233();
  return goodB2G_214();
}

//----- (00000000004282DD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_66_bad()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_add_66b_badSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042831B) ----------------------------------------------------
int goodG2B_234()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 2;
  v2 = 2;
  return CWE190_Integer_Overflow__char_fscanf_add_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000428340) ----------------------------------------------------
int goodB2G_215()
{
  char v1; // [rsp+0h] [rbp-10h]
  char v2; // [rsp+2h] [rbp-Eh]
  char v3; // [rsp+Fh] [rbp-1h]

  v3 = 32;
  __isoc99_fscanf(stdin, "%c", &v3);
  v2 = v3;
  return CWE190_Integer_Overflow__char_fscanf_add_66b_goodB2GSink((__int64)&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042837E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_66_good()
{
  goodG2B_234();
  return goodB2G_215();
}

//----- (0000000000428398) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (00000000004283D1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000042840A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_64b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+17h] [rbp-9h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (0000000000428461) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000428489) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004284B1) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_51b_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (00000000004284F7) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_52_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000428532) ----------------------------------------------------
int goodG2B_235()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodG2BSink(2LL);
}

//----- (0000000000428558) ----------------------------------------------------
int goodB2G_216()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_52b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000428593) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_52_good()
{
  goodG2B_235();
  return goodB2G_216();
}

//----- (00000000004285AD) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_12_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  else
  {
    v2 = 2;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printHexCharLine(v2 + 1);
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}

//----- (000000000042864C) ----------------------------------------------------
int goodB2G_217()
{
  int v0; // eax
  int v1; // eax
  int result; // eax
  char v3; // [rsp+Fh] [rbp-1h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v3 = v0;
  }
  else
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v1) = rand();
    }
    else
    {
      rand();
      rand();
      v1 = ~rand();
    }
    v3 = v1;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v3 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v3 + 1);
  }
  else if ( v3 == 127 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(v3 + 1);
  }
  return result;
}

//----- (000000000042872A) ----------------------------------------------------
int goodG2B_236()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printHexCharLine(3);
}

//----- (000000000042878A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_12_good()
{
  goodB2G_217();
  return goodG2B_236();
}

//----- (00000000004287A4) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_badSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (00000000004287CA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodG2BSink(__int64 a1)
{
  return printLongLongLine(a1 + 1);
}

//----- (00000000004287F0) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodB2GSink(__int64 a1)
{
  int result; // eax

  if ( a1 == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(a1 + 1);
  return result;
}

//----- (0000000000428832) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_11_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (000000000042887A) ----------------------------------------------------
int goodB2G1_140()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}

//----- (00000000004288E0) ----------------------------------------------------
int goodB2G2_140()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 127;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}

//----- (000000000042893A) ----------------------------------------------------
int goodG2B1_121()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (000000000042898E) ----------------------------------------------------
int goodG2B2_121()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(2 * v1);
  return result;
}

//----- (00000000004289D6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_11_good()
{
  goodB2G1_140();
  goodB2G2_140();
  goodG2B1_121();
  return goodG2B2_121();
}

//----- (0000000000428A04) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_02_bad()
{
  return printHexCharLine(254);
}

//----- (0000000000428A30) ----------------------------------------------------
int goodB2G1_141()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000428A6E) ----------------------------------------------------
int goodB2G2_141()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000428AAC) ----------------------------------------------------
int goodG2B1_122()
{
  return printHexCharLine(4);
}

//----- (0000000000428AD8) ----------------------------------------------------
int goodG2B2_122()
{
  return printHexCharLine(4);
}

//----- (0000000000428B04) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_02_good()
{
  goodB2G1_141();
  goodB2G2_141();
  goodG2B1_122();
  return goodG2B2_122();
}

//----- (0000000000428B32) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (0000000000428B63) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (0000000000428B94) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (0000000000428BE3) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_34_bad()
{
  return printHexCharLine(-128);
}

//----- (0000000000428C18) ----------------------------------------------------
int goodG2B_237()
{
  return printHexCharLine(3);
}

//----- (0000000000428C4D) ----------------------------------------------------
int goodB2G_218()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000428C94) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_34_good()
{
  goodG2B_237();
  return goodB2G_218();
}

//----- (0000000000428CAE) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_61b_badSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000428CF2) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_61b_goodG2BSource()
{
  return 2LL;
}

//----- (0000000000428D05) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_square_61b_goodB2GSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (0000000000428D49) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_54_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_54b_badSink(v0);
}

//----- (0000000000428D93) ----------------------------------------------------
int goodG2B_238()
{
  return CWE190_Integer_Overflow__char_rand_add_54b_goodG2BSink(2);
}

//----- (0000000000428DB0) ----------------------------------------------------
int goodB2G_219()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return CWE190_Integer_Overflow__char_rand_add_54b_goodB2GSink(v0);
}

//----- (0000000000428DFA) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_54_good()
{
  goodG2B_238();
  return goodB2G_219();
}

//----- (0000000000428E14) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_22_badSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_square_22_badGlobal;
  if ( CWE190_Integer_Overflow__char_max_square_22_badGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F2E0: using guessed type int CWE190_Integer_Overflow__char_max_square_22_badGlobal;

//----- (0000000000428E46) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodB2G1Sink(char a1)
{
  if ( CWE190_Integer_Overflow__char_max_square_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F2E4: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodB2G1Global;

//----- (0000000000428EA2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodB2G2Sink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global;
  if ( CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F2E8: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global;

//----- (0000000000428EF2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_22_goodG2BSink(char a1)
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal;
  if ( CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F2EC: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal;

//----- (0000000000428F24) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_max_add_61b_badSource();
  return printHexCharLine(v0 + 1);
}

//----- (0000000000428F55) ----------------------------------------------------
int goodG2B_239()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_max_add_61b_goodG2BSource();
  return printHexCharLine(v0 + 1);
}

//----- (0000000000428F86) ----------------------------------------------------
int goodB2G_220()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_max_add_61b_goodB2GSource();
  if ( v1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000428FC9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_61_good()
{
  goodG2B_239();
  return goodB2G_220();
}

//----- (0000000000428FE3) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54d_badSink(a1);
}

//----- (0000000000428FFD) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54d_goodG2BSink(a1);
}

//----- (0000000000429017) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_54d_goodB2GSink(a1);
}

//----- (0000000000429031) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_11_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v2 + 1);
  return result;
}

//----- (00000000004290A1) ----------------------------------------------------
int goodB2G1_142()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}

//----- (000000000042912F) ----------------------------------------------------
int goodB2G2_142()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}

//----- (00000000004291B1) ----------------------------------------------------
int goodG2B1_123()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000429200) ----------------------------------------------------
int goodG2B2_123()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 2;
  result = globalReturnsTrue();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (0000000000429243) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_11_good()
{
  goodB2G1_142();
  goodB2G2_142();
  goodG2B1_123();
  return goodG2B2_123();
}

//----- (0000000000429271) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_02_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (00000000004292C5) ----------------------------------------------------
int goodB2G1_143()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (000000000042932B) ----------------------------------------------------
int goodB2G2_143()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (0000000000429391) ----------------------------------------------------
int goodG2B1_124()
{
  return printHexCharLine(3);
}

//----- (00000000004293B8) ----------------------------------------------------
int goodG2B2_124()
{
  return printHexCharLine(3);
}

//----- (00000000004293DF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_02_good()
{
  goodB2G1_143();
  goodB2G2_143();
  goodG2B1_124();
  return goodG2B2_124();
}

//----- (000000000042940D) ----------------------------------------------------
int __fastcall badSink_36(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (0000000000429435) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_41_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return badSink_36(v0);
}

//----- (000000000042947F) ----------------------------------------------------
int __fastcall goodG2BSink_36(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (00000000004294A7) ----------------------------------------------------
int goodG2B_240()
{
  return goodG2BSink_36(2);
}

//----- (00000000004294C4) ----------------------------------------------------
int __fastcall goodB2GSink_26(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000042950A) ----------------------------------------------------
int goodB2G_221()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return goodB2GSink_26(v0);
}

//----- (0000000000429554) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_41_good()
{
  goodB2G_221();
  return goodG2B_240();
}

//----- (000000000042956E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_01_bad()
{
  return printHexCharLine(254);
}

//----- (000000000042959A) ----------------------------------------------------
int goodG2B_241()
{
  return printHexCharLine(4);
}

//----- (00000000004295C6) ----------------------------------------------------
int goodB2G_222()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (0000000000429604) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_01_good()
{
  goodG2B_241();
  return goodB2G_222();
}

//----- (000000000042961E) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_13_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042968D) ----------------------------------------------------
int goodB2G1_144()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042971A) ----------------------------------------------------
int goodB2G2_144()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042979B) ----------------------------------------------------
int goodG2B1_125()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004297E9) ----------------------------------------------------
int goodG2B2_125()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042982B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_13_good()
{
  goodB2G1_144();
  goodB2G2_144();
  goodG2B1_125();
  return goodG2B2_125();
}

//----- (0000000000429859) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429882) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (00000000004298AB) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53d_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (00000000004298E6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042991D) ----------------------------------------------------
int goodG2B_242()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_fscanf_square_63b_goodG2BSink(&v1);
}

//----- (000000000042993B) ----------------------------------------------------
int goodB2G_223()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_square_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (0000000000429972) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_63_good()
{
  goodG2B_242();
  return goodB2G_223();
}

//----- (000000000042998C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_07_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_7 == 5 )
    v1 = 127;
  result = staticFive_7;
  if ( staticFive_7 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F10C: using guessed type int staticFive_7;

//----- (00000000004299C9) ----------------------------------------------------
int goodB2G1_145()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_7 == 5 )
    v1 = 127;
  if ( staticFive_7 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 + 1);
}
// 65F10C: using guessed type int staticFive_7;

//----- (0000000000429A24) ----------------------------------------------------
int goodB2G2_145()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_7 == 5 )
    v1 = 127;
  result = staticFive_7;
  if ( staticFive_7 == 5 )
  {
    if ( v1 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 + 1);
  }
  return result;
}
// 65F10C: using guessed type int staticFive_7;

//----- (0000000000429A73) ----------------------------------------------------
int goodG2B1_126()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_7 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_7;
  if ( staticFive_7 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F10C: using guessed type int staticFive_7;

//----- (0000000000429ABC) ----------------------------------------------------
int goodG2B2_126()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_7 == 5 )
    v1 = 2;
  result = staticFive_7;
  if ( staticFive_7 == 5 )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F10C: using guessed type int staticFive_7;

//----- (0000000000429AF9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_07_good()
{
  goodB2G1_145();
  goodB2G2_145();
  goodG2B1_126();
  return goodG2B2_126();
}

//----- (0000000000429B27) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_10_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v2 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000429B8F) ----------------------------------------------------
int goodB2G1_146()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000429C15) ----------------------------------------------------
int goodB2G2_146()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000429C8F) ----------------------------------------------------
int goodG2B1_127()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (0000000000429CD6) ----------------------------------------------------
int goodG2B2_127()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(v1 + 1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (0000000000429D11) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_10_good()
{
  goodB2G1_146();
  goodB2G2_146();
  goodG2B1_127();
  return goodG2B2_127();
}

//----- (0000000000429D3F) ----------------------------------------------------
int __fastcall badSink_37(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429D68) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_44_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_37)((unsigned int)(char)v0);
}

//----- (0000000000429DBB) ----------------------------------------------------
int __fastcall goodG2BSink_37(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (0000000000429DE4) ----------------------------------------------------
int goodG2B_243()
{
  return goodG2BSink_37(2);
}

//----- (0000000000429E0A) ----------------------------------------------------
int __fastcall goodB2GSink_27(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (0000000000429E45) ----------------------------------------------------
__int64 goodB2G_224()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_27)((unsigned int)(char)v0);
}

//----- (0000000000429E98) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_44_good()
{
  goodG2B_243();
  return goodB2G_224();
}

//----- (0000000000429EB2) ----------------------------------------------------
int badSink_38()
{
  return printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_45_badData + 1);
}
// 65F2C8: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_badData;

//----- (0000000000429EDF) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_45_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_45_badData = v1;
  return badSink_38();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F2C8: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_badData;

//----- (0000000000429F23) ----------------------------------------------------
int goodG2BSink_38()
{
  return printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodG2BData + 1);
}
// 65F2D0: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodG2BData;

//----- (0000000000429F50) ----------------------------------------------------
int goodG2B_244()
{
  CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodG2BData = 2LL;
  return goodG2BSink_38();
}
// 65F2D0: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodG2BData;

//----- (0000000000429F7F) ----------------------------------------------------
int goodB2GSink_28()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData == 0x7FFFFFFFFFFFFFFFLL )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printLongLongLine(CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData + 1);
  return result;
}
// 65F2D8: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData;

//----- (0000000000429FC8) ----------------------------------------------------
int goodB2G_225()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData = v1;
  return goodB2GSink_28();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F2D8: using guessed type __int64 CWE190_Integer_Overflow__int64_t_fscanf_add_45_goodB2GData;

//----- (000000000042A00C) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_45_good()
{
  goodG2B_244();
  return goodB2G_225();
}

//----- (000000000042A026) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_22_bad()
{
  CWE190_Integer_Overflow__char_max_square_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_max_square_22_badSink(127);
}
// 65F2E0: using guessed type int CWE190_Integer_Overflow__char_max_square_22_badGlobal;

//----- (000000000042A04D) ----------------------------------------------------
int goodB2G1_147()
{
  CWE190_Integer_Overflow__char_max_square_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_max_square_22_goodB2G1Sink(127);
}
// 65F2E4: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodB2G1Global;

//----- (000000000042A074) ----------------------------------------------------
int goodB2G2_147()
{
  CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_max_square_22_goodB2G2Sink(127);
}
// 65F2E8: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global;

//----- (000000000042A09B) ----------------------------------------------------
int goodG2B_245()
{
  CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_max_square_22_goodG2BSink(2);
}
// 65F2EC: using guessed type int CWE190_Integer_Overflow__char_max_square_22_goodG2BGlobal;

//----- (000000000042A0C2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_22_good()
{
  goodB2G1_147();
  goodB2G2_147();
  return goodG2B_245();
}

//----- (000000000042A0E6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_07_bad()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F110: using guessed type int staticFive_8;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A140) ----------------------------------------------------
int goodB2G1_148()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFive_8 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F110: using guessed type int staticFive_8;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A1CA) ----------------------------------------------------
int goodB2G2_148()
{
  int result; // eax
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_8 == 5 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F110: using guessed type int staticFive_8;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A248) ----------------------------------------------------
int goodG2B1_128()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_8 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_8;
  if ( staticFive_8 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F110: using guessed type int staticFive_8;

//----- (000000000042A295) ----------------------------------------------------
int goodG2B2_128()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_8 == 5 )
    v1 = 2;
  result = staticFive_8;
  if ( staticFive_8 == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 65F110: using guessed type int staticFive_8;

//----- (000000000042A2D6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_07_good()
{
  goodB2G1_148();
  goodB2G2_148();
  goodG2B1_128();
  return goodG2B2_128();
}

//----- (000000000042A304) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_06_bad()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441C1C, &v1);
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A35F) ----------------------------------------------------
int goodB2G1_149()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441C1C, &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A3E5) ----------------------------------------------------
int goodB2G2_149()
{
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_441C1C, &v1);
  if ( v1 == 0x7FFFFFFFFFFFFFFFLL )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 + 1;
  return printLongLongLine(v1 + 1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A45F) ----------------------------------------------------
int goodG2B1_129()
{
  return printLongLongLine(3LL);
}

//----- (000000000042A4B1) ----------------------------------------------------
int goodG2B2_129()
{
  return printLongLongLine(3LL);
}

//----- (000000000042A4F7) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_06_good()
{
  goodB2G1_149();
  goodB2G2_149();
  goodG2B1_129();
  return goodG2B2_129();
}

//----- (000000000042A525) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54d_badSink(a1);
}

//----- (000000000042A53F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54d_goodG2BSink(a1);
}

//----- (000000000042A559) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_add_54d_goodB2GSink(a1);
}

//----- (000000000042A573) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_10_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A5CE) ----------------------------------------------------
int goodB2G1_150()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;
// 65F318: using guessed type int globalFalse;

//----- (000000000042A649) ----------------------------------------------------
int goodB2G2_150()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F11C: using guessed type int globalTrue;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042A6B8) ----------------------------------------------------
int goodG2B1_130()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;
// 65F318: using guessed type int globalFalse;

//----- (000000000042A704) ----------------------------------------------------
int goodG2B2_130()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( globalTrue )
    v1 = 2;
  result = globalTrue;
  if ( globalTrue )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F11C: using guessed type int globalTrue;

//----- (000000000042A744) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_10_good()
{
  goodB2G1_150();
  goodB2G2_150();
  goodG2B1_130();
  return goodG2B2_130();
}

//----- (000000000042A772) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_01_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return printHexCharLine(v0 + 1);
}

//----- (000000000042A7C6) ----------------------------------------------------
int goodG2B_246()
{
  return printHexCharLine(3);
}

//----- (000000000042A7ED) ----------------------------------------------------
int goodB2G_226()
{
  int v0; // eax
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  if ( (_BYTE)v0 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v0 + 1);
  return result;
}

//----- (000000000042A853) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_01_good()
{
  goodG2B_246();
  return goodB2G_226();
}

//----- (000000000042A86D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000042A891) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000042A8B5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_add_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000042A8EB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_09_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042A92B) ----------------------------------------------------
int goodB2G1_151()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 > 62 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(2 * v1);
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042A989) ----------------------------------------------------
int goodB2G2_151()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 127;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v1);
  }
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042A9DB) ----------------------------------------------------
int goodG2B1_131()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;
// 442564: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042AA27) ----------------------------------------------------
int goodG2B2_131()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_TRUE )
    v1 = 2;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printHexCharLine(2 * v1);
  return result;
}
// 442560: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042AA67) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_09_good()
{
  goodB2G1_151();
  goodB2G2_151();
  goodG2B1_131();
  return goodG2B2_131();
}

//----- (000000000042AA95) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53d_badSink(a1);
}

//----- (000000000042AAAF) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53d_goodG2BSink(a1);
}

//----- (000000000042AAC9) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53d_goodB2GSink(a1);
}

//----- (000000000042AAE3) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_badSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000042AB27) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000042AB3A) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_multiply_61b_goodB2GSource()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000042AB7E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54e_badSink(a1);
}

//----- (000000000042AB98) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54e_goodG2BSink(a1);
}

//----- (000000000042ABB2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_square_54d_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_square_54e_goodB2GSink(a1);
}

//----- (000000000042ABCC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_13_bad()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042AC0D) ----------------------------------------------------
int goodB2G1_152()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v1 * v1);
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042AC78) ----------------------------------------------------
int goodB2G2_152()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 127;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 < -11 || v1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042ACD7) ----------------------------------------------------
int goodG2B1_132()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042AD24) ----------------------------------------------------
int goodG2B2_132()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 2;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printHexCharLine(v1 * v1);
  return result;
}
// 442568: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042AD65) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_13_good()
{
  goodB2G1_152();
  goodB2G2_152();
  goodG2B1_132();
  return goodG2B2_132();
}

//----- (000000000042AD93) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_add_65_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_add_65b_badSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042ADD5) ----------------------------------------------------
int goodG2B_247()
{
  return CWE190_Integer_Overflow__char_fscanf_add_65b_goodG2BSink(2);
}

//----- (000000000042ADFB) ----------------------------------------------------
__int64 goodB2G_227()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_add_65b_goodB2GSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042AE3D) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_add_65_good()
{
  goodG2B_247();
  return goodB2G_227();
}

//----- (000000000042AE57) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_18_bad()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042AEB2) ----------------------------------------------------
int goodB2G_228()
{
  int result; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    result = rand();
  }
  else
  {
    rand();
    rand();
    result = ~rand();
  }
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042AF1F) ----------------------------------------------------
int goodG2B_248()
{
  return printHexCharLine(4);
}

//----- (000000000042AF4D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_18_good()
{
  goodB2G_228();
  return goodG2B_248();
}

//----- (000000000042AF67) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_17_bad()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    v2 = v1 * v1;
    result = printHexCharLine(v1 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042AFD1) ----------------------------------------------------
int goodB2G_229()
{
  int result; // eax
  char v1; // [rsp+6h] [rbp-Ah]
  char v2; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%c", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 < -11 || v1 > 11 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = v1 * v1;
      result = printHexCharLine(v1 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B05F) ----------------------------------------------------
int goodG2B_249()
{
  int result; // eax
  char v1; // [rsp+7h] [rbp-9h]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = 32;
  for ( i = 0; i <= 0; ++i )
    v1 = 2;
  for ( j = 0; j <= 0; ++j )
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000042B0B0) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_17_good()
{
  goodB2G_229();
  return goodG2B_249();
}

//----- (000000000042B0CA) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_badSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000042B0F2) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_goodG2BSink(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000042B11A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_square_53d_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000042B160) ----------------------------------------------------
__int64 staticReturnsTrue_9()
{
  return 1LL;
}

//----- (000000000042B16B) ----------------------------------------------------
__int64 staticReturnsFalse_9()
{
  return 0LL;
}

//----- (000000000042B176) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_08_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_9() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_9();
  if ( result )
    result = printHexCharLine(v2 + 1);
  return result;
}

//----- (000000000042B1E6) ----------------------------------------------------
int goodB2G1_153()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_9() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  if ( (unsigned int)staticReturnsFalse_9() )
    return printLine("Benign, fixed string");
  if ( v2 == 127 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(v2 + 1);
}

//----- (000000000042B274) ----------------------------------------------------
int goodB2G2_153()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( (unsigned int)staticReturnsTrue_9() )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticReturnsTrue_9();
  if ( result )
  {
    if ( v2 == 127 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(v2 + 1);
  }
  return result;
}

//----- (000000000042B2F6) ----------------------------------------------------
int goodG2B1_133()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsFalse_9() )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticReturnsTrue_9();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000042B345) ----------------------------------------------------
int goodG2B2_133()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( (unsigned int)staticReturnsTrue_9() )
    v1 = 2;
  result = staticReturnsTrue_9();
  if ( result )
    result = printHexCharLine(v1 + 1);
  return result;
}

//----- (000000000042B388) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_add_08_good()
{
  goodB2G1_153();
  goodB2G2_153();
  goodG2B1_133();
  return goodG2B2_133();
}

//----- (000000000042B3B6) ----------------------------------------------------
int __fastcall badSink_39(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000042B3DE) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_square_44_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = badSink_39;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B420) ----------------------------------------------------
int __fastcall goodG2BSink_39(char a1)
{
  return printHexCharLine(a1 * a1);
}

//----- (000000000042B448) ----------------------------------------------------
int goodG2B_250()
{
  return goodG2BSink_39(2);
}

//----- (000000000042B46E) ----------------------------------------------------
int __fastcall goodB2GSink_29(char a1)
{
  int result; // eax

  if ( a1 < -11 || a1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 * a1);
  return result;
}

//----- (000000000042B4B4) ----------------------------------------------------
__int64 goodB2G_230()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_29;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B4F6) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_square_44_good()
{
  goodG2B_250();
  return goodB2G_230();
}

//----- (000000000042B510) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_61_bad()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_61b_badSource();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042B546) ----------------------------------------------------
int goodG2B_251()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_61b_goodG2BSource();
  if ( (char)result > 0 )
    result = printHexCharLine(2 * result);
  return result;
}

//----- (000000000042B57C) ----------------------------------------------------
int goodB2G_231()
{
  int result; // eax

  result = CWE190_Integer_Overflow__char_rand_multiply_61b_goodB2GSource();
  if ( (char)result > 0 )
  {
    if ( (char)result > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * result);
  }
  return result;
}

//----- (000000000042B5C4) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_61_good()
{
  goodG2B_251();
  return goodB2G_231();
}

//----- (000000000042B5DE) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_22_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_multiply_22_badSink(v0);
}
// 65F2F0: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_badGlobal;

//----- (000000000042B632) ----------------------------------------------------
int goodB2G1_154()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global = 0;
  return CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Sink(v0);
}
// 65F2F4: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G1Global;

//----- (000000000042B686) ----------------------------------------------------
int goodB2G2_154()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global = 1;
  return CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Sink(v0);
}
// 65F2F8: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodB2G2Global;

//----- (000000000042B6DA) ----------------------------------------------------
int goodG2B_252()
{
  CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal = 1;
  return CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BSink(2);
}
// 65F2FC: using guessed type int CWE190_Integer_Overflow__char_rand_multiply_22_goodG2BGlobal;

//----- (000000000042B701) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_22_good()
{
  goodB2G1_154();
  goodB2G2_154();
  return goodG2B_252();
}

//----- (000000000042B725) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B760) ----------------------------------------------------
int goodG2B_253()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodG2BSink(&v1);
}

//----- (000000000042B786) ----------------------------------------------------
int goodB2G_232()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_63b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B7C1) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_63_good()
{
  goodG2B_253();
  return goodB2G_232();
}

//----- (000000000042B7DB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_15_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v1;
    result = printHexCharLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B824) ----------------------------------------------------
int goodB2G1_155()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B881) ----------------------------------------------------
int goodB2G2_155()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B8DE) ----------------------------------------------------
int goodG2B1_134()
{
  return printHexCharLine(4);
}

//----- (000000000042B90C) ----------------------------------------------------
int goodG2B2_134()
{
  return printHexCharLine(4);
}

//----- (000000000042B93A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_15_good()
{
  goodB2G1_155();
  goodB2G2_155();
  goodG2B1_134();
  return goodG2B2_134();
}

//----- (000000000042B968) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_square_61b_badSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B998) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_square_61b_goodG2BSource()
{
  return 2LL;
}

//----- (000000000042B9AB) ----------------------------------------------------
__int64 __fastcall CWE190_Integer_Overflow__char_fscanf_square_61b_goodB2GSource(unsigned __int8 a1)
{
  unsigned __int8 v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%c", &v2);
  return v2;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042B9DB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_07_bad()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 && v2 > 0 )
    result = printHexCharLine(2 * v2);
  return result;
}
// 65F114: using guessed type int staticFive_9;

//----- (000000000042BA4A) ----------------------------------------------------
int goodB2G1_156()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_9;
  if ( staticFive_9 != 5 )
    return printLine("Benign, fixed string");
  if ( v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F114: using guessed type int staticFive_9;

//----- (000000000042BAD7) ----------------------------------------------------
int goodB2G2_156()
{
  int v0; // eax
  int result; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( staticFive_9 == 5 )
  {
    if ( rand() & 1 )
    {
      rand();
      rand();
      LOBYTE(v0) = rand();
    }
    else
    {
      rand();
      rand();
      v0 = ~rand();
    }
    v2 = v0;
  }
  result = staticFive_9;
  if ( staticFive_9 == 5 && v2 > 0 )
  {
    if ( v2 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * v2);
  }
  return result;
}
// 65F114: using guessed type int staticFive_9;

//----- (000000000042BB58) ----------------------------------------------------
int goodG2B1_135()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_9 == 5 )
    v1 = 2;
  else
    printLine("Benign, fixed string");
  result = staticFive_9;
  if ( staticFive_9 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F114: using guessed type int staticFive_9;

//----- (000000000042BBA6) ----------------------------------------------------
int goodG2B2_135()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFive_9 == 5 )
    v1 = 2;
  result = staticFive_9;
  if ( staticFive_9 == 5 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F114: using guessed type int staticFive_9;

//----- (000000000042BBE8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_multiply_07_good()
{
  goodB2G1_156();
  goodB2G2_156();
  goodG2B1_135();
  return goodG2B2_135();
}

//----- (000000000042BC16) ----------------------------------------------------
int __fastcall badSink_40(char a1)
{
  int result; // eax

  result = badStatic_9;
  if ( badStatic_9 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F300: using guessed type int badStatic_9;

//----- (000000000042BC48) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_21_bad()
{
  badStatic_9 = 1;
  return badSink_40(127);
}
// 65F300: using guessed type int badStatic_9;

//----- (000000000042BC6F) ----------------------------------------------------
int __fastcall goodB2G1Sink_9(char a1)
{
  if ( goodB2G1Static_9 )
    return printLine("Benign, fixed string");
  if ( a1 < -11 || a1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  return printHexCharLine(a1 * a1);
}
// 65F304: using guessed type int goodB2G1Static_9;

//----- (000000000042BCCB) ----------------------------------------------------
int goodB2G1_157()
{
  goodB2G1Static_9 = 0;
  return goodB2G1Sink_9(127);
}
// 65F304: using guessed type int goodB2G1Static_9;

//----- (000000000042BCF2) ----------------------------------------------------
int __fastcall goodB2G2Sink_9(char a1)
{
  int result; // eax

  result = goodB2G2Static_9;
  if ( goodB2G2Static_9 )
  {
    if ( a1 < -11 || a1 > 11 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(a1 * a1);
  }
  return result;
}
// 65F308: using guessed type int goodB2G2Static_9;

//----- (000000000042BD42) ----------------------------------------------------
int goodB2G2_157()
{
  goodB2G2Static_9 = 1;
  return goodB2G2Sink_9(127);
}
// 65F308: using guessed type int goodB2G2Static_9;

//----- (000000000042BD69) ----------------------------------------------------
int __fastcall goodG2BSink_40(char a1)
{
  int result; // eax

  result = goodG2BStatic_9;
  if ( goodG2BStatic_9 )
    result = printHexCharLine(a1 * a1);
  return result;
}
// 65F30C: using guessed type int goodG2BStatic_9;

//----- (000000000042BD9B) ----------------------------------------------------
int goodG2B_254()
{
  goodG2BStatic_9 = 1;
  return goodG2BSink_40(2);
}
// 65F30C: using guessed type int goodG2BStatic_9;

//----- (000000000042BDC2) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_21_good()
{
  goodB2G1_157();
  goodB2G2_157();
  return goodG2B_254();
}

//----- (000000000042BDE6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_03_bad()
{
  return printHexCharLine(1);
}

//----- (000000000042BE11) ----------------------------------------------------
int goodB2G1_158()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000042BE5A) ----------------------------------------------------
int goodB2G2_158()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000042BEA3) ----------------------------------------------------
int goodG2B1_136()
{
  return printHexCharLine(4);
}

//----- (000000000042BECE) ----------------------------------------------------
int goodG2B2_136()
{
  return printHexCharLine(4);
}

//----- (000000000042BEF9) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_03_good()
{
  goodB2G1_158();
  goodB2G2_158();
  goodG2B1_136();
  return goodG2B2_136();
}

//----- (000000000042BF27) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042BF8C) ----------------------------------------------------
int goodB2G1_159()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C01C) ----------------------------------------------------
int goodB2G2_159()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%ld", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = v1;
    if ( v1 > 0 )
    {
      if ( v1 > 4611686018427387902LL )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printLongLongLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F120: using guessed type int globalFive;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C0A0) ----------------------------------------------------
int goodG2B1_137()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 2LL;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000042C0FA) ----------------------------------------------------
int goodG2B2_137()
{
  int result; // eax
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  if ( globalFive == 5 )
    v1 = 2LL;
  result = globalFive;
  if ( globalFive == 5 && v1 > 0 )
    result = printLongLongLine(2 * v1);
  return result;
}
// 65F120: using guessed type int globalFive;

//----- (000000000042C148) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_14_good()
{
  goodB2G1_159();
  goodB2G2_159();
  goodG2B1_137();
  return goodG2B2_137();
}

//----- (000000000042C176) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_64_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_64b_badSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C1B1) ----------------------------------------------------
int goodG2B_255()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 2LL;
  return CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodG2BSink(&v1);
}

//----- (000000000042C1D7) ----------------------------------------------------
int goodB2G_233()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_64b_goodB2GSink(&v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C212) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_64_good()
{
  goodG2B_255();
  return goodB2G_233();
}

//----- (000000000042C22C) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54d_badSink(a1);
}

//----- (000000000042C246) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54d_goodG2BSink(a1);
}

//----- (000000000042C260) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_54c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_rand_square_54d_goodB2GSink(a1);
}

//----- (000000000042C27A) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_18_bad()
{
  return printHexCharLine(1);
}

//----- (000000000042C2A7) ----------------------------------------------------
int goodB2G_234()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000042C2F2) ----------------------------------------------------
int goodG2B_256()
{
  return printHexCharLine(4);
}

//----- (000000000042C31F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_18_good()
{
  goodB2G_234();
  return goodG2B_256();
}

//----- (000000000042C339) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_51_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_51b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C374) ----------------------------------------------------
int goodG2B_257()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodG2BSink(2LL);
}

//----- (000000000042C39A) ----------------------------------------------------
int goodB2G_235()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_add_51b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C3D5) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_add_51_good()
{
  goodG2B_257();
  return goodB2G_235();
}

//----- (000000000042C3EF) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_06_bad()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44211C, &v1);
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C447) ----------------------------------------------------
int goodB2G1_160()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44211C, &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C4CF) ----------------------------------------------------
int goodB2G2_160()
{
  char v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, &unk_44211C, &v1);
  if ( v1 < -11 || v1 > 11 )
    return printLine("data value is too large to perform arithmetic safely.");
  v2 = v1 * v1;
  return printHexCharLine(v1 * v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C54B) ----------------------------------------------------
int goodG2B1_138()
{
  return printHexCharLine(4);
}

//----- (000000000042C596) ----------------------------------------------------
int goodG2B2_138()
{
  return printHexCharLine(4);
}

//----- (000000000042C5D5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_06_good()
{
  goodB2G1_160();
  goodB2G2_160();
  goodG2B1_138();
  return goodG2B2_138();
}

//----- (000000000042C603) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad()
{
  __int64 v0; // rax
  __int64 v2; // [rsp+0h] [rbp-30h]
  __int64 v3; // [rsp+8h] [rbp-28h]
  __int64 v4; // [rsp+10h] [rbp-20h]
  __int64 v5; // [rsp+18h] [rbp-18h]
  __int64 *v6; // [rsp+20h] [rbp-10h]
  __int64 *v7; // [rsp+28h] [rbp-8h]

  v7 = &v3;
  v6 = &v3;
  v3 = 0LL;
  v2 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v2);
  *v7 = v2;
  v0 = *v6;
  v5 = *v6;
  if ( v5 > 0 )
  {
    v4 = 2 * v5;
    LODWORD(v0) = printLongLongLine(2 * v5);
  }
  return v0;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C681) ----------------------------------------------------
int goodG2B_258()
{
  __int64 v1; // [rsp+0h] [rbp-30h]
  __int64 v2; // [rsp+18h] [rbp-18h]
  __int64 *v3; // [rsp+20h] [rbp-10h]
  __int64 *v4; // [rsp+28h] [rbp-8h]

  v4 = &v1;
  v3 = &v1;
  v2 = 2LL;
  v1 = 2LL;
  return printLongLongLine(4LL);
}

//----- (000000000042C6EA) ----------------------------------------------------
int goodB2G_236()
{
  __int64 v0; // rax
  __int64 v2; // [rsp+0h] [rbp-30h]
  __int64 v3; // [rsp+8h] [rbp-28h]
  __int64 v4; // [rsp+10h] [rbp-20h]
  __int64 v5; // [rsp+18h] [rbp-18h]
  __int64 *v6; // [rsp+20h] [rbp-10h]
  __int64 *v7; // [rsp+28h] [rbp-8h]

  v7 = &v3;
  v6 = &v3;
  v3 = 0LL;
  v2 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v2);
  *v7 = v2;
  v0 = *v6;
  v5 = *v6;
  if ( v5 > 0 )
  {
    if ( v5 > 4611686018427387902LL )
    {
      LODWORD(v0) = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v4 = 2 * v5;
      LODWORD(v0) = printLongLongLine(2 * v5);
    }
  }
  return v0;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042C784) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_good()
{
  goodG2B_258();
  return goodB2G_236();
}

//----- (000000000042C79E) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_65_bad()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_add_65b_badSink)((unsigned int)(char)v0);
}

//----- (000000000042C7F1) ----------------------------------------------------
int goodG2B_259()
{
  return CWE190_Integer_Overflow__char_rand_add_65b_goodG2BSink(2);
}

//----- (000000000042C817) ----------------------------------------------------
__int64 goodB2G_237()
{
  int v0; // eax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE190_Integer_Overflow__char_rand_add_65b_goodB2GSink)((unsigned int)(char)v0);
}

//----- (000000000042C86A) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_rand_add_65_good()
{
  goodG2B_259();
  return goodB2G_237();
}

//----- (000000000042C884) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_54_bad()
{
  return CWE190_Integer_Overflow__char_max_multiply_54b_badSink(127);
}

//----- (000000000042C8A1) ----------------------------------------------------
int goodG2B_260()
{
  return CWE190_Integer_Overflow__char_max_multiply_54b_goodG2BSink(2);
}

//----- (000000000042C8BE) ----------------------------------------------------
int goodB2G_238()
{
  return CWE190_Integer_Overflow__char_max_multiply_54b_goodB2GSink(127);
}

//----- (000000000042C8DB) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_multiply_54_good()
{
  goodG2B_260();
  return goodB2G_238();
}

//----- (000000000042C8F5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53c_badSink(a1);
}

//----- (000000000042C90F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53c_goodG2BSink(a1);
}

//----- (000000000042C929) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_53b_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_fscanf_add_53c_goodB2GSink(a1);
}

//----- (000000000042C943) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_badSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000042C974) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_goodG2BSink(_BYTE *a1)
{
  return printHexCharLine(*a1 * *a1);
}

//----- (000000000042C9A5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_rand_square_63b_goodB2GSink(char *a1)
{
  int result; // eax
  char v2; // [rsp+1Fh] [rbp-1h]

  v2 = *a1;
  if ( *a1 < -11 || v2 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v2 * v2);
  return result;
}

//----- (000000000042C9F4) ----------------------------------------------------
int badSink_41()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_fscanf_square_45_badData
         * CWE190_Integer_Overflow__char_fscanf_square_45_badData);
}
// 65F310: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_badData;

//----- (000000000042CA21) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_45_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_45_badData = v1;
  return badSink_41();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F310: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_badData;

//----- (000000000042CA60) ----------------------------------------------------
int goodG2BSink_41()
{
  return printHexCharLine(
           CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData
         * CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData);
}
// 65F311: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData;

//----- (000000000042CA8D) ----------------------------------------------------
int goodG2B_261()
{
  CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData = 2;
  return goodG2BSink_41();
}
// 65F311: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData;

//----- (000000000042CAB3) ----------------------------------------------------
int goodB2GSink_30()
{
  int result; // eax

  if ( CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData < -11
    || CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData > 11 )
  {
    result = printLine("data value is too large to perform arithmetic safely.");
  }
  else
  {
    result = printHexCharLine(
               CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData
             * CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData);
  }
  return result;
}
// 65F312: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData;

//----- (000000000042CAFE) ----------------------------------------------------
int goodB2G_239()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData = v1;
  return goodB2GSink_30();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F312: using guessed type char CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData;

//----- (000000000042CB3D) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_45_good()
{
  goodG2B_261();
  return goodB2G_239();
}

//----- (000000000042CB57) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_badSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000042CB7B) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_goodG2BSink(char a1)
{
  return printHexCharLine(a1 + 1);
}

//----- (000000000042CB9F) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_fscanf_add_52c_goodB2GSink(char a1)
{
  int result; // eax

  if ( a1 == 127 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(a1 + 1);
  return result;
}

//----- (000000000042CBD5) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_badSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042CC09) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodG2BSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 > 0 )
    result = printLongLongLine(2 * a1);
  return result;
}

//----- (000000000042CC3D) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodB2GSink(__int64 a1)
{
  int result; // eax

  result = a1;
  if ( a1 > 0 )
  {
    if ( a1 > 4611686018427387902LL )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printLongLongLine(2 * a1);
  }
  return result;
}

//----- (000000000042CC8D) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_square_65_bad()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_square_65b_badSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042CCCF) ----------------------------------------------------
int goodG2B_262()
{
  return CWE190_Integer_Overflow__char_fscanf_square_65b_goodG2BSink(2);
}

//----- (000000000042CCF5) ----------------------------------------------------
__int64 goodB2G_240()
{
  char v1; // [rsp+7h] [rbp-9h]
  int (__fastcall *v2)(char); // [rsp+8h] [rbp-8h]

  v2 = CWE190_Integer_Overflow__char_fscanf_square_65b_goodB2GSink;
  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)((unsigned int)v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042CD37) ----------------------------------------------------
__int64 CWE190_Integer_Overflow__char_fscanf_square_65_good()
{
  goodG2B_262();
  return goodB2G_240();
}

//----- (000000000042CD51) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_68_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_68_badData = v1;
  return CWE190_Integer_Overflow__char_fscanf_add_68b_badSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F379: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_badData;

//----- (000000000042CD90) ----------------------------------------------------
int goodG2B_263()
{
  CWE190_Integer_Overflow__char_fscanf_add_68_goodG2BData = 2;
  return CWE190_Integer_Overflow__char_fscanf_add_68b_goodG2BSink();
}
// 65F37A: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_goodG2BData;

//----- (000000000042CDB6) ----------------------------------------------------
int goodB2G_241()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData = v1;
  return CWE190_Integer_Overflow__char_fscanf_add_68b_goodB2GSink();
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;
// 65F378: using guessed type char CWE190_Integer_Overflow__char_fscanf_add_68_goodB2GData;

//----- (000000000042CDF5) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_68_good()
{
  goodG2B_263();
  return goodB2G_241();
}

//----- (000000000042CE0F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_61_bad()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_fscanf_square_61b_badSource(0x20u);
  return printHexCharLine(v0 * v0);
}

//----- (000000000042CE44) ----------------------------------------------------
int goodG2B_264()
{
  char v0; // al

  v0 = CWE190_Integer_Overflow__char_fscanf_square_61b_goodG2BSource();
  return printHexCharLine(v0 * v0);
}

//----- (000000000042CE79) ----------------------------------------------------
int goodB2G_242()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = CWE190_Integer_Overflow__char_fscanf_square_61b_goodB2GSource(0x20u);
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000042CECC) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_square_61_good()
{
  goodG2B_264();
  return goodB2G_242();
}

//----- (000000000042CEE6) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_63_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_square_63b_badSink(&v1);
}

//----- (000000000042CF04) ----------------------------------------------------
int goodG2B_265()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_max_square_63b_goodG2BSink(&v1);
}

//----- (000000000042CF22) ----------------------------------------------------
int goodB2G_243()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 127;
  return CWE190_Integer_Overflow__char_max_square_63b_goodB2GSink(&v1);
}

//----- (000000000042CF40) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_square_63_good()
{
  goodG2B_265();
  return goodB2G_243();
}

//----- (000000000042CF5A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_badSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042CF83) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_goodG2BSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042CFAC) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_65b_goodB2GSink(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000042CFE7) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_05_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F118: using guessed type int staticTrue_9;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D042) ----------------------------------------------------
int goodB2G1_161()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%c", &v1);
  if ( staticFalse_9 )
    return printLine("Benign, fixed string");
  result = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v1 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printHexCharLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F118: using guessed type int staticTrue_9;
// 65F128: using guessed type __int64 stdin;
// 65F314: using guessed type int staticFalse_9;

//----- (000000000042D0BD) ----------------------------------------------------
int goodB2G2_161()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Eh] [rbp-2h]
  char v2; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_9 )
    __isoc99_fscanf(stdin, "%c", &v1);
  result = staticTrue_9;
  if ( staticTrue_9 )
  {
    result = v1;
    if ( (char)v1 > 0 )
    {
      if ( (char)v1 > 62 )
      {
        result = printLine("data value is too large to perform arithmetic safely.");
      }
      else
      {
        v2 = 2 * v1;
        result = printHexCharLine(2 * v1);
      }
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F118: using guessed type int staticTrue_9;
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D12C) ----------------------------------------------------
int goodG2B1_139()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticFalse_9 )
    printLine("Benign, fixed string");
  else
    v1 = 2;
  result = staticTrue_9;
  if ( staticTrue_9 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F118: using guessed type int staticTrue_9;
// 65F314: using guessed type int staticFalse_9;

//----- (000000000042D178) ----------------------------------------------------
int goodG2B2_139()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  if ( staticTrue_9 )
    v1 = 2;
  result = staticTrue_9;
  if ( staticTrue_9 )
    result = printHexCharLine(2 * v1);
  return result;
}
// 65F118: using guessed type int staticTrue_9;

//----- (000000000042D1B8) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_05_good()
{
  goodB2G1_161();
  goodB2G2_161();
  goodG2B1_139();
  return goodG2B2_139();
}

//----- (000000000042D1E6) ----------------------------------------------------
int __fastcall badSink_42(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042D20F) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_41_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return badSink_42(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D248) ----------------------------------------------------
int __fastcall goodG2BSink_42(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
    result = printHexCharLine(2 * a1);
  return result;
}

//----- (000000000042D271) ----------------------------------------------------
int goodG2B_266()
{
  return goodG2BSink_42(2);
}

//----- (000000000042D28E) ----------------------------------------------------
int __fastcall goodB2GSink_31(int a1)
{
  int result; // eax

  result = a1;
  if ( (char)a1 > 0 )
  {
    if ( (char)a1 > 62 )
      result = printLine("data value is too large to perform arithmetic safely.");
    else
      result = printHexCharLine(2 * a1);
  }
  return result;
}

//----- (000000000042D2C9) ----------------------------------------------------
int goodB2G_244()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return goodB2GSink_31(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D302) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_41_good()
{
  goodB2G_244();
  return goodG2B_266();
}

//----- (000000000042D31C) ----------------------------------------------------
__int64 badSource_9()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000042D360) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_42_bad()
{
  char v0; // al

  v0 = badSource_9();
  return printHexCharLine(v0 * v0);
}

//----- (000000000042D395) ----------------------------------------------------
__int64 goodG2BSource_9()
{
  return 2LL;
}

//----- (000000000042D3A8) ----------------------------------------------------
int goodG2B_267()
{
  char v0; // al

  v0 = goodG2BSource_9();
  return printHexCharLine(v0 * v0);
}

//----- (000000000042D3DD) ----------------------------------------------------
__int64 goodB2GSource_9()
{
  __int64 result; // rax

  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(result) = rand();
  }
  else
  {
    rand();
    rand();
    LODWORD(result) = ~rand();
  }
  return (unsigned __int8)result;
}

//----- (000000000042D421) ----------------------------------------------------
int goodB2G_245()
{
  int result; // eax
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = goodB2GSource_9();
  if ( v1 < -11 || v1 > 11 )
    result = printLine("data value is too large to perform arithmetic safely.");
  else
    result = printHexCharLine(v1 * v1);
  return result;
}

//----- (000000000042D474) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_42_good()
{
  goodB2G_245();
  return goodG2B_267();
}

//----- (000000000042D48E) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_4423E0, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v1;
    result = printLongLongLine(2 * v1);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D4EF) ----------------------------------------------------
int goodB2G1_162()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_4423E0, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D57B) ----------------------------------------------------
int goodB2G2_162()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-10h]
  __int64 v2; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, &unk_4423E0, &v1);
  result = v1;
  if ( v1 > 0 )
  {
    if ( v1 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v1;
      result = printLongLongLine(2 * v1);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D5FB) ----------------------------------------------------
int goodG2B1_140()
{
  return printLongLongLine(4LL);
}

//----- (000000000042D651) ----------------------------------------------------
int goodG2B2_140()
{
  return printLongLongLine(4LL);
}

//----- (000000000042D69B) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_04_good()
{
  goodB2G1_162();
  goodB2G2_162();
  goodG2B1_140();
  return goodG2B2_140();
}

//----- (000000000042D6C9) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_bad()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( v1 > 0 )
  {
    v2 = 2 * v3;
    result = printLongLongLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D726) ----------------------------------------------------
int goodG2B_268()
{
  return printLongLongLine(4LL);
}

//----- (000000000042D76E) ----------------------------------------------------
int goodB2G_246()
{
  int result; // eax
  __int64 v1; // [rsp+0h] [rbp-20h]
  __int64 v2; // [rsp+8h] [rbp-18h]
  __int64 v3; // [rsp+10h] [rbp-10h]
  __int64 v4; // [rsp+18h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  v4 = v1;
  result = v1;
  v3 = v1;
  if ( v1 > 0 )
  {
    if ( v3 > 4611686018427387902LL )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v3;
      result = printLongLongLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D7E7) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_31_good()
{
  goodG2B_268();
  return goodB2G_246();
}

//----- (000000000042D801) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_54_bad()
{
  return CWE190_Integer_Overflow__char_max_add_54b_badSink(127);
}

//----- (000000000042D81E) ----------------------------------------------------
int goodG2B_269()
{
  return CWE190_Integer_Overflow__char_max_add_54b_goodG2BSink(2);
}

//----- (000000000042D83B) ----------------------------------------------------
int goodB2G_247()
{
  return CWE190_Integer_Overflow__char_max_add_54b_goodB2GSink(127);
}

//----- (000000000042D858) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_54_good()
{
  goodG2B_269();
  return goodB2G_247();
}

//----- (000000000042D872) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_53_bad()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_53b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D8AB) ----------------------------------------------------
int goodG2B_270()
{
  return CWE190_Integer_Overflow__char_fscanf_add_53b_goodG2BSink(2);
}

//----- (000000000042D8C8) ----------------------------------------------------
int goodB2G_248()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  return CWE190_Integer_Overflow__char_fscanf_add_53b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042D901) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_add_53_good()
{
  goodG2B_270();
  return goodB2G_248();
}

//----- (000000000042D91B) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_15_bad()
{
  return printHexCharLine(-128);
}

//----- (000000000042D944) ----------------------------------------------------
int goodB2G1_163()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000042D97F) ----------------------------------------------------
int goodB2G2_163()
{
  return printLine("data value is too large to perform arithmetic safely.");
}

//----- (000000000042D9BA) ----------------------------------------------------
int goodG2B1_141()
{
  return printHexCharLine(3);
}

//----- (000000000042D9E3) ----------------------------------------------------
int goodG2B2_141()
{
  return printHexCharLine(3);
}

//----- (000000000042DA0C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_max_add_15_good()
{
  goodB2G1_163();
  goodB2G2_163();
  goodG2B1_141();
  return goodG2B2_141();
}

//----- (000000000042DA3A) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_badSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53d_badSink(a1);
}

//----- (000000000042DA54) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_goodG2BSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53d_goodG2BSink(a1);
}

//----- (000000000042DA6E) ----------------------------------------------------
int __fastcall CWE190_Integer_Overflow__char_max_multiply_53c_goodB2GSink(char a1)
{
  return CWE190_Integer_Overflow__char_max_multiply_53d_goodB2GSink(a1);
}

//----- (000000000042DA88) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_63_bad()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_square_63b_badSink(&v2);
}

//----- (000000000042DAD3) ----------------------------------------------------
int goodG2B_271()
{
  char v1; // [rsp+Fh] [rbp-1h]

  v1 = 2;
  return CWE190_Integer_Overflow__char_rand_square_63b_goodG2BSink(&v1);
}

//----- (000000000042DAF1) ----------------------------------------------------
int goodB2G_249()
{
  int v0; // eax
  char v2; // [rsp+Fh] [rbp-1h]

  v2 = 32;
  if ( rand() & 1 )
  {
    rand();
    rand();
    LOBYTE(v0) = rand();
  }
  else
  {
    rand();
    rand();
    v0 = ~rand();
  }
  v2 = v0;
  return CWE190_Integer_Overflow__char_rand_square_63b_goodB2GSink(&v2);
}

//----- (000000000042DB3C) ----------------------------------------------------
int CWE190_Integer_Overflow__char_rand_square_63_good()
{
  goodG2B_271();
  return goodB2G_249();
}

//----- (000000000042DB56) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_34_bad()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  v3 = v1;
  if ( (char)v1 > 0 )
  {
    v2 = 2 * v3;
    result = printHexCharLine(2 * v3);
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042DBA9) ----------------------------------------------------
int goodG2B_272()
{
  return printHexCharLine(4);
}

//----- (000000000042DBE3) ----------------------------------------------------
int goodB2G_250()
{
  int result; // eax
  unsigned __int8 v1; // [rsp+Dh] [rbp-3h]
  char v2; // [rsp+Eh] [rbp-2h]
  unsigned __int8 v3; // [rsp+Fh] [rbp-1h]

  v1 = 32;
  __isoc99_fscanf(stdin, "%c", &v1);
  result = v1;
  v3 = v1;
  if ( (char)v1 > 0 )
  {
    if ( (char)v3 > 62 )
    {
      result = printLine("data value is too large to perform arithmetic safely.");
    }
    else
    {
      v2 = 2 * v3;
      result = printHexCharLine(2 * v3);
    }
  }
  return result;
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042DC48) ----------------------------------------------------
int CWE190_Integer_Overflow__char_fscanf_multiply_34_good()
{
  goodG2B_272();
  return goodB2G_250();
}

//----- (000000000042DC62) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_bad()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_badSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042DCA5) ----------------------------------------------------
int goodG2B_273()
{
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodG2BSink(2LL);
}

//----- (000000000042DCD3) ----------------------------------------------------
int goodB2G_251()
{
  __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = 0LL;
  __isoc99_fscanf(stdin, "%ld", &v1);
  return CWE190_Integer_Overflow__int64_t_fscanf_multiply_67b_goodB2GSink(v1);
}
// 400970: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 65F128: using guessed type __int64 stdin;

//----- (000000000042DD16) ----------------------------------------------------
int CWE190_Integer_Overflow__int64_t_fscanf_multiply_67_good()
{
  goodG2B_273();
  return goodB2G_251();
}

//----- (000000000042DD30) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000042DD51) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000042DD7C) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000042DD9D) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000042DDC2) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000042DDE8) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000042DE0C) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000042DE30) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000042DE54) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000042DE78) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000042DEA8) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000042DEC9) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000042DEED) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000042DF18) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000042DF44) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000042DF9B) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400990: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E074) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400A40: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042E128) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000042E133) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000042E13E) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000042E154) ----------------------------------------------------
void good1()
{
  ;
}

//----- (000000000042E15A) ----------------------------------------------------
void good2()
{
  ;
}

//----- (000000000042E160) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000042E166) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000042E16C) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000042E172) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000042E178) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000042E17E) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000042E184) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000042E18A) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000042E190) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000042E196) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000042E19C) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000042E1A2) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000042E1A8) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000042E1AE) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000042E1B4) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000042E1BA) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000042E1C0) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000042E1F3) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000042E297) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000042E2CB) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000042E2EA) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000042E35F) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000042E379) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000042E393) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000042E3C0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 65EDD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 65EDD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000042E434) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 2839 function(s) have been successfully decompiled
