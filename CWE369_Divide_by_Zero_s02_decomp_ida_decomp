/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400B50();
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// int close(int fd);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int atoi(const char *nptr);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __fastcall badSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_21_bad();
int __fastcall goodB2G1Sink(int a1);
int goodB2G1();
int __fastcall goodB2G2Sink(int a1);
int goodB2G2();
int __fastcall goodG2BSink(int a1);
int goodG2B();
int CWE369_Divide_by_Zero__int_rand_divide_21_good();
int CWE369_Divide_by_Zero__int_rand_divide_52_bad();
int goodG2B_0();
int goodB2G();
int CWE369_Divide_by_Zero__int_rand_divide_52_good();
int CWE369_Divide_by_Zero__int_zero_divide_12_bad();
int goodB2G_0();
int goodG2B_1();
int CWE369_Divide_by_Zero__int_zero_divide_12_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_67_bad();
int goodG2B_2();
int goodB2G_1();
int CWE369_Divide_by_Zero__int_listen_socket_divide_67_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_16_bad();
int goodB2G_2();
int goodG2B_3();
int CWE369_Divide_by_Zero__int_rand_divide_16_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_goodB2GSink(int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_65_bad();
int goodG2B_4();
__int64 goodB2G_3();
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_65_good();
int CWE369_Divide_by_Zero__int_rand_modulo_01_bad();
int goodG2B_5();
int goodB2G_4();
int CWE369_Divide_by_Zero__int_rand_modulo_01_good();
int CWE369_Divide_by_Zero__int_zero_modulo_22_bad();
int goodB2G1_0();
int goodB2G2_0();
int goodG2B_6();
int CWE369_Divide_by_Zero__int_zero_modulo_22_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_15_bad();
int goodB2G1_1();
int goodB2G2_1();
int goodG2B1();
int goodG2B2();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_15_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_52_bad();
int goodG2B_7();
int goodB2G_5();
int CWE369_Divide_by_Zero__int_zero_modulo_52_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_17_bad();
int goodB2G_6();
int goodG2B_8();
int CWE369_Divide_by_Zero__int_zero_divide_17_good();
__int64 __fastcall badSource(unsigned int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_42_bad();
__int64 goodG2BSource();
int goodG2B_9();
__int64 __fastcall goodB2GSource(unsigned int a1);
int goodB2G_7();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_42_good();
int __fastcall badSink_0(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_44_bad();
int __fastcall goodG2BSink_0(int a1);
int goodG2B_10();
int __fastcall goodB2GSink(int a1);
int goodB2G_8();
int CWE369_Divide_by_Zero__int_zero_divide_44_good();
int CWE369_Divide_by_Zero__int_zero_modulo_16_bad();
int goodB2G_9();
int goodG2B_11();
int CWE369_Divide_by_Zero__int_zero_modulo_16_good();
int CWE369_Divide_by_Zero__int_rand_modulo_61_bad();
int goodG2B_12();
int goodB2G_10();
int CWE369_Divide_by_Zero__int_rand_modulo_61_good();
int CWE369_Divide_by_Zero__int_zero_divide_11_bad();
int goodB2G1_2();
int goodB2G2_2();
int goodG2B1_0();
int goodG2B2_0();
int CWE369_Divide_by_Zero__int_zero_divide_11_good();
int CWE369_Divide_by_Zero__int_zero_divide_02_bad();
int goodB2G1_3();
int goodB2G2_3();
int goodG2B1_1();
int goodG2B2_1();
int CWE369_Divide_by_Zero__int_zero_divide_02_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_goodB2GSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_51_bad();
int goodG2B_13();
int goodB2G_11();
int CWE369_Divide_by_Zero__int_rand_divide_51_good();
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_65_bad();
int goodG2B_14();
__int64 goodB2G_12();
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_65_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_12_bad();
int goodB2G_13();
int goodG2B_15();
int CWE369_Divide_by_Zero__int_rand_divide_12_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_15_bad();
int goodB2G1_4();
int goodB2G2_4();
int goodG2B1_2();
int goodG2B2_2();
int CWE369_Divide_by_Zero__int_fscanf_modulo_15_good();
int CWE369_Divide_by_Zero__int_rand_modulo_09_bad();
int goodB2G1_5();
int goodB2G2_5();
int goodG2B1_3();
int goodG2B2_3();
int CWE369_Divide_by_Zero__int_rand_modulo_09_good();
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_badSource();
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_goodG2BSource();
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_goodB2GSource();
int CWE369_Divide_by_Zero__int_zero_divide_10_bad();
int goodB2G1_6();
int goodB2G2_6();
int goodG2B1_4();
int goodG2B2_4();
int CWE369_Divide_by_Zero__int_zero_divide_10_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_63_bad();
int goodG2B_16();
int goodB2G_14();
int CWE369_Divide_by_Zero__int_fscanf_modulo_63_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_bad();
int goodB2G1_7();
int goodB2G2_7();
int goodG2B_17();
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_good();
__int64 __fastcall badSource_0(unsigned int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_42_bad();
__int64 goodG2BSource_0();
int goodG2B_18();
__int64 __fastcall goodB2GSource_0(unsigned int a1);
int goodB2G_15();
int CWE369_Divide_by_Zero__int_fscanf_modulo_42_good();
int __fastcall badSink_1(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_21_bad();
int __fastcall goodB2G1Sink_0(int a1);
int goodB2G1_8();
int __fastcall goodB2G2Sink_0(int a1);
int goodB2G2_8();
int __fastcall goodG2BSink_1(int a1);
int goodG2B_19();
int CWE369_Divide_by_Zero__int_rand_modulo_21_good();
int CWE369_Divide_by_Zero__int_zero_modulo_51_bad();
int goodG2B_20();
int goodB2G_16();
int CWE369_Divide_by_Zero__int_zero_modulo_51_good();
int CWE369_Divide_by_Zero__int_rand_divide_64_bad();
int goodG2B_21();
int goodB2G_17();
int CWE369_Divide_by_Zero__int_rand_divide_64_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_05_bad();
int goodB2G1_9();
int goodB2G2_9();
int goodG2B1_5();
int goodG2B2_5();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_05_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_goodB2GSink(int a1);
int __fastcall badSink_2(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_41_bad();
int __fastcall goodG2BSink_2(int a1);
int goodG2B_22();
int __fastcall goodB2GSink_0(int a1);
int goodB2G_18();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_41_good();
int CWE369_Divide_by_Zero__int_rand_divide_06_bad();
int goodB2G1_10();
int goodB2G2_10();
int goodG2B1_6();
int goodG2B2_6();
int CWE369_Divide_by_Zero__int_rand_divide_06_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_badSink();
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodB2GSink();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_zero_divide_01_bad();
int goodG2B_23();
int goodB2G_19();
int CWE369_Divide_by_Zero__int_zero_divide_01_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_34_bad();
int goodG2B_24();
int goodB2G_20();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_34_good();
int __fastcall badSink_3(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_21_bad();
int __fastcall goodB2G1Sink_1(int a1);
int goodB2G1_11();
int __fastcall goodB2G2Sink_1(int a1);
int goodB2G2_11();
int __fastcall goodG2BSink_3(int a1);
int goodG2B_25();
int CWE369_Divide_by_Zero__int_listen_socket_divide_21_good();
int CWE369_Divide_by_Zero__int_zero_modulo_06_bad();
int goodB2G1_12();
int goodB2G2_12();
int goodG2B1_7();
int goodG2B2_7();
int CWE369_Divide_by_Zero__int_zero_modulo_06_good();
int CWE369_Divide_by_Zero__int_zero_divide_61_bad();
int goodG2B_26();
int goodB2G_21();
int CWE369_Divide_by_Zero__int_zero_divide_61_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodB2GSink(__int64 a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_13_bad();
int goodB2G1_13();
int goodB2G2_13();
int goodG2B1_8();
int goodG2B2_8();
int CWE369_Divide_by_Zero__int_listen_socket_divide_13_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_05_bad();
int goodB2G1_14();
int goodB2G2_14();
int goodG2B1_9();
int goodG2B2_9();
int CWE369_Divide_by_Zero__int_fscanf_modulo_05_good();
int __fastcall badSink_4(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_41_bad();
int __fastcall goodG2BSink_4(int a1);
int goodG2B_27();
int __fastcall goodB2GSink_1(int a1);
int goodB2G_22();
int CWE369_Divide_by_Zero__int_fscanf_modulo_41_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_53_bad();
int goodG2B_28();
int goodB2G_23();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_53_good();
int __fastcall badSink_5(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad();
int __fastcall goodB2G1Sink_2(int a1);
int goodB2G1_15();
int __fastcall goodB2G2Sink_2(int a1);
int goodB2G2_15();
int __fastcall goodG2BSink_5(int a1);
int goodG2B_29();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_03_bad();
int goodB2G1_16();
int goodB2G2_16();
int goodG2B1_10();
int goodG2B2_10();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_03_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_64_bad();
int goodG2B_30();
int goodB2G_24();
int CWE369_Divide_by_Zero__int_fscanf_modulo_64_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_63_bad();
int goodG2B_31();
int goodB2G_25();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_63_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_64_bad();
int goodG2B_32();
int goodB2G_26();
int CWE369_Divide_by_Zero__int_rand_modulo_64_good();
int CWE369_Divide_by_Zero__int_rand_divide_05_bad();
int goodB2G1_17();
int goodB2G2_17();
int goodG2B1_11();
int goodG2B2_11();
int CWE369_Divide_by_Zero__int_rand_divide_05_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_badSink();
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodB2GSink();
int CWE369_Divide_by_Zero__int_fscanf_modulo_02_bad();
int goodB2G1_18();
int goodB2G2_18();
int goodG2B1_12();
int goodG2B2_12();
int CWE369_Divide_by_Zero__int_fscanf_modulo_02_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_18_bad();
int goodB2G_27();
int goodG2B_33();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_18_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_66_bad();
int goodG2B_34();
int goodB2G_28();
int CWE369_Divide_by_Zero__int_listen_socket_divide_66_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_32_bad();
int goodG2B_35();
int goodB2G_29();
int CWE369_Divide_by_Zero__int_fscanf_modulo_32_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_64_bad();
int goodG2B_36();
int goodB2G_30();
int CWE369_Divide_by_Zero__int_listen_socket_divide_64_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodB2GSink(int a1);
int __fastcall badSink_6(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_21_bad();
int __fastcall goodB2G1Sink_3(int a1);
int goodB2G1_19();
int __fastcall goodB2G2Sink_3(int a1);
int goodB2G2_19();
int __fastcall goodG2BSink_6(int a1);
int goodG2B_37();
int CWE369_Divide_by_Zero__int_fscanf_modulo_21_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_03_bad();
int goodB2G1_20();
int goodB2G2_20();
int goodG2B1_13();
int goodG2B2_13();
int CWE369_Divide_by_Zero__int_fscanf_modulo_03_good();
int CWE369_Divide_by_Zero__int_rand_divide_54_bad();
int goodG2B_38();
int goodB2G_31();
int CWE369_Divide_by_Zero__int_rand_divide_54_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_04_bad();
int goodB2G1_21();
int goodB2G2_21();
int goodG2B1_14();
int goodG2B2_14();
int CWE369_Divide_by_Zero__int_rand_modulo_04_good();
int CWE369_Divide_by_Zero__int_rand_modulo_31_bad();
int goodG2B_39();
int goodB2G_32();
int CWE369_Divide_by_Zero__int_rand_modulo_31_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_12_bad();
int goodB2G_33();
int goodG2B_40();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_12_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_rand_divide_63_bad();
int goodG2B_41();
int goodB2G_34();
int CWE369_Divide_by_Zero__int_rand_divide_63_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_bad();
int goodG2B_42();
int goodB2G_35();
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_09_bad();
int goodB2G1_22();
int goodB2G2_22();
int goodG2B1_15();
int goodG2B2_15();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_09_good();
int CWE369_Divide_by_Zero__int_zero_divide_14_bad();
int goodB2G1_23();
int goodB2G2_23();
int goodG2B1_16();
int goodG2B2_16();
int CWE369_Divide_by_Zero__int_zero_divide_14_good();
int CWE369_Divide_by_Zero__int_zero_modulo_54_bad();
int goodG2B_43();
int goodB2G_36();
int CWE369_Divide_by_Zero__int_zero_modulo_54_good();
int CWE369_Divide_by_Zero__int_zero_divide_32_bad();
int goodG2B_44();
int goodB2G_37();
int CWE369_Divide_by_Zero__int_zero_divide_32_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_64_bad();
int goodG2B_45();
int goodB2G_38();
int CWE369_Divide_by_Zero__int_zero_divide_64_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_11_bad();
int goodB2G1_24();
int goodB2G2_24();
int goodG2B1_17();
int goodG2B2_17();
int CWE369_Divide_by_Zero__int_fscanf_modulo_11_good();
void CWE369_Divide_by_Zero__int_listen_socket_modulo_17_bad();
void goodB2G_39();
int goodG2B_46();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_17_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_12_bad();
int goodB2G_40();
int goodG2B_47();
int CWE369_Divide_by_Zero__int_fscanf_modulo_12_good();
__int64 __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_61b_badSource(unsigned int a1);
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodG2BSource();
__int64 __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodB2GSource(unsigned int a1);
int __fastcall badSink_7(int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad();
int __fastcall goodG2BSink_7(int a1);
int goodG2B_48();
int __fastcall goodB2GSink_2(int a1);
__int64 goodB2G_41();
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_67_bad();
int goodG2B_49();
int goodB2G_42();
int CWE369_Divide_by_Zero__int_fscanf_modulo_67_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_11_bad();
int goodB2G1_25();
int goodB2G2_25();
int goodG2B1_18();
int goodG2B2_18();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_11_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_goodB2GSink(int a1);
__int64 badSource_1();
int CWE369_Divide_by_Zero__int_rand_divide_42_bad();
__int64 goodG2BSource_1();
int goodG2B_50();
__int64 goodB2GSource_1();
int goodB2G_43();
int CWE369_Divide_by_Zero__int_rand_divide_42_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_07_bad();
int goodB2G1_26();
int goodB2G2_26();
int goodG2B1_19();
int goodG2B2_19();
int CWE369_Divide_by_Zero__int_fscanf_modulo_07_good();
int CWE369_Divide_by_Zero__int_zero_divide_31_bad();
int goodG2B_51();
int goodB2G_44();
int CWE369_Divide_by_Zero__int_zero_divide_31_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_17_bad();
int goodB2G_45();
int goodG2B_52();
int CWE369_Divide_by_Zero__int_fscanf_modulo_17_good();
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_badSource(unsigned int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodG2BSource();
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodB2GSource(unsigned int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_10_bad();
int goodB2G1_27();
int goodB2G2_27();
int goodG2B1_20();
int goodG2B2_20();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_10_good();
int CWE369_Divide_by_Zero__int_zero_divide_04_bad();
int goodB2G1_28();
int goodB2G2_28();
int goodG2B1_21();
int goodG2B2_21();
int CWE369_Divide_by_Zero__int_zero_divide_04_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_52_bad();
int goodG2B_53();
int goodB2G_46();
int CWE369_Divide_by_Zero__int_listen_socket_divide_52_good();
__int64 CWE369_Divide_by_Zero__int_rand_divide_65_bad();
int goodG2B_54();
__int64 goodB2G_47();
__int64 CWE369_Divide_by_Zero__int_rand_divide_65_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_15_bad();
int goodB2G1_29();
int goodB2G2_29();
int goodG2B1_22();
int goodG2B2_22();
int CWE369_Divide_by_Zero__int_rand_divide_15_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_67_bad();
int goodG2B_55();
int goodB2G_48();
int CWE369_Divide_by_Zero__int_zero_divide_67_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_53_bad();
int goodG2B_56();
int goodB2G_49();
int CWE369_Divide_by_Zero__int_zero_divide_53_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_10_bad();
int goodB2G1_30();
int goodB2G2_30();
int goodG2B1_23();
int goodG2B2_23();
int CWE369_Divide_by_Zero__int_fscanf_modulo_10_good();
int CWE369_Divide_by_Zero__int_zero_modulo_15_bad();
int goodB2G1_31();
int goodB2G2_31();
int goodG2B1_24();
int goodG2B2_24();
int CWE369_Divide_by_Zero__int_zero_modulo_15_good();
int CWE369_Divide_by_Zero__int_rand_divide_68b_badSink();
int CWE369_Divide_by_Zero__int_rand_divide_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_rand_divide_68b_goodB2GSink();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_61_bad();
int goodG2B_57();
int goodB2G_50();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_61_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BSink(int a1);
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_08_bad();
int goodB2G1_32();
int goodB2G2_32();
int goodG2B1_25();
int goodG2B2_25();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_08_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_51_bad();
int goodG2B_58();
int goodB2G_51();
int CWE369_Divide_by_Zero__int_listen_socket_divide_51_good();
int CWE369_Divide_by_Zero__int_zero_divide_07_bad();
int goodB2G1_33();
int goodB2G2_33();
int goodG2B1_26();
int goodG2B2_26();
int CWE369_Divide_by_Zero__int_zero_divide_07_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_01_bad();
int goodG2B_59();
int goodB2G_52();
int CWE369_Divide_by_Zero__int_fscanf_modulo_01_good();
int CWE369_Divide_by_Zero__int_rand_modulo_13_bad();
int goodB2G1_34();
int goodB2G2_34();
int goodG2B1_27();
int goodG2B2_27();
int CWE369_Divide_by_Zero__int_rand_modulo_13_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_07_bad();
int goodB2G1_35();
int goodB2G2_35();
int goodG2B1_28();
int goodG2B2_28();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_07_good();
int CWE369_Divide_by_Zero__int_zero_modulo_68b_badSink();
int CWE369_Divide_by_Zero__int_zero_modulo_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_zero_modulo_68b_goodB2GSink();
int __fastcall badSink_8(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_41_bad();
int __fastcall goodG2BSink_8(int a1);
int goodG2B_60();
int __fastcall goodB2GSink_3(int a1);
int goodB2G_53();
int CWE369_Divide_by_Zero__int_rand_divide_41_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_61_bad();
int goodG2B_61();
int goodB2G_54();
int CWE369_Divide_by_Zero__int_fscanf_modulo_61_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_01_bad();
int goodG2B_62();
int goodB2G_55();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_01_good();
int badSink_9();
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_bad();
int goodG2BSink_9();
int goodG2B_63();
int goodB2GSink_4();
int goodB2G_56();
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_22_bad();
int goodB2G1_36();
int goodB2G2_36();
int goodG2B_64();
int CWE369_Divide_by_Zero__int_zero_divide_22_good();
int CWE369_Divide_by_Zero__int_zero_divide_09_bad();
int goodB2G1_37();
int goodB2G2_37();
int goodG2B1_29();
int goodG2B2_29();
int CWE369_Divide_by_Zero__int_zero_divide_09_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_06_bad();
int goodB2G1_38();
int goodB2G2_38();
int goodG2B1_30();
int goodG2B2_30();
int CWE369_Divide_by_Zero__int_listen_socket_divide_06_good();
int CWE369_Divide_by_Zero__int_rand_divide_68_bad();
int goodG2B_65();
int goodB2G_57();
int CWE369_Divide_by_Zero__int_rand_divide_68_good();
int CWE369_Divide_by_Zero__int_rand_divide_34_bad();
int goodG2B_66();
int goodB2G_58();
int CWE369_Divide_by_Zero__int_rand_divide_34_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_05_bad();
int goodB2G1_39();
int goodB2G2_39();
int goodG2B1_31();
int goodG2B2_31();
int CWE369_Divide_by_Zero__int_zero_modulo_05_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_goodB2GSink(__int64 a1);
int CWE369_Divide_by_Zero__int_zero_divide_65_bad();
int goodG2B_67();
int goodB2G_59();
int CWE369_Divide_by_Zero__int_zero_divide_65_good();
int CWE369_Divide_by_Zero__int_rand_modulo_03_bad();
int goodB2G1_40();
int goodB2G2_40();
int goodG2B1_32();
int goodG2B2_32();
int CWE369_Divide_by_Zero__int_rand_modulo_03_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_63_bad();
int goodG2B_68();
int goodB2G_60();
int CWE369_Divide_by_Zero__int_rand_modulo_63_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_67_bad();
int goodG2B_69();
int goodB2G_61();
int CWE369_Divide_by_Zero__int_zero_modulo_67_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_68_bad();
int goodG2B_70();
int goodB2G_62();
int CWE369_Divide_by_Zero__int_zero_modulo_68_good();
int CWE369_Divide_by_Zero__int_rand_divide_53_bad();
int goodG2B_71();
int goodB2G_63();
int CWE369_Divide_by_Zero__int_rand_divide_53_good();
int CWE369_Divide_by_Zero__int_zero_modulo_34_bad();
int goodG2B_72();
int goodB2G_64();
int CWE369_Divide_by_Zero__int_zero_modulo_34_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_goodB2GSink(__int64 a1);
int CWE369_Divide_by_Zero__int_zero_divide_13_bad();
int goodB2G1_41();
int goodB2G2_41();
int goodG2B1_33();
int goodG2B2_33();
int CWE369_Divide_by_Zero__int_zero_divide_13_good();
int CWE369_Divide_by_Zero__int_rand_modulo_34_bad();
int goodG2B_73();
int goodB2G_65();
int CWE369_Divide_by_Zero__int_rand_modulo_34_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_12_bad();
int goodB2G_66();
int goodG2B_74();
int CWE369_Divide_by_Zero__int_rand_modulo_12_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_54_bad();
int goodG2B_75();
int goodB2G_67();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_54_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_14_bad();
int goodB2G1_42();
int goodB2G2_42();
int goodG2B1_34();
int goodG2B2_34();
int CWE369_Divide_by_Zero__int_listen_socket_divide_14_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_32_bad();
int goodG2B_76();
int goodB2G_68();
int CWE369_Divide_by_Zero__int_listen_socket_divide_32_good();
int badSink_10();
int CWE369_Divide_by_Zero__int_zero_modulo_45_bad();
int goodG2BSink_10();
int goodG2B_77();
int goodB2GSink_5();
int goodB2G_69();
int CWE369_Divide_by_Zero__int_zero_modulo_45_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_03_bad();
int goodB2G1_43();
int goodB2G2_43();
int goodG2B1_35();
int goodG2B2_35();
int CWE369_Divide_by_Zero__int_zero_divide_03_good();
int CWE369_Divide_by_Zero__int_zero_modulo_66_bad();
int goodG2B_78();
int goodB2G_70();
int CWE369_Divide_by_Zero__int_zero_modulo_66_good();
void CWE369_Divide_by_Zero__int_rand_modulo_17_bad();
void goodB2G_71();
int goodG2B_79();
int CWE369_Divide_by_Zero__int_rand_modulo_17_good();
int CWE369_Divide_by_Zero__int_zero_divide_63_bad();
int goodG2B_80();
int goodB2G_72();
int CWE369_Divide_by_Zero__int_zero_divide_63_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_02_bad();
int goodB2G1_44();
int goodB2G2_44();
int goodG2B1_36();
int goodG2B2_36();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_02_good();
int __fastcall badSink_11(int a1);
__int64 CWE369_Divide_by_Zero__int_rand_modulo_44_bad();
int __fastcall goodG2BSink_11(int a1);
int goodG2B_81();
int __fastcall goodB2GSink_6(int a1);
__int64 goodB2G_73();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_44_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_54_bad();
int goodG2B_82();
int goodB2G_74();
int CWE369_Divide_by_Zero__int_fscanf_modulo_54_good();
int CWE369_Divide_by_Zero__int_zero_divide_18_bad();
int goodB2G_75();
int goodG2B_83();
int CWE369_Divide_by_Zero__int_zero_divide_18_good();
int CWE369_Divide_by_Zero__int_rand_modulo_11_bad();
int goodB2G1_45();
int goodB2G2_45();
int goodG2B1_37();
int goodG2B2_37();
int CWE369_Divide_by_Zero__int_rand_modulo_11_good();
int CWE369_Divide_by_Zero__int_rand_modulo_02_bad();
int goodB2G1_46();
int goodB2G2_46();
int goodG2B1_38();
int goodG2B2_38();
int CWE369_Divide_by_Zero__int_rand_modulo_02_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_04_bad();
int goodB2G1_47();
int goodB2G2_47();
int goodG2B1_39();
int goodG2B2_39();
int CWE369_Divide_by_Zero__int_listen_socket_divide_04_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad();
int goodG2B_84();
int goodB2G_76();
int CWE369_Divide_by_Zero__int_listen_socket_divide_31_good();
int CWE369_Divide_by_Zero__int_rand_modulo_18_bad();
int goodB2G_77();
int goodG2B_85();
int CWE369_Divide_by_Zero__int_rand_modulo_18_good();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_badSource();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_goodG2BSource();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_goodB2GSource();
int CWE369_Divide_by_Zero__int_rand_modulo_10_bad();
int goodB2G1_48();
int goodB2G2_48();
int goodG2B1_40();
int goodG2B2_40();
int CWE369_Divide_by_Zero__int_rand_modulo_10_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE369_Divide_by_Zero__int_zero_divide_08_bad();
int goodB2G1_49();
int goodB2G2_49();
int goodG2B1_41();
int goodG2B2_41();
int CWE369_Divide_by_Zero__int_zero_divide_08_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_rand_modulo_54_bad();
int goodG2B_86();
int goodB2G_78();
int CWE369_Divide_by_Zero__int_rand_modulo_54_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_34_bad();
int goodG2B_87();
int goodB2G_79();
int CWE369_Divide_by_Zero__int_fscanf_modulo_34_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodB2GSink(__int64 a1);
int CWE369_Divide_by_Zero__int_rand_divide_14_bad();
int goodB2G1_50();
int goodB2G2_50();
int goodG2B1_42();
int goodG2B2_42();
int CWE369_Divide_by_Zero__int_rand_divide_14_good();
int CWE369_Divide_by_Zero__int_rand_divide_32_bad();
int goodG2B_88();
int goodB2G_80();
int CWE369_Divide_by_Zero__int_rand_divide_32_good();
int CWE369_Divide_by_Zero__int_rand_divide_67_bad();
int goodG2B_89();
int goodB2G_81();
int CWE369_Divide_by_Zero__int_rand_divide_67_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_03_bad();
int goodB2G1_51();
int goodB2G2_51();
int goodG2B1_43();
int goodG2B2_43();
int CWE369_Divide_by_Zero__int_listen_socket_divide_03_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_66_bad();
int goodG2B_90();
int goodB2G_82();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_66_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_63_bad();
int goodG2B_91();
int goodB2G_83();
int CWE369_Divide_by_Zero__int_listen_socket_divide_63_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_53_bad();
int goodG2B_92();
int goodB2G_84();
int CWE369_Divide_by_Zero__int_fscanf_modulo_53_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_52_bad();
int goodG2B_93();
int goodB2G_85();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_52_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad();
int goodB2G_86();
int goodG2B_94();
int CWE369_Divide_by_Zero__int_listen_socket_divide_16_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_07_bad();
int goodB2G1_52();
int goodB2G2_52();
int goodG2B1_44();
int goodG2B2_44();
int CWE369_Divide_by_Zero__int_rand_divide_07_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_18_bad();
int goodB2G_87();
int goodG2B_95();
int CWE369_Divide_by_Zero__int_listen_socket_divide_18_good();
int CWE369_Divide_by_Zero__int_zero_modulo_07_bad();
int goodB2G1_53();
int goodB2G2_53();
int goodG2B1_45();
int goodG2B2_45();
int CWE369_Divide_by_Zero__int_zero_modulo_07_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_14_bad();
int goodB2G1_54();
int goodB2G2_54();
int goodG2B1_46();
int goodG2B2_46();
int CWE369_Divide_by_Zero__int_zero_modulo_14_good();
int CWE369_Divide_by_Zero__int_zero_modulo_32_bad();
int goodG2B_96();
int goodB2G_88();
int CWE369_Divide_by_Zero__int_zero_modulo_32_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_badSink();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodB2GSink();
int CWE369_Divide_by_Zero__int_zero_modulo_53_bad();
int goodG2B_97();
int goodB2G_89();
int CWE369_Divide_by_Zero__int_zero_modulo_53_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_66_bad();
int goodG2B_98();
int goodB2G_90();
int CWE369_Divide_by_Zero__int_fscanf_modulo_66_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE369_Divide_by_Zero__int_rand_modulo_08_bad();
int goodB2G1_55();
int goodB2G2_55();
int goodG2B1_47();
int goodG2B2_47();
int CWE369_Divide_by_Zero__int_rand_modulo_08_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_52_bad();
int goodG2B_99();
int goodB2G_91();
int CWE369_Divide_by_Zero__int_fscanf_modulo_52_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_04_bad();
int goodB2G1_56();
int goodB2G2_56();
int goodG2B1_48();
int goodG2B2_48();
int CWE369_Divide_by_Zero__int_rand_divide_04_good();
int CWE369_Divide_by_Zero__int_rand_divide_31_bad();
int goodG2B_100();
int goodB2G_92();
int CWE369_Divide_by_Zero__int_rand_divide_31_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad();
int goodB2G_93();
int goodG2B_101();
int CWE369_Divide_by_Zero__int_listen_socket_divide_12_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_64_bad();
int goodG2B_102();
int goodB2G_94();
int CWE369_Divide_by_Zero__int_zero_modulo_64_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodB2GSink(int a1);
int badSink_12();
int CWE369_Divide_by_Zero__int_rand_divide_45_bad();
int goodG2BSink_12();
int goodG2B_103();
int goodB2GSink_7();
int goodB2G_95();
int CWE369_Divide_by_Zero__int_rand_divide_45_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_54_bad();
int goodG2B_104();
int goodB2G_96();
int CWE369_Divide_by_Zero__int_zero_divide_54_good();
int CWE369_Divide_by_Zero__int_zero_modulo_04_bad();
int goodB2G1_57();
int goodB2G2_57();
int goodG2B1_49();
int goodG2B2_49();
int CWE369_Divide_by_Zero__int_zero_modulo_04_good();
int CWE369_Divide_by_Zero__int_zero_modulo_31_bad();
int goodG2B_105();
int goodB2G_97();
int CWE369_Divide_by_Zero__int_zero_modulo_31_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
int CWE369_Divide_by_Zero__int_listen_socket_divide_08_bad();
int goodB2G1_58();
int goodB2G2_58();
int goodG2B1_50();
int goodG2B2_50();
int CWE369_Divide_by_Zero__int_listen_socket_divide_08_good();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_65_bad();
int goodG2B_106();
__int64 goodB2G_98();
__int64 CWE369_Divide_by_Zero__int_rand_modulo_65_good();
void CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad();
void goodB2G_99();
int goodG2B_107();
int CWE369_Divide_by_Zero__int_listen_socket_divide_17_good();
int CWE369_Divide_by_Zero__int_rand_modulo_67_bad();
int goodG2B_108();
int goodB2G_100();
int CWE369_Divide_by_Zero__int_rand_modulo_67_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_15_bad();
int goodB2G1_59();
int goodB2G2_59();
int goodG2B1_51();
int goodG2B2_51();
int CWE369_Divide_by_Zero__int_rand_modulo_15_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_18_bad();
int goodB2G_101();
int goodG2B_109();
int CWE369_Divide_by_Zero__int_fscanf_modulo_18_good();
int __fastcall badSink_13(int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_44_bad();
int __fastcall goodG2BSink_13(int a1);
int goodG2B_110();
int __fastcall goodB2GSink_8(int a1);
__int64 goodB2G_102();
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_44_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_16_bad();
int goodB2G_103();
int goodG2B_111();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_16_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad();
int goodG2B_112();
int goodB2G_104();
int CWE369_Divide_by_Zero__int_listen_socket_divide_34_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_11_bad();
int goodB2G1_60();
int goodB2G2_60();
int goodG2B1_52();
int goodG2B2_52();
int CWE369_Divide_by_Zero__int_listen_socket_divide_11_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_goodB2GSink(int a1);
__int64 badSource_2();
int CWE369_Divide_by_Zero__int_rand_modulo_42_bad();
__int64 goodG2BSource_2();
int goodG2B_113();
__int64 goodB2GSource_2();
int goodB2G_105();
int CWE369_Divide_by_Zero__int_rand_modulo_42_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_68b_badSink();
int CWE369_Divide_by_Zero__int_rand_modulo_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_rand_modulo_68b_goodB2GSink();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_02_bad();
int goodB2G1_61();
int goodB2G2_61();
int goodG2B1_53();
int goodG2B2_53();
int CWE369_Divide_by_Zero__int_listen_socket_divide_02_good();
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_61b_badSource(unsigned int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodG2BSource();
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodB2GSource(unsigned int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_10_bad();
int goodB2G1_62();
int goodB2G2_62();
int goodG2B1_54();
int goodG2B2_54();
int CWE369_Divide_by_Zero__int_listen_socket_divide_10_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_51_bad();
int goodG2B_114();
int goodB2G_106();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_51_good();
int CWE369_Divide_by_Zero__int_rand_divide_22_bad();
int goodB2G1_63();
int goodB2G2_63();
int goodG2B_115();
int CWE369_Divide_by_Zero__int_rand_divide_22_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_07_bad();
int goodB2G1_64();
int goodB2G2_64();
int goodG2B1_55();
int goodG2B2_55();
int CWE369_Divide_by_Zero__int_listen_socket_divide_07_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
int CWE369_Divide_by_Zero__int_zero_modulo_08_bad();
int goodB2G1_65();
int goodB2G2_65();
int goodG2B1_56();
int goodG2B2_56();
int CWE369_Divide_by_Zero__int_zero_modulo_08_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_01_bad();
int goodG2B_116();
int goodB2G_107();
int CWE369_Divide_by_Zero__int_listen_socket_divide_01_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_05_bad();
int goodB2G1_66();
int goodB2G2_66();
int goodG2B1_57();
int goodG2B2_57();
int CWE369_Divide_by_Zero__int_rand_modulo_05_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodB2GSink(int a1);
int __fastcall badSink_14(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_41_bad();
int __fastcall goodG2BSink_14(int a1);
int goodG2B_117();
int __fastcall goodB2GSink_9(int a1);
int goodB2G_108();
int CWE369_Divide_by_Zero__int_rand_modulo_41_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_15_bad();
int goodB2G1_67();
int goodB2G2_67();
int goodG2B1_58();
int goodG2B2_58();
int CWE369_Divide_by_Zero__int_zero_divide_15_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_51_bad();
int goodG2B_118();
int goodB2G_109();
int CWE369_Divide_by_Zero__int_fscanf_modulo_51_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_61_bad();
int goodG2B_119();
int goodB2G_110();
int CWE369_Divide_by_Zero__int_listen_socket_divide_61_good();
int CWE369_Divide_by_Zero__int_rand_modulo_68_bad();
int goodG2B_120();
int goodB2G_111();
int CWE369_Divide_by_Zero__int_rand_modulo_68_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_bad();
int goodG2B_121();
int goodB2G_112();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_goodB2GSink(int a1);
__int64 badSource_3();
int CWE369_Divide_by_Zero__int_zero_divide_42_bad();
__int64 goodG2BSource_3();
int goodG2B_122();
__int64 goodB2GSource_3();
int goodB2G_113();
int CWE369_Divide_by_Zero__int_zero_divide_42_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_goodB2GSink(__int64 a1);
int CWE369_Divide_by_Zero__int_rand_divide_13_bad();
int goodB2G1_68();
int goodB2G2_68();
int goodG2B1_59();
int goodG2B2_59();
int CWE369_Divide_by_Zero__int_rand_divide_13_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_09_bad();
int goodB2G1_69();
int goodB2G2_69();
int goodG2B1_60();
int goodG2B2_60();
int CWE369_Divide_by_Zero__int_listen_socket_divide_09_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_goodB2GSink(int a1);
int badSink_15();
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_bad();
int goodG2BSink_15();
int goodG2B_123();
int goodB2GSink_10();
int goodB2G_114();
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_good();
int CWE369_Divide_by_Zero__int_rand_modulo_14_bad();
int goodB2G1_70();
int goodB2G2_70();
int goodG2B1_61();
int goodG2B2_61();
int CWE369_Divide_by_Zero__int_rand_modulo_14_good();
int CWE369_Divide_by_Zero__int_rand_modulo_53_bad();
int goodG2B_124();
int goodB2G_115();
int CWE369_Divide_by_Zero__int_rand_modulo_53_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_06_bad();
int goodB2G1_71();
int goodB2G2_71();
int goodG2B1_62();
int goodG2B2_62();
int CWE369_Divide_by_Zero__int_fscanf_modulo_06_good();
int CWE369_Divide_by_Zero__int_zero_modulo_13_bad();
int goodB2G1_72();
int goodB2G2_72();
int goodG2B1_63();
int goodG2B2_63();
int CWE369_Divide_by_Zero__int_zero_modulo_13_good();
int CWE369_Divide_by_Zero__int_rand_modulo_22_bad();
int goodB2G1_73();
int goodB2G2_73();
int goodG2B_125();
int CWE369_Divide_by_Zero__int_rand_modulo_22_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_zero_divide_05_bad();
int goodB2G1_74();
int goodB2G2_74();
int goodG2B1_64();
int goodG2B2_64();
int CWE369_Divide_by_Zero__int_zero_divide_05_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_13_bad();
int goodB2G1_75();
int goodB2G2_75();
int goodG2B1_65();
int goodG2B2_65();
int CWE369_Divide_by_Zero__int_fscanf_modulo_13_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_03_bad();
int goodB2G1_76();
int goodB2G2_76();
int goodG2B1_66();
int goodG2B2_66();
int CWE369_Divide_by_Zero__int_rand_divide_03_good();
int CWE369_Divide_by_Zero__int_rand_modulo_66_bad();
int goodG2B_126();
int goodB2G_116();
int CWE369_Divide_by_Zero__int_rand_modulo_66_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_modulo_14_bad();
int goodB2G1_77();
int goodB2G2_77();
int goodG2B1_67();
int goodG2B2_67();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_14_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_32_bad();
int goodG2B_127();
int goodB2G_117();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_32_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_09_bad();
int goodB2G1_78();
int goodB2G2_78();
int goodG2B1_68();
int goodG2B2_68();
int CWE369_Divide_by_Zero__int_fscanf_modulo_09_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_06_bad();
int goodB2G1_79();
int goodB2G2_79();
int goodG2B1_69();
int goodG2B2_69();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_06_good();
int CWE369_Divide_by_Zero__int_zero_divide_68_bad();
int goodG2B_128();
int goodB2G_118();
int CWE369_Divide_by_Zero__int_zero_divide_68_good();
int CWE369_Divide_by_Zero__int_rand_divide_18_bad();
int goodB2G_119();
int goodG2B_129();
int CWE369_Divide_by_Zero__int_rand_divide_18_good();
int CWE369_Divide_by_Zero__int_zero_divide_34_bad();
int goodG2B_130();
int goodB2G_120();
int CWE369_Divide_by_Zero__int_zero_divide_34_good();
int CWE369_Divide_by_Zero__int_zero_modulo_65_bad();
int goodG2B_131();
int goodB2G_121();
int CWE369_Divide_by_Zero__int_zero_modulo_65_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_goodB2GSink(int a1);
int badSink_16();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_bad();
int goodG2BSink_16();
int goodG2B_132();
int goodB2GSink_11();
int goodB2G_122();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_good();
int __fastcall badSink_17(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_21_bad();
int __fastcall goodB2G1Sink_4(int a1);
int goodB2G1_80();
int __fastcall goodB2G2Sink_4(int a1);
int goodB2G2_80();
int __fastcall goodG2BSink_17(int a1);
int goodG2B_133();
int CWE369_Divide_by_Zero__int_zero_modulo_21_good();
int CWE369_Divide_by_Zero__int_zero_modulo_03_bad();
int goodB2G1_81();
int goodB2G2_81();
int goodG2B1_70();
int goodG2B2_70();
int CWE369_Divide_by_Zero__int_zero_modulo_03_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_63_bad();
int goodG2B_134();
int goodB2G_123();
int CWE369_Divide_by_Zero__int_zero_modulo_63_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_64_bad();
int goodG2B_135();
int goodB2G_124();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_64_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_14_bad();
int goodB2G1_82();
int goodB2G2_82();
int goodG2B1_71();
int goodG2B2_71();
int CWE369_Divide_by_Zero__int_fscanf_modulo_14_good();
int CWE369_Divide_by_Zero__int_zero_modulo_18_bad();
int goodB2G_125();
int goodG2B_136();
int CWE369_Divide_by_Zero__int_zero_modulo_18_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_54_bad();
int goodG2B_137();
int goodB2G_126();
int CWE369_Divide_by_Zero__int_listen_socket_divide_54_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad();
int goodB2G1_83();
int goodB2G2_83();
int goodG2B1_72();
int goodG2B2_72();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_31_bad();
int goodG2B_138();
int goodB2G_127();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_31_good();
int CWE369_Divide_by_Zero__int_rand_modulo_07_bad();
int goodB2G1_84();
int goodB2G2_84();
int goodG2B1_73();
int goodG2B2_73();
int CWE369_Divide_by_Zero__int_rand_modulo_07_good();
__int64 badSource_4();
int CWE369_Divide_by_Zero__int_zero_modulo_42_bad();
__int64 goodG2BSource_4();
int goodG2B_139();
__int64 goodB2GSource_4();
int goodB2G_128();
int CWE369_Divide_by_Zero__int_zero_modulo_42_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_modulo_52_bad();
int goodG2B_140();
int goodB2G_129();
int CWE369_Divide_by_Zero__int_rand_modulo_52_good();
int CWE369_Divide_by_Zero__int_zero_modulo_12_bad();
int goodB2G_130();
int goodG2B_141();
int CWE369_Divide_by_Zero__int_zero_modulo_12_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_66_bad();
int goodG2B_142();
int goodB2G_131();
int CWE369_Divide_by_Zero__int_zero_divide_66_good();
void CWE369_Divide_by_Zero__int_rand_divide_17_bad();
void goodB2G_132();
int goodG2B_143();
int CWE369_Divide_by_Zero__int_rand_divide_17_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_67_bad();
int goodG2B_144();
int goodB2G_133();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_67_good();
int __fastcall badSink_18(int a1);
__int64 CWE369_Divide_by_Zero__int_rand_divide_44_bad();
int __fastcall goodG2BSink_18(int a1);
int goodG2B_145();
int __fastcall goodB2GSink_12(int a1);
__int64 goodB2G_134();
__int64 CWE369_Divide_by_Zero__int_rand_divide_44_good();
int CWE369_Divide_by_Zero__int_rand_modulo_16_bad();
int goodB2G_135();
int goodG2B_146();
int CWE369_Divide_by_Zero__int_rand_modulo_16_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_rand_divide_11_bad();
int goodB2G1_85();
int goodB2G2_85();
int goodG2B1_74();
int goodG2B2_74();
int CWE369_Divide_by_Zero__int_rand_divide_11_good();
int CWE369_Divide_by_Zero__int_rand_divide_02_bad();
int goodB2G1_86();
int goodB2G2_86();
int goodG2B1_75();
int goodG2B2_75();
int CWE369_Divide_by_Zero__int_rand_divide_02_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_04_bad();
int goodB2G1_87();
int goodB2G2_87();
int goodG2B1_76();
int goodG2B2_76();
int CWE369_Divide_by_Zero__int_fscanf_modulo_04_good();
int CWE369_Divide_by_Zero__int_fscanf_modulo_31_bad();
int goodG2B_147();
int goodB2G_136();
int CWE369_Divide_by_Zero__int_fscanf_modulo_31_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_17_bad();
int goodB2G_137();
int goodG2B_148();
int CWE369_Divide_by_Zero__int_zero_modulo_17_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodB2GSink(int a1);
int __fastcall badSink_19(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_44_bad();
int __fastcall goodG2BSink_19(int a1);
int goodG2B_149();
int __fastcall goodB2GSink_13(int a1);
int goodB2G_138();
int CWE369_Divide_by_Zero__int_zero_modulo_44_good();
int __fastcall badSink_20(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_41_bad();
int __fastcall goodG2BSink_20(int a1);
int goodG2B_150();
int __fastcall goodB2GSink_14(int a1);
int goodB2G_139();
int CWE369_Divide_by_Zero__int_zero_divide_41_good();
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_badSource();
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_goodG2BSource();
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_goodB2GSource();
int CWE369_Divide_by_Zero__int_rand_divide_10_bad();
int goodB2G1_88();
int goodB2G2_88();
int goodG2B1_77();
int goodG2B2_77();
int CWE369_Divide_by_Zero__int_rand_divide_10_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad();
int goodB2G1_89();
int goodB2G2_89();
int goodG2B1_78();
int goodG2B2_78();
int CWE369_Divide_by_Zero__int_fscanf_modulo_08_good();
int CWE369_Divide_by_Zero__int_zero_modulo_11_bad();
int goodB2G1_90();
int goodB2G2_90();
int goodG2B1_79();
int goodG2B2_79();
int CWE369_Divide_by_Zero__int_zero_modulo_11_good();
int CWE369_Divide_by_Zero__int_zero_modulo_02_bad();
int goodB2G1_91();
int goodB2G2_91();
int goodG2B1_80();
int goodG2B2_80();
int CWE369_Divide_by_Zero__int_zero_modulo_02_good();
int CWE369_Divide_by_Zero__int_rand_modulo_51_bad();
int goodG2B_151();
int goodB2G_140();
int CWE369_Divide_by_Zero__int_rand_modulo_51_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Sink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BSink(int a1);
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_65_bad();
int goodG2B_152();
__int64 goodB2G_141();
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_65_good();
int CWE369_Divide_by_Zero__int_rand_divide_01_bad();
int goodG2B_153();
int goodB2G_142();
int CWE369_Divide_by_Zero__int_rand_divide_01_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad();
int goodB2G1_92();
int goodB2G2_92();
int goodG2B1_81();
int goodG2B2_81();
int CWE369_Divide_by_Zero__int_listen_socket_divide_15_good();
int CWE369_Divide_by_Zero__int_rand_divide_66_bad();
int goodG2B_154();
int goodB2G_143();
int CWE369_Divide_by_Zero__int_rand_divide_66_good();
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_badSource();
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_goodG2BSource();
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_goodB2GSource();
int CWE369_Divide_by_Zero__int_zero_modulo_10_bad();
int goodB2G1_93();
int goodB2G2_93();
int goodG2B1_82();
int goodG2B2_82();
int CWE369_Divide_by_Zero__int_zero_modulo_10_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_bad();
int goodB2G1_94();
int goodB2G2_94();
int goodG2B_155();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_good();
int CWE369_Divide_by_Zero__int_zero_divide_52_bad();
int goodG2B_156();
int goodB2G_144();
int CWE369_Divide_by_Zero__int_zero_divide_52_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_goodB2GSink(int a1);
int badSink_21();
int CWE369_Divide_by_Zero__int_rand_modulo_45_bad();
int goodG2BSink_21();
int goodG2B_157();
int goodB2GSink_15();
int goodB2G_145();
int CWE369_Divide_by_Zero__int_rand_modulo_45_good();
int CWE369_Divide_by_Zero__int_rand_divide_09_bad();
int goodB2G1_95();
int goodB2G2_95();
int goodG2B1_83();
int goodG2B2_83();
int CWE369_Divide_by_Zero__int_rand_divide_09_good();
__int64 __fastcall badSource_5(unsigned int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_42_bad();
__int64 goodG2BSource_5();
int goodG2B_158();
__int64 __fastcall goodB2GSource_5(unsigned int a1);
int goodB2G_146();
int CWE369_Divide_by_Zero__int_listen_socket_divide_42_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_16_bad();
int goodB2G_147();
int goodG2B_159();
int CWE369_Divide_by_Zero__int_zero_divide_16_good();
int CWE369_Divide_by_Zero__int_rand_modulo_06_bad();
int goodB2G1_96();
int goodB2G2_96();
int goodG2B1_84();
int goodG2B2_84();
int CWE369_Divide_by_Zero__int_rand_modulo_06_good();
int CWE369_Divide_by_Zero__int_rand_divide_61_bad();
int goodG2B_160();
int goodB2G_148();
int CWE369_Divide_by_Zero__int_rand_divide_61_good();
int CWE369_Divide_by_Zero__int_zero_modulo_01_bad();
int goodG2B_161();
int goodB2G_149();
int CWE369_Divide_by_Zero__int_zero_modulo_01_good();
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_bad();
int goodB2G1_97();
int goodB2G2_97();
int goodG2B_162();
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_good();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE369_Divide_by_Zero__int_rand_divide_08_bad();
int goodB2G1_98();
int goodB2G2_98();
int goodG2B1_85();
int goodG2B2_85();
int CWE369_Divide_by_Zero__int_rand_divide_08_good();
int CWE369_Divide_by_Zero__int_zero_modulo_61_bad();
int goodG2B_163();
int goodB2G_150();
int CWE369_Divide_by_Zero__int_zero_modulo_61_good();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_13_bad();
int goodB2G1_99();
int goodB2G2_99();
int goodG2B1_86();
int goodG2B2_86();
int CWE369_Divide_by_Zero__int_listen_socket_modulo_13_good();
int __fastcall badSink_22(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_41_bad();
int __fastcall goodG2BSink_22(int a1);
int goodG2B_164();
int __fastcall goodB2GSink_16(int a1);
int goodB2G_151();
int CWE369_Divide_by_Zero__int_zero_modulo_41_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_53_bad();
int goodG2B_165();
int goodB2G_152();
int CWE369_Divide_by_Zero__int_listen_socket_divide_53_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_zero_divide_51_bad();
int goodG2B_166();
int goodB2G_153();
int CWE369_Divide_by_Zero__int_zero_divide_51_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_05_bad();
int goodB2G1_100();
int goodB2G2_100();
int goodG2B1_87();
int goodG2B2_87();
int CWE369_Divide_by_Zero__int_listen_socket_divide_05_good();
int __fastcall badSink_23(int a1);
int CWE369_Divide_by_Zero__int_listen_socket_divide_41_bad();
int __fastcall goodG2BSink_23(int a1);
int goodG2B_167();
int __fastcall goodB2GSink_17(int a1);
int goodB2G_154();
int CWE369_Divide_by_Zero__int_listen_socket_divide_41_good();
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_zero_modulo_09_bad();
int goodB2G1_101();
int goodB2G2_101();
int goodG2B1_88();
int goodG2B2_88();
int CWE369_Divide_by_Zero__int_zero_modulo_09_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_goodB2GSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodB2GSink(int a1);
int CWE369_Divide_by_Zero__int_fscanf_modulo_16_bad();
int goodB2G_155();
int goodG2B_168();
int CWE369_Divide_by_Zero__int_fscanf_modulo_16_good();
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_bad();
int goodG2B_169();
int goodB2G_156();
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_good();
int badSink_24();
int CWE369_Divide_by_Zero__int_zero_divide_45_bad();
int goodG2BSink_24();
int goodG2B_170();
int goodB2GSink_18();
int goodB2G_157();
int CWE369_Divide_by_Zero__int_zero_divide_45_good();
int __fastcall badSink_25(int a1);
int CWE369_Divide_by_Zero__int_zero_divide_21_bad();
int __fastcall goodB2G1Sink_5(int a1);
int goodB2G1_102();
int __fastcall goodB2G2Sink_5(int a1);
int goodB2G2_102();
int __fastcall goodG2BSink_25(int a1);
int goodG2B_171();
int CWE369_Divide_by_Zero__int_zero_divide_21_good();
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_badSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_goodG2BSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_goodB2GSink(int a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_badSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodG2BSink(_DWORD *a1);
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodB2GSink(_DWORD *a1);
int CWE369_Divide_by_Zero__int_zero_divide_68b_badSink();
int CWE369_Divide_by_Zero__int_zero_divide_68b_goodG2BSink();
int CWE369_Divide_by_Zero__int_zero_divide_68b_goodB2GSink();
int __fastcall badSink_26(int a1);
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_44_bad();
int __fastcall goodG2BSink_26(int a1);
int goodG2B_172();
int __fastcall goodB2GSink_19(int a1);
__int64 goodB2G_158();
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_44_good();
int CWE369_Divide_by_Zero__int_rand_modulo_32_bad();
int goodG2B_173();
int goodB2G_159();
int CWE369_Divide_by_Zero__int_rand_modulo_32_good();
int CWE369_Divide_by_Zero__int_zero_divide_06_bad();
int goodB2G1_103();
int goodB2G2_103();
int goodG2B1_89();
int goodG2B2_89();
int CWE369_Divide_by_Zero__int_zero_divide_06_good();
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_badSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodG2BSink(__int64 a1);
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodB2GSink(__int64 a1);
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_433684; // weak
_UNKNOWN unk_433D10; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_647010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticFive_1 = 5; // weak
int staticTrue_2 = 1; // weak
int staticFive_2 = 5; // weak
int staticFive_3 = 5; // weak
int staticFive_4 = 5; // weak
int staticTrue_3 = 1; // weak
int staticTrue_4 = 1; // weak
int staticFive_5 = 5; // weak
int staticTrue_5 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
__int64 stdin; // weak
char completed_6355; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
int staticFalse; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int staticFalse_0; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
int staticFalse_1; // weak
int badStatic_3; // weak
int goodB2G1Static_3; // weak
int goodB2G2Static_3; // weak
int goodG2BStatic_3; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal; // weak
int staticFalse_2; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_45_badData; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_45_badData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal; // weak
int staticFalse_3; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_badData; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal; // weak
int staticFalse_4; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_badData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData; // weak
int badStatic_4; // weak
int goodB2G1Static_4; // weak
int goodB2G2Static_4; // weak
int goodG2BStatic_4; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_45_badData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Global; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal; // weak
int staticFalse_5; // weak
int CWE369_Divide_by_Zero__int_zero_divide_45_badData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData; // weak
int badStatic_5; // weak
int goodB2G1Static_5; // weak
int goodB2G2Static_5; // weak
int goodG2BStatic_5; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData; // weak
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_68_badData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_rand_divide_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_68_badData; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_zero_modulo_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_68_badData; // weak
int CWE369_Divide_by_Zero__int_rand_modulo_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_badData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_68_badData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_zero_divide_68_goodG2BData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_badData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData; // weak
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodG2BData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400B28) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400D40: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400B50) ----------------------------------------------------
__int64 sub_400B50()
{
  return qword_647010();
}
// 647010: using guessed type __int64 (*qword_647010)(void);

//----- (0000000000400D50) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400D56: positive sp value 8 has been found

//----- (0000000000400D80) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6582615LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6582615LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}
// 647150: using guessed type __int64 stdin;

//----- (0000000000400DB0) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400DF0) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 647158: using guessed type char completed_6355;

//----- (0000000000400E10) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400E10: could not find valid save-restore pair for rbp

//----- (0000000000400E3D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_11_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_22_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_66_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_66_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_22_good();");
  CWE369_Divide_by_Zero__int_rand_divide_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_02_good();");
  CWE369_Divide_by_Zero__int_zero_divide_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_17_good();");
  CWE369_Divide_by_Zero__int_zero_divide_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_12_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_17_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_11_good();");
  CWE369_Divide_by_Zero__int_rand_divide_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_18_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_02_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_09_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_16_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_02_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_31_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_65_good();");
  CWE369_Divide_by_Zero__int_zero_divide_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_06_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_10_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_54_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_09_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_31_good();");
  CWE369_Divide_by_Zero__int_zero_divide_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_10_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_41_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_68_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_42_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_53_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_14_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_32_good();");
  CWE369_Divide_by_Zero__int_rand_divide_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_65_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_10_good();");
  CWE369_Divide_by_Zero__int_zero_divide_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_06_good();");
  CWE369_Divide_by_Zero__int_zero_divide_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_65_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_04_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_67_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_66_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_16_good();");
  CWE369_Divide_by_Zero__int_zero_divide_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_14_good();");
  CWE369_Divide_by_Zero__int_rand_divide_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_44_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_05_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_15_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_64_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_45_good();");
  CWE369_Divide_by_Zero__int_zero_divide_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_34_good();");
  CWE369_Divide_by_Zero__int_zero_divide_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_65_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_07_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_09_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_51_good();");
  CWE369_Divide_by_Zero__int_zero_divide_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_12_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_18_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_54_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_41_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_01_good();");
  CWE369_Divide_by_Zero__int_rand_divide_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_03_good();");
  CWE369_Divide_by_Zero__int_zero_divide_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_41_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_15_good();");
  CWE369_Divide_by_Zero__int_rand_divide_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_15_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_07_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_65_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_44_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_52_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_51_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_34_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_05_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_03_good();");
  CWE369_Divide_by_Zero__int_rand_divide_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_61_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_34_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_06_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_66_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_21_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_42_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_53_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_11_good();");
  CWE369_Divide_by_Zero__int_zero_divide_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_22_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_04_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_02_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_14_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_61_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_63_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_02_good();");
  CWE369_Divide_by_Zero__int_rand_divide_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_15_good();");
  CWE369_Divide_by_Zero__int_zero_divide_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_41_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_32_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_17_good();");
  CWE369_Divide_by_Zero__int_rand_divide_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_17_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_02_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_18_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_65_good();");
  CWE369_Divide_by_Zero__int_rand_divide_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_67_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_10_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_64_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_45_good();");
  CWE369_Divide_by_Zero__int_rand_divide_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_10_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_17_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_12_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_31_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_51_good();");
  CWE369_Divide_by_Zero__int_rand_divide_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_11_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_63_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_13_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_53_good();");
  CWE369_Divide_by_Zero__int_zero_divide_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_21_good();");
  CWE369_Divide_by_Zero__int_rand_divide_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_68_good();");
  CWE369_Divide_by_Zero__int_rand_divide_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_52_good();");
  CWE369_Divide_by_Zero__int_rand_divide_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_63_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_13_good();");
  CWE369_Divide_by_Zero__int_rand_divide_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_22_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_07_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_05_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_21_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_61_good();");
  CWE369_Divide_by_Zero__int_zero_divide_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_10_good();");
  CWE369_Divide_by_Zero__int_rand_divide_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_61_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_45_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_64_good();");
  CWE369_Divide_by_Zero__int_zero_divide_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_51_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_68_good();");
  CWE369_Divide_by_Zero__int_zero_divide_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_06_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_01_good();");
  CWE369_Divide_by_Zero__int_zero_divide_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_42_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_34_good();");
  CWE369_Divide_by_Zero__int_rand_divide_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_09_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_67_good();");
  CWE369_Divide_by_Zero__int_rand_divide_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_03_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_53_good();");
  CWE369_Divide_by_Zero__int_rand_divide_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_54_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_17_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_66_good();");
  CWE369_Divide_by_Zero__int_zero_divide_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_53_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_66_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_65_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_65_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_05_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_22_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_42_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_44_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_21_good();");
  CWE369_Divide_by_Zero__int_zero_divide_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_41_good();");
  CWE369_Divide_by_Zero__int_rand_divide_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_63_good();");
  CWE369_Divide_by_Zero__int_zero_divide_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_16_good();");
  CWE369_Divide_by_Zero__int_rand_divide_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_12_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_07_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_15_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_10_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_10_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_64_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_16_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_09_good();");
  CWE369_Divide_by_Zero__int_rand_divide_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_41_good();");
  CWE369_Divide_by_Zero__int_zero_divide_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_11_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_42_good();");
  CWE369_Divide_by_Zero__int_rand_divide_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_68_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_05_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_08_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_41_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_41_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_31_good();");
  CWE369_Divide_by_Zero__int_rand_divide_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_12_good();");
  CWE369_Divide_by_Zero__int_rand_divide_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_11_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_34_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_68_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_54_good();");
  CWE369_Divide_by_Zero__int_zero_divide_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_03_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_05_good();");
  CWE369_Divide_by_Zero__int_zero_divide_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_42_good();");
  CWE369_Divide_by_Zero__int_zero_divide_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_16_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_16_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_44_good();");
  CWE369_Divide_by_Zero__int_rand_divide_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_45_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_08_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_34_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_07_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_21_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_18_good();");
  CWE369_Divide_by_Zero__int_rand_divide_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_04_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_67_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_67_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_14_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_67_good();");
  CWE369_Divide_by_Zero__int_zero_divide_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_03_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_13_good();");
  CWE369_Divide_by_Zero__int_zero_divide_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_18_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_32_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_53_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_68_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_64_good();");
  CWE369_Divide_by_Zero__int_rand_divide_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_07_good();");
  CWE369_Divide_by_Zero__int_rand_divide_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_08_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_63_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_02_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_02_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_09_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_04_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_54_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_51_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_01_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_18_good();");
  CWE369_Divide_by_Zero__int_zero_divide_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_01_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_05_good();");
  CWE369_Divide_by_Zero__int_rand_divide_05_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_14_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_63_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_12_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_01_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_51_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_45_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_08_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_06_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_51_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_51_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_03_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_13_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_15_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_42_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_42_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_08_good();");
  CWE369_Divide_by_Zero__int_zero_divide_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_01_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_66_good();");
  CWE369_Divide_by_Zero__int_rand_divide_66_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_64_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_04_good();");
  CWE369_Divide_by_Zero__int_rand_divide_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_14_good();");
  CWE369_Divide_by_Zero__int_zero_divide_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_01_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_01_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_61_good();");
  CWE369_Divide_by_Zero__int_rand_divide_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_61_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_13_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_12_good();");
  CWE369_Divide_by_Zero__int_zero_divide_12_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_31_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_21_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_32_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_32_good();");
  CWE369_Divide_by_Zero__int_zero_divide_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_11_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_11_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_34_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_34_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_13_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_31_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_64_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_64_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_31_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_31_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_32_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_68_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_68_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_54_good();");
  CWE369_Divide_by_Zero__int_rand_divide_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_17_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_17_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_04_good();");
  CWE369_Divide_by_Zero__int_zero_divide_04_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_53_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_53_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_15_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_15_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_44_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_14_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_14_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_06_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_67_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_67_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_45_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_52_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_18_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_18_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_44_good();");
  CWE369_Divide_by_Zero__int_zero_divide_44_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_13_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_13_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_07_good();");
  CWE369_Divide_by_Zero__int_zero_divide_07_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_22_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_54_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_54_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_08_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_52_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_08_good();");
  CWE369_Divide_by_Zero__int_rand_divide_08_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_52_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_16_good();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_16_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_52_good();");
  CWE369_Divide_by_Zero__int_zero_divide_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_63_good();");
  CWE369_Divide_by_Zero__int_rand_divide_63_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_09_good();");
  CWE369_Divide_by_Zero__int_zero_divide_09_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_32_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_32_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_22_good();");
  CWE369_Divide_by_Zero__int_zero_divide_22_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_52_good();");
  CWE369_Divide_by_Zero__int_rand_modulo_52_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_61_good();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_61_good();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_45_good();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_45_good();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_03_good();");
  CWE369_Divide_by_Zero__int_zero_modulo_03_good();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_06_good();");
  CWE369_Divide_by_Zero__int_rand_divide_06_good();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_11_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_22_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_66_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_66_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_22_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_02_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_17_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_12_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_17_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_11_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_18_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_02_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_09_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_16_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_02_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_31_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_65_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_06_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_10_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_54_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_09_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_31_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_10_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_41_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_68_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_42_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_53_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_14_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_32_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_65_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_10_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_06_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_65_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_04_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_67_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_66_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_16_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_14_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_44_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_05_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_15_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_64_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_45_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_34_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_65_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_07_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_09_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_51_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_12_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_18_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_54_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_41_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_01_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_03_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_41_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_15_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_15_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_07_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_65_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_44_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_52_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_51_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_34_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_05_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_03_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_61_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_34_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_06_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_66_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_21_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_42_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_53_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_11_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_22_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_04_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_02_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_14_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_61_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_63_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_02_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_15_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_41_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_32_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_17_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_17_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_02_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_18_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_65_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_67_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_10_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_64_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_45_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_10_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_12_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_51_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_11_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_63_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_13_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_53_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_21_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_68_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_52_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_63_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_13_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_22_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_07_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_05_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_21_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_61_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_10_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_61_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_45_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_64_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_51_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_68_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_06_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_01_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_42_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_34_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_09_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_67_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_03_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_53_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_54_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_17_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_66_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_53_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_66_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_65_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_65_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_05_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_22_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_42_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_44_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_21_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_41_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_63_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_16_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_07_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_10_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_10_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_64_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_16_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_09_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_41_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_11_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_42_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_68_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_05_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_08_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_41_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_41_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_31_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_12_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_11_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_68_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_54_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_03_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_05_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_42_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_16_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_16_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_44_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_45_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_08_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_34_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_07_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_21_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_18_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_04_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_67_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_67_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_14_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_67_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_03_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_13_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_18_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_32_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_53_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_68_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_64_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_07_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_08_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_63_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_02_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_02_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_09_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_04_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_54_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_51_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_01_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_18_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_01_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_05_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_05_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_14_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_63_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_12_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_01_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_51_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_45_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_06_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_51_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_51_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_03_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_13_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_15_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_42_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_42_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_08_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_01_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_66_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_66_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_64_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_04_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_14_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_01_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_01_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_61_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_61_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_13_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_12_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_12_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_31_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_21_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_32_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_32_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_11_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_11_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_34_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_34_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_13_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_31_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_64_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_64_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_31_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_31_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_32_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_68_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_68_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_54_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_17_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_17_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_04_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_04_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_53_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_53_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_15_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_15_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_44_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_14_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_14_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_06_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_06_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_67_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_67_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_45_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_52_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_18_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_18_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_44_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_44_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_13_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_13_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_07_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_07_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_22_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_54_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_54_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_08_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_52_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_08_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_08_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_52_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_52_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_63_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_63_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_09_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_09_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_32_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_32_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_divide_22_bad();");
  CWE369_Divide_by_Zero__int_zero_divide_22_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_modulo_52_bad();");
  CWE369_Divide_by_Zero__int_rand_modulo_52_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_listen_socket_modulo_61_bad();");
  CWE369_Divide_by_Zero__int_listen_socket_modulo_61_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_fscanf_modulo_45_bad();");
  CWE369_Divide_by_Zero__int_fscanf_modulo_45_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_zero_modulo_03_bad();");
  CWE369_Divide_by_Zero__int_zero_modulo_03_bad();
  printLine("Calling CWE369_Divide_by_Zero__int_rand_divide_06_bad();");
  CWE369_Divide_by_Zero__int_rand_divide_06_bad();
  return 0;
}
// 6472B4: using guessed type int globalArgc;
// 6472B8: using guessed type __int64 globalArgv;

//----- (0000000000403808) ----------------------------------------------------
int __fastcall badSink(int a1)
{
  int result; // eax

  result = badStatic;
  if ( badStatic )
    result = printIntLine(100 / a1);
  return result;
}
// 64715C: using guessed type int badStatic;

//----- (000000000040382F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic = 1;
  return badSink(v2);
}
// 64715C: using guessed type int badStatic;

//----- (00000000004038A3) ----------------------------------------------------
int __fastcall goodB2G1Sink(int a1)
{
  if ( goodB2G1Static )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 647160: using guessed type int goodB2G1Static;

//----- (00000000004038E8) ----------------------------------------------------
int goodB2G1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static = 0;
  return goodB2G1Sink(v2);
}
// 647160: using guessed type int goodB2G1Static;

//----- (000000000040395C) ----------------------------------------------------
int __fastcall goodB2G2Sink(int a1)
{
  int result; // eax

  result = goodB2G2Static;
  if ( goodB2G2Static )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647164: using guessed type int goodB2G2Static;

//----- (0000000000403995) ----------------------------------------------------
int goodB2G2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static = 1;
  return goodB2G2Sink(v2);
}
// 647164: using guessed type int goodB2G2Static;

//----- (0000000000403A09) ----------------------------------------------------
int __fastcall goodG2BSink(int a1)
{
  int result; // eax

  result = goodG2BStatic;
  if ( goodG2BStatic )
    result = printIntLine(100 / a1);
  return result;
}
// 647168: using guessed type int goodG2BStatic;

//----- (0000000000403A30) ----------------------------------------------------
int goodG2B()
{
  goodG2BStatic = 1;
  return goodG2BSink(7);
}
// 647168: using guessed type int goodG2BStatic;

//----- (0000000000403A5C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_21_good()
{
  goodB2G1();
  goodB2G2();
  return goodG2B();
}

//----- (0000000000403A80) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_52b_badSink(v2);
}

//----- (0000000000403AEA) ----------------------------------------------------
int goodG2B_0()
{
  return CWE369_Divide_by_Zero__int_rand_divide_52b_goodG2BSink(7);
}

//----- (0000000000403B0C) ----------------------------------------------------
int goodB2G()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_52b_goodB2GSink(v2);
}

//----- (0000000000403B76) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_52_good()
{
  goodG2B_0();
  return goodB2G();
}

//----- (0000000000403B90) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_12_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 0;
  else
    v1 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 / v1);
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000403C01) ----------------------------------------------------
int goodB2G_0()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("This would result in a divide by zero");
}

//----- (0000000000403C84) ----------------------------------------------------
int goodG2B_1()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(0xEu);
}

//----- (0000000000403CE3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_12_good()
{
  goodB2G_0();
  return goodG2B_1();
}

//----- (0000000000403CFD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000403D1C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000403D3B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000403D6C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000403D89) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000403DA6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000403DD5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_67b_badSink(v9);
}
// 403DD5: using guessed type char buf[16];

//----- (0000000000403F09) ----------------------------------------------------
int goodG2B_2()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodG2BSink(7);
}

//----- (0000000000403F31) ----------------------------------------------------
int goodB2G_1()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodB2GSink(v9);
}
// 403F31: using guessed type char buf[16];

//----- (0000000000404065) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_67_good()
{
  goodG2B_2();
  return goodB2G_1();
}

//----- (000000000040407F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54d_badSink(a1);
}

//----- (0000000000404096) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54d_goodG2BSink(a1);
}

//----- (00000000004040AD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54d_goodB2GSink(a1);
}

//----- (00000000004040C4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000404136) ----------------------------------------------------
int goodB2G_2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004041BA) ----------------------------------------------------
int goodG2B_3()
{
  return printIntLine(0xEu);
}

//----- (00000000004041E4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_16_good()
{
  goodB2G_2();
  return goodG2B_3();
}

//----- (00000000004041FE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54c_badSink(a1);
}

//----- (0000000000404215) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54c_goodG2BSink(a1);
}

//----- (000000000040422C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54c_goodB2GSink(a1);
}

//----- (0000000000404243) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 404243: using guessed type char buf[16];

//----- (000000000040437A) ----------------------------------------------------
int goodG2B_4()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodG2BSink(7);
}

//----- (00000000004043A5) ----------------------------------------------------
__int64 goodB2G_3()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodB2GSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 4043A5: using guessed type char buf[16];

//----- (00000000004044DC) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_65_good()
{
  goodG2B_4();
  return goodB2G_3();
}

//----- (00000000004044F6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000404568) ----------------------------------------------------
int goodG2B_5()
{
  return printIntLine(2u);
}

//----- (0000000000404592) ----------------------------------------------------
int goodB2G_4()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000404616) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_01_good()
{
  goodG2B_5();
  return goodB2G_4();
}

//----- (0000000000404630) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_22_bad()
{
  CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_zero_modulo_22_badSink(0);
}
// 64716C: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal;

//----- (000000000040465C) ----------------------------------------------------
int goodB2G1_0()
{
  CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Sink(0);
}
// 647170: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Global;

//----- (0000000000404688) ----------------------------------------------------
int goodB2G2_0()
{
  CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Sink(0);
}
// 647174: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global;

//----- (00000000004046B4) ----------------------------------------------------
int goodG2B_6()
{
  CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BSink(7);
}
// 647178: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal;

//----- (00000000004046E0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_22_good()
{
  goodB2G1_0();
  goodB2G2_0();
  return goodG2B_6();
}

//----- (0000000000404704) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000404723) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000404742) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000404773) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_15_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 404773: using guessed type char buf[16];

//----- (00000000004048AB) ----------------------------------------------------
int goodB2G1_1()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4048AB: using guessed type char buf[16];

//----- (00000000004049F5) ----------------------------------------------------
int goodB2G2_1()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4049F5: using guessed type char buf[16];

//----- (0000000000404B3F) ----------------------------------------------------
int goodG2B1()
{
  return printIntLine(2u);
}

//----- (0000000000404B6B) ----------------------------------------------------
int goodG2B2()
{
  return printIntLine(2u);
}

//----- (0000000000404B97) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_15_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1();
  return goodG2B2();
}

//----- (0000000000404BC5) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 64717C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal;

//----- (0000000000404BEC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 647180: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Global;

//----- (0000000000404C31) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647184: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global;

//----- (0000000000404C6A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 647188: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal;

//----- (0000000000404C91) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53d_badSink(a1);
}

//----- (0000000000404CA8) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodG2BSink(a1);
}

//----- (0000000000404CBF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodB2GSink(a1);
}

//----- (0000000000404CD6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_52_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52b_badSink(0);
}

//----- (0000000000404CF8) ----------------------------------------------------
int goodG2B_7()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52b_goodG2BSink(7);
}

//----- (0000000000404D1A) ----------------------------------------------------
int goodB2G_5()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52b_goodB2GSink(0);
}

//----- (0000000000404D3C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_52_good()
{
  goodG2B_7();
  return goodB2G_5();
}

//----- (0000000000404D56) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000404D79) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000404D9C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000404DD1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_17_bad()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 0;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000404E1F) ----------------------------------------------------
int goodB2G_6()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 0;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000404E7F) ----------------------------------------------------
int goodG2B_8()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000404ECD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_17_good()
{
  goodB2G_6();
  return goodG2B_8();
}

//----- (0000000000404EE7) ----------------------------------------------------
__int64 __fastcall badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 404EE7: using guessed type char buf[16];

//----- (000000000040500A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource(0xFFFFFFFF);
  return printIntLine(100 % v1);
}

//----- (000000000040503A) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 7LL;
}

//----- (000000000040504D) ----------------------------------------------------
int goodG2B_9()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource();
  return printIntLine(100 % v1);
}

//----- (000000000040507D) ----------------------------------------------------
__int64 __fastcall goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40507D: using guessed type char buf[16];

//----- (00000000004051A0) ----------------------------------------------------
int goodB2G_7()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004051E2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_42_good()
{
  goodB2G_7();
  return goodG2B_9();
}

//----- (00000000004051FC) ----------------------------------------------------
int __fastcall badSink_0(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000405219) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_44_bad()
{
  return badSink_0(0);
}

//----- (0000000000405244) ----------------------------------------------------
int __fastcall goodG2BSink_0(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000405261) ----------------------------------------------------
int goodG2B_10()
{
  return goodG2BSink_0(7);
}

//----- (000000000040528C) ----------------------------------------------------
int __fastcall goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004052BB) ----------------------------------------------------
int goodB2G_8()
{
  return goodB2GSink(0);
}

//----- (00000000004052E6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_44_good()
{
  goodG2B_10();
  return goodB2G_8();
}

//----- (0000000000405300) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_16_bad()
{
  return printIntLine(100 % 0);
}

//----- (000000000040532C) ----------------------------------------------------
int goodB2G_9()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040536A) ----------------------------------------------------
int goodG2B_11()
{
  return printIntLine(2u);
}

//----- (0000000000405396) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_16_good()
{
  goodB2G_9();
  return goodG2B_11();
}

//----- (00000000004053B0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_modulo_61b_badSource();
  return printIntLine(100 % v1);
}

//----- (00000000004053E0) ----------------------------------------------------
int goodG2B_12()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_modulo_61b_goodG2BSource();
  return printIntLine(100 % v1);
}

//----- (0000000000405410) ----------------------------------------------------
int goodB2G_10()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_modulo_61b_goodB2GSource();
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000405452) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_61_good()
{
  goodG2B_12();
  return goodB2G_10();
}

//----- (000000000040546C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_11_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (00000000004054B0) ----------------------------------------------------
int goodB2G1_2()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000405512) ----------------------------------------------------
int goodB2G2_2()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000405568) ----------------------------------------------------
int goodG2B1_0()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (00000000004055B8) ----------------------------------------------------
int goodG2B2_0()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (00000000004055FC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_11_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (000000000040562A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_02_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000405652) ----------------------------------------------------
int goodB2G1_3()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040568C) ----------------------------------------------------
int goodB2G2_3()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004056C6) ----------------------------------------------------
int goodG2B1_1()
{
  return printIntLine(0xEu);
}

//----- (00000000004056EE) ----------------------------------------------------
int goodG2B2_1()
{
  return printIntLine(0xEu);
}

//----- (0000000000405716) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_02_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_1();
  return goodG2B2_1();
}

//----- (0000000000405744) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_badSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (000000000040576C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (0000000000405794) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004057CE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54c_badSink(a1);
}

//----- (00000000004057E5) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodG2BSink(a1);
}

//----- (00000000004057FC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodB2GSink(a1);
}

//----- (0000000000405813) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_51b_badSink(v2);
}

//----- (000000000040587D) ----------------------------------------------------
int goodG2B_13()
{
  return CWE369_Divide_by_Zero__int_rand_divide_51b_goodG2BSink(7);
}

//----- (000000000040589F) ----------------------------------------------------
int goodB2G_11()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_51b_goodB2GSink(v2);
}

//----- (0000000000405909) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_51_good()
{
  goodG2B_13();
  return goodB2G_11();
}

//----- (0000000000405923) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_65_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE369_Divide_by_Zero__int_fscanf_modulo_65b_badSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000405964) ----------------------------------------------------
int goodG2B_14()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodG2BSink(7);
}

//----- (000000000040598F) ----------------------------------------------------
__int64 goodB2G_12()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE369_Divide_by_Zero__int_fscanf_modulo_65b_goodB2GSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004059D0) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_65_good()
{
  goodG2B_14();
  return goodB2G_12();
}

//----- (00000000004059EA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000405A09) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000405A28) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000405A59) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  else
  {
    v6 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 / v6);
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000405B12) ----------------------------------------------------
int goodB2G_13()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  int result; // eax
  int v11; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v11 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v11 = v7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v11 )
      result = printIntLine(100 / v11);
    else
      result = printLine("This would result in a divide by zero");
  }
  else if ( v11 )
  {
    result = printIntLine(100 / v11);
  }
  else
  {
    result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000405C1F) ----------------------------------------------------
int goodG2B_15()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(0xEu);
}

//----- (0000000000405C7E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_12_good()
{
  goodB2G_13();
  return goodG2B_15();
}

//----- (0000000000405C98) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_15_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000405CDC) ----------------------------------------------------
int goodB2G1_4()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000405D33) ----------------------------------------------------
int goodB2G2_4()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000405D8A) ----------------------------------------------------
int goodG2B1_2()
{
  return printIntLine(2u);
}

//----- (0000000000405DB6) ----------------------------------------------------
int goodG2B2_2()
{
  return printIntLine(2u);
}

//----- (0000000000405DE2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_15_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (0000000000405E10) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v6);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000405E96) ----------------------------------------------------
int goodB2G1_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000405F3A) ----------------------------------------------------
int goodB2G2_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000405FD2) ----------------------------------------------------
int goodG2B1_3()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040601C) ----------------------------------------------------
int goodG2B2_3()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040605A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_09_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (0000000000406088) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_badSource()
{
  return 0LL;
}

//----- (000000000040609B) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_goodG2BSource()
{
  return 7LL;
}

//----- (00000000004060AE) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_divide_61b_goodB2GSource()
{
  return 0LL;
}

//----- (00000000004060C1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_10_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004060FD) ----------------------------------------------------
int goodB2G1_6()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (0000000000406157) ----------------------------------------------------
int goodB2G2_6()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004061A5) ----------------------------------------------------
int goodG2B1_4()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (00000000004061ED) ----------------------------------------------------
int goodG2B2_4()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (0000000000406229) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_10_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (0000000000406257) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_63b_badSink(&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000406291) ----------------------------------------------------
int goodG2B_16()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodG2BSink(&v1);
}

//----- (00000000004062B5) ----------------------------------------------------
int goodB2G_14()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodB2GSink(&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004062EF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_63_good()
{
  goodG2B_16();
  return goodB2G_14();
}

//----- (0000000000406309) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_22_badSink(v8);
}
// 64717C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_badGlobal;
// 406309: using guessed type char buf[16];

//----- (0000000000406441) ----------------------------------------------------
int goodB2G1_7()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Sink(v8);
}
// 647180: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G1Global;
// 406441: using guessed type char buf[16];

//----- (0000000000406579) ----------------------------------------------------
int goodB2G2_7()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Sink(v8);
}
// 647184: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodB2G2Global;
// 406579: using guessed type char buf[16];

//----- (00000000004066B1) ----------------------------------------------------
int goodG2B_17()
{
  CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BSink(7);
}
// 647188: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_22_goodG2BGlobal;

//----- (00000000004066DD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_22_good()
{
  goodB2G1_7();
  goodB2G2_7();
  return goodG2B_17();
}

//----- (0000000000406701) ----------------------------------------------------
__int64 __fastcall badSource_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040672E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_0(0xFFFFFFFF);
  return printIntLine(100 % v1);
}

//----- (000000000040675E) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 7LL;
}

//----- (0000000000406771) ----------------------------------------------------
int goodG2B_18()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_0();
  return printIntLine(100 % v1);
}

//----- (00000000004067A1) ----------------------------------------------------
__int64 __fastcall goodB2GSource_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004067CE) ----------------------------------------------------
int goodB2G_15()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_0(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000406810) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_42_good()
{
  goodB2G_15();
  return goodG2B_18();
}

//----- (000000000040682A) ----------------------------------------------------
int __fastcall badSink_1(int a1)
{
  int result; // eax

  result = badStatic_0;
  if ( badStatic_0 )
    result = printIntLine(100 % a1);
  return result;
}
// 64718C: using guessed type int badStatic_0;

//----- (0000000000406853) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic_0 = 1;
  return badSink_1(v2);
}
// 64718C: using guessed type int badStatic_0;

//----- (00000000004068C7) ----------------------------------------------------
int __fastcall goodB2G1Sink_0(int a1)
{
  if ( goodB2G1Static_0 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647190: using guessed type int goodB2G1Static_0;

//----- (000000000040690E) ----------------------------------------------------
int goodB2G1_8()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static_0 = 0;
  return goodB2G1Sink_0(v2);
}
// 647190: using guessed type int goodB2G1Static_0;

//----- (0000000000406982) ----------------------------------------------------
int __fastcall goodB2G2Sink_0(int a1)
{
  int result; // eax

  result = goodB2G2Static_0;
  if ( goodB2G2Static_0 )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647194: using guessed type int goodB2G2Static_0;

//----- (00000000004069BD) ----------------------------------------------------
int goodB2G2_8()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static_0 = 1;
  return goodB2G2Sink_0(v2);
}
// 647194: using guessed type int goodB2G2Static_0;

//----- (0000000000406A31) ----------------------------------------------------
int __fastcall goodG2BSink_1(int a1)
{
  int result; // eax

  result = goodG2BStatic_0;
  if ( goodG2BStatic_0 )
    result = printIntLine(100 % a1);
  return result;
}
// 647198: using guessed type int goodG2BStatic_0;

//----- (0000000000406A5A) ----------------------------------------------------
int goodG2B_19()
{
  goodG2BStatic_0 = 1;
  return goodG2BSink_1(7);
}
// 647198: using guessed type int goodG2BStatic_0;

//----- (0000000000406A86) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_21_good()
{
  goodB2G1_8();
  goodB2G2_8();
  return goodG2B_19();
}

//----- (0000000000406AAA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_51_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_51b_badSink(0);
}

//----- (0000000000406ACC) ----------------------------------------------------
int goodG2B_20()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_51b_goodG2BSink(7);
}

//----- (0000000000406AEE) ----------------------------------------------------
int goodB2G_16()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_51b_goodB2GSink(0);
}

//----- (0000000000406B10) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_51_good()
{
  goodG2B_20();
  return goodB2G_16();
}

//----- (0000000000406B2A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_64b_badSink(&v6);
}

//----- (0000000000406B96) ----------------------------------------------------
int goodG2B_21()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_rand_divide_64b_goodG2BSink(&v1);
}

//----- (0000000000406BBA) ----------------------------------------------------
int goodB2G_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_64b_goodB2GSink(&v6);
}

//----- (0000000000406C26) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_64_good()
{
  goodG2B_21();
  return goodB2G_17();
}

//----- (0000000000406C40) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_05_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue;
  if ( staticTrue )
    result = printIntLine(100 % v8);
  return result;
}
// 64710C: using guessed type int staticTrue;
// 406C40: using guessed type char buf[16];

//----- (0000000000406D8E) ----------------------------------------------------
int goodB2G1_9()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFalse )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 64710C: using guessed type int staticTrue;
// 64719C: using guessed type int staticFalse;
// 406D8E: using guessed type char buf[16];

//----- (0000000000406EFA) ----------------------------------------------------
int goodB2G2_9()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue;
  if ( staticTrue )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 64710C: using guessed type int staticTrue;
// 406EFA: using guessed type char buf[16];

//----- (000000000040705A) ----------------------------------------------------
int goodG2B1_5()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue;
  if ( staticTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 64710C: using guessed type int staticTrue;
// 64719C: using guessed type int staticFalse;

//----- (00000000004070A4) ----------------------------------------------------
int goodG2B2_5()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue )
    v1 = 7;
  result = staticTrue;
  if ( staticTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 64710C: using guessed type int staticTrue;

//----- (00000000004070E2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_05_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_5();
  return goodG2B2_5();
}

//----- (0000000000407110) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54d_badSink(a1);
}

//----- (0000000000407127) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54d_goodG2BSink(a1);
}

//----- (000000000040713E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54d_goodB2GSink(a1);
}

//----- (0000000000407155) ----------------------------------------------------
int __fastcall badSink_2(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000407174) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return badSink_2(v8);
}
// 407174: using guessed type char buf[16];

//----- (00000000004072A2) ----------------------------------------------------
int __fastcall goodG2BSink_2(int a1)
{
  return printIntLine(100 % a1);
}

//----- (00000000004072C1) ----------------------------------------------------
int goodG2B_22()
{
  return goodG2BSink_2(7);
}

//----- (00000000004072E3) ----------------------------------------------------
int __fastcall goodB2GSink_0(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000407314) ----------------------------------------------------
int goodB2G_18()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return goodB2GSink_0(v8);
}
// 407314: using guessed type char buf[16];

//----- (0000000000407442) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_41_good()
{
  goodB2G_18();
  return goodG2B_22();
}

//----- (000000000040745C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (00000000004074E0) ----------------------------------------------------
int goodB2G1_10()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000407582) ----------------------------------------------------
int goodB2G2_10()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000407618) ----------------------------------------------------
int goodG2B1_6()
{
  return printIntLine(0xEu);
}

//----- (0000000000407660) ----------------------------------------------------
int goodG2B2_6()
{
  return printIntLine(0xEu);
}

//----- (000000000040769C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_06_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (00000000004076CA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_badSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData);
}
// 6472C4: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData;

//----- (00000000004076EF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodG2BSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData);
}
// 6472C8: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData;

//----- (0000000000407714) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6472C0: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData;

//----- (000000000040774B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_badSink(a1);
}

//----- (0000000000407762) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodG2BSink(a1);
}

//----- (0000000000407779) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodB2GSink(a1);
}

//----- (0000000000407790) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004077B9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004077E2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040781D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_01_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000407845) ----------------------------------------------------
int goodG2B_23()
{
  return printIntLine(0xEu);
}

//----- (000000000040786D) ----------------------------------------------------
int goodB2G_19()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004078A7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_01_good()
{
  goodG2B_23();
  return goodB2G_19();
}

//----- (00000000004078C1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (00000000004078DE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (00000000004078FB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040792A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54e_badSink(a1);
}

//----- (0000000000407941) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodG2BSink(a1);
}

//----- (0000000000407958) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodB2GSink(a1);
}

//----- (000000000040796F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000407994) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (00000000004079B9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004079F0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_34_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  v6 = v10;
  return printIntLine(100 % v10);
}
// 4079F0: using guessed type char buf[16];

//----- (0000000000407B32) ----------------------------------------------------
int goodG2B_24()
{
  return printIntLine(2u);
}

//----- (0000000000407B68) ----------------------------------------------------
int goodB2G_20()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  v6 = v10;
  if ( v10 )
    result = printIntLine(100 % v6);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 407B68: using guessed type char buf[16];

//----- (0000000000407CBC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_34_good()
{
  goodG2B_24();
  return goodB2G_20();
}

//----- (0000000000407CD6) ----------------------------------------------------
int __fastcall badSink_3(int a1)
{
  int result; // eax

  result = badStatic_1;
  if ( badStatic_1 )
    result = printIntLine(100 / a1);
  return result;
}
// 6471A0: using guessed type int badStatic_1;

//----- (0000000000407CFD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  badStatic_1 = 1;
  return badSink_3(v8);
}
// 6471A0: using guessed type int badStatic_1;
// 407CFD: using guessed type char buf[16];

//----- (0000000000407E35) ----------------------------------------------------
int __fastcall goodB2G1Sink_1(int a1)
{
  if ( goodB2G1Static_1 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 6471A4: using guessed type int goodB2G1Static_1;

//----- (0000000000407E7A) ----------------------------------------------------
int goodB2G1_11()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G1Static_1 = 0;
  return goodB2G1Sink_1(v8);
}
// 6471A4: using guessed type int goodB2G1Static_1;
// 407E7A: using guessed type char buf[16];

//----- (0000000000407FB2) ----------------------------------------------------
int __fastcall goodB2G2Sink_1(int a1)
{
  int result; // eax

  result = goodB2G2Static_1;
  if ( goodB2G2Static_1 )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 6471A8: using guessed type int goodB2G2Static_1;

//----- (0000000000407FEB) ----------------------------------------------------
int goodB2G2_11()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G2Static_1 = 1;
  return goodB2G2Sink_1(v8);
}
// 6471A8: using guessed type int goodB2G2Static_1;
// 407FEB: using guessed type char buf[16];

//----- (0000000000408123) ----------------------------------------------------
int __fastcall goodG2BSink_3(int a1)
{
  int result; // eax

  result = goodG2BStatic_1;
  if ( goodG2BStatic_1 )
    result = printIntLine(100 / a1);
  return result;
}
// 6471AC: using guessed type int goodG2BStatic_1;

//----- (000000000040814A) ----------------------------------------------------
int goodG2B_25()
{
  goodG2BStatic_1 = 1;
  return goodG2BSink_3(7);
}
// 6471AC: using guessed type int goodG2BStatic_1;

//----- (0000000000408176) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_21_good()
{
  goodB2G1_11();
  goodB2G2_11();
  return goodG2B_25();
}

//----- (000000000040819A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_06_bad()
{
  return printIntLine(100 % 0);
}

//----- (00000000004081D8) ----------------------------------------------------
int goodB2G1_12()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000408234) ----------------------------------------------------
int goodB2G2_12()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000408284) ----------------------------------------------------
int goodG2B1_7()
{
  return printIntLine(2u);
}

//----- (00000000004082CE) ----------------------------------------------------
int goodG2B2_7()
{
  return printIntLine(2u);
}

//----- (000000000040830C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_06_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_7();
  return goodG2B2_7();
}

//----- (000000000040833A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_divide_61b_badSource();
  return printIntLine(100 / v1);
}

//----- (0000000000408368) ----------------------------------------------------
int goodG2B_26()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_divide_61b_goodG2BSource();
  return printIntLine(100 / v1);
}

//----- (0000000000408396) ----------------------------------------------------
int goodB2G_21()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_divide_61b_goodB2GSource();
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004083D6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_61_good()
{
  goodG2B_26();
  return goodB2G_21();
}

//----- (00000000004083F0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_badSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (000000000040841A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (0000000000408444) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000408480) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_13_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v8);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 408480: using guessed type char buf[16];

//----- (00000000004085CE) ----------------------------------------------------
int goodB2G1_13()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 4085CE: using guessed type char buf[16];

//----- (000000000040873A) ----------------------------------------------------
int goodB2G2_13()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 40873A: using guessed type char buf[16];

//----- (000000000040889A) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004088E4) ----------------------------------------------------
int goodG2B2_8()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000408922) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_13_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (0000000000408950) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_05_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_0 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647110: using guessed type int staticTrue_0;
// 647150: using guessed type __int64 stdin;

//----- (00000000004089A6) ----------------------------------------------------
int goodB2G1_14()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_0 )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647110: using guessed type int staticTrue_0;
// 647150: using guessed type __int64 stdin;
// 6471B0: using guessed type int staticFalse_0;

//----- (0000000000408A1B) ----------------------------------------------------
int goodB2G2_14()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_0 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647110: using guessed type int staticTrue_0;
// 647150: using guessed type __int64 stdin;

//----- (0000000000408A84) ----------------------------------------------------
int goodG2B1_9()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_0 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printIntLine(100 % v1);
  return result;
}
// 647110: using guessed type int staticTrue_0;
// 6471B0: using guessed type int staticFalse_0;

//----- (0000000000408ACE) ----------------------------------------------------
int goodG2B2_9()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_0 )
    v1 = 7;
  result = staticTrue_0;
  if ( staticTrue_0 )
    result = printIntLine(100 % v1);
  return result;
}
// 647110: using guessed type int staticTrue_0;

//----- (0000000000408B0C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_05_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (0000000000408B3A) ----------------------------------------------------
int __fastcall badSink_4(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000408B59) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_41_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return badSink_4(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000408B91) ----------------------------------------------------
int __fastcall goodG2BSink_4(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000408BB0) ----------------------------------------------------
int goodG2B_27()
{
  return goodG2BSink_4(7);
}

//----- (0000000000408BD2) ----------------------------------------------------
int __fastcall goodB2GSink_1(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000408C03) ----------------------------------------------------
int goodB2G_22()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return goodB2GSink_1(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000408C3B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_41_good()
{
  goodB2G_22();
  return goodG2B_27();
}

//----- (0000000000408C55) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (0000000000408C7C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (0000000000408CA3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000408CDC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53c_badSink(a1);
}

//----- (0000000000408CF3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodG2BSink(a1);
}

//----- (0000000000408D0A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53c_goodB2GSink(a1);
}

//----- (0000000000408D21) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000408D40) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000408D5F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000408D90) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_badSink(v8);
}
// 408D90: using guessed type char buf[16];

//----- (0000000000408EBE) ----------------------------------------------------
int goodG2B_28()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodG2BSink(7);
}

//----- (0000000000408EE0) ----------------------------------------------------
int goodB2G_23()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53b_goodB2GSink(v8);
}
// 408EE0: using guessed type char buf[16];

//----- (000000000040900E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_53_good()
{
  goodG2B_28();
  return goodB2G_23();
}

//----- (0000000000409028) ----------------------------------------------------
int __fastcall badSink_5(int a1)
{
  int result; // eax

  result = badStatic_2;
  if ( badStatic_2 )
    result = printIntLine(100 % a1);
  return result;
}
// 6471B4: using guessed type int badStatic_2;

//----- (0000000000409051) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  badStatic_2 = 1;
  return badSink_5(v8);
}
// 6471B4: using guessed type int badStatic_2;
// 409051: using guessed type char buf[16];

//----- (0000000000409189) ----------------------------------------------------
int __fastcall goodB2G1Sink_2(int a1)
{
  if ( goodB2G1Static_2 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 6471B8: using guessed type int goodB2G1Static_2;

//----- (00000000004091D0) ----------------------------------------------------
int goodB2G1_15()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G1Static_2 = 0;
  return goodB2G1Sink_2(v8);
}
// 6471B8: using guessed type int goodB2G1Static_2;
// 4091D0: using guessed type char buf[16];

//----- (0000000000409308) ----------------------------------------------------
int __fastcall goodB2G2Sink_2(int a1)
{
  int result; // eax

  result = goodB2G2Static_2;
  if ( goodB2G2Static_2 )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 6471BC: using guessed type int goodB2G2Static_2;

//----- (0000000000409343) ----------------------------------------------------
int goodB2G2_15()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G2Static_2 = 1;
  return goodB2G2Sink_2(v8);
}
// 6471BC: using guessed type int goodB2G2Static_2;
// 409343: using guessed type char buf[16];

//----- (000000000040947B) ----------------------------------------------------
int __fastcall goodG2BSink_5(int a1)
{
  int result; // eax

  result = goodG2BStatic_2;
  if ( goodG2BStatic_2 )
    result = printIntLine(100 % a1);
  return result;
}
// 6471C0: using guessed type int goodG2BStatic_2;

//----- (00000000004094A4) ----------------------------------------------------
int goodG2B_29()
{
  goodG2BStatic_2 = 1;
  return goodG2BSink_5(7);
}
// 6471C0: using guessed type int goodG2BStatic_2;

//----- (00000000004094D0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good()
{
  goodB2G1_15();
  goodB2G2_15();
  return goodG2B_29();
}

//----- (00000000004094F4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_03_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 4094F4: using guessed type char buf[16];

//----- (000000000040962A) ----------------------------------------------------
int goodB2G1_16()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 40962A: using guessed type char buf[16];

//----- (0000000000409772) ----------------------------------------------------
int goodB2G2_16()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 409772: using guessed type char buf[16];

//----- (00000000004098BA) ----------------------------------------------------
int goodG2B1_10()
{
  return printIntLine(2u);
}

//----- (00000000004098E4) ----------------------------------------------------
int goodG2B2_10()
{
  return printIntLine(2u);
}

//----- (000000000040990E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_03_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (000000000040993C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_64b_badSink(&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000409976) ----------------------------------------------------
int goodG2B_30()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodG2BSink(&v1);
}

//----- (000000000040999A) ----------------------------------------------------
int goodB2G_24()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodB2GSink(&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004099D4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_64_good()
{
  goodG2B_30();
  return goodB2G_24();
}

//----- (00000000004099EE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_badSink(&v5);
}
// 4099EE: using guessed type char buf[16];

//----- (0000000000409B1E) ----------------------------------------------------
int goodG2B_31()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodG2BSink(&v1);
}

//----- (0000000000409B42) ----------------------------------------------------
int goodB2G_25()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodB2GSink(&v5);
}
// 409B42: using guessed type char buf[16];

//----- (0000000000409C72) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_63_good()
{
  goodG2B_31();
  return goodB2G_25();
}

//----- (0000000000409C8C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54c_badSink(a1);
}

//----- (0000000000409CA3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54c_goodG2BSink(a1);
}

//----- (0000000000409CBA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54c_goodB2GSink(a1);
}

//----- (0000000000409CD1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_64b_badSink(&v6);
}

//----- (0000000000409D3D) ----------------------------------------------------
int goodG2B_32()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_rand_modulo_64b_goodG2BSink(&v1);
}

//----- (0000000000409D61) ----------------------------------------------------
int goodB2G_26()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_64b_goodB2GSink(&v6);
}

//----- (0000000000409DCD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_64_good()
{
  goodG2B_32();
  return goodB2G_26();
}

//----- (0000000000409DE7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printIntLine(100 / v6);
  return result;
}
// 647114: using guessed type int staticTrue_1;

//----- (0000000000409E6B) ----------------------------------------------------
int goodB2G1_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 647114: using guessed type int staticTrue_1;
// 6471C4: using guessed type int staticFalse_1;

//----- (0000000000409F0D) ----------------------------------------------------
int goodB2G2_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647114: using guessed type int staticTrue_1;

//----- (0000000000409FA3) ----------------------------------------------------
int goodG2B1_11()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printIntLine(100 / v1);
  return result;
}
// 647114: using guessed type int staticTrue_1;
// 6471C4: using guessed type int staticFalse_1;

//----- (0000000000409FEB) ----------------------------------------------------
int goodG2B2_11()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_1 )
    v1 = 7;
  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printIntLine(100 / v1);
  return result;
}
// 647114: using guessed type int staticTrue_1;

//----- (000000000040A027) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_05_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_11();
  return goodG2B2_11();
}

//----- (000000000040A055) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_badSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_68_badData);
}
// 647308: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_badData;

//----- (000000000040A078) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodG2BSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodG2BData);
}
// 647310: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodG2BData;

//----- (000000000040A09B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 64730C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData;

//----- (000000000040A0D0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_02_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040A112) ----------------------------------------------------
int goodB2G1_18()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040A167) ----------------------------------------------------
int goodB2G2_18()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040A1BC) ----------------------------------------------------
int goodG2B1_12()
{
  return printIntLine(2u);
}

//----- (000000000040A1E6) ----------------------------------------------------
int goodG2B2_12()
{
  return printIntLine(2u);
}

//----- (000000000040A210) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_02_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (000000000040A23E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_18_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 40A23E: using guessed type char buf[16];

//----- (000000000040A376) ----------------------------------------------------
int goodB2G_27()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 40A376: using guessed type char buf[16];

//----- (000000000040A4C0) ----------------------------------------------------
int goodG2B_33()
{
  return printIntLine(2u);
}

//----- (000000000040A4EC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_18_good()
{
  goodB2G_27();
  return goodG2B_33();
}

//----- (000000000040A506) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_66b_badSink((__int64)&v5);
}
// 40A506: using guessed type char buf[16];

//----- (000000000040A63C) ----------------------------------------------------
int goodG2B_34()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040A666) ----------------------------------------------------
int goodB2G_28()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodB2GSink((__int64)&v5);
}
// 40A666: using guessed type char buf[16];

//----- (000000000040A79C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_66_good()
{
  goodG2B_34();
  return goodB2G_28();
}

//----- (000000000040A7B6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (000000000040A7E7) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (000000000040A818) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040A85B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040A87E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040A8A1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040A8D6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_32_bad()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int *v3; // [rsp+10h] [rbp-10h]
  int *v4; // [rsp+18h] [rbp-8h]

  v4 = &v2;
  v3 = &v2;
  v2 = -1;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  *v4 = v1;
  return printIntLine(100 % *v3);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040A941) ----------------------------------------------------
int goodG2B_35()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(2u);
}

//----- (000000000040A996) ----------------------------------------------------
int goodB2G_29()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v2;
  v4 = &v2;
  v2 = -1;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  *v5 = v1;
  v3 = *v4;
  if ( v3 )
    result = printIntLine(100 % v3);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040AA13) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_32_good()
{
  goodG2B_35();
  return goodB2G_29();
}

//----- (000000000040AA2D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_64b_badSink(&v5);
}
// 40AA2D: using guessed type char buf[16];

//----- (000000000040AB5D) ----------------------------------------------------
int goodG2B_36()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodG2BSink(&v1);
}

//----- (000000000040AB81) ----------------------------------------------------
int goodB2G_30()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodB2GSink(&v5);
}
// 40AB81: using guessed type char buf[16];

//----- (000000000040ACB1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_64_good()
{
  goodG2B_36();
  return goodB2G_30();
}

//----- (000000000040ACCB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52c_badSink(a1);
}

//----- (000000000040ACE2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodG2BSink(a1);
}

//----- (000000000040ACF9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodB2GSink(a1);
}

//----- (000000000040AD10) ----------------------------------------------------
int __fastcall badSink_6(int a1)
{
  int result; // eax

  result = badStatic_3;
  if ( badStatic_3 )
    result = printIntLine(100 % a1);
  return result;
}
// 6471C8: using guessed type int badStatic_3;

//----- (000000000040AD39) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_21_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  badStatic_3 = 1;
  return badSink_6(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 6471C8: using guessed type int badStatic_3;

//----- (000000000040AD7B) ----------------------------------------------------
int __fastcall goodB2G1Sink_3(int a1)
{
  if ( goodB2G1Static_3 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 6471CC: using guessed type int goodB2G1Static_3;

//----- (000000000040ADC2) ----------------------------------------------------
int goodB2G1_19()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  goodB2G1Static_3 = 0;
  return goodB2G1Sink_3(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 6471CC: using guessed type int goodB2G1Static_3;

//----- (000000000040AE04) ----------------------------------------------------
int __fastcall goodB2G2Sink_3(int a1)
{
  int result; // eax

  result = goodB2G2Static_3;
  if ( goodB2G2Static_3 )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 6471D0: using guessed type int goodB2G2Static_3;

//----- (000000000040AE3F) ----------------------------------------------------
int goodB2G2_19()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  goodB2G2Static_3 = 1;
  return goodB2G2Sink_3(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 6471D0: using guessed type int goodB2G2Static_3;

//----- (000000000040AE81) ----------------------------------------------------
int __fastcall goodG2BSink_6(int a1)
{
  int result; // eax

  result = goodG2BStatic_3;
  if ( goodG2BStatic_3 )
    result = printIntLine(100 % a1);
  return result;
}
// 6471D4: using guessed type int goodG2BStatic_3;

//----- (000000000040AEAA) ----------------------------------------------------
int goodG2B_37()
{
  goodG2BStatic_3 = 1;
  return goodG2BSink_6(7);
}
// 6471D4: using guessed type int goodG2BStatic_3;

//----- (000000000040AED6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_21_good()
{
  goodB2G1_19();
  goodB2G2_19();
  return goodG2B_37();
}

//----- (000000000040AEFA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_03_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040AF3C) ----------------------------------------------------
int goodB2G1_20()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040AF91) ----------------------------------------------------
int goodB2G2_20()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040AFE6) ----------------------------------------------------
int goodG2B1_13()
{
  return printIntLine(2u);
}

//----- (000000000040B010) ----------------------------------------------------
int goodG2B2_13()
{
  return printIntLine(2u);
}

//----- (000000000040B03A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_03_good()
{
  goodB2G1_20();
  goodB2G2_20();
  goodG2B1_13();
  return goodG2B2_13();
}

//----- (000000000040B068) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_54b_badSink(v2);
}

//----- (000000000040B0D2) ----------------------------------------------------
int goodG2B_38()
{
  return CWE369_Divide_by_Zero__int_rand_divide_54b_goodG2BSink(7);
}

//----- (000000000040B0F4) ----------------------------------------------------
int goodB2G_31()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_54b_goodB2GSink(v2);
}

//----- (000000000040B15E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_54_good()
{
  goodG2B_38();
  return goodB2G_31();
}

//----- (000000000040B178) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040B197) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040B1B6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040B1E7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (000000000040B26B) ----------------------------------------------------
int goodB2G1_21()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040B30D) ----------------------------------------------------
int goodB2G2_21()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040B3A3) ----------------------------------------------------
int goodG2B1_14()
{
  return printIntLine(2u);
}

//----- (000000000040B3EB) ----------------------------------------------------
int goodG2B2_14()
{
  return printIntLine(2u);
}

//----- (000000000040B427) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_04_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (000000000040B455) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (000000000040B4D3) ----------------------------------------------------
int goodG2B_39()
{
  return printIntLine(2u);
}

//----- (000000000040B509) ----------------------------------------------------
int goodB2G_32()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040B599) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_31_good()
{
  goodG2B_39();
  return goodB2G_32();
}

//----- (000000000040B5B3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_12_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  else
  {
    v8 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 % v8);
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 40B5B3: using guessed type char buf[16];

//----- (000000000040B73A) ----------------------------------------------------
int goodB2G_33()
{
  int result; // eax
  char nptr[16]; // [rsp+0h] [rbp-60h]
  struct sockaddr addr; // [rsp+10h] [rbp-50h]
  char buf[16]; // [rsp+20h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-30h]
  uint16_t v5; // [rsp+32h] [rbp-2Eh]
  int v6; // [rsp+34h] [rbp-2Ch]
  int v7; // [rsp+44h] [rbp-1Ch]
  int v8; // [rsp+48h] [rbp-18h]
  int v9; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v11; // [rsp+54h] [rbp-Ch]
  int v12; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v12 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v12 = accept(fd, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v9 = recv(v12, buf, 0xDuLL, 0);
          if ( v9 != -1 )
          {
            if ( v9 )
            {
              buf[v9] = 0;
              v13 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v12 != -1 )
      close(v12);
  }
  else
  {
    v11 = -1;
    v8 = socket(2, 1, 6);
    if ( v8 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v8, &addr, 0x10u) != -1 && listen(v8, 5) != -1 )
      {
        v11 = accept(v8, 0LL, 0LL);
        if ( v11 != -1 )
        {
          v7 = recv(v11, nptr, 0xDuLL, 0);
          if ( v7 != -1 )
          {
            if ( v7 )
            {
              nptr[v7] = 0;
              v13 = atoi(nptr);
            }
          }
        }
      }
    }
    if ( v8 != -1 )
      close(v8);
    if ( v11 != -1 )
      close(v11);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v13 )
      result = printIntLine(100 % v13);
    else
      result = printLine("This would result in a divide by zero");
  }
  else if ( v13 )
  {
    result = printIntLine(100 % v13);
  }
  else
  {
    result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 40B73A: using guessed type char buf[16];
// 40B73A: using guessed type char nptr[16];

//----- (000000000040B9E5) ----------------------------------------------------
int goodG2B_40()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(2u);
}

//----- (000000000040BA48) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_12_good()
{
  goodB2G_33();
  return goodG2B_40();
}

//----- (000000000040BA62) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040BA7F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040BA9C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040BACB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (000000000040BAFA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (000000000040BB29) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040BB6A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_63b_badSink(&v6);
}

//----- (000000000040BBD6) ----------------------------------------------------
int goodG2B_41()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_rand_divide_63b_goodG2BSink(&v1);
}

//----- (000000000040BBFA) ----------------------------------------------------
int goodB2G_34()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_63b_goodB2GSink(&v6);
}

//----- (000000000040BC66) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_63_good()
{
  goodG2B_41();
  return goodB2G_34();
}

//----- (000000000040BC80) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData = v1;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_68b_badSink();
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 6472C4: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_badData;

//----- (000000000040BCC1) ----------------------------------------------------
int goodG2B_42()
{
  CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodG2BSink();
}
// 6472C8: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodG2BData;

//----- (000000000040BCEC) ----------------------------------------------------
int goodB2G_35()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData = v1;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_68b_goodB2GSink();
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 6472C0: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_68_goodB2GData;

//----- (000000000040BD2D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_68_good()
{
  goodG2B_42();
  return goodB2G_35();
}

//----- (000000000040BD47) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_09_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v8);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 40BD47: using guessed type char buf[16];

//----- (000000000040BE95) ----------------------------------------------------
int goodB2G1_22()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;
// 40BE95: using guessed type char buf[16];

//----- (000000000040C001) ----------------------------------------------------
int goodB2G2_22()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 40C001: using guessed type char buf[16];

//----- (000000000040C161) ----------------------------------------------------
int goodG2B1_15()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040C1AB) ----------------------------------------------------
int goodG2B2_15()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040C1E9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_09_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (000000000040C217) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_14_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000040C255) ----------------------------------------------------
int goodB2G1_23()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;

//----- (000000000040C2B1) ----------------------------------------------------
int goodB2G2_23()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000040C301) ----------------------------------------------------
int goodG2B1_16()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000040C34B) ----------------------------------------------------
int goodG2B2_16()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000040C389) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_14_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (000000000040C3B7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_54_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54b_badSink(0);
}

//----- (000000000040C3D9) ----------------------------------------------------
int goodG2B_43()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54b_goodG2BSink(7);
}

//----- (000000000040C3FB) ----------------------------------------------------
int goodB2G_36()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54b_goodB2GSink(0);
}

//----- (000000000040C41D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_54_good()
{
  goodG2B_43();
  return goodB2G_36();
}

//----- (000000000040C437) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_32_bad()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0;
  v1 = 0;
  v2 = 0;
  return printIntLine(100 / 0);
}

//----- (000000000040C48A) ----------------------------------------------------
int goodG2B_44()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(0xEu);
}

//----- (000000000040C4DD) ----------------------------------------------------
int goodB2G_37()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0;
  v1 = 0;
  v2 = 0;
  return printLine("This would result in a divide by zero");
}

//----- (000000000040C542) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_32_good()
{
  goodG2B_44();
  return goodB2G_37();
}

//----- (000000000040C55C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040C579) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040C596) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040C5C5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_64b_badSink(&v1);
}

//----- (000000000040C5E9) ----------------------------------------------------
int goodG2B_45()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_zero_divide_64b_goodG2BSink(&v1);
}

//----- (000000000040C60D) ----------------------------------------------------
int goodB2G_38()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_64b_goodB2GSink(&v1);
}

//----- (000000000040C631) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_64_good()
{
  goodG2B_45();
  return goodB2G_38();
}

//----- (000000000040C64B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_11_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040C6A9) ----------------------------------------------------
int goodB2G1_24()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040C726) ----------------------------------------------------
int goodB2G2_24()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040C797) ----------------------------------------------------
int goodG2B1_17()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040C7E9) ----------------------------------------------------
int goodG2B2_17()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040C82F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_11_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (000000000040C85D) ----------------------------------------------------
void CWE369_Divide_by_Zero__int_listen_socket_modulo_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              v7 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
    printIntLine(100 % v7);
}
// 40C85D: using guessed type char buf[16];

//----- (000000000040C9C0) ----------------------------------------------------
void goodB2G_39()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              v7 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v7 )
      printIntLine(100 % v7);
    else
      printLine("This would result in a divide by zero");
  }
}
// 40C9C0: using guessed type char buf[16];

//----- (000000000040CB35) ----------------------------------------------------
int goodG2B_46()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040CB85) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_17_good()
{
  goodB2G_39();
  return goodG2B_46();
}

//----- (000000000040CB9F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_12_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%d", &v1);
  else
    v1 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 % v1);
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040CC2F) ----------------------------------------------------
int goodB2G_40()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  globalReturnsTrueOrFalse();
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  else if ( v1 )
  {
    result = printIntLine(100 % v1);
  }
  else
  {
    result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040CCE8) ----------------------------------------------------
int goodG2B_47()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(2u);
}

//----- (000000000040CD4B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_12_good()
{
  goodB2G_40();
  return goodG2B_47();
}

//----- (000000000040CD65) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040CD92) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000040CDA5) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040CDD2) ----------------------------------------------------
int __fastcall badSink_7(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040CDF1) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_7;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 40CDF1: using guessed type char buf[16];

//----- (000000000040CF28) ----------------------------------------------------
int __fastcall goodG2BSink_7(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040CF47) ----------------------------------------------------
int goodG2B_48()
{
  return goodG2BSink_7(7);
}

//----- (000000000040CF72) ----------------------------------------------------
int __fastcall goodB2GSink_2(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040CFA3) ----------------------------------------------------
__int64 goodB2G_41()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_2;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 40CFA3: using guessed type char buf[16];

//----- (000000000040D0DA) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_44_good()
{
  goodG2B_48();
  return goodB2G_41();
}

//----- (000000000040D0F4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_67_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_67b_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040D132) ----------------------------------------------------
int goodG2B_49()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodG2BSink(7);
}

//----- (000000000040D15A) ----------------------------------------------------
int goodB2G_42()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodB2GSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040D198) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_67_good()
{
  goodG2B_49();
  return goodB2G_42();
}

//----- (000000000040D1B2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_11_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v8);
  return result;
}
// 40D1B2: using guessed type char buf[16];

//----- (000000000040D308) ----------------------------------------------------
int goodB2G1_25()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 40D308: using guessed type char buf[16];

//----- (000000000040D47C) ----------------------------------------------------
int goodB2G2_25()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 40D47C: using guessed type char buf[16];

//----- (000000000040D5E4) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040D636) ----------------------------------------------------
int goodG2B2_18()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040D67C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_11_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000040D6AA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53d_badSink(a1);
}

//----- (000000000040D6C1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53d_goodG2BSink(a1);
}

//----- (000000000040D6D8) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53d_goodB2GSink(a1);
}

//----- (000000000040D6EF) ----------------------------------------------------
__int64 badSource_1()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040D74E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_1();
  return printIntLine(100 / v1);
}

//----- (000000000040D77C) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 7LL;
}

//----- (000000000040D78F) ----------------------------------------------------
int goodG2B_50()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_1();
  return printIntLine(100 / v1);
}

//----- (000000000040D7BD) ----------------------------------------------------
__int64 goodB2GSource_1()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040D81C) ----------------------------------------------------
int goodB2G_43()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_1();
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040D85C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_42_good()
{
  goodB2G_43();
  return goodG2B_50();
}

//----- (000000000040D876) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040D895) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040D8B4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040D8E5) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040D904) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040D923) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040D954) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_07_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticFive;
  if ( staticFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647118: using guessed type int staticFive;
// 647150: using guessed type __int64 stdin;

//----- (000000000040D9AC) ----------------------------------------------------
int goodB2G1_26()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647118: using guessed type int staticFive;
// 647150: using guessed type __int64 stdin;

//----- (000000000040DA23) ----------------------------------------------------
int goodB2G2_26()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticFive;
  if ( staticFive == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647118: using guessed type int staticFive;
// 647150: using guessed type __int64 stdin;

//----- (000000000040DA8E) ----------------------------------------------------
int goodG2B1_19()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive;
  if ( staticFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647118: using guessed type int staticFive;

//----- (000000000040DADA) ----------------------------------------------------
int goodG2B2_19()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive == 5 )
    v1 = 7;
  result = staticFive;
  if ( staticFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647118: using guessed type int staticFive;

//----- (000000000040DB1A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_07_good()
{
  goodB2G1_26();
  goodB2G2_26();
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (000000000040DB48) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_31_bad()
{
  return printIntLine(100 / 0);
}

//----- (000000000040DB7C) ----------------------------------------------------
int goodG2B_51()
{
  return printIntLine(0xEu);
}

//----- (000000000040DBB0) ----------------------------------------------------
int goodB2G_44()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040DBF6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_31_good()
{
  goodG2B_51();
  return goodB2G_44();
}

//----- (000000000040DC10) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53d_badSink(a1);
}

//----- (000000000040DC27) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53d_goodG2BSink(a1);
}

//----- (000000000040DC3E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53d_goodB2GSink(a1);
}

//----- (000000000040DC55) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_17_bad()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%d", &v1);
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040DCBD) ----------------------------------------------------
int goodB2G_45()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    result = __isoc99_fscanf(stdin, "%d", &v1);
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040DD38) ----------------------------------------------------
int goodG2B_52()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040DD88) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_17_good()
{
  goodB2G_45();
  return goodG2B_52();
}

//----- (000000000040DDA2) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40DDA2: using guessed type char buf[16];

//----- (000000000040DEC5) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000040DED8) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40DED8: using guessed type char buf[16];

//----- (000000000040DFFB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_10_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v8);
  return result;
}
// 647144: using guessed type int globalTrue;
// 40DFFB: using guessed type char buf[16];

//----- (000000000040E149) ----------------------------------------------------
int goodB2G1_27()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;
// 40E149: using guessed type char buf[16];

//----- (000000000040E2B5) ----------------------------------------------------
int goodB2G2_27()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;
// 40E2B5: using guessed type char buf[16];

//----- (000000000040E415) ----------------------------------------------------
int goodG2B1_20()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (000000000040E45F) ----------------------------------------------------
int goodG2B2_20()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (000000000040E49D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_10_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (000000000040E4CB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_04_bad()
{
  return printIntLine(100 / 0);
}

//----- (000000000040E505) ----------------------------------------------------
int goodB2G1_28()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040E55D) ----------------------------------------------------
int goodB2G2_28()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040E5A9) ----------------------------------------------------
int goodG2B1_21()
{
  return printIntLine(0xEu);
}

//----- (000000000040E5EF) ----------------------------------------------------
int goodG2B2_21()
{
  return printIntLine(0xEu);
}

//----- (000000000040E629) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_04_good()
{
  goodB2G1_28();
  goodB2G2_28();
  goodG2B1_21();
  return goodG2B2_21();
}

//----- (000000000040E657) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52b_badSink(v8);
}
// 40E657: using guessed type char buf[16];

//----- (000000000040E785) ----------------------------------------------------
int goodG2B_53()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodG2BSink(7);
}

//----- (000000000040E7A7) ----------------------------------------------------
int goodB2G_46()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_52b_goodB2GSink(v8);
}
// 40E7A7: using guessed type char buf[16];

//----- (000000000040E8D5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_52_good()
{
  goodG2B_53();
  return goodB2G_46();
}

//----- (000000000040E8EF) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE369_Divide_by_Zero__int_rand_divide_65b_badSink)(v2);
}

//----- (000000000040E962) ----------------------------------------------------
int goodG2B_54()
{
  return CWE369_Divide_by_Zero__int_rand_divide_65b_goodG2BSink(7);
}

//----- (000000000040E98D) ----------------------------------------------------
__int64 goodB2G_47()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE369_Divide_by_Zero__int_rand_divide_65b_goodB2GSink)(v2);
}

//----- (000000000040EA00) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_65_good()
{
  goodG2B_54();
  return goodB2G_47();
}

//----- (000000000040EA1A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040EA37) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000040EA54) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040EA83) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53d_badSink(a1);
}

//----- (000000000040EA9A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53d_goodG2BSink(a1);
}

//----- (000000000040EAB1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53d_goodB2GSink(a1);
}

//----- (000000000040EAC8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (000000000040EB3A) ----------------------------------------------------
int goodB2G1_29()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040EBBE) ----------------------------------------------------
int goodB2G2_29()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040EC42) ----------------------------------------------------
int goodG2B1_22()
{
  return printIntLine(0xEu);
}

//----- (000000000040EC6C) ----------------------------------------------------
int goodG2B2_22()
{
  return printIntLine(0xEu);
}

//----- (000000000040EC96) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_15_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (000000000040ECC4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_badSink(a1);
}

//----- (000000000040ECDB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodG2BSink(a1);
}

//----- (000000000040ECF2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodB2GSink(a1);
}

//----- (000000000040ED09) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_67_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_67b_badSink(0);
}

//----- (000000000040ED31) ----------------------------------------------------
int goodG2B_55()
{
  return CWE369_Divide_by_Zero__int_zero_divide_67b_goodG2BSink(7);
}

//----- (000000000040ED59) ----------------------------------------------------
int goodB2G_48()
{
  return CWE369_Divide_by_Zero__int_zero_divide_67b_goodB2GSink(0);
}

//----- (000000000040ED81) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_67_good()
{
  goodG2B_55();
  return goodB2G_48();
}

//----- (000000000040ED9B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040EDBA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000040EDD9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040EE0A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_53_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_53b_badSink(0);
}

//----- (000000000040EE2C) ----------------------------------------------------
int goodG2B_56()
{
  return CWE369_Divide_by_Zero__int_zero_divide_53b_goodG2BSink(7);
}

//----- (000000000040EE4E) ----------------------------------------------------
int goodB2G_49()
{
  return CWE369_Divide_by_Zero__int_zero_divide_53b_goodB2GSink(0);
}

//----- (000000000040EE70) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_53_good()
{
  goodG2B_56();
  return goodB2G_49();
}

//----- (000000000040EE8A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_10_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647144: using guessed type int globalTrue;
// 647150: using guessed type __int64 stdin;

//----- (000000000040EEE0) ----------------------------------------------------
int goodB2G1_30()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647144: using guessed type int globalTrue;
// 647150: using guessed type __int64 stdin;
// 6472B0: using guessed type int globalFalse;

//----- (000000000040EF55) ----------------------------------------------------
int goodB2G2_30()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647144: using guessed type int globalTrue;
// 647150: using guessed type __int64 stdin;

//----- (000000000040EFBE) ----------------------------------------------------
int goodG2B1_23()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (000000000040F008) ----------------------------------------------------
int goodG2B2_23()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (000000000040F046) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_10_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_23();
  return goodG2B2_23();
}

//----- (000000000040F074) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_15_bad()
{
  return printIntLine(100 % 0);
}

//----- (000000000040F0A0) ----------------------------------------------------
int goodB2G1_31()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040F0DE) ----------------------------------------------------
int goodB2G2_31()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000040F11C) ----------------------------------------------------
int goodG2B1_24()
{
  return printIntLine(2u);
}

//----- (000000000040F148) ----------------------------------------------------
int goodG2B2_24()
{
  return printIntLine(2u);
}

//----- (000000000040F174) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_15_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (000000000040F1A2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_68b_badSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_68_badData);
}
// 6472CC: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_badData;

//----- (000000000040F1C5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_68b_goodG2BSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_68_goodG2BData);
}
// 6472D4: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_goodG2BData;

//----- (000000000040F1E8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6472D0: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData;

//----- (000000000040F21D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_badSource(0xFFFFFFFF);
  return printIntLine(100 % v1);
}

//----- (000000000040F24D) ----------------------------------------------------
int goodG2B_57()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodG2BSource();
  return printIntLine(100 % v1);
}

//----- (000000000040F27D) ----------------------------------------------------
int goodB2G_50()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_modulo_61b_goodB2GSource(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000040F2BF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_61_good()
{
  goodG2B_57();
  return goodB2G_50();
}

//----- (000000000040F2D9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54d_badSink(a1);
}

//----- (000000000040F2F0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodG2BSink(a1);
}

//----- (000000000040F307) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodB2GSink(a1);
}

//----- (000000000040F31E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 6471E4: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal;

//----- (000000000040F345) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 6471E8: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Global;

//----- (000000000040F38A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 6471EC: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global;

//----- (000000000040F3C3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 6471F0: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal;

//----- (000000000040F3EA) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (000000000040F3F5) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (000000000040F400) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_08_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue();
  if ( result )
    result = printIntLine(100 % v8);
  return result;
}
// 40F400: using guessed type char buf[16];

//----- (000000000040F556) ----------------------------------------------------
int goodB2G1_32()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 40F556: using guessed type char buf[16];

//----- (000000000040F6CA) ----------------------------------------------------
int goodB2G2_32()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue();
  if ( result )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 40F6CA: using guessed type char buf[16];

//----- (000000000040F832) ----------------------------------------------------
int goodG2B1_25()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040F884) ----------------------------------------------------
int goodG2B2_25()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue() )
    v1 = 7;
  result = staticReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000040F8CA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_08_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (000000000040F8F8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_51b_badSink(v8);
}
// 40F8F8: using guessed type char buf[16];

//----- (000000000040FA26) ----------------------------------------------------
int goodG2B_58()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodG2BSink(7);
}

//----- (000000000040FA48) ----------------------------------------------------
int goodB2G_51()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_51b_goodB2GSink(v8);
}
// 40FA48: using guessed type char buf[16];

//----- (000000000040FB76) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_51_good()
{
  goodG2B_58();
  return goodB2G_51();
}

//----- (000000000040FB90) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_07_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    v1 = 0;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 64711C: using guessed type int staticFive_0;

//----- (000000000040FBCE) ----------------------------------------------------
int goodB2G1_33()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    v1 = 0;
  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 64711C: using guessed type int staticFive_0;

//----- (000000000040FC2A) ----------------------------------------------------
int goodB2G2_33()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    v1 = 0;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 64711C: using guessed type int staticFive_0;

//----- (000000000040FC7A) ----------------------------------------------------
int goodG2B1_26()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 64711C: using guessed type int staticFive_0;

//----- (000000000040FCC4) ----------------------------------------------------
int goodG2B2_26()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    v1 = 7;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 64711C: using guessed type int staticFive_0;

//----- (000000000040FD02) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_07_good()
{
  goodB2G1_33();
  goodB2G2_33();
  goodG2B1_26();
  return goodG2B2_26();
}

//----- (000000000040FD30) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_01_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040FD72) ----------------------------------------------------
int goodG2B_59()
{
  return printIntLine(2u);
}

//----- (000000000040FD9C) ----------------------------------------------------
int goodB2G_52()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000040FDF1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_01_good()
{
  goodG2B_59();
  return goodB2G_52();
}

//----- (000000000040FE0B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v6);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FE93) ----------------------------------------------------
int goodB2G1_34()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FF39) ----------------------------------------------------
int goodB2G2_34()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040FFD3) ----------------------------------------------------
int goodG2B1_27()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041001F) ----------------------------------------------------
int goodG2B2_27()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041005F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_13_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_27();
  return goodG2B2_27();
}

//----- (000000000041008D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004100B6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004100DF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041011A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_07_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printIntLine(100 % v8);
  return result;
}
// 647120: using guessed type int staticFive_1;
// 41011A: using guessed type char buf[16];

//----- (000000000041026A) ----------------------------------------------------
int goodB2G1_35()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 647120: using guessed type int staticFive_1;
// 41026A: using guessed type char buf[16];

//----- (00000000004103D8) ----------------------------------------------------
int goodB2G2_35()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647120: using guessed type int staticFive_1;
// 4103D8: using guessed type char buf[16];

//----- (000000000041053A) ----------------------------------------------------
int goodG2B1_28()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_1 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647120: using guessed type int staticFive_1;

//----- (0000000000410586) ----------------------------------------------------
int goodG2B2_28()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_1 == 5 )
    v1 = 7;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647120: using guessed type int staticFive_1;

//----- (00000000004105C6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_07_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (00000000004105F4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_68b_badSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_68_badData);
}
// 6472D8: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_badData;

//----- (0000000000410619) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_68b_goodG2BSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_68_goodG2BData);
}
// 6472E0: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_goodG2BData;

//----- (000000000041063E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6472DC: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData;

//----- (0000000000410675) ----------------------------------------------------
int __fastcall badSink_8(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000410692) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_8(v2);
}

//----- (00000000004106FC) ----------------------------------------------------
int __fastcall goodG2BSink_8(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000410719) ----------------------------------------------------
int goodG2B_60()
{
  return goodG2BSink_8(7);
}

//----- (000000000041073B) ----------------------------------------------------
int __fastcall goodB2GSink_3(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041076A) ----------------------------------------------------
int goodB2G_53()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_3(v2);
}

//----- (00000000004107D4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_41_good()
{
  goodB2G_53();
  return goodG2B_60();
}

//----- (00000000004107EE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54d_badSink(a1);
}

//----- (0000000000410805) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodG2BSink(a1);
}

//----- (000000000041081C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54d_goodB2GSink(a1);
}

//----- (0000000000410833) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53c_badSink(a1);
}

//----- (000000000041084A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53c_goodG2BSink(a1);
}

//----- (0000000000410861) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_53c_goodB2GSink(a1);
}

//----- (0000000000410878) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_fscanf_modulo_61b_badSource(0xFFFFFFFF);
  return printIntLine(100 % v1);
}

//----- (00000000004108A8) ----------------------------------------------------
int goodG2B_61()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodG2BSource();
  return printIntLine(100 % v1);
}

//----- (00000000004108D8) ----------------------------------------------------
int goodB2G_54()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_fscanf_modulo_61b_goodB2GSource(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041091A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_61_good()
{
  goodG2B_61();
  return goodB2G_54();
}

//----- (0000000000410934) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_01_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 410934: using guessed type char buf[16];

//----- (0000000000410A6A) ----------------------------------------------------
int goodG2B_62()
{
  return printIntLine(2u);
}

//----- (0000000000410A94) ----------------------------------------------------
int goodB2G_55()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 410A94: using guessed type char buf[16];

//----- (0000000000410BDC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_01_good()
{
  goodG2B_62();
  return goodB2G_55();
}

//----- (0000000000410BF6) ----------------------------------------------------
int badSink_9()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData);
}
// 6471D8: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData;

//----- (0000000000410C19) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData = v8;
  return badSink_9();
}
// 6471D8: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData;
// 410C19: using guessed type char buf[16];

//----- (0000000000410D50) ----------------------------------------------------
int goodG2BSink_9()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData);
}
// 6471DC: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData;

//----- (0000000000410D73) ----------------------------------------------------
int goodG2B_63()
{
  CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData = 7;
  return goodG2BSink_9();
}
// 6471DC: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData;

//----- (0000000000410D9E) ----------------------------------------------------
int goodB2GSink_4()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6471E0: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData;

//----- (0000000000410DD3) ----------------------------------------------------
int goodB2G_56()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData = v8;
  return goodB2GSink_4();
}
// 6471E0: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData;
// 410DD3: using guessed type char buf[16];

//----- (0000000000410F0A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_45_good()
{
  goodG2B_63();
  return goodB2G_56();
}

//----- (0000000000410F24) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000410F41) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000410F5E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000410F8D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_22_bad()
{
  CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_zero_divide_22_badSink(0);
}
// 6471E4: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_badGlobal;

//----- (0000000000410FB9) ----------------------------------------------------
int goodB2G1_36()
{
  CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Sink(0);
}
// 6471E8: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G1Global;

//----- (0000000000410FE5) ----------------------------------------------------
int goodB2G2_36()
{
  CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Sink(0);
}
// 6471EC: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodB2G2Global;

//----- (0000000000411011) ----------------------------------------------------
int goodG2B_64()
{
  CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BSink(7);
}
// 6471F0: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_22_goodG2BGlobal;

//----- (000000000041103D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_22_good()
{
  goodB2G1_36();
  goodB2G2_36();
  return goodG2B_64();
}

//----- (0000000000411061) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_09_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041109D) ----------------------------------------------------
int goodB2G1_37()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004110F7) ----------------------------------------------------
int goodB2G2_37()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000411145) ----------------------------------------------------
int goodG2B1_29()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041118D) ----------------------------------------------------
int goodG2B2_29()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004111C9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_09_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (00000000004111F7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_06_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 4111F7: using guessed type char buf[16];

//----- (0000000000411343) ----------------------------------------------------
int goodB2G1_38()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 411343: using guessed type char buf[16];

//----- (00000000004114AD) ----------------------------------------------------
int goodB2G2_38()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4114AD: using guessed type char buf[16];

//----- (000000000041160B) ----------------------------------------------------
int goodG2B1_30()
{
  return printIntLine(0xEu);
}

//----- (0000000000411653) ----------------------------------------------------
int goodG2B2_30()
{
  return printIntLine(0xEu);
}

//----- (000000000041168F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_06_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_30();
  return goodG2B2_30();
}

//----- (00000000004116BD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_68_badData = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_68b_badSink();
}
// 6472CC: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_badData;

//----- (0000000000411730) ----------------------------------------------------
int goodG2B_65()
{
  CWE369_Divide_by_Zero__int_rand_divide_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_rand_divide_68b_goodG2BSink();
}
// 6472D4: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_goodG2BData;

//----- (000000000041175B) ----------------------------------------------------
int goodB2G_57()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_68b_goodB2GSink();
}
// 6472D0: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_68_goodB2GData;

//----- (00000000004117CE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_68_good()
{
  goodG2B_65();
  return goodB2G_57();
}

//----- (00000000004117E8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000411864) ----------------------------------------------------
int goodG2B_66()
{
  return printIntLine(0xEu);
}

//----- (0000000000411898) ----------------------------------------------------
int goodB2G_58()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000411926) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_34_good()
{
  goodG2B_66();
  return goodB2G_58();
}

//----- (0000000000411940) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041195F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041197E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004119AF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_05_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_2 )
    v1 = 0;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printIntLine(100 % v1);
  return result;
}
// 647124: using guessed type int staticTrue_2;

//----- (00000000004119ED) ----------------------------------------------------
int goodB2G1_39()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_2 )
    v1 = 0;
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 647124: using guessed type int staticTrue_2;
// 6471F4: using guessed type int staticFalse_2;

//----- (0000000000411A49) ----------------------------------------------------
int goodB2G2_39()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_2 )
    v1 = 0;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647124: using guessed type int staticTrue_2;

//----- (0000000000411A99) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printIntLine(100 % v1);
  return result;
}
// 647124: using guessed type int staticTrue_2;
// 6471F4: using guessed type int staticFalse_2;

//----- (0000000000411AE3) ----------------------------------------------------
int goodG2B2_31()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_2 )
    v1 = 7;
  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printIntLine(100 % v1);
  return result;
}
// 647124: using guessed type int staticTrue_2;

//----- (0000000000411B21) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_05_good()
{
  goodB2G1_39();
  goodB2G2_39();
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (0000000000411B4F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_badSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (0000000000411B77) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (0000000000411B9F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000411BD9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_65_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_65b_badSink(0);
}

//----- (0000000000411C04) ----------------------------------------------------
int goodG2B_67()
{
  return CWE369_Divide_by_Zero__int_zero_divide_65b_goodG2BSink(7);
}

//----- (0000000000411C2F) ----------------------------------------------------
int goodB2G_59()
{
  return CWE369_Divide_by_Zero__int_zero_divide_65b_goodB2GSink(0);
}

//----- (0000000000411C5A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_65_good()
{
  goodG2B_67();
  return goodB2G_59();
}

//----- (0000000000411C74) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000411CE6) ----------------------------------------------------
int goodB2G1_40()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000411D6A) ----------------------------------------------------
int goodB2G2_40()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000411DEE) ----------------------------------------------------
int goodG2B1_32()
{
  return printIntLine(2u);
}

//----- (0000000000411E18) ----------------------------------------------------
int goodG2B2_32()
{
  return printIntLine(2u);
}

//----- (0000000000411E42) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_03_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (0000000000411E70) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_badSink(a1);
}

//----- (0000000000411E87) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodG2BSink(a1);
}

//----- (0000000000411E9E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54c_goodB2GSink(a1);
}

//----- (0000000000411EB5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_63b_badSink(&v6);
}

//----- (0000000000411F21) ----------------------------------------------------
int goodG2B_68()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_rand_modulo_63b_goodG2BSink(&v1);
}

//----- (0000000000411F45) ----------------------------------------------------
int goodB2G_60()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_63b_goodB2GSink(&v6);
}

//----- (0000000000411FB1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_63_good()
{
  goodG2B_68();
  return goodB2G_60();
}

//----- (0000000000411FCB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54e_badSink(a1);
}

//----- (0000000000411FE2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54e_goodG2BSink(a1);
}

//----- (0000000000411FF9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54e_goodB2GSink(a1);
}

//----- (0000000000412010) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_67_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_67b_badSink(0);
}

//----- (0000000000412038) ----------------------------------------------------
int goodG2B_69()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_67b_goodG2BSink(7);
}

//----- (0000000000412060) ----------------------------------------------------
int goodB2G_61()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_67b_goodB2GSink(0);
}

//----- (0000000000412088) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_67_good()
{
  goodG2B_69();
  return goodB2G_61();
}

//----- (00000000004120A2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 64716C: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_badGlobal;

//----- (00000000004120CB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647170: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G1Global;

//----- (0000000000412112) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647174: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodB2G2Global;

//----- (000000000041214D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 647178: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_22_goodG2BGlobal;

//----- (0000000000412176) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_68_bad()
{
  CWE369_Divide_by_Zero__int_zero_modulo_68_badData = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_68b_badSink();
}
// 6472D8: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_badData;

//----- (00000000004121A1) ----------------------------------------------------
int goodG2B_70()
{
  CWE369_Divide_by_Zero__int_zero_modulo_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_zero_modulo_68b_goodG2BSink();
}
// 6472E0: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_goodG2BData;

//----- (00000000004121CC) ----------------------------------------------------
int goodB2G_62()
{
  CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_68b_goodB2GSink();
}
// 6472DC: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_68_goodB2GData;

//----- (00000000004121F7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_68_good()
{
  goodG2B_70();
  return goodB2G_62();
}

//----- (0000000000412211) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_53b_badSink(v2);
}

//----- (000000000041227B) ----------------------------------------------------
int goodG2B_71()
{
  return CWE369_Divide_by_Zero__int_rand_divide_53b_goodG2BSink(7);
}

//----- (000000000041229D) ----------------------------------------------------
int goodB2G_63()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_53b_goodB2GSink(v2);
}

//----- (0000000000412307) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_53_good()
{
  goodG2B_71();
  return goodB2G_63();
}

//----- (0000000000412321) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_34_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000412357) ----------------------------------------------------
int goodG2B_72()
{
  return printIntLine(2u);
}

//----- (000000000041238D) ----------------------------------------------------
int goodB2G_64()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004123D5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_34_good()
{
  goodG2B_72();
  return goodB2G_64();
}

//----- (00000000004123EF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_badSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (0000000000412419) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (0000000000412443) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041247F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_13_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004124BD) ----------------------------------------------------
int goodB2G1_41()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000412519) ----------------------------------------------------
int goodB2G2_41()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000412569) ----------------------------------------------------
int goodG2B1_33()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004125B3) ----------------------------------------------------
int goodG2B2_33()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004125F1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_13_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (000000000041261F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (000000000041269D) ----------------------------------------------------
int goodG2B_73()
{
  return printIntLine(2u);
}

//----- (00000000004126D3) ----------------------------------------------------
int goodB2G_65()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000412763) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_34_good()
{
  goodG2B_73();
  return goodB2G_65();
}

//----- (000000000041277D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (00000000004127AC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (00000000004127DB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041281C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54c_badSink(a1);
}

//----- (0000000000412833) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodG2BSink(a1);
}

//----- (000000000041284A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54c_goodB2GSink(a1);
}

//----- (0000000000412861) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  else
  {
    v6 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 % v6);
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}

//----- (000000000041291E) ----------------------------------------------------
int goodB2G_66()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  int result; // eax
  int v11; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v11 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v11 = v7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v11 )
      result = printIntLine(100 % v11);
    else
      result = printLine("This would result in a divide by zero");
  }
  else if ( v11 )
  {
    result = printIntLine(100 % v11);
  }
  else
  {
    result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000412A2F) ----------------------------------------------------
int goodG2B_74()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(2u);
}

//----- (0000000000412A92) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_12_good()
{
  goodB2G_66();
  return goodG2B_74();
}

//----- (0000000000412AAC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000412AC9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000412AE6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000412B15) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_badSink(v8);
}
// 412B15: using guessed type char buf[16];

//----- (0000000000412C43) ----------------------------------------------------
int goodG2B_75()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodG2BSink(7);
}

//----- (0000000000412C65) ----------------------------------------------------
int goodB2G_67()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54b_goodB2GSink(v8);
}
// 412C65: using guessed type char buf[16];

//----- (0000000000412D93) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_54_good()
{
  goodG2B_75();
  return goodB2G_67();
}

//----- (0000000000412DAD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_14_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v8);
  return result;
}
// 647148: using guessed type int globalFive;
// 412DAD: using guessed type char buf[16];

//----- (0000000000412EFB) ----------------------------------------------------
int goodB2G1_42()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;
// 412EFB: using guessed type char buf[16];

//----- (0000000000413067) ----------------------------------------------------
int goodB2G2_42()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;
// 413067: using guessed type char buf[16];

//----- (00000000004131C7) ----------------------------------------------------
int goodG2B1_34()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000413211) ----------------------------------------------------
int goodG2B2_34()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041324F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_14_good()
{
  goodB2G1_42();
  goodB2G2_42();
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (000000000041327D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_32_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v8; // [rsp+38h] [rbp-18h]
  int *v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v9 = &v5;
  v8 = &v5;
  v5 = -1;
  v11 = -1;
  fd = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v6 = recv(v10, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  *v9 = v11;
  return printIntLine(100 / *v8);
}
// 41327D: using guessed type char buf[16];

//----- (00000000004133DC) ----------------------------------------------------
int goodG2B_76()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(0xEu);
}

//----- (000000000041342F) ----------------------------------------------------
int goodB2G_68()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v12 = -1;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  v6 = *v9;
  if ( v6 )
    result = printIntLine(100 / v6);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41342F: using guessed type char buf[16];

//----- (00000000004135A0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_32_good()
{
  goodG2B_76();
  return goodB2G_68();
}

//----- (00000000004135BA) ----------------------------------------------------
int badSink_10()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_45_badData);
}
// 6471F8: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_badData;

//----- (00000000004135DF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_45_bad()
{
  CWE369_Divide_by_Zero__int_zero_modulo_45_badData = 0;
  return badSink_10();
}
// 6471F8: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_badData;

//----- (000000000041360A) ----------------------------------------------------
int goodG2BSink_10()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_45_goodG2BData);
}
// 6471FC: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_goodG2BData;

//----- (000000000041362F) ----------------------------------------------------
int goodG2B_77()
{
  CWE369_Divide_by_Zero__int_zero_modulo_45_goodG2BData = 7;
  return goodG2BSink_10();
}
// 6471FC: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_goodG2BData;

//----- (000000000041365A) ----------------------------------------------------
int goodB2GSink_5()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 647200: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData;

//----- (0000000000413691) ----------------------------------------------------
int goodB2G_69()
{
  CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData = 0;
  return goodB2GSink_5();
}
// 647200: using guessed type int CWE369_Divide_by_Zero__int_zero_modulo_45_goodB2GData;

//----- (00000000004136BC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_45_good()
{
  goodG2B_77();
  return goodB2G_69();
}

//----- (00000000004136D6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_52c_badSink(a1);
}

//----- (00000000004136ED) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_52c_goodG2BSink(a1);
}

//----- (0000000000413704) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_52c_goodB2GSink(a1);
}

//----- (000000000041371B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041373A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000413759) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041378A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_03_bad()
{
  return printIntLine(100 / 0);
}

//----- (00000000004137B2) ----------------------------------------------------
int goodB2G1_43()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004137EC) ----------------------------------------------------
int goodB2G2_43()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000413826) ----------------------------------------------------
int goodG2B1_35()
{
  return printIntLine(0xEu);
}

//----- (000000000041384E) ----------------------------------------------------
int goodG2B2_35()
{
  return printIntLine(0xEu);
}

//----- (0000000000413876) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_03_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_35();
  return goodG2B2_35();
}

//----- (00000000004138A4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 0;
  v2 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_66b_badSink((__int64)&v1);
}

//----- (00000000004138CE) ----------------------------------------------------
int goodG2B_78()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_zero_modulo_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004138F8) ----------------------------------------------------
int goodB2G_70()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 0;
  v2 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_66b_goodB2GSink((__int64)&v1);
}

//----- (0000000000413922) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_66_good()
{
  goodG2B_78();
  return goodB2G_70();
}

//----- (000000000041393C) ----------------------------------------------------
void CWE369_Divide_by_Zero__int_rand_modulo_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v5 = v2;
  }
  for ( j = 0; j <= 0; ++j )
    printIntLine(100 % v5);
}

//----- (00000000004139D4) ----------------------------------------------------
void goodB2G_71()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v5 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v5 )
      printIntLine(100 % v5);
    else
      printLine("This would result in a divide by zero");
  }
}

//----- (0000000000413A7E) ----------------------------------------------------
int goodG2B_79()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000413ACE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_17_good()
{
  goodB2G_71();
  return goodG2B_79();
}

//----- (0000000000413AE8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_63b_badSink(&v1);
}

//----- (0000000000413B0C) ----------------------------------------------------
int goodG2B_80()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_zero_divide_63b_goodG2BSink(&v1);
}

//----- (0000000000413B30) ----------------------------------------------------
int goodB2G_72()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_63b_goodB2GSink(&v1);
}

//----- (0000000000413B54) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_63_good()
{
  goodG2B_80();
  return goodB2G_72();
}

//----- (0000000000413B6E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_02_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 413B6E: using guessed type char buf[16];

//----- (0000000000413CA4) ----------------------------------------------------
int goodB2G1_44()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 413CA4: using guessed type char buf[16];

//----- (0000000000413DEC) ----------------------------------------------------
int goodB2G2_44()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 413DEC: using guessed type char buf[16];

//----- (0000000000413F34) ----------------------------------------------------
int goodG2B1_36()
{
  return printIntLine(2u);
}

//----- (0000000000413F5E) ----------------------------------------------------
int goodG2B2_36()
{
  return printIntLine(2u);
}

//----- (0000000000413F88) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_02_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (0000000000413FB6) ----------------------------------------------------
int __fastcall badSink_11(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000413FD5) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_11)(v2);
}

//----- (0000000000414048) ----------------------------------------------------
int __fastcall goodG2BSink_11(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000414067) ----------------------------------------------------
int goodG2B_81()
{
  return goodG2BSink_11(7);
}

//----- (0000000000414092) ----------------------------------------------------
int __fastcall goodB2GSink_6(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004140C3) ----------------------------------------------------
__int64 goodB2G_73()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_6)(v2);
}

//----- (0000000000414136) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_44_good()
{
  goodG2B_81();
  return goodB2G_73();
}

//----- (0000000000414150) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041416F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041418E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004141BF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_54_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54b_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004141F7) ----------------------------------------------------
int goodG2B_82()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodG2BSink(7);
}

//----- (0000000000414219) ----------------------------------------------------
int goodB2G_74()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54b_goodB2GSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000414251) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_54_good()
{
  goodG2B_82();
  return goodB2G_74();
}

//----- (000000000041426B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_18_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000414295) ----------------------------------------------------
int goodB2G_75()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004142D1) ----------------------------------------------------
int goodG2B_83()
{
  return printIntLine(0xEu);
}

//----- (00000000004142FB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_18_good()
{
  goodB2G_75();
  return goodG2B_83();
}

//----- (0000000000414315) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v6);
  return result;
}

//----- (00000000004143A3) ----------------------------------------------------
int goodB2G1_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}

//----- (000000000041444F) ----------------------------------------------------
int goodB2G2_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (00000000004144EF) ----------------------------------------------------
int goodG2B1_37()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000414541) ----------------------------------------------------
int goodG2B2_37()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000414587) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_11_good()
{
  goodB2G1_45();
  goodB2G2_45();
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (00000000004145B5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000414627) ----------------------------------------------------
int goodB2G1_46()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004146AB) ----------------------------------------------------
int goodB2G2_46()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041472F) ----------------------------------------------------
int goodG2B1_38()
{
  return printIntLine(2u);
}

//----- (0000000000414759) ----------------------------------------------------
int goodG2B2_38()
{
  return printIntLine(2u);
}

//----- (0000000000414783) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_02_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_38();
  return goodG2B2_38();
}

//----- (00000000004147B1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_04_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 4147B1: using guessed type char buf[16];

//----- (00000000004148FB) ----------------------------------------------------
int goodB2G1_47()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4148FB: using guessed type char buf[16];

//----- (0000000000414A63) ----------------------------------------------------
int goodB2G2_47()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 414A63: using guessed type char buf[16];

//----- (0000000000414BBF) ----------------------------------------------------
int goodG2B1_39()
{
  return printIntLine(0xEu);
}

//----- (0000000000414C05) ----------------------------------------------------
int goodG2B2_39()
{
  return printIntLine(0xEu);
}

//----- (0000000000414C3F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_04_good()
{
  goodB2G1_47();
  goodB2G2_47();
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (0000000000414C6D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_31_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  v5 = v10;
  return printIntLine(100 / v10);
}
// 414C6D: using guessed type char buf[16];

//----- (0000000000414DAD) ----------------------------------------------------
int goodG2B_84()
{
  return printIntLine(0xEu);
}

//----- (0000000000414DE1) ----------------------------------------------------
int goodB2G_76()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  v5 = v10;
  if ( v10 )
    result = printIntLine(100 / v5);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 414DE1: using guessed type char buf[16];

//----- (0000000000414F33) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_31_good()
{
  goodG2B_84();
  return goodB2G_76();
}

//----- (0000000000414F4D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000414FC1) ----------------------------------------------------
int goodB2G_77()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000415047) ----------------------------------------------------
int goodG2B_85()
{
  return printIntLine(2u);
}

//----- (0000000000415073) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_18_good()
{
  goodB2G_77();
  return goodG2B_85();
}

//----- (000000000041508D) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004150EC) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_goodG2BSource()
{
  return 7LL;
}

//----- (00000000004150FF) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041515E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v6);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004151E4) ----------------------------------------------------
int goodB2G1_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (0000000000415288) ----------------------------------------------------
int goodB2G2_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (0000000000415320) ----------------------------------------------------
int goodG2B1_40()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (000000000041536A) ----------------------------------------------------
int goodG2B2_40()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004153A8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_10_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (00000000004153D6) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (00000000004153E1) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (00000000004153EC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_08_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = 0;
  result = staticReturnsTrue_0();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000415430) ----------------------------------------------------
int goodB2G1_49()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = 0;
  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000415492) ----------------------------------------------------
int goodB2G2_49()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = 0;
  result = staticReturnsTrue_0();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (00000000004154E8) ----------------------------------------------------
int goodG2B1_41()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_0();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000415538) ----------------------------------------------------
int goodG2B2_41()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    v1 = 7;
  result = staticReturnsTrue_0();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000041557C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_08_good()
{
  goodB2G1_49();
  goodB2G2_49();
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (00000000004155AA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (00000000004155D9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (0000000000415608) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000415649) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_54b_badSink(v2);
}

//----- (00000000004156B3) ----------------------------------------------------
int goodG2B_86()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54b_goodG2BSink(7);
}

//----- (00000000004156D5) ----------------------------------------------------
int goodB2G_78()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_54b_goodB2GSink(v2);
}

//----- (000000000041573F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_54_good()
{
  goodG2B_86();
  return goodB2G_78();
}

//----- (0000000000415759) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_34_bad()
{
  int v1; // [rsp+8h] [rbp-8h]
  int v2; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  v2 = v1;
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004157A5) ----------------------------------------------------
int goodG2B_87()
{
  return printIntLine(2u);
}

//----- (00000000004157DB) ----------------------------------------------------
int goodB2G_79()
{
  int result; // eax
  int v1; // [rsp+8h] [rbp-8h]
  int v2; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  v2 = v1;
  if ( v1 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000415839) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_34_good()
{
  goodG2B_87();
  return goodB2G_79();
}

//----- (0000000000415853) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000415876) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000415899) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004158CE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_badSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (00000000004158F8) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (0000000000415922) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041595E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v6);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (00000000004159E4) ----------------------------------------------------
int goodB2G1_50()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;

//----- (0000000000415A88) ----------------------------------------------------
int goodB2G2_50()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000415B20) ----------------------------------------------------
int goodG2B1_42()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000415B6A) ----------------------------------------------------
int goodG2B2_42()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000415BA8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_14_good()
{
  goodB2G1_50();
  goodB2G2_50();
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (0000000000415BD6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+4h] [rbp-2Ch]
  int v7; // [rsp+Ch] [rbp-24h]
  int *v8; // [rsp+10h] [rbp-20h]
  int *v9; // [rsp+18h] [rbp-18h]

  v9 = &v6;
  v8 = &v6;
  v6 = -1;
  v7 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  *v9 = v2;
  return printIntLine(100 / *v8);
}

//----- (0000000000415C71) ----------------------------------------------------
int goodG2B_88()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(0xEu);
}

//----- (0000000000415CC4) ----------------------------------------------------
int goodB2G_80()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+4h] [rbp-2Ch]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+Ch] [rbp-24h]
  int *v9; // [rsp+10h] [rbp-20h]
  int *v10; // [rsp+18h] [rbp-18h]

  v10 = &v6;
  v9 = &v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  v7 = *v9;
  if ( v7 )
    result = printIntLine(100 / v7);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000415D71) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_32_good()
{
  goodG2B_88();
  return goodB2G_80();
}

//----- (0000000000415D8B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_67b_badSink(v2);
}

//----- (0000000000415DFB) ----------------------------------------------------
int goodG2B_89()
{
  return CWE369_Divide_by_Zero__int_rand_divide_67b_goodG2BSink(7);
}

//----- (0000000000415E23) ----------------------------------------------------
int goodB2G_81()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_divide_67b_goodB2GSink(v2);
}

//----- (0000000000415E93) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_67_good()
{
  goodG2B_89();
  return goodB2G_81();
}

//----- (0000000000415EAD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000415ECC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000415EEB) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000415F1C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_03_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 415F1C: using guessed type char buf[16];

//----- (0000000000416050) ----------------------------------------------------
int goodB2G1_51()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 416050: using guessed type char buf[16];

//----- (0000000000416196) ----------------------------------------------------
int goodB2G2_51()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 416196: using guessed type char buf[16];

//----- (00000000004162DC) ----------------------------------------------------
int goodG2B1_43()
{
  return printIntLine(0xEu);
}

//----- (0000000000416304) ----------------------------------------------------
int goodG2B2_43()
{
  return printIntLine(0xEu);
}

//----- (000000000041632C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_03_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (000000000041635A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_badSink((__int64)&v5);
}
// 41635A: using guessed type char buf[16];

//----- (0000000000416490) ----------------------------------------------------
int goodG2B_90()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004164BA) ----------------------------------------------------
int goodB2G_82()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_66b_goodB2GSink((__int64)&v5);
}
// 4164BA: using guessed type char buf[16];

//----- (00000000004165F0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_66_good()
{
  goodG2B_90();
  return goodB2G_82();
}

//----- (000000000041660A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_63b_badSink(&v5);
}
// 41660A: using guessed type char buf[16];

//----- (000000000041673A) ----------------------------------------------------
int goodG2B_91()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodG2BSink(&v1);
}

//----- (000000000041675E) ----------------------------------------------------
int goodB2G_83()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_63b_goodB2GSink(&v5);
}
// 41675E: using guessed type char buf[16];

//----- (000000000041688E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_63_good()
{
  goodG2B_91();
  return goodB2G_83();
}

//----- (00000000004168A8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_53_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53b_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004168E0) ----------------------------------------------------
int goodG2B_92()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodG2BSink(7);
}

//----- (0000000000416902) ----------------------------------------------------
int goodB2G_84()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_53b_goodB2GSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041693A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_53_good()
{
  goodG2B_92();
  return goodB2G_84();
}

//----- (0000000000416954) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_badSink(v8);
}
// 416954: using guessed type char buf[16];

//----- (0000000000416A82) ----------------------------------------------------
int goodG2B_93()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodG2BSink(7);
}

//----- (0000000000416AA4) ----------------------------------------------------
int goodB2G_85()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodB2GSink(v8);
}
// 416AA4: using guessed type char buf[16];

//----- (0000000000416BD2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_52_good()
{
  goodG2B_93();
  return goodB2G_85();
}

//----- (0000000000416BEC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 416BEC: using guessed type char buf[16];

//----- (0000000000416D22) ----------------------------------------------------
int goodB2G_86()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 416D22: using guessed type char buf[16];

//----- (0000000000416E6A) ----------------------------------------------------
int goodG2B_94()
{
  return printIntLine(0xEu);
}

//----- (0000000000416E94) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_16_good()
{
  goodB2G_86();
  return goodG2B_94();
}

//----- (0000000000416EAE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000416ECD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000416EEC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000416F1D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printIntLine(100 / v6);
  return result;
}
// 647128: using guessed type int staticFive_2;

//----- (0000000000416FA3) ----------------------------------------------------
int goodB2G1_52()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( staticFive_2 != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 647128: using guessed type int staticFive_2;

//----- (0000000000417047) ----------------------------------------------------
int goodB2G2_52()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647128: using guessed type int staticFive_2;

//----- (00000000004170DF) ----------------------------------------------------
int goodG2B1_44()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_2 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647128: using guessed type int staticFive_2;

//----- (0000000000417129) ----------------------------------------------------
int goodG2B2_44()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_2 == 5 )
    v1 = 7;
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647128: using guessed type int staticFive_2;

//----- (0000000000417167) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_07_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (0000000000417195) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_18_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 417195: using guessed type char buf[16];

//----- (00000000004172CB) ----------------------------------------------------
int goodB2G_87()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4172CB: using guessed type char buf[16];

//----- (0000000000417413) ----------------------------------------------------
int goodG2B_95()
{
  return printIntLine(0xEu);
}

//----- (000000000041743D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_18_good()
{
  goodB2G_87();
  return goodG2B_95();
}

//----- (0000000000417457) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_07_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_3 == 5 )
    v1 = 0;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 64712C: using guessed type int staticFive_3;

//----- (0000000000417497) ----------------------------------------------------
int goodB2G1_53()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_3 == 5 )
    v1 = 0;
  if ( staticFive_3 != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 64712C: using guessed type int staticFive_3;

//----- (00000000004174F5) ----------------------------------------------------
int goodB2G2_53()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_3 == 5 )
    v1 = 0;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 64712C: using guessed type int staticFive_3;

//----- (0000000000417547) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_3 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 64712C: using guessed type int staticFive_3;

//----- (0000000000417593) ----------------------------------------------------
int goodG2B2_45()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_3 == 5 )
    v1 = 7;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 64712C: using guessed type int staticFive_3;

//----- (00000000004175D3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_07_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (0000000000417601) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54c_badSink(a1);
}

//----- (0000000000417618) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54c_goodG2BSink(a1);
}

//----- (000000000041762F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_54c_goodB2GSink(a1);
}

//----- (0000000000417646) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_14_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000417686) ----------------------------------------------------
int goodB2G1_54()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;

//----- (00000000004176E4) ----------------------------------------------------
int goodB2G2_54()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 0;
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000417736) ----------------------------------------------------
int goodG2B1_46()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000417782) ----------------------------------------------------
int goodG2B2_46()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (00000000004177C2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_14_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (00000000004177F0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_32_bad()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0;
  v1 = 0;
  v2 = 0;
  return printIntLine(100 % 0);
}

//----- (0000000000417845) ----------------------------------------------------
int goodG2B_96()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(2u);
}

//----- (000000000041789A) ----------------------------------------------------
int goodB2G_88()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 0;
  v1 = 0;
  v2 = 0;
  return printLine("This would result in a divide by zero");
}

//----- (0000000000417901) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_32_good()
{
  goodG2B_96();
  return goodB2G_88();
}

//----- (000000000041791B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_badSink(a1);
}

//----- (0000000000417932) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodG2BSink(a1);
}

//----- (0000000000417949) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodB2GSink(a1);
}

//----- (0000000000417960) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_badSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_68_badData);
}
// 6472F0: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_badData;

//----- (0000000000417985) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodG2BSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodG2BData);
}
// 6472F8: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodG2BData;

//----- (00000000004179AA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6472F4: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData;

//----- (00000000004179E1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_53_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53b_badSink(0);
}

//----- (0000000000417A03) ----------------------------------------------------
int goodG2B_97()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53b_goodG2BSink(7);
}

//----- (0000000000417A25) ----------------------------------------------------
int goodB2G_89()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53b_goodB2GSink(0);
}

//----- (0000000000417A47) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_53_good()
{
  goodG2B_97();
  return goodB2G_89();
}

//----- (0000000000417A61) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000417A80) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000417A9F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000417AD0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  __isoc99_fscanf(stdin, "%d", &v3);
  v2 = v3;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_66b_badSink((__int64)&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000417B10) ----------------------------------------------------
int goodG2B_98()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000417B3A) ----------------------------------------------------
int goodB2G_90()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  __isoc99_fscanf(stdin, "%d", &v3);
  v2 = v3;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_66b_goodB2GSink((__int64)&v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000417B7A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_66_good()
{
  goodG2B_98();
  return goodB2G_90();
}

//----- (0000000000417B94) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000417B9F) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (0000000000417BAA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result )
    result = printIntLine(100 % v6);
  return result;
}

//----- (0000000000417C38) ----------------------------------------------------
int goodB2G1_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000417CE4) ----------------------------------------------------
int goodB2G2_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000417D84) ----------------------------------------------------
int goodG2B1_47()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_1();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000417DD6) ----------------------------------------------------
int goodG2B2_47()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
    v1 = 7;
  result = staticReturnsTrue_1();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000417E1C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_08_good()
{
  goodB2G1_55();
  goodB2G2_55();
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (0000000000417E4A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_52_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52b_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000417E82) ----------------------------------------------------
int goodG2B_99()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodG2BSink(7);
}

//----- (0000000000417EA4) ----------------------------------------------------
int goodB2G_91()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodB2GSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000417EDC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_52_good()
{
  goodG2B_99();
  return goodB2G_91();
}

//----- (0000000000417EF6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000417F1B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000417F40) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000417F77) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000417FF9) ----------------------------------------------------
int goodB2G1_56()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000418099) ----------------------------------------------------
int goodB2G2_56()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041812D) ----------------------------------------------------
int goodG2B1_48()
{
  return printIntLine(0xEu);
}

//----- (0000000000418173) ----------------------------------------------------
int goodG2B2_48()
{
  return printIntLine(0xEu);
}

//----- (00000000004181AD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_04_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (00000000004181DB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000418257) ----------------------------------------------------
int goodG2B_100()
{
  return printIntLine(0xEu);
}

//----- (000000000041828B) ----------------------------------------------------
int goodB2G_92()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000418319) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_31_good()
{
  goodG2B_100();
  return goodB2G_92();
}

//----- (0000000000418333) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  else
  {
    v8 = 7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 / v8);
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 418333: using guessed type char buf[16];

//----- (00000000004184B6) ----------------------------------------------------
int goodB2G_93()
{
  int result; // eax
  char nptr[16]; // [rsp+0h] [rbp-60h]
  struct sockaddr addr; // [rsp+10h] [rbp-50h]
  char buf[16]; // [rsp+20h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-30h]
  uint16_t v5; // [rsp+32h] [rbp-2Eh]
  int v6; // [rsp+34h] [rbp-2Ch]
  int v7; // [rsp+44h] [rbp-1Ch]
  int v8; // [rsp+48h] [rbp-18h]
  int v9; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v11; // [rsp+54h] [rbp-Ch]
  int v12; // [rsp+58h] [rbp-8h]
  int v13; // [rsp+5Ch] [rbp-4h]

  v13 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v12 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v12 = accept(fd, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v9 = recv(v12, buf, 0xDuLL, 0);
          if ( v9 != -1 )
          {
            if ( v9 )
            {
              buf[v9] = 0;
              v13 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v12 != -1 )
      close(v12);
  }
  else
  {
    v11 = -1;
    v8 = socket(2, 1, 6);
    if ( v8 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v8, &addr, 0x10u) != -1 && listen(v8, 5) != -1 )
      {
        v11 = accept(v8, 0LL, 0LL);
        if ( v11 != -1 )
        {
          v7 = recv(v11, nptr, 0xDuLL, 0);
          if ( v7 != -1 )
          {
            if ( v7 )
            {
              nptr[v7] = 0;
              v13 = atoi(nptr);
            }
          }
        }
      }
    }
    if ( v8 != -1 )
      close(v8);
    if ( v11 != -1 )
      close(v11);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( v13 )
      result = printIntLine(100 / v13);
    else
      result = printLine("This would result in a divide by zero");
  }
  else if ( v13 )
  {
    result = printIntLine(100 / v13);
  }
  else
  {
    result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4184B6: using guessed type char buf[16];
// 4184B6: using guessed type char nptr[16];

//----- (000000000041875D) ----------------------------------------------------
int goodG2B_101()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(0xEu);
}

//----- (00000000004187BC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_12_good()
{
  goodB2G_93();
  return goodG2B_101();
}

//----- (00000000004187D6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53d_badSink(a1);
}

//----- (00000000004187ED) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53d_goodG2BSink(a1);
}

//----- (0000000000418804) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53d_goodB2GSink(a1);
}

//----- (000000000041881B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_64b_badSink(&v1);
}

//----- (000000000041883F) ----------------------------------------------------
int goodG2B_102()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_zero_modulo_64b_goodG2BSink(&v1);
}

//----- (0000000000418863) ----------------------------------------------------
int goodB2G_94()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_64b_goodB2GSink(&v1);
}

//----- (0000000000418887) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_64_good()
{
  goodG2B_102();
  return goodB2G_94();
}

//----- (00000000004188A1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (00000000004188C8) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (00000000004188EF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000418928) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041894D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000418972) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004189A9) ----------------------------------------------------
int badSink_12()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_45_badData);
}
// 647204: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_badData;

//----- (00000000004189CC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_45_badData = v2;
  return badSink_12();
}
// 647204: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_badData;

//----- (0000000000418A3F) ----------------------------------------------------
int goodG2BSink_12()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_45_goodG2BData);
}
// 647208: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_goodG2BData;

//----- (0000000000418A62) ----------------------------------------------------
int goodG2B_103()
{
  CWE369_Divide_by_Zero__int_rand_divide_45_goodG2BData = 7;
  return goodG2BSink_12();
}
// 647208: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_goodG2BData;

//----- (0000000000418A8D) ----------------------------------------------------
int goodB2GSink_7()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 64720C: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData;

//----- (0000000000418AC2) ----------------------------------------------------
int goodB2G_95()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData = v2;
  return goodB2GSink_7();
}
// 64720C: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_45_goodB2GData;

//----- (0000000000418B35) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_45_good()
{
  goodG2B_103();
  return goodB2G_95();
}

//----- (0000000000418B4F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52c_badSink(a1);
}

//----- (0000000000418B66) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodG2BSink(a1);
}

//----- (0000000000418B7D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_52c_goodB2GSink(a1);
}

//----- (0000000000418B94) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_54_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_54b_badSink(0);
}

//----- (0000000000418BB6) ----------------------------------------------------
int goodG2B_104()
{
  return CWE369_Divide_by_Zero__int_zero_divide_54b_goodG2BSink(7);
}

//----- (0000000000418BD8) ----------------------------------------------------
int goodB2G_96()
{
  return CWE369_Divide_by_Zero__int_zero_divide_54b_goodB2GSink(0);
}

//----- (0000000000418BFA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_54_good()
{
  goodG2B_104();
  return goodB2G_96();
}

//----- (0000000000418C14) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_04_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000418C50) ----------------------------------------------------
int goodB2G1_57()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000418CAA) ----------------------------------------------------
int goodB2G2_57()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000418CF8) ----------------------------------------------------
int goodG2B1_49()
{
  return printIntLine(2u);
}

//----- (0000000000418D40) ----------------------------------------------------
int goodG2B2_49()
{
  return printIntLine(2u);
}

//----- (0000000000418D7C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_04_good()
{
  goodB2G1_57();
  goodB2G2_57();
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (0000000000418DAA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_31_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000418DE0) ----------------------------------------------------
int goodG2B_105()
{
  return printIntLine(2u);
}

//----- (0000000000418E16) ----------------------------------------------------
int goodB2G_97()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000418E5E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_31_good()
{
  goodG2B_105();
  return goodB2G_97();
}

//----- (0000000000418E78) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000418E83) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (0000000000418E8E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_08_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue_2();
  if ( result )
    result = printIntLine(100 / v8);
  return result;
}
// 418E8E: using guessed type char buf[16];

//----- (0000000000418FE2) ----------------------------------------------------
int goodB2G1_58()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsFalse_2() )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 418FE2: using guessed type char buf[16];

//----- (0000000000419154) ----------------------------------------------------
int goodB2G2_58()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 419154: using guessed type char buf[16];

//----- (00000000004192BA) ----------------------------------------------------
int goodG2B1_50()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_2() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_2();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000041930A) ----------------------------------------------------
int goodG2B2_50()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
    v1 = 7;
  result = staticReturnsTrue_2();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000041934E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_08_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000041937C) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE369_Divide_by_Zero__int_rand_modulo_65b_badSink)(v2);
}

//----- (00000000004193EF) ----------------------------------------------------
int goodG2B_106()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_65b_goodG2BSink(7);
}

//----- (000000000041941A) ----------------------------------------------------
__int64 goodB2G_98()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE369_Divide_by_Zero__int_rand_modulo_65b_goodB2GSink)(v2);
}

//----- (000000000041948D) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_modulo_65_good()
{
  goodG2B_106();
  return goodB2G_98();
}

//----- (00000000004194A7) ----------------------------------------------------
void CWE369_Divide_by_Zero__int_listen_socket_divide_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              v7 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
    printIntLine(100 / v7);
}
// 4194A7: using guessed type char buf[16];

//----- (0000000000419608) ----------------------------------------------------
void goodB2G_99()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              v7 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v7 )
      printIntLine(100 / v7);
    else
      printLine("This would result in a divide by zero");
  }
}
// 419608: using guessed type char buf[16];

//----- (000000000041977B) ----------------------------------------------------
int goodG2B_107()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 / v1);
  return result;
}

//----- (00000000004197C9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_17_good()
{
  goodB2G_99();
  return goodG2B_107();
}

//----- (00000000004197E3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_67b_badSink(v2);
}

//----- (0000000000419853) ----------------------------------------------------
int goodG2B_108()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_67b_goodG2BSink(7);
}

//----- (000000000041987B) ----------------------------------------------------
int goodB2G_100()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_67b_goodB2GSink(v2);
}

//----- (00000000004198EB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_67_good()
{
  goodG2B_108();
  return goodB2G_100();
}

//----- (0000000000419905) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 647230: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal;

//----- (000000000041992E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647234: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Global;

//----- (0000000000419975) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647238: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global;

//----- (00000000004199B0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 64723C: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal;

//----- (00000000004199D9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000419A4D) ----------------------------------------------------
int goodB2G1_59()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000419AD3) ----------------------------------------------------
int goodB2G2_59()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000419B59) ----------------------------------------------------
int goodG2B1_51()
{
  return printIntLine(2u);
}

//----- (0000000000419B85) ----------------------------------------------------
int goodG2B2_51()
{
  return printIntLine(2u);
}

//----- (0000000000419BB1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_15_good()
{
  goodB2G1_59();
  goodB2G2_59();
  goodG2B1_51();
  return goodG2B2_51();
}

//----- (0000000000419BDF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 647210: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal;

//----- (0000000000419C06) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 647214: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Global;

//----- (0000000000419C4B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647218: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global;

//----- (0000000000419C84) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal )
    result = printIntLine(100 / a1);
  return result;
}
// 64721C: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal;

//----- (0000000000419CAB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_18_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000419CEF) ----------------------------------------------------
int goodB2G_101()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000419D46) ----------------------------------------------------
int goodG2B_109()
{
  return printIntLine(2u);
}

//----- (0000000000419D72) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_18_good()
{
  goodB2G_101();
  return goodG2B_109();
}

//----- (0000000000419D8C) ----------------------------------------------------
int __fastcall badSink_13(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000419DA9) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_13;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 419DA9: using guessed type char buf[16];

//----- (0000000000419EE0) ----------------------------------------------------
int __fastcall goodG2BSink_13(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000419EFD) ----------------------------------------------------
int goodG2B_110()
{
  return goodG2BSink_13(7);
}

//----- (0000000000419F28) ----------------------------------------------------
int __fastcall goodB2GSink_8(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000419F57) ----------------------------------------------------
__int64 goodB2G_102()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_8;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 419F57: using guessed type char buf[16];

//----- (000000000041A08E) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_44_good()
{
  goodG2B_110();
  return goodB2G_102();
}

//----- (000000000041A0A8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_16_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 41A0A8: using guessed type char buf[16];

//----- (000000000041A1E0) ----------------------------------------------------
int goodB2G_103()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41A1E0: using guessed type char buf[16];

//----- (000000000041A32A) ----------------------------------------------------
int goodG2B_111()
{
  return printIntLine(2u);
}

//----- (000000000041A356) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_16_good()
{
  goodB2G_103();
  return goodG2B_111();
}

//----- (000000000041A370) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  v6 = v10;
  return printIntLine(100 / v10);
}
// 41A370: using guessed type char buf[16];

//----- (000000000041A4B0) ----------------------------------------------------
int goodG2B_112()
{
  return printIntLine(0xEu);
}

//----- (000000000041A4E4) ----------------------------------------------------
int goodB2G_104()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  v6 = v10;
  if ( v10 )
    result = printIntLine(100 / v6);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41A4E4: using guessed type char buf[16];

//----- (000000000041A636) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_34_good()
{
  goodG2B_112();
  return goodB2G_104();
}

//----- (000000000041A650) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_11_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v8);
  return result;
}
// 41A650: using guessed type char buf[16];

//----- (000000000041A7A4) ----------------------------------------------------
int goodB2G1_60()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 41A7A4: using guessed type char buf[16];

//----- (000000000041A916) ----------------------------------------------------
int goodB2G2_60()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 41A916: using guessed type char buf[16];

//----- (000000000041AA7C) ----------------------------------------------------
int goodG2B1_52()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000041AACC) ----------------------------------------------------
int goodG2B2_52()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000041AB10) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_11_good()
{
  goodB2G1_60();
  goodB2G2_60();
  goodG2B1_52();
  return goodG2B2_52();
}

//----- (000000000041AB3E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53c_badSink(a1);
}

//----- (000000000041AB55) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53c_goodG2BSink(a1);
}

//----- (000000000041AB6C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_53c_goodB2GSink(a1);
}

//----- (000000000041AB83) ----------------------------------------------------
__int64 badSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041ABE2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_2();
  return printIntLine(100 % v1);
}

//----- (000000000041AC12) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 7LL;
}

//----- (000000000041AC25) ----------------------------------------------------
int goodG2B_113()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_2();
  return printIntLine(100 % v1);
}

//----- (000000000041AC55) ----------------------------------------------------
__int64 goodB2GSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041ACB4) ----------------------------------------------------
int goodB2G_105()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_2();
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041ACF6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_42_good()
{
  goodB2G_105();
  return goodG2B_113();
}

//----- (000000000041AD10) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041AD2D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041AD4A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041AD79) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52c_badSink(a1);
}

//----- (000000000041AD90) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52c_goodG2BSink(a1);
}

//----- (000000000041ADA7) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_52c_goodB2GSink(a1);
}

//----- (000000000041ADBE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_68b_badSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_68_badData);
}
// 6472E8: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_badData;

//----- (000000000041ADE3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_68b_goodG2BSink()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_68_goodG2BData);
}
// 6472EC: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_goodG2BData;

//----- (000000000041AE08) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 6472E4: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData;

//----- (000000000041AE3F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041AE5E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041AE7D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041AEAE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_02_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 41AEAE: using guessed type char buf[16];

//----- (000000000041AFE2) ----------------------------------------------------
int goodB2G1_61()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41AFE2: using guessed type char buf[16];

//----- (000000000041B128) ----------------------------------------------------
int goodB2G2_61()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41B128: using guessed type char buf[16];

//----- (000000000041B26E) ----------------------------------------------------
int goodG2B1_53()
{
  return printIntLine(0xEu);
}

//----- (000000000041B296) ----------------------------------------------------
int goodG2B2_53()
{
  return printIntLine(0xEu);
}

//----- (000000000041B2BE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_02_good()
{
  goodB2G1_61();
  goodB2G2_61();
  goodG2B1_53();
  return goodG2B2_53();
}

//----- (000000000041B2EC) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 41B2EC: using guessed type char buf[16];

//----- (000000000041B40F) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000041B422) ----------------------------------------------------
__int64 __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 41B422: using guessed type char buf[16];

//----- (000000000041B545) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_10_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v8);
  return result;
}
// 647144: using guessed type int globalTrue;
// 41B545: using guessed type char buf[16];

//----- (000000000041B691) ----------------------------------------------------
int goodB2G1_62()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;
// 41B691: using guessed type char buf[16];

//----- (000000000041B7FB) ----------------------------------------------------
int goodB2G2_62()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;
// 41B7FB: using guessed type char buf[16];

//----- (000000000041B959) ----------------------------------------------------
int goodG2B1_54()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (000000000041B9A1) ----------------------------------------------------
int goodG2B2_54()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (000000000041B9DD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_10_good()
{
  goodB2G1_62();
  goodB2G2_62();
  goodG2B1_54();
  return goodG2B2_54();
}

//----- (000000000041BA0B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_badSink(v8);
}
// 41BA0B: using guessed type char buf[16];

//----- (000000000041BB39) ----------------------------------------------------
int goodG2B_114()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodG2BSink(7);
}

//----- (000000000041BB5B) ----------------------------------------------------
int goodB2G_106()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_51b_goodB2GSink(v8);
}
// 41BB5B: using guessed type char buf[16];

//----- (000000000041BC89) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_51_good()
{
  goodG2B_114();
  return goodB2G_106();
}

//----- (000000000041BCA3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_rand_divide_22_badSink(v2);
}
// 647210: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_badGlobal;

//----- (000000000041BD17) ----------------------------------------------------
int goodB2G1_63()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Sink(v2);
}
// 647214: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G1Global;

//----- (000000000041BD8B) ----------------------------------------------------
int goodB2G2_63()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Sink(v2);
}
// 647218: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodB2G2Global;

//----- (000000000041BDFF) ----------------------------------------------------
int goodG2B_115()
{
  CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BSink(7);
}
// 64721C: using guessed type int CWE369_Divide_by_Zero__int_rand_divide_22_goodG2BGlobal;

//----- (000000000041BE2B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_22_good()
{
  goodB2G1_63();
  goodB2G2_63();
  return goodG2B_115();
}

//----- (000000000041BE4F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_07_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_4 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printIntLine(100 / v8);
  return result;
}
// 647130: using guessed type int staticFive_4;
// 41BE4F: using guessed type char buf[16];

//----- (000000000041BF9D) ----------------------------------------------------
int goodB2G1_64()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_4 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_4 != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 647130: using guessed type int staticFive_4;
// 41BF9D: using guessed type char buf[16];

//----- (000000000041C109) ----------------------------------------------------
int goodB2G2_64()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticFive_4 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647130: using guessed type int staticFive_4;
// 41C109: using guessed type char buf[16];

//----- (000000000041C269) ----------------------------------------------------
int goodG2B1_55()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_4 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647130: using guessed type int staticFive_4;

//----- (000000000041C2B3) ----------------------------------------------------
int goodG2B2_55()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_4 == 5 )
    v1 = 7;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647130: using guessed type int staticFive_4;

//----- (000000000041C2F1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_07_good()
{
  goodB2G1_64();
  goodB2G2_64();
  goodG2B1_55();
  return goodG2B2_55();
}

//----- (000000000041C31F) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (000000000041C32A) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (000000000041C335) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_08_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = 0;
  result = staticReturnsTrue_3();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000041C37B) ----------------------------------------------------
int goodB2G1_65()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = 0;
  if ( (unsigned int)staticReturnsFalse_3() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}

//----- (000000000041C3DF) ----------------------------------------------------
int goodB2G2_65()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = 0;
  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (000000000041C437) ----------------------------------------------------
int goodG2B1_56()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_3() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_3();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000041C489) ----------------------------------------------------
int goodG2B2_56()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_3() )
    v1 = 7;
  result = staticReturnsTrue_3();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000041C4CF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_08_good()
{
  goodB2G1_65();
  goodB2G2_65();
  goodG2B1_56();
  return goodG2B2_56();
}

//----- (000000000041C4FD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_01_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 41C4FD: using guessed type char buf[16];

//----- (000000000041C631) ----------------------------------------------------
int goodG2B_116()
{
  return printIntLine(0xEu);
}

//----- (000000000041C659) ----------------------------------------------------
int goodB2G_107()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41C659: using guessed type char buf[16];

//----- (000000000041C79F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_01_good()
{
  goodG2B_116();
  return goodB2G_107();
}

//----- (000000000041C7B9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041C7D6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041C7F3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041C822) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printIntLine(100 % v6);
  return result;
}
// 647134: using guessed type int staticTrue_3;

//----- (000000000041C8A8) ----------------------------------------------------
int goodB2G1_66()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( staticFalse_3 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 647134: using guessed type int staticTrue_3;
// 647220: using guessed type int staticFalse_3;

//----- (000000000041C94C) ----------------------------------------------------
int goodB2G2_66()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticTrue_3 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647134: using guessed type int staticTrue_3;

//----- (000000000041C9E4) ----------------------------------------------------
int goodG2B1_57()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_3 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printIntLine(100 % v1);
  return result;
}
// 647134: using guessed type int staticTrue_3;
// 647220: using guessed type int staticFalse_3;

//----- (000000000041CA2E) ----------------------------------------------------
int goodG2B2_57()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_3 )
    v1 = 7;
  result = staticTrue_3;
  if ( staticTrue_3 )
    result = printIntLine(100 % v1);
  return result;
}
// 647134: using guessed type int staticTrue_3;

//----- (000000000041CA6C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_05_good()
{
  goodB2G1_66();
  goodB2G2_66();
  goodG2B1_57();
  return goodG2B2_57();
}

//----- (000000000041CA9A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_badSink(a1);
}

//----- (000000000041CAB1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodG2BSink(a1);
}

//----- (000000000041CAC8) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_53d_goodB2GSink(a1);
}

//----- (000000000041CADF) ----------------------------------------------------
int __fastcall badSink_14(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041CAFE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_14(v2);
}

//----- (000000000041CB68) ----------------------------------------------------
int __fastcall goodG2BSink_14(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041CB87) ----------------------------------------------------
int goodG2B_117()
{
  return goodG2BSink_14(7);
}

//----- (000000000041CBA9) ----------------------------------------------------
int __fastcall goodB2GSink_9(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041CBDA) ----------------------------------------------------
int goodB2G_108()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_9(v2);
}

//----- (000000000041CC44) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_41_good()
{
  goodB2G_108();
  return goodG2B_117();
}

//----- (000000000041CC5E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041CC7D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041CC9C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041CCCD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_15_bad()
{
  return printIntLine(100 / 0);
}

//----- (000000000041CCF7) ----------------------------------------------------
int goodB2G1_67()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000041CD33) ----------------------------------------------------
int goodB2G2_67()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000041CD6F) ----------------------------------------------------
int goodG2B1_58()
{
  return printIntLine(0xEu);
}

//----- (000000000041CD99) ----------------------------------------------------
int goodG2B2_58()
{
  return printIntLine(0xEu);
}

//----- (000000000041CDC3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_15_good()
{
  goodB2G1_67();
  goodB2G2_67();
  goodG2B1_58();
  return goodG2B2_58();
}

//----- (000000000041CDF1) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54e_badSink(a1);
}

//----- (000000000041CE08) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54e_goodG2BSink(a1);
}

//----- (000000000041CE1F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54e_goodB2GSink(a1);
}

//----- (000000000041CE36) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_51_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_51b_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041CE6E) ----------------------------------------------------
int goodG2B_118()
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodG2BSink(7);
}

//----- (000000000041CE90) ----------------------------------------------------
int goodB2G_109()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE369_Divide_by_Zero__int_fscanf_modulo_51b_goodB2GSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041CEC8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_51_good()
{
  goodG2B_118();
  return goodB2G_109();
}

//----- (000000000041CEE2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_divide_61b_badSource(0xFFFFFFFF);
  return printIntLine(100 / v1);
}

//----- (000000000041CF10) ----------------------------------------------------
int goodG2B_119()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodG2BSource();
  return printIntLine(100 / v1);
}

//----- (000000000041CF3E) ----------------------------------------------------
int goodB2G_110()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_listen_socket_divide_61b_goodB2GSource(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041CF7E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_61_good()
{
  goodG2B_119();
  return goodB2G_110();
}

//----- (000000000041CF98) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_68_badData = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_68b_badSink();
}
// 6472E8: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_badData;

//----- (000000000041D00B) ----------------------------------------------------
int goodG2B_120()
{
  CWE369_Divide_by_Zero__int_rand_modulo_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_rand_modulo_68b_goodG2BSink();
}
// 6472EC: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_goodG2BData;

//----- (000000000041D036) ----------------------------------------------------
int goodB2G_111()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_68b_goodB2GSink();
}
// 6472E4: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_68_goodB2GData;

//----- (000000000041D0A9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_68_good()
{
  goodG2B_120();
  return goodB2G_111();
}

//----- (000000000041D0C3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_68_badData = v8;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_badSink();
}
// 6472F0: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_badData;
// 41D0C3: using guessed type char buf[16];

//----- (000000000041D1FA) ----------------------------------------------------
int goodG2B_121()
{
  CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodG2BSink();
}
// 6472F8: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodG2BData;

//----- (000000000041D225) ----------------------------------------------------
int goodB2G_112()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData = v8;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_68b_goodB2GSink();
}
// 6472F4: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_goodB2GData;
// 41D225: using guessed type char buf[16];

//----- (000000000041D35C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_68_good()
{
  goodG2B_121();
  return goodB2G_112();
}

//----- (000000000041D376) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54e_badSink(a1);
}

//----- (000000000041D38D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54e_goodG2BSink(a1);
}

//----- (000000000041D3A4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_54e_goodB2GSink(a1);
}

//----- (000000000041D3BB) ----------------------------------------------------
__int64 badSource_3()
{
  return 0LL;
}

//----- (000000000041D3CE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_3();
  return printIntLine(100 / v1);
}

//----- (000000000041D3FC) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 7LL;
}

//----- (000000000041D40F) ----------------------------------------------------
int goodG2B_122()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_3();
  return printIntLine(100 / v1);
}

//----- (000000000041D43D) ----------------------------------------------------
__int64 goodB2GSource_3()
{
  return 0LL;
}

//----- (000000000041D450) ----------------------------------------------------
int goodB2G_113()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_3();
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041D490) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_42_good()
{
  goodB2G_113();
  return goodG2B_122();
}

//----- (000000000041D4AA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_badSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (000000000041D4D4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 % *(_DWORD *)(a1 + 8));
}

//----- (000000000041D4FE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041D53A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v6);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041D5C0) ----------------------------------------------------
int goodB2G1_68()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041D664) ----------------------------------------------------
int goodB2G2_68()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041D6FC) ----------------------------------------------------
int goodG2B1_59()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041D746) ----------------------------------------------------
int goodG2B2_59()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 / v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041D784) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_13_good()
{
  goodB2G1_68();
  goodB2G2_68();
  goodG2B1_59();
  return goodG2B2_59();
}

//----- (000000000041D7B2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (000000000041D7D9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 / *a1);
}

//----- (000000000041D800) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 / *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041D839) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_09_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v8);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 41D839: using guessed type char buf[16];

//----- (000000000041D985) ----------------------------------------------------
int goodB2G1_69()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;
// 41D985: using guessed type char buf[16];

//----- (000000000041DAEF) ----------------------------------------------------
int goodB2G2_69()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 41DAEF: using guessed type char buf[16];

//----- (000000000041DC4D) ----------------------------------------------------
int goodG2B1_60()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041DC95) ----------------------------------------------------
int goodG2B2_60()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041DCD1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_09_good()
{
  goodB2G1_69();
  goodB2G2_69();
  goodG2B1_60();
  return goodG2B2_60();
}

//----- (000000000041DCFF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54e_badSink(a1);
}

//----- (000000000041DD16) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54e_goodG2BSink(a1);
}

//----- (000000000041DD2D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54e_goodB2GSink(a1);
}

//----- (000000000041DD44) ----------------------------------------------------
int badSink_15()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_45_badData);
}
// 647224: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_badData;

//----- (000000000041DD69) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_45_badData = v1;
  return badSink_15();
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 647224: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_badData;

//----- (000000000041DDAA) ----------------------------------------------------
int goodG2BSink_15()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodG2BData);
}
// 647228: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodG2BData;

//----- (000000000041DDCF) ----------------------------------------------------
int goodG2B_123()
{
  CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodG2BData = 7;
  return goodG2BSink_15();
}
// 647228: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodG2BData;

//----- (000000000041DDFA) ----------------------------------------------------
int goodB2GSink_10()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 64722C: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData;

//----- (000000000041DE31) ----------------------------------------------------
int goodB2G_114()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData = v1;
  return goodB2GSink_10();
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 64722C: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_45_goodB2GData;

//----- (000000000041DE72) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_45_good()
{
  goodG2B_123();
  return goodB2G_114();
}

//----- (000000000041DE8C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v6);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041DF14) ----------------------------------------------------
int goodB2G1_70()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;

//----- (000000000041DFBA) ----------------------------------------------------
int goodB2G2_70()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041E054) ----------------------------------------------------
int goodG2B1_61()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041E0A0) ----------------------------------------------------
int goodG2B2_61()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041E0E0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_14_good()
{
  goodB2G1_70();
  goodB2G2_70();
  goodG2B1_61();
  return goodG2B2_61();
}

//----- (000000000041E10E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_53b_badSink(v2);
}

//----- (000000000041E178) ----------------------------------------------------
int goodG2B_124()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53b_goodG2BSink(7);
}

//----- (000000000041E19A) ----------------------------------------------------
int goodB2G_115()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_53b_goodB2GSink(v2);
}

//----- (000000000041E204) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_53_good()
{
  goodG2B_124();
  return goodB2G_115();
}

//----- (000000000041E21E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_06_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433684, &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041E274) ----------------------------------------------------
int goodB2G1_71()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433684, &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041E2E9) ----------------------------------------------------
int goodB2G2_71()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433684, &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000041E352) ----------------------------------------------------
int goodG2B1_62()
{
  return printIntLine(2u);
}

//----- (000000000041E39C) ----------------------------------------------------
int goodG2B2_62()
{
  return printIntLine(2u);
}

//----- (000000000041E3DA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_06_good()
{
  goodB2G1_71();
  goodB2G2_71();
  goodG2B1_62();
  return goodG2B2_62();
}

//----- (000000000041E408) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_13_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041E448) ----------------------------------------------------
int goodB2G1_72()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041E4A6) ----------------------------------------------------
int goodB2G2_72()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 0;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041E4F8) ----------------------------------------------------
int goodG2B1_63()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041E544) ----------------------------------------------------
int goodG2B2_63()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041E584) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_13_good()
{
  goodB2G1_72();
  goodB2G2_72();
  goodG2B1_63();
  return goodG2B2_63();
}

//----- (000000000041E5B2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_rand_modulo_22_badSink(v2);
}
// 647230: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_badGlobal;

//----- (000000000041E626) ----------------------------------------------------
int goodB2G1_73()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Sink(v2);
}
// 647234: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G1Global;

//----- (000000000041E69A) ----------------------------------------------------
int goodB2G2_73()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Sink(v2);
}
// 647238: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodB2G2Global;

//----- (000000000041E70E) ----------------------------------------------------
int goodG2B_125()
{
  CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BSink(7);
}
// 64723C: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_22_goodG2BGlobal;

//----- (000000000041E73A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_22_good()
{
  goodB2G1_73();
  goodB2G2_73();
  return goodG2B_125();
}

//----- (000000000041E75E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041E77D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041E79C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041E7CD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (000000000041E7FE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (000000000041E82F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041E872) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_05_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_4 )
    v1 = 0;
  result = staticTrue_4;
  if ( staticTrue_4 )
    result = printIntLine(100 / v1);
  return result;
}
// 647138: using guessed type int staticTrue_4;

//----- (000000000041E8AE) ----------------------------------------------------
int goodB2G1_74()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_4 )
    v1 = 0;
  if ( staticFalse_4 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 / v1);
  return printLine("This would result in a divide by zero");
}
// 647138: using guessed type int staticTrue_4;
// 647240: using guessed type int staticFalse_4;

//----- (000000000041E908) ----------------------------------------------------
int goodB2G2_74()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_4 )
    v1 = 0;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( v1 )
      result = printIntLine(100 / v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647138: using guessed type int staticTrue_4;

//----- (000000000041E956) ----------------------------------------------------
int goodG2B1_64()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_4 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_4;
  if ( staticTrue_4 )
    result = printIntLine(100 / v1);
  return result;
}
// 647138: using guessed type int staticTrue_4;
// 647240: using guessed type int staticFalse_4;

//----- (000000000041E99E) ----------------------------------------------------
int goodG2B2_64()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_4 )
    v1 = 7;
  result = staticTrue_4;
  if ( staticTrue_4 )
    result = printIntLine(100 / v1);
  return result;
}
// 647138: using guessed type int staticTrue_4;

//----- (000000000041E9DA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_05_good()
{
  goodB2G1_74();
  goodB2G2_74();
  goodG2B1_64();
  return goodG2B2_64();
}

//----- (000000000041EA08) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53c_badSink(a1);
}

//----- (000000000041EA1F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53c_goodG2BSink(a1);
}

//----- (000000000041EA36) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_53c_goodB2GSink(a1);
}

//----- (000000000041EA4D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_13_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041EAA5) ----------------------------------------------------
int goodB2G1_75()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041EB1C) ----------------------------------------------------
int goodB2G2_75()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041EB87) ----------------------------------------------------
int goodG2B1_65()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EBD3) ----------------------------------------------------
int goodG2B2_65()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041EC13) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_13_good()
{
  goodB2G1_75();
  goodB2G2_75();
  goodG2B1_65();
  return goodG2B2_65();
}

//----- (000000000041EC41) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041EC60) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000041EC7F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041ECB0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (000000000041ED20) ----------------------------------------------------
int goodB2G1_76()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041EDA2) ----------------------------------------------------
int goodB2G2_76()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041EE24) ----------------------------------------------------
int goodG2B1_66()
{
  return printIntLine(0xEu);
}

//----- (000000000041EE4C) ----------------------------------------------------
int goodG2B2_66()
{
  return printIntLine(0xEu);
}

//----- (000000000041EE74) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_03_good()
{
  goodB2G1_76();
  goodB2G2_76();
  goodG2B1_66();
  return goodG2B2_66();
}

//----- (000000000041EEA2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_66b_badSink((__int64)&v6);
}

//----- (000000000041EF14) ----------------------------------------------------
int goodG2B_126()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_rand_modulo_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000041EF3E) ----------------------------------------------------
int goodB2G_116()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE369_Divide_by_Zero__int_rand_modulo_66b_goodB2GSink((__int64)&v6);
}

//----- (000000000041EFB0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_66_good()
{
  goodG2B_126();
  return goodB2G_116();
}

//----- (000000000041EFCA) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041EFE7) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000041F004) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000041F033) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_14_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v8);
  return result;
}
// 647148: using guessed type int globalFive;
// 41F033: using guessed type char buf[16];

//----- (000000000041F183) ----------------------------------------------------
int goodB2G1_77()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 647148: using guessed type int globalFive;
// 41F183: using guessed type char buf[16];

//----- (000000000041F2F1) ----------------------------------------------------
int goodB2G2_77()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647148: using guessed type int globalFive;
// 41F2F1: using guessed type char buf[16];

//----- (000000000041F453) ----------------------------------------------------
int goodG2B1_67()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041F49F) ----------------------------------------------------
int goodG2B2_67()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (000000000041F4DF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_14_good()
{
  goodB2G1_77();
  goodB2G2_77();
  goodG2B1_67();
  return goodG2B2_67();
}

//----- (000000000041F50D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_32_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v8; // [rsp+38h] [rbp-18h]
  int *v9; // [rsp+40h] [rbp-10h]
  int v10; // [rsp+48h] [rbp-8h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v9 = &v5;
  v8 = &v5;
  v5 = -1;
  v11 = -1;
  fd = -1;
  v10 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v10 = accept(fd, 0LL, 0LL);
      if ( v10 != -1 )
      {
        v6 = recv(v10, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v11 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v10 != -1 )
    close(v10);
  *v9 = v11;
  return printIntLine(100 % *v8);
}
// 41F50D: using guessed type char buf[16];

//----- (000000000041F66E) ----------------------------------------------------
int goodG2B_127()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(2u);
}

//----- (000000000041F6C3) ----------------------------------------------------
int goodB2G_117()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v12 = -1;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  v6 = *v9;
  if ( v6 )
    result = printIntLine(100 % v6);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41F6C3: using guessed type char buf[16];

//----- (000000000041F836) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_32_good()
{
  goodG2B_127();
  return goodB2G_117();
}

//----- (000000000041F850) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_09_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041F8A6) ----------------------------------------------------
int goodB2G1_78()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041F91B) ----------------------------------------------------
int goodB2G2_78()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 647150: using guessed type __int64 stdin;

//----- (000000000041F984) ----------------------------------------------------
int goodG2B1_68()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041F9CE) ----------------------------------------------------
int goodG2B2_68()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041FA0C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_09_good()
{
  goodB2G1_78();
  goodB2G2_78();
  goodG2B1_68();
  return goodG2B2_68();
}

//----- (000000000041FA3A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_06_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 41FA3A: using guessed type char buf[16];

//----- (000000000041FB88) ----------------------------------------------------
int goodB2G1_79()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41FB88: using guessed type char buf[16];

//----- (000000000041FCF4) ----------------------------------------------------
int goodB2G2_79()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 41FCF4: using guessed type char buf[16];

//----- (000000000041FE54) ----------------------------------------------------
int goodG2B1_69()
{
  return printIntLine(2u);
}

//----- (000000000041FE9E) ----------------------------------------------------
int goodG2B2_69()
{
  return printIntLine(2u);
}

//----- (000000000041FEDC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_06_good()
{
  goodB2G1_79();
  goodB2G2_79();
  goodG2B1_69();
  return goodG2B2_69();
}

//----- (000000000041FF0A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_68_bad()
{
  CWE369_Divide_by_Zero__int_zero_divide_68_badData = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_68b_badSink();
}
// 6472FC: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_badData;

//----- (000000000041FF35) ----------------------------------------------------
int goodG2B_128()
{
  CWE369_Divide_by_Zero__int_zero_divide_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_zero_divide_68b_goodG2BSink();
}
// 647304: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_goodG2BData;

//----- (000000000041FF60) ----------------------------------------------------
int goodB2G_118()
{
  CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_68b_goodB2GSink();
}
// 647300: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData;

//----- (000000000041FF8B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_68_good()
{
  goodG2B_128();
  return goodB2G_118();
}

//----- (000000000041FFA5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000420017) ----------------------------------------------------
int goodB2G_119()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042009B) ----------------------------------------------------
int goodG2B_129()
{
  return printIntLine(0xEu);
}

//----- (00000000004200C5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_18_good()
{
  goodB2G_119();
  return goodG2B_129();
}

//----- (00000000004200DF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_34_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000420113) ----------------------------------------------------
int goodG2B_130()
{
  return printIntLine(0xEu);
}

//----- (0000000000420147) ----------------------------------------------------
int goodB2G_120()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000042018D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_34_good()
{
  goodG2B_130();
  return goodB2G_120();
}

//----- (00000000004201A7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_65_bad()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_65b_badSink(0);
}

//----- (00000000004201D2) ----------------------------------------------------
int goodG2B_131()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_65b_goodG2BSink(7);
}

//----- (00000000004201FD) ----------------------------------------------------
int goodB2G_121()
{
  return CWE369_Divide_by_Zero__int_zero_modulo_65b_goodB2GSink(0);
}

//----- (0000000000420228) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_65_good()
{
  goodG2B_131();
  return goodB2G_121();
}

//----- (0000000000420242) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (0000000000420273) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004202A4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004202E7) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_52c_badSink(a1);
}

//----- (00000000004202FE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_52c_goodG2BSink(a1);
}

//----- (0000000000420315) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_52c_goodB2GSink(a1);
}

//----- (000000000042032C) ----------------------------------------------------
int badSink_16()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_45_badData);
}
// 647244: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_badData;

//----- (0000000000420351) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_45_badData = v8;
  return badSink_16();
}
// 647244: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_badData;
// 420351: using guessed type char buf[16];

//----- (0000000000420488) ----------------------------------------------------
int goodG2BSink_16()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodG2BData);
}
// 647248: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodG2BData;

//----- (00000000004204AD) ----------------------------------------------------
int goodG2B_132()
{
  CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodG2BData = 7;
  return goodG2BSink_16();
}
// 647248: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodG2BData;

//----- (00000000004204D8) ----------------------------------------------------
int goodB2GSink_11()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 64724C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData;

//----- (000000000042050F) ----------------------------------------------------
int goodB2G_122()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData = v8;
  return goodB2GSink_11();
}
// 64724C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_goodB2GData;
// 42050F: using guessed type char buf[16];

//----- (0000000000420646) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_45_good()
{
  goodG2B_132();
  return goodB2G_122();
}

//----- (0000000000420660) ----------------------------------------------------
int __fastcall badSink_17(int a1)
{
  int result; // eax

  result = badStatic_4;
  if ( badStatic_4 )
    result = printIntLine(100 % a1);
  return result;
}
// 647250: using guessed type int badStatic_4;

//----- (0000000000420689) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_21_bad()
{
  badStatic_4 = 1;
  return badSink_17(0);
}
// 647250: using guessed type int badStatic_4;

//----- (00000000004206B5) ----------------------------------------------------
int __fastcall goodB2G1Sink_4(int a1)
{
  if ( goodB2G1Static_4 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647254: using guessed type int goodB2G1Static_4;

//----- (00000000004206FC) ----------------------------------------------------
int goodB2G1_80()
{
  goodB2G1Static_4 = 0;
  return goodB2G1Sink_4(0);
}
// 647254: using guessed type int goodB2G1Static_4;

//----- (0000000000420728) ----------------------------------------------------
int __fastcall goodB2G2Sink_4(int a1)
{
  int result; // eax

  result = goodB2G2Static_4;
  if ( goodB2G2Static_4 )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647258: using guessed type int goodB2G2Static_4;

//----- (0000000000420763) ----------------------------------------------------
int goodB2G2_80()
{
  goodB2G2Static_4 = 1;
  return goodB2G2Sink_4(0);
}
// 647258: using guessed type int goodB2G2Static_4;

//----- (000000000042078F) ----------------------------------------------------
int __fastcall goodG2BSink_17(int a1)
{
  int result; // eax

  result = goodG2BStatic_4;
  if ( goodG2BStatic_4 )
    result = printIntLine(100 % a1);
  return result;
}
// 64725C: using guessed type int goodG2BStatic_4;

//----- (00000000004207B8) ----------------------------------------------------
int goodG2B_133()
{
  goodG2BStatic_4 = 1;
  return goodG2BSink_17(7);
}
// 64725C: using guessed type int goodG2BStatic_4;

//----- (00000000004207E4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_21_good()
{
  goodB2G1_80();
  goodB2G2_80();
  return goodG2B_133();
}

//----- (0000000000420808) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_03_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000420832) ----------------------------------------------------
int goodB2G1_81()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000042086E) ----------------------------------------------------
int goodB2G2_81()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004208AA) ----------------------------------------------------
int goodG2B1_70()
{
  return printIntLine(2u);
}

//----- (00000000004208D4) ----------------------------------------------------
int goodG2B2_70()
{
  return printIntLine(2u);
}

//----- (00000000004208FE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_03_good()
{
  goodB2G1_81();
  goodB2G2_81();
  goodG2B1_70();
  return goodG2B2_70();
}

//----- (000000000042092C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53c_badSink(a1);
}

//----- (0000000000420943) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53c_goodG2BSink(a1);
}

//----- (000000000042095A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_modulo_53c_goodB2GSink(a1);
}

//----- (0000000000420971) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_63b_badSink(&v1);
}

//----- (0000000000420995) ----------------------------------------------------
int goodG2B_134()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_zero_modulo_63b_goodG2BSink(&v1);
}

//----- (00000000004209B9) ----------------------------------------------------
int goodB2G_123()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 0;
  return CWE369_Divide_by_Zero__int_zero_modulo_63b_goodB2GSink(&v1);
}

//----- (00000000004209DD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_63_good()
{
  goodG2B_134();
  return goodB2G_123();
}

//----- (00000000004209F7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_badSink(&v5);
}
// 4209F7: using guessed type char buf[16];

//----- (0000000000420B27) ----------------------------------------------------
int goodG2B_135()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodG2BSink(&v1);
}

//----- (0000000000420B4B) ----------------------------------------------------
int goodB2G_124()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_64b_goodB2GSink(&v5);
}
// 420B4B: using guessed type char buf[16];

//----- (0000000000420C7B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_64_good()
{
  goodG2B_135();
  return goodB2G_124();
}

//----- (0000000000420C95) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_14_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647148: using guessed type int globalFive;
// 647150: using guessed type __int64 stdin;

//----- (0000000000420CED) ----------------------------------------------------
int goodB2G1_82()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647148: using guessed type int globalFive;
// 647150: using guessed type __int64 stdin;

//----- (0000000000420D64) ----------------------------------------------------
int goodB2G2_82()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647148: using guessed type int globalFive;
// 647150: using guessed type __int64 stdin;

//----- (0000000000420DCF) ----------------------------------------------------
int goodG2B1_71()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000420E1B) ----------------------------------------------------
int goodG2B2_71()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    v1 = 7;
  result = globalFive;
  if ( globalFive == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 647148: using guessed type int globalFive;

//----- (0000000000420E5B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_14_good()
{
  goodB2G1_82();
  goodB2G2_82();
  goodG2B1_71();
  return goodG2B2_71();
}

//----- (0000000000420E89) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_18_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000420EB5) ----------------------------------------------------
int goodB2G_125()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000420EF3) ----------------------------------------------------
int goodG2B_136()
{
  return printIntLine(2u);
}

//----- (0000000000420F1F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_18_good()
{
  goodB2G_125();
  return goodG2B_136();
}

//----- (0000000000420F39) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54b_badSink(v8);
}
// 420F39: using guessed type char buf[16];

//----- (0000000000421067) ----------------------------------------------------
int goodG2B_137()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodG2BSink(7);
}

//----- (0000000000421089) ----------------------------------------------------
int goodB2G_126()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_54b_goodB2GSink(v8);
}
// 421089: using guessed type char buf[16];

//----- (00000000004211B7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_54_good()
{
  goodG2B_137();
  return goodB2G_126();
}

//----- (00000000004211D1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 % v8);
}
// 4211D1: using guessed type char buf[16];

//----- (000000000042131D) ----------------------------------------------------
int goodB2G1_83()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 42131D: using guessed type char buf[16];

//----- (0000000000421487) ----------------------------------------------------
int goodB2G2_83()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 % v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 421487: using guessed type char buf[16];

//----- (00000000004215E5) ----------------------------------------------------
int goodG2B1_72()
{
  return printIntLine(2u);
}

//----- (000000000042162D) ----------------------------------------------------
int goodG2B2_72()
{
  return printIntLine(2u);
}

//----- (0000000000421669) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good()
{
  goodB2G1_83();
  goodB2G2_83();
  goodG2B1_72();
  return goodG2B2_72();
}

//----- (0000000000421697) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_31_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  v5 = v10;
  return printIntLine(100 % v10);
}
// 421697: using guessed type char buf[16];

//----- (00000000004217D9) ----------------------------------------------------
int goodG2B_138()
{
  return printIntLine(2u);
}

//----- (000000000042180F) ----------------------------------------------------
int goodB2G_127()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  v5 = v10;
  if ( v10 )
    result = printIntLine(100 % v5);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 42180F: using guessed type char buf[16];

//----- (0000000000421963) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_31_good()
{
  goodG2B_138();
  return goodB2G_127();
}

//----- (000000000042197D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_5 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printIntLine(100 % v6);
  return result;
}
// 64713C: using guessed type int staticFive_5;

//----- (0000000000421A05) ----------------------------------------------------
int goodB2G1_84()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_5 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( staticFive_5 != 5 )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 % v6);
  return printLine("This would result in a divide by zero");
}
// 64713C: using guessed type int staticFive_5;

//----- (0000000000421AAB) ----------------------------------------------------
int goodB2G2_84()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( staticFive_5 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticFive_5;
  if ( staticFive_5 == 5 )
  {
    if ( v6 )
      result = printIntLine(100 % v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 64713C: using guessed type int staticFive_5;

//----- (0000000000421B45) ----------------------------------------------------
int goodG2B1_73()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_5 == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 64713C: using guessed type int staticFive_5;

//----- (0000000000421B91) ----------------------------------------------------
int goodG2B2_73()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_5 == 5 )
    v1 = 7;
  result = staticFive_5;
  if ( staticFive_5 == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 64713C: using guessed type int staticFive_5;

//----- (0000000000421BD1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_07_good()
{
  goodB2G1_84();
  goodB2G2_84();
  goodG2B1_73();
  return goodG2B2_73();
}

//----- (0000000000421BFF) ----------------------------------------------------
__int64 badSource_4()
{
  return 0LL;
}

//----- (0000000000421C12) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_4();
  return printIntLine(100 % v1);
}

//----- (0000000000421C42) ----------------------------------------------------
__int64 goodG2BSource_4()
{
  return 7LL;
}

//----- (0000000000421C55) ----------------------------------------------------
int goodG2B_139()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_4();
  return printIntLine(100 % v1);
}

//----- (0000000000421C85) ----------------------------------------------------
__int64 goodB2GSource_4()
{
  return 0LL;
}

//----- (0000000000421C98) ----------------------------------------------------
int goodB2G_128()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_4();
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000421CDA) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_42_good()
{
  goodB2G_128();
  return goodG2B_139();
}

//----- (0000000000421CF4) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000421D19) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000421D3E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_67b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000421D75) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_52b_badSink(v2);
}

//----- (0000000000421DDF) ----------------------------------------------------
int goodG2B_140()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_52b_goodG2BSink(7);
}

//----- (0000000000421E01) ----------------------------------------------------
int goodB2G_129()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_52b_goodB2GSink(v2);
}

//----- (0000000000421E6B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_52_good()
{
  goodG2B_140();
  return goodB2G_129();
}

//----- (0000000000421E85) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_12_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    v1 = 0;
  else
    v1 = 7;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printIntLine(100 % v1);
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000421EFA) ----------------------------------------------------
int goodB2G_130()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printLine("This would result in a divide by zero");
}

//----- (0000000000421F81) ----------------------------------------------------
int goodG2B_141()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  return printIntLine(2u);
}

//----- (0000000000421FE4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_12_good()
{
  goodB2G_130();
  return goodG2B_141();
}

//----- (0000000000421FFE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042201B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000422038) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_54e_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000422067) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 0;
  v2 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_66b_badSink((__int64)&v1);
}

//----- (0000000000422091) ----------------------------------------------------
int goodG2B_142()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_zero_divide_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004220BB) ----------------------------------------------------
int goodB2G_131()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 0;
  v2 = 0;
  return CWE369_Divide_by_Zero__int_zero_divide_66b_goodB2GSink((__int64)&v1);
}

//----- (00000000004220E5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_66_good()
{
  goodG2B_142();
  return goodB2G_131();
}

//----- (00000000004220FF) ----------------------------------------------------
void CWE369_Divide_by_Zero__int_rand_divide_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v5 = v2;
  }
  for ( j = 0; j <= 0; ++j )
    printIntLine(100 / v5);
}

//----- (0000000000422195) ----------------------------------------------------
void goodB2G_132()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v5 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v5 )
      printIntLine(100 / v5);
    else
      printLine("This would result in a divide by zero");
  }
}

//----- (000000000042223D) ----------------------------------------------------
int goodG2B_143()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 / v1);
  return result;
}

//----- (000000000042228B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_17_good()
{
  goodB2G_132();
  return goodG2B_143();
}

//----- (00000000004222A5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_badSink(v9);
}
// 4222A5: using guessed type char buf[16];

//----- (00000000004223D9) ----------------------------------------------------
int goodG2B_144()
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodG2BSink(7);
}

//----- (0000000000422401) ----------------------------------------------------
int goodB2G_133()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_67b_goodB2GSink(v9);
}
// 422401: using guessed type char buf[16];

//----- (0000000000422535) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_67_good()
{
  goodG2B_144();
  return goodB2G_133();
}

//----- (000000000042254F) ----------------------------------------------------
int __fastcall badSink_18(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042256C) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_18)(v2);
}

//----- (00000000004225DF) ----------------------------------------------------
int __fastcall goodG2BSink_18(int a1)
{
  return printIntLine(100 / a1);
}

//----- (00000000004225FC) ----------------------------------------------------
int goodG2B_145()
{
  return goodG2BSink_18(7);
}

//----- (0000000000422627) ----------------------------------------------------
int __fastcall goodB2GSink_12(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000422656) ----------------------------------------------------
__int64 goodB2G_134()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_12)(v2);
}

//----- (00000000004226C9) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_44_good()
{
  goodG2B_145();
  return goodB2G_134();
}

//----- (00000000004226E3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (0000000000422757) ----------------------------------------------------
int goodB2G_135()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004227DD) ----------------------------------------------------
int goodG2B_146()
{
  return printIntLine(2u);
}

//----- (0000000000422809) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_16_good()
{
  goodB2G_135();
  return goodG2B_146();
}

//----- (0000000000422823) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000422840) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042285D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042288C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v6);
  return result;
}

//----- (0000000000422918) ----------------------------------------------------
int goodB2G1_85()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}

//----- (00000000004229C2) ----------------------------------------------------
int goodB2G2_85()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000422A60) ----------------------------------------------------
int goodG2B1_74()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000422AB0) ----------------------------------------------------
int goodG2B2_74()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000422AF4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_11_good()
{
  goodB2G1_85();
  goodB2G2_85();
  goodG2B1_74();
  return goodG2B2_74();
}

//----- (0000000000422B22) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000422B92) ----------------------------------------------------
int goodB2G1_86()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000422C14) ----------------------------------------------------
int goodB2G2_86()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000422C96) ----------------------------------------------------
int goodG2B1_75()
{
  return printIntLine(0xEu);
}

//----- (0000000000422CBE) ----------------------------------------------------
int goodG2B2_75()
{
  return printIntLine(0xEu);
}

//----- (0000000000422CE6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_02_good()
{
  goodB2G1_86();
  goodB2G2_86();
  goodG2B1_75();
  return goodG2B2_75();
}

//----- (0000000000422D14) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_04_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433D10, &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000422D68) ----------------------------------------------------
int goodB2G1_87()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433D10, &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000422DDB) ----------------------------------------------------
int goodB2G2_87()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_433D10, &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000422E42) ----------------------------------------------------
int goodG2B1_76()
{
  return printIntLine(2u);
}

//----- (0000000000422E8A) ----------------------------------------------------
int goodG2B2_76()
{
  return printIntLine(2u);
}

//----- (0000000000422EC6) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_04_good()
{
  goodB2G1_87();
  goodB2G2_87();
  goodG2B1_76();
  return goodG2B2_76();
}

//----- (0000000000422EF4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_31_bad()
{
  int v1; // [rsp+4h] [rbp-Ch]
  int v2; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  v3 = v1;
  v2 = v1;
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000422F40) ----------------------------------------------------
int goodG2B_147()
{
  return printIntLine(2u);
}

//----- (0000000000422F76) ----------------------------------------------------
int goodB2G_136()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int v2; // [rsp+8h] [rbp-8h]
  int v3; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  v3 = v1;
  v2 = v1;
  if ( v1 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000422FD4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_31_good()
{
  goodG2B_147();
  return goodB2G_136();
}

//----- (0000000000422FEE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 647260: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal;

//----- (0000000000423017) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647264: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Global;

//----- (000000000042305E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647268: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global;

//----- (0000000000423099) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 64726C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal;

//----- (00000000004230C2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_52c_badSink(a1);
}

//----- (00000000004230D9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_52c_goodG2BSink(a1);
}

//----- (00000000004230F0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_52b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_divide_52c_goodB2GSink(a1);
}

//----- (0000000000423107) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_17_bad()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 0;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423157) ----------------------------------------------------
int goodB2G_137()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 0;
  for ( j = 0; j <= 0; ++j )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (00000000004231B9) ----------------------------------------------------
int goodG2B_148()
{
  int result; // eax
  int v1; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    v1 = 7;
  for ( j = 0; j <= 0; ++j )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423209) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_17_good()
{
  goodB2G_137();
  return goodG2B_148();
}

//----- (0000000000423223) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53d_badSink(a1);
}

//----- (000000000042323A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodG2BSink(a1);
}

//----- (0000000000423251) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53d_goodB2GSink(a1);
}

//----- (0000000000423268) ----------------------------------------------------
int __fastcall badSink_19(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000423287) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_44_bad()
{
  return badSink_19(0);
}

//----- (00000000004232B2) ----------------------------------------------------
int __fastcall goodG2BSink_19(int a1)
{
  return printIntLine(100 % a1);
}

//----- (00000000004232D1) ----------------------------------------------------
int goodG2B_149()
{
  return goodG2BSink_19(7);
}

//----- (00000000004232FC) ----------------------------------------------------
int __fastcall goodB2GSink_13(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042332D) ----------------------------------------------------
int goodB2G_138()
{
  return goodB2GSink_13(0);
}

//----- (0000000000423358) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_44_good()
{
  goodG2B_149();
  return goodB2G_138();
}

//----- (0000000000423372) ----------------------------------------------------
int __fastcall badSink_20(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042338F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_41_bad()
{
  return badSink_20(0);
}

//----- (00000000004233B1) ----------------------------------------------------
int __fastcall goodG2BSink_20(int a1)
{
  return printIntLine(100 / a1);
}

//----- (00000000004233CE) ----------------------------------------------------
int goodG2B_150()
{
  return goodG2BSink_20(7);
}

//----- (00000000004233F0) ----------------------------------------------------
int __fastcall goodB2GSink_14(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042341F) ----------------------------------------------------
int goodB2G_139()
{
  return goodB2GSink_14(0);
}

//----- (0000000000423441) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_41_good()
{
  goodB2G_139();
  return goodG2B_150();
}

//----- (000000000042345B) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004234BA) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_goodG2BSource()
{
  return 7LL;
}

//----- (00000000004234CD) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_rand_divide_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000042352C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v6);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004235B0) ----------------------------------------------------
int goodB2G1_88()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (0000000000423652) ----------------------------------------------------
int goodB2G2_88()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (00000000004236E8) ----------------------------------------------------
int goodG2B1_77()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (0000000000423730) ----------------------------------------------------
int goodG2B2_77()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 / v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (000000000042376C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_10_good()
{
  goodB2G1_88();
  goodB2G2_88();
  goodG2B1_77();
  return goodG2B2_77();
}

//----- (000000000042379A) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (00000000004237A5) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (00000000004237B0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticReturnsTrue_4();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000042380E) ----------------------------------------------------
int goodB2G1_89()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v1);
  if ( (unsigned int)staticReturnsFalse_4() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (000000000042388B) ----------------------------------------------------
int goodB2G2_89()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = staticReturnsTrue_4();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004238FC) ----------------------------------------------------
int goodG2B1_78()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_4() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_4();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (000000000042394E) ----------------------------------------------------
int goodG2B2_78()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_4() )
    v1 = 7;
  result = staticReturnsTrue_4();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423994) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_08_good()
{
  goodB2G1_89();
  goodB2G2_89();
  goodG2B1_78();
  return goodG2B2_78();
}

//----- (00000000004239C2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_11_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423A08) ----------------------------------------------------
int goodB2G1_90()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000423A6C) ----------------------------------------------------
int goodB2G2_90()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 0;
  result = globalReturnsTrue();
  if ( result )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000423AC4) ----------------------------------------------------
int goodG2B1_79()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423B16) ----------------------------------------------------
int goodG2B2_79()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v1 = 7;
  result = globalReturnsTrue();
  if ( result )
    result = printIntLine(100 % v1);
  return result;
}

//----- (0000000000423B5C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_11_good()
{
  goodB2G1_90();
  goodB2G2_90();
  goodG2B1_79();
  return goodG2B2_79();
}

//----- (0000000000423B8A) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_02_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000423BB4) ----------------------------------------------------
int goodB2G1_91()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000423BF0) ----------------------------------------------------
int goodB2G2_91()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000423C2C) ----------------------------------------------------
int goodG2B1_80()
{
  return printIntLine(2u);
}

//----- (0000000000423C56) ----------------------------------------------------
int goodG2B2_80()
{
  return printIntLine(2u);
}

//----- (0000000000423C80) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_02_good()
{
  goodB2G1_91();
  goodB2G2_91();
  goodG2B1_80();
  return goodG2B2_80();
}

//----- (0000000000423CAE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_51b_badSink(v2);
}

//----- (0000000000423D18) ----------------------------------------------------
int goodG2B_151()
{
  return CWE369_Divide_by_Zero__int_rand_modulo_51b_goodG2BSink(7);
}

//----- (0000000000423D3A) ----------------------------------------------------
int goodB2G_140()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE369_Divide_by_Zero__int_rand_modulo_51b_goodB2GSink(v2);
}

//----- (0000000000423DA4) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_51_good()
{
  goodG2B_151();
  return goodB2G_140();
}

//----- (0000000000423DBE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000423DDD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000423DFC) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000423E2D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54d_badSink(a1);
}

//----- (0000000000423E44) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54d_goodG2BSink(a1);
}

//----- (0000000000423E5B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54d_goodB2GSink(a1);
}

//----- (0000000000423E72) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_badSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal;
  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 64727C: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal;

//----- (0000000000423E9B) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Sink(int a1)
{
  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 % a1);
  return printLine("This would result in a divide by zero");
}
// 647280: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Global;

//----- (0000000000423EE2) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Sink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global;
  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global )
  {
    if ( a1 )
      result = printIntLine(100 % a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647284: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global;

//----- (0000000000423F1D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BSink(int a1)
{
  int result; // eax

  result = CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal;
  if ( CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal )
    result = printIntLine(100 % a1);
  return result;
}
// 647288: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal;

//----- (0000000000423F46) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE369_Divide_by_Zero__int_listen_socket_divide_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 423F46: using guessed type char buf[16];

//----- (000000000042407D) ----------------------------------------------------
int goodG2B_152()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodG2BSink(7);
}

//----- (00000000004240A8) ----------------------------------------------------
__int64 goodB2G_141()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE369_Divide_by_Zero__int_listen_socket_divide_65b_goodB2GSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 4240A8: using guessed type char buf[16];

//----- (00000000004241DF) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_listen_socket_divide_65_good()
{
  goodG2B_152();
  return goodB2G_141();
}

//----- (00000000004241F9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 / v2);
}

//----- (0000000000424269) ----------------------------------------------------
int goodG2B_153()
{
  return printIntLine(0xEu);
}

//----- (0000000000424291) ----------------------------------------------------
int goodB2G_142()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000424313) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_01_good()
{
  goodG2B_153();
  return goodB2G_142();
}

//----- (000000000042432D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042434A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000424367) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000424396) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return printIntLine(100 / v8);
}
// 424396: using guessed type char buf[16];

//----- (00000000004244CC) ----------------------------------------------------
int goodB2G1_92()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 4244CC: using guessed type char buf[16];

//----- (0000000000424614) ----------------------------------------------------
int goodB2G2_92()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( v8 )
    result = printIntLine(100 / v8);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 424614: using guessed type char buf[16];

//----- (000000000042475C) ----------------------------------------------------
int goodG2B1_81()
{
  return printIntLine(0xEu);
}

//----- (0000000000424786) ----------------------------------------------------
int goodG2B2_81()
{
  return printIntLine(0xEu);
}

//----- (00000000004247B0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_15_good()
{
  goodB2G1_92();
  goodB2G2_92();
  goodG2B1_81();
  return goodG2B2_81();
}

//----- (00000000004247DE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_66b_badSink((__int64)&v6);
}

//----- (0000000000424850) ----------------------------------------------------
int goodG2B_154()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 7;
  v2 = 7;
  return CWE369_Divide_by_Zero__int_rand_divide_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000042487A) ----------------------------------------------------
int goodB2G_143()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE369_Divide_by_Zero__int_rand_divide_66b_goodB2GSink((__int64)&v6);
}

//----- (00000000004248EC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_66_good()
{
  goodG2B_154();
  return goodB2G_143();
}

//----- (0000000000424906) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_badSource()
{
  return 0LL;
}

//----- (0000000000424919) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_goodG2BSource()
{
  return 7LL;
}

//----- (000000000042492C) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_zero_modulo_61b_goodB2GSource()
{
  return 0LL;
}

//----- (000000000042493F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_10_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (000000000042497D) ----------------------------------------------------
int goodB2G1_93()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (00000000004249D9) ----------------------------------------------------
int goodB2G2_93()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 0;
  result = globalTrue;
  if ( globalTrue )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (0000000000424A29) ----------------------------------------------------
int goodG2B1_82()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;
// 6472B0: using guessed type int globalFalse;

//----- (0000000000424A73) ----------------------------------------------------
int goodG2B2_82()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    v1 = 7;
  result = globalTrue;
  if ( globalTrue )
    result = printIntLine(100 % v1);
  return result;
}
// 647144: using guessed type int globalTrue;

//----- (0000000000424AB1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_10_good()
{
  goodB2G1_93();
  goodB2G2_93();
  goodG2B1_82();
  return goodG2B2_82();
}

//----- (0000000000424ADF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badSink(v8);
}
// 647260: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_badGlobal;
// 424ADF: using guessed type char buf[16];

//----- (0000000000424C17) ----------------------------------------------------
int goodB2G1_94()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Sink(v8);
}
// 647264: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G1Global;
// 424C17: using guessed type char buf[16];

//----- (0000000000424D4F) ----------------------------------------------------
int goodB2G2_94()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Sink(v8);
}
// 647268: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodB2G2Global;
// 424D4F: using guessed type char buf[16];

//----- (0000000000424E87) ----------------------------------------------------
int goodG2B_155()
{
  CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BSink(7);
}
// 64726C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_goodG2BGlobal;

//----- (0000000000424EB3) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_22_good()
{
  goodB2G1_94();
  goodB2G2_94();
  return goodG2B_155();
}

//----- (0000000000424ED7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_52_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_52b_badSink(0);
}

//----- (0000000000424EF9) ----------------------------------------------------
int goodG2B_156()
{
  return CWE369_Divide_by_Zero__int_zero_divide_52b_goodG2BSink(7);
}

//----- (0000000000424F1B) ----------------------------------------------------
int goodB2G_144()
{
  return CWE369_Divide_by_Zero__int_zero_divide_52b_goodB2GSink(0);
}

//----- (0000000000424F3D) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_52_good()
{
  goodG2B_156();
  return goodB2G_144();
}

//----- (0000000000424F57) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000424F74) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000424F91) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_divide_51b_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000424FC0) ----------------------------------------------------
int badSink_21()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_45_badData);
}
// 647270: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_badData;

//----- (0000000000424FE5) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_45_badData = v2;
  return badSink_21();
}
// 647270: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_badData;

//----- (0000000000425058) ----------------------------------------------------
int goodG2BSink_21()
{
  return printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData);
}
// 647274: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData;

//----- (000000000042507D) ----------------------------------------------------
int goodG2B_157()
{
  CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData = 7;
  return goodG2BSink_21();
}
// 647274: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData;

//----- (00000000004250A8) ----------------------------------------------------
int goodB2GSink_15()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData )
    result = printIntLine(100 % CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 647278: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData;

//----- (00000000004250DF) ----------------------------------------------------
int goodB2G_145()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData = v2;
  return goodB2GSink_15();
}
// 647278: using guessed type int CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData;

//----- (0000000000425152) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_45_good()
{
  goodG2B_157();
  return goodB2G_145();
}

//----- (000000000042516C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v6);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004251F0) ----------------------------------------------------
int goodB2G1_95()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000425292) ----------------------------------------------------
int goodB2G2_95()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000425328) ----------------------------------------------------
int goodG2B1_83()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000425370) ----------------------------------------------------
int goodG2B2_83()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 / v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004253AC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_09_good()
{
  goodB2G1_95();
  goodB2G2_95();
  goodG2B1_83();
  return goodG2B2_83();
}

//----- (00000000004253DA) ----------------------------------------------------
__int64 __fastcall badSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 4253DA: using guessed type char buf[16];

//----- (00000000004254FD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_42_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = badSource_5(0xFFFFFFFF);
  return printIntLine(100 / v1);
}

//----- (000000000042552B) ----------------------------------------------------
__int64 goodG2BSource_5()
{
  return 7LL;
}

//----- (000000000042553E) ----------------------------------------------------
int goodG2B_158()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodG2BSource_5();
  return printIntLine(100 / v1);
}

//----- (000000000042556C) ----------------------------------------------------
__int64 __fastcall goodB2GSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 42556C: using guessed type char buf[16];

//----- (000000000042568F) ----------------------------------------------------
int goodB2G_146()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = goodB2GSource_5(0xFFFFFFFF);
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004256CF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_42_good()
{
  goodB2G_146();
  return goodG2B_158();
}

//----- (00000000004256E9) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54d_badSink(a1);
}

//----- (0000000000425700) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54d_goodG2BSink(a1);
}

//----- (0000000000425717) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_54c_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_zero_modulo_54d_goodB2GSink(a1);
}

//----- (000000000042572E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_16_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000425758) ----------------------------------------------------
int goodB2G_147()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000425794) ----------------------------------------------------
int goodG2B_159()
{
  return printIntLine(0xEu);
}

//----- (00000000004257BE) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_16_good()
{
  goodB2G_147();
  return goodG2B_159();
}

//----- (00000000004257D8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return printIntLine(100 % v2);
}

//----- (000000000042585E) ----------------------------------------------------
int goodB2G1_96()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000425902) ----------------------------------------------------
int goodB2G2_96()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 )
    result = printIntLine(100 % v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042599A) ----------------------------------------------------
int goodG2B1_84()
{
  return printIntLine(2u);
}

//----- (00000000004259E4) ----------------------------------------------------
int goodG2B2_84()
{
  return printIntLine(2u);
}

//----- (0000000000425A22) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_06_good()
{
  goodB2G1_96();
  goodB2G2_96();
  goodG2B1_84();
  return goodG2B2_84();
}

//----- (0000000000425A50) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_divide_61b_badSource();
  return printIntLine(100 / v1);
}

//----- (0000000000425A7E) ----------------------------------------------------
int goodG2B_160()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_divide_61b_goodG2BSource();
  return printIntLine(100 / v1);
}

//----- (0000000000425AAC) ----------------------------------------------------
int goodB2G_148()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_rand_divide_61b_goodB2GSource();
  if ( v1 )
    result = printIntLine(100 / v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000425AEC) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_61_good()
{
  goodG2B_160();
  return goodB2G_148();
}

//----- (0000000000425B06) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_01_bad()
{
  return printIntLine(100 % 0);
}

//----- (0000000000425B30) ----------------------------------------------------
int goodG2B_161()
{
  return printIntLine(2u);
}

//----- (0000000000425B5A) ----------------------------------------------------
int goodB2G_149()
{
  return printLine("This would result in a divide by zero");
}

//----- (0000000000425B96) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_01_good()
{
  goodG2B_161();
  return goodB2G_149();
}

//----- (0000000000425BB0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_badSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000425BCF) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_goodG2BSink(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000425BEE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_zero_modulo_53d_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000425C1F) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_badSink(a1);
}

//----- (0000000000425C36) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodG2BSink(a1);
}

//----- (0000000000425C4D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_modulo_54e_goodB2GSink(a1);
}

//----- (0000000000425C64) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal = 1;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_22_badSink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 64727C: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_badGlobal;

//----- (0000000000425CA6) ----------------------------------------------------
int goodB2G1_97()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Global = 0;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Sink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 647280: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G1Global;

//----- (0000000000425CE8) ----------------------------------------------------
int goodB2G2_97()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global = 1;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Sink(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;
// 647284: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodB2G2Global;

//----- (0000000000425D2A) ----------------------------------------------------
int goodG2B_162()
{
  CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal = 1;
  return CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BSink(7);
}
// 647288: using guessed type int CWE369_Divide_by_Zero__int_fscanf_modulo_22_goodG2BGlobal;

//----- (0000000000425D56) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_22_good()
{
  goodB2G1_97();
  goodB2G2_97();
  return goodG2B_162();
}

//----- (0000000000425D7A) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000425D85) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (0000000000425D90) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticReturnsTrue_5();
  if ( result )
    result = printIntLine(100 / v6);
  return result;
}

//----- (0000000000425E1C) ----------------------------------------------------
int goodB2G1_98()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  if ( (unsigned int)staticReturnsFalse_5() )
    return printLine("Benign, fixed string");
  if ( v6 )
    return printIntLine(100 / v6);
  return printLine("This would result in a divide by zero");
}

//----- (0000000000425EC6) ----------------------------------------------------
int goodB2G2_98()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( (unsigned int)staticReturnsTrue_5() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  result = staticReturnsTrue_5();
  if ( result )
  {
    if ( v6 )
      result = printIntLine(100 / v6);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}

//----- (0000000000425F64) ----------------------------------------------------
int goodG2B1_85()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsFalse_5() )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticReturnsTrue_5();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000425FB4) ----------------------------------------------------
int goodG2B2_85()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_5() )
    v1 = 7;
  result = staticReturnsTrue_5();
  if ( result )
    result = printIntLine(100 / v1);
  return result;
}

//----- (0000000000425FF8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_divide_08_good()
{
  goodB2G1_98();
  goodB2G2_98();
  goodG2B1_85();
  return goodG2B2_85();
}

//----- (0000000000426026) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_61_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_modulo_61b_badSource();
  return printIntLine(100 % v1);
}

//----- (0000000000426056) ----------------------------------------------------
int goodG2B_163()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_modulo_61b_goodG2BSource();
  return printIntLine(100 % v1);
}

//----- (0000000000426086) ----------------------------------------------------
int goodB2G_150()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = CWE369_Divide_by_Zero__int_zero_modulo_61b_goodB2GSource();
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004260C8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_61_good()
{
  goodG2B_163();
  return goodB2G_150();
}

//----- (00000000004260E2) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_13_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v8);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 4260E2: using guessed type char buf[16];

//----- (0000000000426232) ----------------------------------------------------
int goodB2G1_99()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 % v8);
  return printLine("This would result in a divide by zero");
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 426232: using guessed type char buf[16];

//----- (00000000004263A0) ----------------------------------------------------
int goodB2G2_99()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( v8 )
      result = printIntLine(100 % v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;
// 4263A0: using guessed type char buf[16];

//----- (0000000000426502) ----------------------------------------------------
int goodG2B1_86()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042654E) ----------------------------------------------------
int goodG2B2_86()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 7;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printIntLine(100 % v1);
  return result;
}
// 4345F4: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000042658E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_modulo_13_good()
{
  goodB2G1_99();
  goodB2G2_99();
  goodG2B1_86();
  return goodG2B2_86();
}

//----- (00000000004265BC) ----------------------------------------------------
int __fastcall badSink_22(int a1)
{
  return printIntLine(100 % a1);
}

//----- (00000000004265DB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_41_bad()
{
  return badSink_22(0);
}

//----- (00000000004265FD) ----------------------------------------------------
int __fastcall goodG2BSink_22(int a1)
{
  return printIntLine(100 % a1);
}

//----- (000000000042661C) ----------------------------------------------------
int goodG2B_164()
{
  return goodG2BSink_22(7);
}

//----- (000000000042663E) ----------------------------------------------------
int __fastcall goodB2GSink_16(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042666F) ----------------------------------------------------
int goodB2G_151()
{
  return goodB2GSink_16(0);
}

//----- (0000000000426691) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_41_good()
{
  goodB2G_151();
  return goodG2B_164();
}

//----- (00000000004266AB) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53b_badSink(v8);
}
// 4266AB: using guessed type char buf[16];

//----- (00000000004267D9) ----------------------------------------------------
int goodG2B_165()
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodG2BSink(7);
}

//----- (00000000004267FB) ----------------------------------------------------
int goodB2G_152()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodB2GSink(v8);
}
// 4267FB: using guessed type char buf[16];

//----- (0000000000426929) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_53_good()
{
  goodG2B_165();
  return goodB2G_152();
}

//----- (0000000000426943) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (000000000042696C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (0000000000426995) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_modulo_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004269D0) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_51_bad()
{
  return CWE369_Divide_by_Zero__int_zero_divide_51b_badSink(0);
}

//----- (00000000004269F2) ----------------------------------------------------
int goodG2B_166()
{
  return CWE369_Divide_by_Zero__int_zero_divide_51b_goodG2BSink(7);
}

//----- (0000000000426A14) ----------------------------------------------------
int goodB2G_153()
{
  return CWE369_Divide_by_Zero__int_zero_divide_51b_goodB2GSink(0);
}

//----- (0000000000426A36) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_51_good()
{
  goodG2B_166();
  return goodB2G_153();
}

//----- (0000000000426A50) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_05_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue_5;
  if ( staticTrue_5 )
    result = printIntLine(100 / v8);
  return result;
}
// 647140: using guessed type int staticTrue_5;
// 426A50: using guessed type char buf[16];

//----- (0000000000426B9C) ----------------------------------------------------
int goodB2G1_100()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFalse_5 )
    return printLine("Benign, fixed string");
  if ( v8 )
    return printIntLine(100 / v8);
  return printLine("This would result in a divide by zero");
}
// 647140: using guessed type int staticTrue_5;
// 64728C: using guessed type int staticFalse_5;
// 426B9C: using guessed type char buf[16];

//----- (0000000000426D06) ----------------------------------------------------
int goodB2G2_100()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  if ( staticTrue_5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              v8 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    if ( v8 )
      result = printIntLine(100 / v8);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 647140: using guessed type int staticTrue_5;
// 426D06: using guessed type char buf[16];

//----- (0000000000426E64) ----------------------------------------------------
int goodG2B1_87()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFalse_5 )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = staticTrue_5;
  if ( staticTrue_5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647140: using guessed type int staticTrue_5;
// 64728C: using guessed type int staticFalse_5;

//----- (0000000000426EAC) ----------------------------------------------------
int goodG2B2_87()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue_5 )
    v1 = 7;
  result = staticTrue_5;
  if ( staticTrue_5 )
    result = printIntLine(100 / v1);
  return result;
}
// 647140: using guessed type int staticTrue_5;

//----- (0000000000426EE8) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_05_good()
{
  goodB2G1_100();
  goodB2G2_100();
  goodG2B1_87();
  return goodG2B2_87();
}

//----- (0000000000426F16) ----------------------------------------------------
int __fastcall badSink_23(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000426F33) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return badSink_23(v8);
}
// 426F33: using guessed type char buf[16];

//----- (0000000000427061) ----------------------------------------------------
int __fastcall goodG2BSink_23(int a1)
{
  return printIntLine(100 / a1);
}

//----- (000000000042707E) ----------------------------------------------------
int goodG2B_167()
{
  return goodG2BSink_23(7);
}

//----- (00000000004270A0) ----------------------------------------------------
int __fastcall goodB2GSink_17(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004270CF) ----------------------------------------------------
int goodB2G_154()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return goodB2GSink_17(v8);
}
// 4270CF: using guessed type char buf[16];

//----- (00000000004271FD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_41_good()
{
  goodB2G_154();
  return goodG2B_167();
}

//----- (0000000000427217) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54e_badSink(a1);
}

//----- (000000000042722E) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodG2BSink(a1);
}

//----- (0000000000427245) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_54d_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_fscanf_modulo_54e_goodB2GSink(a1);
}

//----- (000000000042725C) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53c_badSink(a1);
}

//----- (0000000000427273) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodG2BSink(a1);
}

//----- (000000000042728A) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_53b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_listen_socket_divide_53c_goodB2GSink(a1);
}

//----- (00000000004272A1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_09_bad()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004272DF) ----------------------------------------------------
int goodB2G1_101()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v1 )
    return printIntLine(100 % v1);
  return printLine("This would result in a divide by zero");
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000042733B) ----------------------------------------------------
int goodB2G2_101()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 0;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( v1 )
      result = printIntLine(100 % v1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000042738B) ----------------------------------------------------
int goodG2B1_88()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;
// 4345F0: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004273D5) ----------------------------------------------------
int goodG2B2_88()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    v1 = 7;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printIntLine(100 % v1);
  return result;
}
// 4345EC: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000427413) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_modulo_09_good()
{
  goodB2G1_101();
  goodB2G2_101();
  goodG2B1_88();
  return goodG2B2_88();
}

//----- (0000000000427441) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (0000000000427472) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (00000000004274A3) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_modulo_64b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004274E6) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_badSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000427503) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodG2BSink(int a1)
{
  return printIntLine(100 / a1);
}

//----- (0000000000427520) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_52c_goodB2GSink(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 / a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (000000000042754F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_16_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return printIntLine(100 % v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000427593) ----------------------------------------------------
int goodB2G_155()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  if ( v1 )
    result = printIntLine(100 % v1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (00000000004275EA) ----------------------------------------------------
int goodG2B_168()
{
  return printIntLine(2u);
}

//----- (0000000000427616) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_fscanf_modulo_16_good()
{
  goodB2G_155();
  return goodG2B_168();
}

//----- (0000000000427630) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_68_badData = v8;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_68b_badSink();
}
// 647308: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_badData;
// 427630: using guessed type char buf[16];

//----- (0000000000427767) ----------------------------------------------------
int goodG2B_169()
{
  CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodG2BData = 7;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodG2BSink();
}
// 647310: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodG2BData;

//----- (0000000000427792) ----------------------------------------------------
int goodB2G_156()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData = v8;
  return CWE369_Divide_by_Zero__int_listen_socket_divide_68b_goodB2GSink();
}
// 64730C: using guessed type int CWE369_Divide_by_Zero__int_listen_socket_divide_68_goodB2GData;
// 427792: using guessed type char buf[16];

//----- (00000000004278C9) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_listen_socket_divide_68_good()
{
  goodG2B_169();
  return goodB2G_156();
}

//----- (00000000004278E3) ----------------------------------------------------
int badSink_24()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_45_badData);
}
// 647290: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_badData;

//----- (0000000000427906) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_45_bad()
{
  CWE369_Divide_by_Zero__int_zero_divide_45_badData = 0;
  return badSink_24();
}
// 647290: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_badData;

//----- (0000000000427931) ----------------------------------------------------
int goodG2BSink_24()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData);
}
// 647294: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData;

//----- (0000000000427954) ----------------------------------------------------
int goodG2B_170()
{
  CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData = 7;
  return goodG2BSink_24();
}
// 647294: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData;

//----- (000000000042797F) ----------------------------------------------------
int goodB2GSink_18()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 647298: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData;

//----- (00000000004279B4) ----------------------------------------------------
int goodB2G_157()
{
  CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData = 0;
  return goodB2GSink_18();
}
// 647298: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData;

//----- (00000000004279DF) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_45_good()
{
  goodG2B_170();
  return goodB2G_157();
}

//----- (00000000004279F9) ----------------------------------------------------
int __fastcall badSink_25(int a1)
{
  int result; // eax

  result = badStatic_5;
  if ( badStatic_5 )
    result = printIntLine(100 / a1);
  return result;
}
// 64729C: using guessed type int badStatic_5;

//----- (0000000000427A20) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_21_bad()
{
  badStatic_5 = 1;
  return badSink_25(0);
}
// 64729C: using guessed type int badStatic_5;

//----- (0000000000427A4C) ----------------------------------------------------
int __fastcall goodB2G1Sink_5(int a1)
{
  if ( goodB2G1Static_5 )
    return printLine("Benign, fixed string");
  if ( a1 )
    return printIntLine(100 / a1);
  return printLine("This would result in a divide by zero");
}
// 6472A0: using guessed type int goodB2G1Static_5;

//----- (0000000000427A91) ----------------------------------------------------
int goodB2G1_102()
{
  goodB2G1Static_5 = 0;
  return goodB2G1Sink_5(0);
}
// 6472A0: using guessed type int goodB2G1Static_5;

//----- (0000000000427ABD) ----------------------------------------------------
int __fastcall goodB2G2Sink_5(int a1)
{
  int result; // eax

  result = goodB2G2Static_5;
  if ( goodB2G2Static_5 )
  {
    if ( a1 )
      result = printIntLine(100 / a1);
    else
      result = printLine("This would result in a divide by zero");
  }
  return result;
}
// 6472A4: using guessed type int goodB2G2Static_5;

//----- (0000000000427AF6) ----------------------------------------------------
int goodB2G2_102()
{
  goodB2G2Static_5 = 1;
  return goodB2G2Sink_5(0);
}
// 6472A4: using guessed type int goodB2G2Static_5;

//----- (0000000000427B22) ----------------------------------------------------
int __fastcall goodG2BSink_25(int a1)
{
  int result; // eax

  result = goodG2BStatic_5;
  if ( goodG2BStatic_5 )
    result = printIntLine(100 / a1);
  return result;
}
// 6472A8: using guessed type int goodG2BStatic_5;

//----- (0000000000427B49) ----------------------------------------------------
int goodG2B_171()
{
  goodG2BStatic_5 = 1;
  return goodG2BSink_25(7);
}
// 6472A8: using guessed type int goodG2BStatic_5;

//----- (0000000000427B75) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_21_good()
{
  goodB2G1_102();
  goodB2G2_102();
  return goodG2B_171();
}

//----- (0000000000427B99) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_badSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54c_badSink(a1);
}

//----- (0000000000427BB0) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_goodG2BSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54c_goodG2BSink(a1);
}

//----- (0000000000427BC7) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_rand_divide_54b_goodB2GSink(int a1)
{
  return CWE369_Divide_by_Zero__int_rand_divide_54c_goodB2GSink(a1);
}

//----- (0000000000427BDE) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_badSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (0000000000427C07) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodG2BSink(_DWORD *a1)
{
  return printIntLine(100 % *a1);
}

//----- (0000000000427C30) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_fscanf_modulo_63b_goodB2GSink(_DWORD *a1)
{
  int result; // eax

  if ( *a1 )
    result = printIntLine(100 % *a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000427C6B) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_68b_badSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_68_badData);
}
// 6472FC: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_badData;

//----- (0000000000427C8E) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_68b_goodG2BSink()
{
  return printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_68_goodG2BData);
}
// 647304: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_goodG2BData;

//----- (0000000000427CB1) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_68b_goodB2GSink()
{
  int result; // eax

  if ( CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData )
    result = printIntLine(100 / CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}
// 647300: using guessed type int CWE369_Divide_by_Zero__int_zero_divide_68_goodB2GData;

//----- (0000000000427CE6) ----------------------------------------------------
int __fastcall badSink_26(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000427D05) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_44_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_26;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000427D46) ----------------------------------------------------
int __fastcall goodG2BSink_26(int a1)
{
  return printIntLine(100 % a1);
}

//----- (0000000000427D65) ----------------------------------------------------
int goodG2B_172()
{
  return goodG2BSink_26(7);
}

//----- (0000000000427D90) ----------------------------------------------------
int __fastcall goodB2GSink_19(int a1)
{
  int result; // eax

  if ( a1 )
    result = printIntLine(100 % a1);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000427DC1) ----------------------------------------------------
__int64 goodB2G_158()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  int (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = goodB2GSink_19;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400B90: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 647150: using guessed type __int64 stdin;

//----- (0000000000427E02) ----------------------------------------------------
__int64 CWE369_Divide_by_Zero__int_fscanf_modulo_44_good()
{
  goodG2B_172();
  return goodB2G_158();
}

//----- (0000000000427E1C) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+4h] [rbp-2Ch]
  int v7; // [rsp+Ch] [rbp-24h]
  int *v8; // [rsp+10h] [rbp-20h]
  int *v9; // [rsp+18h] [rbp-18h]

  v9 = &v6;
  v8 = &v6;
  v6 = -1;
  v7 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  *v9 = v2;
  return printIntLine(100 % *v8);
}

//----- (0000000000427EB9) ----------------------------------------------------
int goodG2B_173()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 7;
  v1 = 7;
  v2 = 7;
  return printIntLine(2u);
}

//----- (0000000000427F0E) ----------------------------------------------------
int goodB2G_159()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+4h] [rbp-2Ch]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+Ch] [rbp-24h]
  int *v9; // [rsp+10h] [rbp-20h]
  int *v10; // [rsp+18h] [rbp-18h]

  v10 = &v6;
  v9 = &v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  v7 = *v9;
  if ( v7 )
    result = printIntLine(100 % v7);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (0000000000427FBD) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_rand_modulo_32_good()
{
  goodG2B_173();
  return goodB2G_159();
}

//----- (0000000000427FD7) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_06_bad()
{
  return printIntLine(100 / 0);
}

//----- (0000000000428013) ----------------------------------------------------
int goodB2G1_103()
{
  return printLine("This would result in a divide by zero");
}

//----- (000000000042806D) ----------------------------------------------------
int goodB2G2_103()
{
  return printLine("This would result in a divide by zero");
}

//----- (00000000004280BB) ----------------------------------------------------
int goodG2B1_89()
{
  return printIntLine(0xEu);
}

//----- (0000000000428103) ----------------------------------------------------
int goodG2B2_89()
{
  return printIntLine(0xEu);
}

//----- (000000000042813F) ----------------------------------------------------
int CWE369_Divide_by_Zero__int_zero_divide_06_good()
{
  goodB2G1_103();
  goodB2G2_103();
  goodG2B1_89();
  return goodG2B2_89();
}

//----- (000000000042816D) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_badSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (0000000000428195) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodG2BSink(__int64 a1)
{
  return printIntLine(100 / *(_DWORD *)(a1 + 8));
}

//----- (00000000004281BD) ----------------------------------------------------
int __fastcall CWE369_Divide_by_Zero__int_listen_socket_divide_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  int v2; // [rsp+1Ch] [rbp-4h]

  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 )
    result = printIntLine(100 / v2);
  else
    result = printLine("This would result in a divide by zero");
  return result;
}

//----- (00000000004281F7) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (0000000000428218) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (0000000000428243) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (0000000000428264) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (0000000000428289) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (00000000004282AF) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (00000000004282D3) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (00000000004282F7) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000042831B) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000042833F) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000042836F) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (0000000000428390) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (00000000004283B4) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (00000000004283DF) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000042840B) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (0000000000428462) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400BC0: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000042853B) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400CB0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004285EF) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (00000000004285FA) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000428605) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000042861B) ----------------------------------------------------
void good1()
{
  ;
}

//----- (0000000000428621) ----------------------------------------------------
void good2()
{
  ;
}

//----- (0000000000428627) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000042862D) ----------------------------------------------------
void good4()
{
  ;
}

//----- (0000000000428633) ----------------------------------------------------
void good5()
{
  ;
}

//----- (0000000000428639) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000042863F) ----------------------------------------------------
void good7()
{
  ;
}

//----- (0000000000428645) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000042864B) ----------------------------------------------------
void good9()
{
  ;
}

//----- (0000000000428651) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (0000000000428657) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000042865D) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (0000000000428663) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (0000000000428669) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000042866F) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (0000000000428675) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000042867B) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (0000000000428681) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (0000000000428687) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (00000000004286BA) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000042875E) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (0000000000428792) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (00000000004287B1) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (0000000000428826) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (0000000000428840) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000042885A) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (0000000000428880) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 646DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 646DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (00000000004288F4) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 1827 function(s) have been successfully decompiled
