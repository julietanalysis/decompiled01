/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400C30();
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// int close(int fd);
// __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD); weak
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function);
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int atoi(const char *nptr);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// in_addr_t inet_addr(const char *cp);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
void CWE617_Reachable_Assertion__zero_17_bad();
void good1();
void CWE617_Reachable_Assertion__zero_17_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_51b_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__connect_socket_17_bad();
void goodG2B();
void CWE617_Reachable_Assertion__connect_socket_17_good();
void CWE617_Reachable_Assertion__fixed_11_bad();
int goodG2B1();
__int64 goodG2B2();
__int64 CWE617_Reachable_Assertion__fixed_11_good();
void CWE617_Reachable_Assertion__zero_06_bad();
__int64 good1_0();
void good2();
void CWE617_Reachable_Assertion__zero_06_good();
void __fastcall CWE617_Reachable_Assertion__fixed_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_53c_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__connect_socket_16_bad();
void goodG2B_0();
void CWE617_Reachable_Assertion__connect_socket_16_good();
__int64 CWE617_Reachable_Assertion__fscanf_05_bad();
int goodG2B1_0();
__int64 goodG2B2_0();
__int64 CWE617_Reachable_Assertion__fscanf_05_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_53b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_63_bad();
__int64 goodG2B_1();
__int64 CWE617_Reachable_Assertion__listen_socket_63_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_52c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__listen_socket_53_bad();
void goodG2B_2();
void CWE617_Reachable_Assertion__listen_socket_53_good();
__int64 CWE617_Reachable_Assertion__fscanf_68_bad();
__int64 goodG2B_3();
__int64 CWE617_Reachable_Assertion__fscanf_68_good();
__int64 CWE617_Reachable_Assertion__listen_socket_34_bad();
__int64 goodG2B_4();
__int64 CWE617_Reachable_Assertion__listen_socket_34_good();
void __fastcall CWE617_Reachable_Assertion__fixed_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_52c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_65_bad();
void goodG2B_5();
void CWE617_Reachable_Assertion__fixed_65_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_54d_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fscanf_54_bad();
void goodG2B_6();
void CWE617_Reachable_Assertion__fscanf_54_good();
void CWE617_Reachable_Assertion__fixed_15_bad();
void goodG2B1_1();
void goodG2B2_1();
void CWE617_Reachable_Assertion__fixed_15_good();
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_66b_goodG2BSink(__int64 a1);
void __fastcall CWE617_Reachable_Assertion__fgets_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_65b_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__connect_socket_51_bad();
void goodG2B_7();
void CWE617_Reachable_Assertion__connect_socket_51_good();
void CWE617_Reachable_Assertion__rand_54_bad();
void goodG2B_8();
void CWE617_Reachable_Assertion__rand_54_good();
__int64 CWE617_Reachable_Assertion__fscanf_67_bad();
__int64 goodG2B_9();
__int64 CWE617_Reachable_Assertion__fscanf_67_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_54e_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_66_bad();
__int64 goodG2B_10();
__int64 CWE617_Reachable_Assertion__listen_socket_66_good();
void CWE617_Reachable_Assertion__fscanf_53_bad();
void goodG2B_11();
void CWE617_Reachable_Assertion__fscanf_53_good();
void __fastcall CWE617_Reachable_Assertion__fgets_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_53c_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_52b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__zero_14_bad();
int good1_1();
void good2_0();
void CWE617_Reachable_Assertion__zero_14_good();
__int64 badSink();
__int64 CWE617_Reachable_Assertion__connect_socket_45_bad();
__int64 goodG2BSink();
__int64 goodG2B_12();
__int64 CWE617_Reachable_Assertion__connect_socket_45_good();
__int64 CWE617_Reachable_Assertion__rand_05_bad();
int goodG2B1_2();
__int64 goodG2B2_2();
__int64 CWE617_Reachable_Assertion__rand_05_good();
void __fastcall CWE617_Reachable_Assertion__rand_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_65b_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__connect_socket_06_bad();
__int64 goodG2B1_3();
__int64 goodG2B2_3();
__int64 CWE617_Reachable_Assertion__connect_socket_06_good();
__int64 CWE617_Reachable_Assertion__zero_12_bad();
__int64 good1_2();
__int64 CWE617_Reachable_Assertion__zero_12_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fscanf_66_bad();
__int64 goodG2B_13();
__int64 CWE617_Reachable_Assertion__fscanf_66_good();
void CWE617_Reachable_Assertion__fixed_05_bad();
int goodG2B1_4();
__int64 goodG2B2_4();
__int64 CWE617_Reachable_Assertion__fixed_05_good();
int CWE617_Reachable_Assertion__fgets_15_bad();
void goodG2B1_5();
void goodG2B2_5();
void CWE617_Reachable_Assertion__fgets_15_good();
void __fastcall CWE617_Reachable_Assertion__fixed_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_53b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_53c_goodG2BSink(int a1);
__int64 __fastcall badSource(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fgets_42_bad();
__int64 goodG2BSource();
__int64 goodG2B_14();
__int64 CWE617_Reachable_Assertion__fgets_42_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_52b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fixed_68_bad();
__int64 goodG2B_15();
__int64 CWE617_Reachable_Assertion__fixed_68_good();
void CWE617_Reachable_Assertion__fixed_34_bad();
__int64 goodG2B_16();
__int64 CWE617_Reachable_Assertion__fixed_34_good();
void CWE617_Reachable_Assertion__zero_04_bad();
__int64 good1_3();
void good2_1();
void CWE617_Reachable_Assertion__zero_04_good();
__int64 CWE617_Reachable_Assertion__fgets_68b_badSink();
__int64 CWE617_Reachable_Assertion__fgets_68b_goodG2BSink();
__int64 CWE617_Reachable_Assertion__rand_65_bad();
void goodG2B_17();
void CWE617_Reachable_Assertion__rand_65_good();
__int64 __fastcall CWE617_Reachable_Assertion__fixed_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_66b_goodG2BSink(__int64 a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_51b_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_10_bad();
int goodG2B1_6();
__int64 goodG2B2_6();
__int64 CWE617_Reachable_Assertion__fixed_10_good();
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_64b_goodG2BSink(_DWORD *a1);
__int64 CWE617_Reachable_Assertion__rand_15_bad();
void goodG2B1_7();
void goodG2B2_7();
void CWE617_Reachable_Assertion__rand_15_good();
int CWE617_Reachable_Assertion__listen_socket_16_bad();
void goodG2B_18();
void CWE617_Reachable_Assertion__listen_socket_16_good();
__int64 badSource_0();
__int64 CWE617_Reachable_Assertion__rand_42_bad();
__int64 goodG2BSource_0();
__int64 goodG2B_19();
__int64 CWE617_Reachable_Assertion__rand_42_good();
__int64 CWE617_Reachable_Assertion__connect_socket_32_bad();
__int64 goodG2B_20();
__int64 CWE617_Reachable_Assertion__connect_socket_32_good();
int CWE617_Reachable_Assertion__fgets_05_bad();
int goodG2B1_8();
__int64 goodG2B2_8();
__int64 CWE617_Reachable_Assertion__fgets_05_good();
void __fastcall CWE617_Reachable_Assertion__fgets_41_badSink(int a1);
void CWE617_Reachable_Assertion__fgets_41_bad();
void __fastcall CWE617_Reachable_Assertion__fgets_41_goodG2BSink(int a1);
void goodG2B_21();
void CWE617_Reachable_Assertion__fgets_41_good();
void CWE617_Reachable_Assertion__fscanf_52_bad();
void goodG2B_22();
void CWE617_Reachable_Assertion__fscanf_52_good();
void __fastcall CWE617_Reachable_Assertion__fgets_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_53b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__rand_68b_badSink();
__int64 CWE617_Reachable_Assertion__rand_68b_goodG2BSink();
void __fastcall CWE617_Reachable_Assertion__fscanf_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_51b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_52c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_53_bad();
void goodG2B_23();
void CWE617_Reachable_Assertion__fixed_53_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_61b_badSource(unsigned int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_61b_goodG2BSource();
int CWE617_Reachable_Assertion__listen_socket_10_bad();
int goodG2B1_9();
__int64 goodG2B2_9();
__int64 CWE617_Reachable_Assertion__listen_socket_10_good();
void __fastcall CWE617_Reachable_Assertion__fgets_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_54d_goodG2BSink(int a1);
void __fastcall badSink_0(int a1);
__int64 CWE617_Reachable_Assertion__fscanf_44_bad();
void __fastcall goodG2BSink_0(int a1);
void goodG2B_24();
void CWE617_Reachable_Assertion__fscanf_44_good();
__int64 __fastcall badSource_1(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fixed_21_bad();
__int64 __fastcall goodG2B1Source(unsigned int a1);
__int64 goodG2B1_10();
__int64 __fastcall goodG2B2Source(unsigned int a1);
__int64 goodG2B2_10();
__int64 CWE617_Reachable_Assertion__fixed_21_good();
void CWE617_Reachable_Assertion__fixed_03_bad();
void goodG2B1_11();
void goodG2B2_11();
void CWE617_Reachable_Assertion__fixed_03_good();
__int64 CWE617_Reachable_Assertion__fscanf_11_bad();
int goodG2B1_12();
__int64 goodG2B2_12();
__int64 CWE617_Reachable_Assertion__fscanf_11_good();
__int64 CWE617_Reachable_Assertion__fscanf_02_bad();
void goodG2B1_13();
void goodG2B2_13();
void CWE617_Reachable_Assertion__fscanf_02_good();
__int64 CWE617_Reachable_Assertion__fixed_63_bad();
__int64 goodG2B_25();
__int64 CWE617_Reachable_Assertion__fixed_63_good();
int CWE617_Reachable_Assertion__listen_socket_01_bad();
void goodG2B_26();
void CWE617_Reachable_Assertion__listen_socket_01_good();
int CWE617_Reachable_Assertion__fgets_13_bad();
int goodG2B1_14();
__int64 goodG2B2_14();
__int64 CWE617_Reachable_Assertion__fgets_13_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_53d_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_18_bad();
void goodG2B_27();
void CWE617_Reachable_Assertion__fixed_18_good();
void CWE617_Reachable_Assertion__connect_socket_54_bad();
void goodG2B_28();
void CWE617_Reachable_Assertion__connect_socket_54_good();
int CWE617_Reachable_Assertion__connect_socket_18_bad();
void goodG2B_29();
void CWE617_Reachable_Assertion__connect_socket_18_good();
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_61b_badSource(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fscanf_61b_goodG2BSource();
__int64 CWE617_Reachable_Assertion__fscanf_10_bad();
int goodG2B1_15();
__int64 goodG2B2_15();
__int64 CWE617_Reachable_Assertion__fscanf_10_good();
void CWE617_Reachable_Assertion__fixed_09_bad();
int goodG2B1_16();
__int64 goodG2B2_16();
__int64 CWE617_Reachable_Assertion__fixed_09_good();
void __noreturn CWE617_Reachable_Assertion__zero_15_bad();
void good1_4();
void good2_2();
void CWE617_Reachable_Assertion__zero_15_good();
void __fastcall CWE617_Reachable_Assertion__rand_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54d_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__listen_socket_07_bad();
int goodG2B1_17();
__int64 goodG2B2_17();
__int64 CWE617_Reachable_Assertion__listen_socket_07_good();
__int64 CWE617_Reachable_Assertion__fixed_68b_badSink();
__int64 CWE617_Reachable_Assertion__fixed_68b_goodG2BSink();
__int64 CWE617_Reachable_Assertion__listen_socket_61_bad();
__int64 goodG2B_30();
__int64 CWE617_Reachable_Assertion__listen_socket_61_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_54c_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_54b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fixed_12_bad();
__int64 goodG2B_31();
__int64 CWE617_Reachable_Assertion__fixed_12_good();
__int64 CWE617_Reachable_Assertion__fscanf_01_bad();
void goodG2B_32();
void CWE617_Reachable_Assertion__fscanf_01_good();
__int64 CWE617_Reachable_Assertion__fscanf_34_bad();
__int64 goodG2B_33();
__int64 CWE617_Reachable_Assertion__fscanf_34_good();
__int64 CWE617_Reachable_Assertion__rand_13_bad();
int goodG2B1_18();
__int64 goodG2B2_18();
__int64 CWE617_Reachable_Assertion__rand_13_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_65b_goodG2BSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_63b_goodG2BSink(_DWORD *a1);
int CWE617_Reachable_Assertion__listen_socket_09_bad();
int goodG2B1_19();
__int64 goodG2B2_19();
__int64 CWE617_Reachable_Assertion__listen_socket_09_good();
__int64 __fastcall badSource_2(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fgets_21_bad();
__int64 __fastcall goodG2B1Source_0(unsigned int a1);
__int64 goodG2B1_20();
__int64 __fastcall goodG2B2Source_0(unsigned int a1);
__int64 goodG2B2_20();
__int64 CWE617_Reachable_Assertion__fgets_21_good();
int CWE617_Reachable_Assertion__fgets_03_bad();
void goodG2B1_21();
void goodG2B2_21();
void CWE617_Reachable_Assertion__fgets_03_good();
__int64 CWE617_Reachable_Assertion__fgets_63_bad();
__int64 goodG2B_34();
__int64 CWE617_Reachable_Assertion__fgets_63_good();
__int64 CWE617_Reachable_Assertion__fscanf_61_bad();
__int64 goodG2B_35();
__int64 CWE617_Reachable_Assertion__fscanf_61_good();
void CWE617_Reachable_Assertion__fixed_17_bad();
void goodG2B_36();
void CWE617_Reachable_Assertion__fixed_17_good();
void __fastcall CWE617_Reachable_Assertion__rand_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_53b_goodG2BSink(int a1);
void __fastcall badSink_1(int a1);
void CWE617_Reachable_Assertion__fixed_44_bad();
void __fastcall goodG2BSink_1(int a1);
void goodG2B_37();
void CWE617_Reachable_Assertion__fixed_44_good();
__int64 CWE617_Reachable_Assertion__rand_22_bad();
__int64 goodG2B1_22();
__int64 goodG2B2_22();
__int64 CWE617_Reachable_Assertion__rand_22_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_54c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__zero_05_bad();
int good1_5();
void good2_3();
void CWE617_Reachable_Assertion__zero_05_good();
void CWE617_Reachable_Assertion__fixed_02_bad();
void goodG2B1_23();
void goodG2B2_23();
void CWE617_Reachable_Assertion__fixed_02_good();
__int64 CWE617_Reachable_Assertion__fscanf_07_bad();
int goodG2B1_24();
__int64 goodG2B2_24();
__int64 CWE617_Reachable_Assertion__fscanf_07_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_41_badSink(int a1);
void CWE617_Reachable_Assertion__fscanf_41_bad();
void __fastcall CWE617_Reachable_Assertion__fscanf_41_goodG2BSink(int a1);
void goodG2B_38();
void CWE617_Reachable_Assertion__fscanf_41_good();
int CWE617_Reachable_Assertion__listen_socket_11_bad();
int goodG2B1_25();
__int64 goodG2B2_25();
__int64 CWE617_Reachable_Assertion__listen_socket_11_good();
__int64 CWE617_Reachable_Assertion__rand_03_bad();
void goodG2B1_26();
void goodG2B2_26();
void CWE617_Reachable_Assertion__rand_03_good();
__int64 CWE617_Reachable_Assertion__connect_socket_65_bad();
void goodG2B_39();
void CWE617_Reachable_Assertion__connect_socket_65_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_54b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__rand_63_bad();
__int64 goodG2B_40();
__int64 CWE617_Reachable_Assertion__rand_63_good();
int CWE617_Reachable_Assertion__fgets_12_bad();
__int64 goodG2B_41();
__int64 CWE617_Reachable_Assertion__fgets_12_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_54d_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__connect_socket_15_bad();
void goodG2B1_27();
void goodG2B2_27();
void CWE617_Reachable_Assertion__connect_socket_15_good();
__int64 CWE617_Reachable_Assertion__connect_socket_68b_badSink();
__int64 CWE617_Reachable_Assertion__connect_socket_68b_goodG2BSink();
__int64 CWE617_Reachable_Assertion__fixed_61b_badSource();
__int64 CWE617_Reachable_Assertion__fixed_61b_goodG2BSource();
__int64 CWE617_Reachable_Assertion__rand_18_bad();
void goodG2B_42();
void CWE617_Reachable_Assertion__rand_18_good();
__int64 __fastcall CWE617_Reachable_Assertion__fgets_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_63b_goodG2BSink(_DWORD *a1);
__int64 __fastcall badSource_3(unsigned int a1);
__int64 CWE617_Reachable_Assertion__connect_socket_42_bad();
__int64 goodG2BSource_1();
__int64 goodG2B_43();
__int64 CWE617_Reachable_Assertion__connect_socket_42_good();
void __fastcall CWE617_Reachable_Assertion__fixed_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_54c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_01_bad();
void goodG2B_44();
void CWE617_Reachable_Assertion__fixed_01_good();
void __fastcall CWE617_Reachable_Assertion__fixed_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_53d_goodG2BSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_66b_goodG2BSink(__int64 a1);
__int64 CWE617_Reachable_Assertion__rand_12_bad();
__int64 goodG2B_45();
__int64 CWE617_Reachable_Assertion__rand_12_good();
void __fastcall badSink_2(int a1);
__int64 CWE617_Reachable_Assertion__fgets_44_bad();
void __fastcall goodG2BSink_2(int a1);
void goodG2B_46();
void CWE617_Reachable_Assertion__fgets_44_good();
__int64 CWE617_Reachable_Assertion__listen_socket_22_bad();
__int64 goodG2B1_28();
__int64 goodG2B2_28();
__int64 CWE617_Reachable_Assertion__listen_socket_22_good();
int CWE617_Reachable_Assertion__fgets_11_bad();
int goodG2B1_29();
__int64 goodG2B2_29();
__int64 CWE617_Reachable_Assertion__fgets_11_good();
int CWE617_Reachable_Assertion__fgets_02_bad();
void goodG2B1_30();
void goodG2B2_30();
void CWE617_Reachable_Assertion__fgets_02_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_54b_goodG2BSink(int a1);
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
void CWE617_Reachable_Assertion__fixed_08_bad();
int goodG2B1_31();
__int64 goodG2B2_31();
__int64 CWE617_Reachable_Assertion__fixed_08_good();
__int64 CWE617_Reachable_Assertion__fixed_61_bad();
__int64 goodG2B_47();
__int64 CWE617_Reachable_Assertion__fixed_61_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_64b_goodG2BSink(_DWORD *a1);
int CWE617_Reachable_Assertion__connect_socket_12_bad();
__int64 goodG2B_48();
__int64 CWE617_Reachable_Assertion__connect_socket_12_good();
int CWE617_Reachable_Assertion__connect_socket_05_bad();
int goodG2B1_32();
__int64 goodG2B2_32();
__int64 CWE617_Reachable_Assertion__connect_socket_05_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_53b_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__fgets_10_bad();
int goodG2B1_33();
__int64 goodG2B2_33();
__int64 CWE617_Reachable_Assertion__fgets_10_good();
void CWE617_Reachable_Assertion__rand_17_bad();
void goodG2B_49();
void CWE617_Reachable_Assertion__rand_17_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__fixed_07_bad();
int goodG2B1_34();
__int64 goodG2B2_34();
__int64 CWE617_Reachable_Assertion__fixed_07_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_65b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__connect_socket_68_bad();
__int64 goodG2B_50();
__int64 CWE617_Reachable_Assertion__connect_socket_68_good();
__int64 CWE617_Reachable_Assertion__rand_02_bad();
void goodG2B1_35();
void goodG2B2_35();
void CWE617_Reachable_Assertion__rand_02_good();
__int64 CWE617_Reachable_Assertion__connect_socket_34_bad();
__int64 goodG2B_51();
__int64 CWE617_Reachable_Assertion__connect_socket_34_good();
int CWE617_Reachable_Assertion__fgets_01_bad();
void goodG2B_52();
void CWE617_Reachable_Assertion__fgets_01_good();
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_goodG2B2Source(unsigned int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_53d_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__rand_53_bad();
void goodG2B_53();
void CWE617_Reachable_Assertion__rand_53_good();
__int64 CWE617_Reachable_Assertion__rand_61b_badSource();
__int64 CWE617_Reachable_Assertion__rand_61b_goodG2BSource();
__int64 CWE617_Reachable_Assertion__rand_10_bad();
int goodG2B1_36();
__int64 goodG2B2_36();
__int64 CWE617_Reachable_Assertion__rand_10_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_65b_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__connect_socket_53_bad();
void goodG2B_54();
void CWE617_Reachable_Assertion__connect_socket_53_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_53c_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fgets_32_bad();
__int64 goodG2B_55();
__int64 CWE617_Reachable_Assertion__fgets_32_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE617_Reachable_Assertion__connect_socket_08_bad();
int goodG2B1_37();
__int64 goodG2B2_37();
__int64 CWE617_Reachable_Assertion__connect_socket_08_good();
__int64 CWE617_Reachable_Assertion__listen_socket_65_bad();
void goodG2B_56();
void CWE617_Reachable_Assertion__listen_socket_65_good();
__int64 CWE617_Reachable_Assertion__rand_01_bad();
void goodG2B_57();
void CWE617_Reachable_Assertion__rand_01_good();
__int64 __fastcall CWE617_Reachable_Assertion__fgets_61b_badSource(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fgets_61b_goodG2BSource();
void __fastcall CWE617_Reachable_Assertion__rand_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_53d_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__listen_socket_15_bad();
void goodG2B1_38();
void goodG2B2_38();
void CWE617_Reachable_Assertion__listen_socket_15_good();
int CWE617_Reachable_Assertion__fgets_07_bad();
int goodG2B1_39();
__int64 goodG2B2_39();
__int64 CWE617_Reachable_Assertion__fgets_07_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_53c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fgets_68_bad();
__int64 goodG2B_58();
__int64 CWE617_Reachable_Assertion__fgets_68_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_66b_goodG2BSink(__int64 a1);
__int64 CWE617_Reachable_Assertion__rand_04_bad();
__int64 goodG2B1_40();
__int64 goodG2B2_40();
__int64 CWE617_Reachable_Assertion__rand_04_good();
__int64 __fastcall badSource_4(unsigned int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_42_bad();
__int64 goodG2BSource_2();
__int64 goodG2B_59();
__int64 CWE617_Reachable_Assertion__listen_socket_42_good();
void __noreturn CWE617_Reachable_Assertion__zero_16_bad();
void good1_6();
void CWE617_Reachable_Assertion__zero_16_good();
__int64 CWE617_Reachable_Assertion__rand_61_bad();
__int64 goodG2B_60();
__int64 CWE617_Reachable_Assertion__rand_61_good();
int CWE617_Reachable_Assertion__fgets_04_bad();
__int64 goodG2B1_41();
__int64 goodG2B2_41();
__int64 CWE617_Reachable_Assertion__fgets_04_good();
__int64 CWE617_Reachable_Assertion__fscanf_65_bad();
void goodG2B_61();
void CWE617_Reachable_Assertion__fscanf_65_good();
__int64 CWE617_Reachable_Assertion__fscanf_16_bad();
void goodG2B_62();
void CWE617_Reachable_Assertion__fscanf_16_good();
void CWE617_Reachable_Assertion__fgets_54_bad();
void goodG2B_63();
void CWE617_Reachable_Assertion__fgets_54_good();
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Source(unsigned int a1);
void CWE617_Reachable_Assertion__fixed_54_bad();
void goodG2B_64();
void CWE617_Reachable_Assertion__fixed_54_good();
__int64 CWE617_Reachable_Assertion__rand_09_bad();
int goodG2B1_42();
__int64 goodG2B2_42();
__int64 CWE617_Reachable_Assertion__rand_09_good();
__int64 CWE617_Reachable_Assertion__fscanf_09_bad();
int goodG2B1_43();
__int64 goodG2B2_43();
__int64 CWE617_Reachable_Assertion__fscanf_09_good();
void __fastcall CWE617_Reachable_Assertion__rand_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_52b_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__connect_socket_07_bad();
int goodG2B1_44();
__int64 goodG2B2_44();
__int64 CWE617_Reachable_Assertion__connect_socket_07_good();
void __fastcall CWE617_Reachable_Assertion__fgets_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_54b_goodG2BSink(int a1);
__int64 __fastcall badSource_5(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fscanf_42_bad();
__int64 goodG2BSource_3();
__int64 goodG2B_65();
__int64 CWE617_Reachable_Assertion__fscanf_42_good();
int CWE617_Reachable_Assertion__listen_socket_05_bad();
int goodG2B1_45();
__int64 goodG2B2_45();
__int64 CWE617_Reachable_Assertion__listen_socket_05_good();
void __fastcall CWE617_Reachable_Assertion__listen_socket_41_badSink(int a1);
void CWE617_Reachable_Assertion__listen_socket_41_bad();
void __fastcall CWE617_Reachable_Assertion__listen_socket_41_goodG2BSink(int a1);
void goodG2B_66();
void CWE617_Reachable_Assertion__listen_socket_41_good();
__int64 CWE617_Reachable_Assertion__fscanf_68b_badSink();
__int64 CWE617_Reachable_Assertion__fscanf_68b_goodG2BSink();
void __fastcall CWE617_Reachable_Assertion__listen_socket_53b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_53b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_65b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_65b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_52c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_68_bad();
__int64 goodG2B_67();
__int64 CWE617_Reachable_Assertion__listen_socket_68_good();
__int64 CWE617_Reachable_Assertion__fixed_22_bad();
__int64 goodG2B1_46();
__int64 goodG2B2_46();
__int64 CWE617_Reachable_Assertion__fixed_22_good();
void __fastcall CWE617_Reachable_Assertion__rand_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54b_goodG2BSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_67b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_54e_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fixed_66_bad();
__int64 goodG2B_68();
__int64 CWE617_Reachable_Assertion__fixed_66_good();
__int64 CWE617_Reachable_Assertion__connect_socket_64_bad();
__int64 goodG2B_69();
__int64 CWE617_Reachable_Assertion__connect_socket_64_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_54e_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__connect_socket_14_bad();
int goodG2B1_47();
__int64 goodG2B2_47();
__int64 CWE617_Reachable_Assertion__connect_socket_14_good();
__int64 __fastcall CWE617_Reachable_Assertion__fgets_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_66b_goodG2BSink(__int64 a1);
void CWE617_Reachable_Assertion__listen_socket_52_bad();
void goodG2B_70();
void CWE617_Reachable_Assertion__listen_socket_52_good();
__int64 CWE617_Reachable_Assertion__rand_07_bad();
int goodG2B1_48();
__int64 goodG2B2_48();
__int64 CWE617_Reachable_Assertion__rand_07_good();
int CWE617_Reachable_Assertion__connect_socket_04_bad();
__int64 goodG2B1_49();
__int64 goodG2B2_49();
__int64 CWE617_Reachable_Assertion__connect_socket_04_good();
__int64 CWE617_Reachable_Assertion__connect_socket_31_bad();
__int64 goodG2B_71();
__int64 CWE617_Reachable_Assertion__connect_socket_31_good();
void __fastcall CWE617_Reachable_Assertion__fixed_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_52b_goodG2BSink(int a1);
__int64 badSink_3();
__int64 CWE617_Reachable_Assertion__listen_socket_45_bad();
__int64 goodG2BSink_3();
__int64 goodG2B_72();
__int64 CWE617_Reachable_Assertion__listen_socket_45_good();
void __fastcall CWE617_Reachable_Assertion__rand_52c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_52c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__zero_07_bad();
int good1_7();
void good2_4();
void CWE617_Reachable_Assertion__zero_07_good();
void CWE617_Reachable_Assertion__fgets_53_bad();
void goodG2B_73();
void CWE617_Reachable_Assertion__fgets_53_good();
void CWE617_Reachable_Assertion__fscanf_51_bad();
void goodG2B_74();
void CWE617_Reachable_Assertion__fscanf_51_good();
int CWE617_Reachable_Assertion__listen_socket_06_bad();
__int64 goodG2B1_50();
__int64 goodG2B2_50();
__int64 CWE617_Reachable_Assertion__listen_socket_06_good();
void CWE617_Reachable_Assertion__fixed_04_bad();
__int64 goodG2B1_51();
__int64 goodG2B2_51();
__int64 CWE617_Reachable_Assertion__fixed_04_good();
__int64 CWE617_Reachable_Assertion__rand_68_bad();
__int64 goodG2B_75();
__int64 CWE617_Reachable_Assertion__rand_68_good();
__int64 CWE617_Reachable_Assertion__rand_34_bad();
__int64 goodG2B_76();
__int64 CWE617_Reachable_Assertion__rand_34_good();
__int64 CWE617_Reachable_Assertion__fixed_67_bad();
__int64 goodG2B_77();
__int64 CWE617_Reachable_Assertion__fixed_67_good();
__int64 CWE617_Reachable_Assertion__connect_socket_67_bad();
__int64 goodG2B_78();
__int64 CWE617_Reachable_Assertion__connect_socket_67_good();
__int64 __fastcall CWE617_Reachable_Assertion__rand_66b_badSink(__int64 a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_66b_goodG2BSink(__int64 a1);
__int64 CWE617_Reachable_Assertion__fgets_34_bad();
__int64 goodG2B_79();
__int64 CWE617_Reachable_Assertion__fgets_34_good();
void __fastcall CWE617_Reachable_Assertion__fgets_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_54e_goodG2BSink(int a1);
__int64 badSink_4();
__int64 CWE617_Reachable_Assertion__fscanf_45_bad();
__int64 goodG2BSink_4();
__int64 goodG2B_80();
__int64 CWE617_Reachable_Assertion__fscanf_45_good();
__int64 CWE617_Reachable_Assertion__fgets_66_bad();
__int64 goodG2B_81();
__int64 CWE617_Reachable_Assertion__fgets_66_good();
__int64 CWE617_Reachable_Assertion__fscanf_06_bad();
__int64 goodG2B1_52();
__int64 goodG2B2_52();
__int64 CWE617_Reachable_Assertion__fscanf_06_good();
void CWE617_Reachable_Assertion__fixed_52_bad();
void goodG2B_82();
void CWE617_Reachable_Assertion__fixed_52_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
__int64 CWE617_Reachable_Assertion__fscanf_08_bad();
int goodG2B1_53();
__int64 goodG2B2_53();
__int64 CWE617_Reachable_Assertion__fscanf_08_good();
void __fastcall CWE617_Reachable_Assertion__fixed_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_51b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__zero_13_bad();
int good1_8();
void good2_5();
void CWE617_Reachable_Assertion__zero_13_good();
void __fastcall CWE617_Reachable_Assertion__rand_41_badSink(int a1);
void CWE617_Reachable_Assertion__rand_41_bad();
void __fastcall CWE617_Reachable_Assertion__rand_41_goodG2BSink(int a1);
void goodG2B_83();
void CWE617_Reachable_Assertion__rand_41_good();
void CWE617_Reachable_Assertion__fixed_16_bad();
void goodG2B_84();
void CWE617_Reachable_Assertion__fixed_16_good();
void __fastcall CWE617_Reachable_Assertion__fgets_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_52b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_53d_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54e_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_54e_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__listen_socket_14_bad();
int goodG2B1_54();
__int64 goodG2B2_54();
__int64 CWE617_Reachable_Assertion__listen_socket_14_good();
__int64 CWE617_Reachable_Assertion__rand_11_bad();
int goodG2B1_55();
__int64 goodG2B2_55();
__int64 CWE617_Reachable_Assertion__rand_11_good();
__int64 CWE617_Reachable_Assertion__listen_socket_32_bad();
__int64 goodG2B_85();
__int64 CWE617_Reachable_Assertion__listen_socket_32_good();
__int64 CWE617_Reachable_Assertion__connect_socket_22_bad();
__int64 goodG2B1_56();
__int64 goodG2B2_56();
__int64 CWE617_Reachable_Assertion__connect_socket_22_good();
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_64b_goodG2BSink(_DWORD *a1);
void CWE617_Reachable_Assertion__fixed_51_bad();
void goodG2B_86();
void CWE617_Reachable_Assertion__fixed_51_good();
__int64 CWE617_Reachable_Assertion__zero_09_bad();
int good1_9();
void good2_6();
void CWE617_Reachable_Assertion__zero_09_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_67b_goodG2BSink(int a1);
void __noreturn CWE617_Reachable_Assertion__zero_03_bad();
void good1_10();
void good2_7();
void CWE617_Reachable_Assertion__zero_03_good();
__int64 CWE617_Reachable_Assertion__connect_socket_66_bad();
__int64 goodG2B_87();
__int64 CWE617_Reachable_Assertion__connect_socket_66_good();
int CWE617_Reachable_Assertion__fgets_18_bad();
void goodG2B_88();
void CWE617_Reachable_Assertion__fgets_18_good();
void CWE617_Reachable_Assertion__fgets_52_bad();
void goodG2B_89();
void CWE617_Reachable_Assertion__fgets_52_good();
void __fastcall CWE617_Reachable_Assertion__fgets_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_51b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fscanf_14_bad();
int goodG2B1_57();
__int64 goodG2B2_57();
__int64 CWE617_Reachable_Assertion__fscanf_14_good();
void __noreturn CWE617_Reachable_Assertion__zero_18_bad();
void good1_11();
void CWE617_Reachable_Assertion__zero_18_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_52b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_52b_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__fgets_16_bad();
void goodG2B_90();
void CWE617_Reachable_Assertion__fgets_16_good();
__int64 badSink_5();
__int64 CWE617_Reachable_Assertion__fixed_45_bad();
__int64 goodG2BSink_5();
__int64 goodG2B_91();
__int64 CWE617_Reachable_Assertion__fixed_45_good();
int CWE617_Reachable_Assertion__listen_socket_13_bad();
int goodG2B1_58();
__int64 goodG2B2_58();
__int64 CWE617_Reachable_Assertion__listen_socket_13_good();
int CWE617_Reachable_Assertion__listen_socket_04_bad();
__int64 goodG2B1_59();
__int64 goodG2B2_59();
__int64 CWE617_Reachable_Assertion__listen_socket_04_good();
__int64 CWE617_Reachable_Assertion__listen_socket_31_bad();
__int64 goodG2B_92();
__int64 CWE617_Reachable_Assertion__listen_socket_31_good();
void CWE617_Reachable_Assertion__fixed_06_bad();
__int64 goodG2B1_60();
__int64 goodG2B2_60();
__int64 CWE617_Reachable_Assertion__fixed_06_good();
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_63b_goodG2BSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_67b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fgets_54c_goodG2BSink(int a1);
void CWE617_Reachable_Assertion__rand_52_bad();
void goodG2B_93();
void CWE617_Reachable_Assertion__rand_52_good();
__int64 CWE617_Reachable_Assertion__fscanf_64_bad();
__int64 goodG2B_94();
__int64 CWE617_Reachable_Assertion__fscanf_64_good();
void __fastcall CWE617_Reachable_Assertion__rand_51b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__rand_51b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_67_bad();
__int64 goodG2B_95();
__int64 CWE617_Reachable_Assertion__listen_socket_67_good();
__int64 CWE617_Reachable_Assertion__fscanf_32_bad();
__int64 goodG2B_96();
__int64 CWE617_Reachable_Assertion__fscanf_32_good();
__int64 CWE617_Reachable_Assertion__rand_16_bad();
void goodG2B_97();
void CWE617_Reachable_Assertion__rand_16_good();
void CWE617_Reachable_Assertion__fgets_51_bad();
void goodG2B_98();
void CWE617_Reachable_Assertion__fgets_51_good();
void CWE617_Reachable_Assertion__fgets_17_bad();
void goodG2B_99();
void CWE617_Reachable_Assertion__fgets_17_good();
__int64 CWE617_Reachable_Assertion__fscanf_04_bad();
__int64 goodG2B1_61();
__int64 goodG2B2_61();
__int64 CWE617_Reachable_Assertion__fscanf_04_good();
__int64 CWE617_Reachable_Assertion__fscanf_31_bad();
__int64 goodG2B_100();
__int64 CWE617_Reachable_Assertion__fscanf_31_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Source(unsigned int a1);
__int64 __fastcall badSource_6(unsigned int a1);
__int64 CWE617_Reachable_Assertion__rand_21_bad();
__int64 __fastcall goodG2B1Source_1(unsigned int a1);
__int64 goodG2B1_62();
__int64 __fastcall goodG2B2Source_1(unsigned int a1);
__int64 goodG2B2_62();
__int64 CWE617_Reachable_Assertion__rand_21_good();
__int64 __fastcall badSource_7(unsigned int a1);
__int64 CWE617_Reachable_Assertion__connect_socket_21_bad();
__int64 __fastcall goodG2B1Source_2(unsigned int a1);
__int64 goodG2B1_63();
__int64 __fastcall goodG2B2Source_2(unsigned int a1);
__int64 goodG2B2_63();
__int64 CWE617_Reachable_Assertion__connect_socket_21_good();
int CWE617_Reachable_Assertion__connect_socket_03_bad();
void goodG2B1_64();
void goodG2B2_64();
void CWE617_Reachable_Assertion__connect_socket_03_good();
__int64 CWE617_Reachable_Assertion__connect_socket_63_bad();
__int64 goodG2B_101();
__int64 CWE617_Reachable_Assertion__connect_socket_63_good();
__int64 __fastcall CWE617_Reachable_Assertion__fixed_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_64b_goodG2BSink(_DWORD *a1);
__int64 CWE617_Reachable_Assertion__zero_11_bad();
int good1_12();
__int64 good2_8();
__int64 CWE617_Reachable_Assertion__zero_11_good();
void __noreturn CWE617_Reachable_Assertion__zero_02_bad();
void good1_13();
void good2_9();
void CWE617_Reachable_Assertion__zero_02_good();
int CWE617_Reachable_Assertion__fgets_06_bad();
__int64 goodG2B1_65();
__int64 goodG2B2_65();
__int64 CWE617_Reachable_Assertion__fgets_06_good();
void CWE617_Reachable_Assertion__rand_51_bad();
void goodG2B_102();
void CWE617_Reachable_Assertion__rand_51_good();
void CWE617_Reachable_Assertion__fixed_14_bad();
int goodG2B1_66();
__int64 goodG2B2_66();
__int64 CWE617_Reachable_Assertion__fixed_14_good();
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_goodG2B2Source(unsigned int a1);
void CWE617_Reachable_Assertion__fixed_32_bad();
__int64 goodG2B_103();
__int64 CWE617_Reachable_Assertion__fixed_32_good();
__int64 CWE617_Reachable_Assertion__zero_10_bad();
int good1_14();
void good2_10();
void CWE617_Reachable_Assertion__zero_10_good();
__int64 badSource_8();
__int64 CWE617_Reachable_Assertion__fixed_42_bad();
__int64 goodG2BSource_4();
__int64 goodG2B_104();
__int64 CWE617_Reachable_Assertion__fixed_42_good();
__int64 badSink_6();
__int64 CWE617_Reachable_Assertion__rand_45_bad();
__int64 goodG2BSink_6();
__int64 goodG2B_105();
__int64 CWE617_Reachable_Assertion__rand_45_good();
__int64 __fastcall CWE617_Reachable_Assertion__fixed_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_67b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__rand_06_bad();
__int64 goodG2B1_67();
__int64 goodG2B2_67();
__int64 CWE617_Reachable_Assertion__rand_06_good();
__int64 CWE617_Reachable_Assertion__fixed_64_bad();
__int64 goodG2B_106();
__int64 CWE617_Reachable_Assertion__fixed_64_good();
void __noreturn CWE617_Reachable_Assertion__zero_01_bad();
void good1_15();
void CWE617_Reachable_Assertion__zero_01_good();
void CWE617_Reachable_Assertion__connect_socket_52_bad();
void goodG2B_107();
void CWE617_Reachable_Assertion__connect_socket_52_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_41_badSink(int a1);
void CWE617_Reachable_Assertion__connect_socket_41_bad();
void __fastcall CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(int a1);
void goodG2B_108();
void CWE617_Reachable_Assertion__connect_socket_41_good();
__int64 __fastcall CWE617_Reachable_Assertion__fgets_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_64b_goodG2BSink(_DWORD *a1);
void __fastcall badSink_7(int a1);
__int64 CWE617_Reachable_Assertion__rand_44_bad();
void __fastcall goodG2BSink_7(int a1);
void goodG2B_109();
void CWE617_Reachable_Assertion__rand_44_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_54c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_54c_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fscanf_22_bad();
__int64 goodG2B1_68();
__int64 goodG2B2_68();
__int64 CWE617_Reachable_Assertion__fscanf_22_good();
void CWE617_Reachable_Assertion__fixed_31_bad();
__int64 goodG2B_110();
__int64 CWE617_Reachable_Assertion__fixed_31_good();
void CWE617_Reachable_Assertion__listen_socket_17_bad();
void goodG2B_111();
void CWE617_Reachable_Assertion__listen_socket_17_good();
void __fastcall badSink_8(int a1);
__int64 CWE617_Reachable_Assertion__connect_socket_44_bad();
void __fastcall goodG2BSink_8(int a1);
void goodG2B_112();
void CWE617_Reachable_Assertion__connect_socket_44_good();
int CWE617_Reachable_Assertion__fgets_14_bad();
int goodG2B1_69();
__int64 goodG2B2_69();
__int64 CWE617_Reachable_Assertion__fgets_14_good();
int CWE617_Reachable_Assertion__fgets_09_bad();
int goodG2B1_70();
__int64 goodG2B2_70();
__int64 CWE617_Reachable_Assertion__fgets_09_good();
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_63b_goodG2BSink(_DWORD *a1);
int CWE617_Reachable_Assertion__connect_socket_11_bad();
int goodG2B1_71();
__int64 goodG2B2_71();
__int64 CWE617_Reachable_Assertion__connect_socket_11_good();
int CWE617_Reachable_Assertion__connect_socket_02_bad();
void goodG2B1_72();
void goodG2B2_72();
void CWE617_Reachable_Assertion__connect_socket_02_good();
void __fastcall CWE617_Reachable_Assertion__fscanf_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fscanf_54d_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__fscanf_15_bad();
void goodG2B1_73();
void goodG2B2_73();
void CWE617_Reachable_Assertion__fscanf_15_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
__int64 CWE617_Reachable_Assertion__zero_08_bad();
int good1_16();
__int64 good2_11();
__int64 CWE617_Reachable_Assertion__zero_08_good();
__int64 __fastcall CWE617_Reachable_Assertion__rand_64b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_64b_goodG2BSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_67b_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_68b_badSink();
__int64 CWE617_Reachable_Assertion__listen_socket_68b_goodG2BSink();
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_61b_badSource(unsigned int a1);
__int64 CWE617_Reachable_Assertion__connect_socket_61b_goodG2BSource();
int CWE617_Reachable_Assertion__connect_socket_10_bad();
int goodG2B1_74();
__int64 goodG2B2_74();
__int64 CWE617_Reachable_Assertion__connect_socket_10_good();
__int64 CWE617_Reachable_Assertion__fgets_64_bad();
__int64 goodG2B_113();
__int64 CWE617_Reachable_Assertion__fgets_64_good();
__int64 CWE617_Reachable_Assertion__fscanf_13_bad();
int goodG2B1_75();
__int64 goodG2B2_75();
__int64 CWE617_Reachable_Assertion__fscanf_13_good();
__int64 CWE617_Reachable_Assertion__rand_14_bad();
int goodG2B1_76();
__int64 goodG2B2_76();
__int64 CWE617_Reachable_Assertion__rand_14_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
__int64 CWE617_Reachable_Assertion__rand_08_bad();
int goodG2B1_77();
__int64 goodG2B2_77();
__int64 CWE617_Reachable_Assertion__rand_08_good();
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_63b_goodG2BSink(_DWORD *a1);
__int64 CWE617_Reachable_Assertion__rand_32_bad();
__int64 goodG2B_114();
__int64 CWE617_Reachable_Assertion__rand_32_good();
__int64 __fastcall badSource_9(unsigned int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_21_bad();
__int64 __fastcall goodG2B1Source_3(unsigned int a1);
__int64 goodG2B1_78();
__int64 __fastcall goodG2B2Source_3(unsigned int a1);
__int64 goodG2B2_78();
__int64 CWE617_Reachable_Assertion__listen_socket_21_good();
int CWE617_Reachable_Assertion__listen_socket_03_bad();
void goodG2B1_79();
void goodG2B2_79();
void CWE617_Reachable_Assertion__listen_socket_03_good();
int CWE617_Reachable_Assertion__connect_socket_01_bad();
void goodG2B_115();
void CWE617_Reachable_Assertion__connect_socket_01_good();
__int64 CWE617_Reachable_Assertion__fgets_31_bad();
__int64 goodG2B_116();
__int64 CWE617_Reachable_Assertion__fgets_31_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE617_Reachable_Assertion__fgets_08_bad();
int goodG2B1_80();
__int64 goodG2B2_80();
__int64 CWE617_Reachable_Assertion__fgets_08_good();
void __fastcall CWE617_Reachable_Assertion__connect_socket_53d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__connect_socket_53d_goodG2BSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_67b_badSink(int a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_67b_goodG2BSink(int a1);
int CWE617_Reachable_Assertion__listen_socket_18_bad();
void goodG2B_117();
void CWE617_Reachable_Assertion__listen_socket_18_good();
void CWE617_Reachable_Assertion__listen_socket_51_bad();
void goodG2B_118();
void CWE617_Reachable_Assertion__listen_socket_51_good();
__int64 CWE617_Reachable_Assertion__rand_64_bad();
__int64 goodG2B_119();
__int64 CWE617_Reachable_Assertion__rand_64_good();
__int64 CWE617_Reachable_Assertion__connect_socket_61_bad();
__int64 goodG2B_120();
__int64 CWE617_Reachable_Assertion__connect_socket_61_good();
__int64 CWE617_Reachable_Assertion__rand_67_bad();
__int64 goodG2B_121();
__int64 CWE617_Reachable_Assertion__rand_67_good();
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_goodG2B2Source(unsigned int a1);
__int64 __fastcall badSource_10(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fscanf_21_bad();
__int64 __fastcall goodG2B1Source_4(unsigned int a1);
__int64 goodG2B1_81();
__int64 __fastcall goodG2B2Source_4(unsigned int a1);
__int64 goodG2B2_81();
__int64 CWE617_Reachable_Assertion__fscanf_21_good();
__int64 CWE617_Reachable_Assertion__fscanf_03_bad();
void goodG2B1_82();
void goodG2B2_82();
void CWE617_Reachable_Assertion__fscanf_03_good();
__int64 CWE617_Reachable_Assertion__fscanf_63_bad();
__int64 goodG2B_122();
__int64 CWE617_Reachable_Assertion__fscanf_63_good();
void __fastcall CWE617_Reachable_Assertion__fixed_41_badSink(int a1);
void CWE617_Reachable_Assertion__fixed_41_bad();
void __fastcall CWE617_Reachable_Assertion__fixed_41_goodG2BSink(int a1);
void goodG2B_123();
void CWE617_Reachable_Assertion__fixed_41_good();
void CWE617_Reachable_Assertion__listen_socket_54_bad();
void goodG2B_124();
void CWE617_Reachable_Assertion__listen_socket_54_good();
__int64 CWE617_Reachable_Assertion__rand_31_bad();
__int64 goodG2B_125();
__int64 CWE617_Reachable_Assertion__rand_31_good();
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_badSource(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_goodG2B1Source(unsigned int a1);
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_goodG2B2Source(unsigned int a1);
__int64 CWE617_Reachable_Assertion__fgets_67_bad();
__int64 goodG2B_126();
__int64 CWE617_Reachable_Assertion__fgets_67_good();
int CWE617_Reachable_Assertion__listen_socket_12_bad();
__int64 goodG2B_127();
__int64 CWE617_Reachable_Assertion__listen_socket_12_good();
__int64 CWE617_Reachable_Assertion__fgets_61_bad();
__int64 goodG2B_128();
__int64 CWE617_Reachable_Assertion__fgets_61_good();
int CWE617_Reachable_Assertion__connect_socket_09_bad();
int goodG2B1_83();
__int64 goodG2B2_83();
__int64 CWE617_Reachable_Assertion__connect_socket_09_good();
__int64 CWE617_Reachable_Assertion__fscanf_18_bad();
void goodG2B_129();
void CWE617_Reachable_Assertion__fscanf_18_good();
__int64 CWE617_Reachable_Assertion__rand_66_bad();
__int64 goodG2B_130();
__int64 CWE617_Reachable_Assertion__rand_66_good();
void __fastcall CWE617_Reachable_Assertion__fixed_54d_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_54d_goodG2BSink(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_64_bad();
__int64 goodG2B_131();
__int64 CWE617_Reachable_Assertion__listen_socket_64_good();
int CWE617_Reachable_Assertion__connect_socket_13_bad();
int goodG2B1_84();
__int64 goodG2B2_84();
__int64 CWE617_Reachable_Assertion__connect_socket_13_good();
void CWE617_Reachable_Assertion__fixed_13_bad();
int goodG2B1_85();
__int64 goodG2B2_85();
__int64 CWE617_Reachable_Assertion__fixed_13_good();
__int64 CWE617_Reachable_Assertion__fscanf_12_bad();
__int64 goodG2B_132();
__int64 CWE617_Reachable_Assertion__fscanf_12_good();
__int64 __fastcall CWE617_Reachable_Assertion__fixed_63b_badSink(_DWORD *a1);
__int64 __fastcall CWE617_Reachable_Assertion__fixed_63b_goodG2BSink(_DWORD *a1);
void __fastcall badSink_9(int a1);
__int64 CWE617_Reachable_Assertion__listen_socket_44_bad();
void __fastcall goodG2BSink_9(int a1);
void goodG2B_133();
void CWE617_Reachable_Assertion__listen_socket_44_good();
__int64 CWE617_Reachable_Assertion__fgets_22_bad();
__int64 goodG2B1_86();
__int64 goodG2B2_86();
__int64 CWE617_Reachable_Assertion__fgets_22_good();
int CWE617_Reachable_Assertion__listen_socket_02_bad();
void goodG2B1_87();
void goodG2B2_87();
void CWE617_Reachable_Assertion__listen_socket_02_good();
void __fastcall CWE617_Reachable_Assertion__fixed_54b_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__fixed_54b_goodG2BSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_53c_badSink(int a1);
void __fastcall CWE617_Reachable_Assertion__listen_socket_53c_goodG2BSink(int a1);
__int64 badSink_10();
__int64 CWE617_Reachable_Assertion__fgets_45_bad();
__int64 goodG2BSink_10();
__int64 goodG2B_134();
__int64 CWE617_Reachable_Assertion__fgets_45_good();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE617_Reachable_Assertion__listen_socket_08_bad();
int goodG2B1_88();
__int64 goodG2B2_88();
__int64 CWE617_Reachable_Assertion__listen_socket_08_good();
__int64 CWE617_Reachable_Assertion__fgets_65_bad();
void goodG2B_135();
void CWE617_Reachable_Assertion__fgets_65_good();
__int64 CWE617_Reachable_Assertion__fscanf_17_bad();
void goodG2B_136();
void CWE617_Reachable_Assertion__fscanf_17_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_17();
void good2_12();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_4228E4; // weak
_UNKNOWN unk_423CC8; // weak
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_633010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticTrue_2 = 1; // weak
int staticFive = 5; // weak
int staticTrue_3 = 1; // weak
int staticFive_0 = 5; // weak
int staticTrue_4 = 1; // weak
int staticFive_1 = 5; // weak
int staticFive_2 = 5; // weak
int staticFive_3 = 5; // weak
int staticTrue_5 = 1; // weak
int staticFive_4 = 5; // weak
int staticFive_5 = 5; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int staticFalse; // weak
int CWE617_Reachable_Assertion__connect_socket_45_badData; // weak
int CWE617_Reachable_Assertion__connect_socket_45_goodG2BData; // weak
int staticFalse_0; // weak
int staticFalse_1; // weak
int staticFalse_2; // weak
int badStatic; // weak
int goodG2B1Static; // weak
int goodG2B2Static; // weak
int badStatic_0; // weak
int goodG2B1Static_0; // weak
int goodG2B2Static_0; // weak
int CWE617_Reachable_Assertion__rand_22_badGlobal; // weak
int CWE617_Reachable_Assertion__rand_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__rand_22_goodG2B2Global; // weak
int staticFalse_3; // weak
int CWE617_Reachable_Assertion__listen_socket_22_badGlobal; // weak
int CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Global; // weak
int staticFalse_4; // weak
int staticFalse_5; // weak
int CWE617_Reachable_Assertion__fixed_22_badGlobal; // weak
int CWE617_Reachable_Assertion__fixed_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__fixed_22_goodG2B2Global; // weak
int CWE617_Reachable_Assertion__listen_socket_45_badData; // weak
int CWE617_Reachable_Assertion__listen_socket_45_goodG2BData; // weak
int CWE617_Reachable_Assertion__fscanf_45_badData; // weak
int CWE617_Reachable_Assertion__fscanf_45_goodG2BData; // weak
int CWE617_Reachable_Assertion__connect_socket_22_badGlobal; // weak
int CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global; // weak
int CWE617_Reachable_Assertion__fixed_45_badData; // weak
int CWE617_Reachable_Assertion__fixed_45_goodG2BData; // weak
int badStatic_1; // weak
int goodG2B1Static_1; // weak
int goodG2B2Static_1; // weak
int badStatic_2; // weak
int goodG2B1Static_2; // weak
int goodG2B2Static_2; // weak
int CWE617_Reachable_Assertion__rand_45_badData; // weak
int CWE617_Reachable_Assertion__rand_45_goodG2BData; // weak
int CWE617_Reachable_Assertion__fscanf_22_badGlobal; // weak
int CWE617_Reachable_Assertion__fscanf_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__fscanf_22_goodG2B2Global; // weak
int badStatic_3; // weak
int goodG2B1Static_3; // weak
int goodG2B2Static_3; // weak
int badStatic_4; // weak
int goodG2B1Static_4; // weak
int goodG2B2Static_4; // weak
int CWE617_Reachable_Assertion__fgets_22_badGlobal; // weak
int CWE617_Reachable_Assertion__fgets_22_goodG2B1Global; // weak
int CWE617_Reachable_Assertion__fgets_22_goodG2B2Global; // weak
int CWE617_Reachable_Assertion__fgets_45_badData; // weak
int CWE617_Reachable_Assertion__fgets_45_goodG2BData; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
int CWE617_Reachable_Assertion__fscanf_68_badData; // weak
int CWE617_Reachable_Assertion__fscanf_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__fixed_68_badData; // weak
int CWE617_Reachable_Assertion__fixed_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__connect_socket_68_badData; // weak
int CWE617_Reachable_Assertion__connect_socket_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__fgets_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__fgets_68_badData; // weak
int CWE617_Reachable_Assertion__listen_socket_68_badData; // weak
int CWE617_Reachable_Assertion__listen_socket_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__rand_68_goodG2BData; // weak
int CWE617_Reachable_Assertion__rand_68_badData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400C10) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400E60: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400C30) ----------------------------------------------------
__int64 sub_400C30()
{
  return qword_633010();
}
// 633010: using guessed type __int64 (*qword_633010)(void);

//----- (0000000000400E70) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400E76: positive sp value 8 has been found

//----- (0000000000400EA0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6500727LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6500727LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000400ED0) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400F10) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 633178: using guessed type char completed_6355;

//----- (0000000000400F30) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400F30: could not find valid save-restore pair for rbp

//----- (0000000000400F5D) ----------------------------------------------------
int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE617_Reachable_Assertion__fgets_12_good();");
  CWE617_Reachable_Assertion__fgets_12_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_16_good();");
  CWE617_Reachable_Assertion__fgets_16_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_14_good();");
  CWE617_Reachable_Assertion__fscanf_14_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_22_good();");
  CWE617_Reachable_Assertion__connect_socket_22_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_42_good();");
  CWE617_Reachable_Assertion__connect_socket_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_41_good();");
  CWE617_Reachable_Assertion__fgets_41_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_18_good();");
  CWE617_Reachable_Assertion__connect_socket_18_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_03_good();");
  CWE617_Reachable_Assertion__rand_03_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_07_good();");
  CWE617_Reachable_Assertion__fscanf_07_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_34_good();");
  CWE617_Reachable_Assertion__connect_socket_34_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_68_good();");
  CWE617_Reachable_Assertion__fgets_68_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_14_good();");
  CWE617_Reachable_Assertion__fgets_14_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_15_good();");
  CWE617_Reachable_Assertion__fgets_15_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_61_good();");
  CWE617_Reachable_Assertion__fixed_61_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_64_good();");
  CWE617_Reachable_Assertion__rand_64_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_66_good();");
  CWE617_Reachable_Assertion__fgets_66_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_53_good();");
  CWE617_Reachable_Assertion__fgets_53_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_54_good();");
  CWE617_Reachable_Assertion__rand_54_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_66_good();");
  CWE617_Reachable_Assertion__fixed_66_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_31_good();");
  CWE617_Reachable_Assertion__connect_socket_31_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_42_good();");
  CWE617_Reachable_Assertion__rand_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_05_good();");
  CWE617_Reachable_Assertion__fscanf_05_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_44_good();");
  CWE617_Reachable_Assertion__connect_socket_44_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_18_good();");
  CWE617_Reachable_Assertion__rand_18_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_64_good();");
  CWE617_Reachable_Assertion__fgets_64_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_01_good();");
  CWE617_Reachable_Assertion__fgets_01_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_31_good();");
  CWE617_Reachable_Assertion__fscanf_31_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_05_good();");
  CWE617_Reachable_Assertion__listen_socket_05_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_05_good();");
  CWE617_Reachable_Assertion__rand_05_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_15_good();");
  CWE617_Reachable_Assertion__fixed_15_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_54_good();");
  CWE617_Reachable_Assertion__fixed_54_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_61_good();");
  CWE617_Reachable_Assertion__rand_61_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_13_good();");
  CWE617_Reachable_Assertion__listen_socket_13_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_66_good();");
  CWE617_Reachable_Assertion__rand_66_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_18_good();");
  CWE617_Reachable_Assertion__fixed_18_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_07_good();");
  CWE617_Reachable_Assertion__rand_07_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_22_good();");
  CWE617_Reachable_Assertion__fixed_22_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_03_good();");
  CWE617_Reachable_Assertion__fscanf_03_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_54_good();");
  CWE617_Reachable_Assertion__fscanf_54_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_08_good();");
  CWE617_Reachable_Assertion__listen_socket_08_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_15_good();");
  CWE617_Reachable_Assertion__fscanf_15_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_02_good();");
  CWE617_Reachable_Assertion__connect_socket_02_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_18_good();");
  CWE617_Reachable_Assertion__zero_18_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_17_good();");
  CWE617_Reachable_Assertion__rand_17_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_02_good();");
  CWE617_Reachable_Assertion__fixed_02_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_42_good();");
  CWE617_Reachable_Assertion__fscanf_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_06_good();");
  CWE617_Reachable_Assertion__fscanf_06_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_21_good();");
  CWE617_Reachable_Assertion__rand_21_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_65_good();");
  CWE617_Reachable_Assertion__listen_socket_65_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_08_good();");
  CWE617_Reachable_Assertion__zero_08_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_54_good();");
  CWE617_Reachable_Assertion__connect_socket_54_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_11_good();");
  CWE617_Reachable_Assertion__zero_11_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_52_good();");
  CWE617_Reachable_Assertion__rand_52_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_65_good();");
  CWE617_Reachable_Assertion__rand_65_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_13_good();");
  CWE617_Reachable_Assertion__fixed_13_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_03_good();");
  CWE617_Reachable_Assertion__fixed_03_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_51_good();");
  CWE617_Reachable_Assertion__fscanf_51_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_67_good();");
  CWE617_Reachable_Assertion__fgets_67_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_04_good();");
  CWE617_Reachable_Assertion__fgets_04_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_34_good();");
  CWE617_Reachable_Assertion__rand_34_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_31_good();");
  CWE617_Reachable_Assertion__fixed_31_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_14_good();");
  CWE617_Reachable_Assertion__zero_14_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_53_good();");
  CWE617_Reachable_Assertion__listen_socket_53_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_03_good();");
  CWE617_Reachable_Assertion__listen_socket_03_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_10_good();");
  CWE617_Reachable_Assertion__fgets_10_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_32_good();");
  CWE617_Reachable_Assertion__fixed_32_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_01_good();");
  CWE617_Reachable_Assertion__listen_socket_01_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_11_good();");
  CWE617_Reachable_Assertion__connect_socket_11_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_16_good();");
  CWE617_Reachable_Assertion__fixed_16_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_45_good();");
  CWE617_Reachable_Assertion__connect_socket_45_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_32_good();");
  CWE617_Reachable_Assertion__listen_socket_32_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_34_good();");
  CWE617_Reachable_Assertion__fscanf_34_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_34_good();");
  CWE617_Reachable_Assertion__listen_socket_34_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_61_good();");
  CWE617_Reachable_Assertion__listen_socket_61_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_32_good();");
  CWE617_Reachable_Assertion__connect_socket_32_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_18_good();");
  CWE617_Reachable_Assertion__listen_socket_18_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_04_good();");
  CWE617_Reachable_Assertion__connect_socket_04_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_09_good();");
  CWE617_Reachable_Assertion__fixed_09_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_67_good();");
  CWE617_Reachable_Assertion__listen_socket_67_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_15_good();");
  CWE617_Reachable_Assertion__connect_socket_15_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_32_good();");
  CWE617_Reachable_Assertion__fgets_32_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_04_good();");
  CWE617_Reachable_Assertion__fscanf_04_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_10_good();");
  CWE617_Reachable_Assertion__listen_socket_10_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_09_good();");
  CWE617_Reachable_Assertion__connect_socket_09_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_67_good();");
  CWE617_Reachable_Assertion__fixed_67_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_05_good();");
  CWE617_Reachable_Assertion__connect_socket_05_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_16_good();");
  CWE617_Reachable_Assertion__rand_16_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_13_good();");
  CWE617_Reachable_Assertion__fgets_13_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_12_good();");
  CWE617_Reachable_Assertion__fscanf_12_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_63_good();");
  CWE617_Reachable_Assertion__fscanf_63_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_09_good();");
  CWE617_Reachable_Assertion__listen_socket_09_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_68_good();");
  CWE617_Reachable_Assertion__rand_68_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_02_good();");
  CWE617_Reachable_Assertion__fgets_02_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_31_good();");
  CWE617_Reachable_Assertion__rand_31_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_21_good();");
  CWE617_Reachable_Assertion__fgets_21_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_65_good();");
  CWE617_Reachable_Assertion__fixed_65_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_17_good();");
  CWE617_Reachable_Assertion__zero_17_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_61_good();");
  CWE617_Reachable_Assertion__connect_socket_61_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_04_good();");
  CWE617_Reachable_Assertion__fixed_04_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_01_good();");
  CWE617_Reachable_Assertion__zero_01_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_53_good();");
  CWE617_Reachable_Assertion__connect_socket_53_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_42_good();");
  CWE617_Reachable_Assertion__fgets_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_22_good();");
  CWE617_Reachable_Assertion__fgets_22_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_07_good();");
  CWE617_Reachable_Assertion__zero_07_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_10_good();");
  CWE617_Reachable_Assertion__fscanf_10_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_45_good();");
  CWE617_Reachable_Assertion__fgets_45_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_52_good();");
  CWE617_Reachable_Assertion__listen_socket_52_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_41_good();");
  CWE617_Reachable_Assertion__connect_socket_41_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_21_good();");
  CWE617_Reachable_Assertion__connect_socket_21_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_44_good();");
  CWE617_Reachable_Assertion__fgets_44_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_11_good();");
  CWE617_Reachable_Assertion__listen_socket_11_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_12_good();");
  CWE617_Reachable_Assertion__connect_socket_12_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_68_good();");
  CWE617_Reachable_Assertion__fixed_68_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_13_good();");
  CWE617_Reachable_Assertion__fscanf_13_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_68_good();");
  CWE617_Reachable_Assertion__connect_socket_68_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_10_good();");
  CWE617_Reachable_Assertion__connect_socket_10_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_53_good();");
  CWE617_Reachable_Assertion__fscanf_53_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_21_good();");
  CWE617_Reachable_Assertion__fixed_21_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_53_good();");
  CWE617_Reachable_Assertion__fixed_53_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_52_good();");
  CWE617_Reachable_Assertion__fscanf_52_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_07_good();");
  CWE617_Reachable_Assertion__fixed_07_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_66_good();");
  CWE617_Reachable_Assertion__connect_socket_66_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_42_good();");
  CWE617_Reachable_Assertion__listen_socket_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_51_good();");
  CWE617_Reachable_Assertion__fgets_51_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_06_good();");
  CWE617_Reachable_Assertion__connect_socket_06_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_63_good();");
  CWE617_Reachable_Assertion__connect_socket_63_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_61_good();");
  CWE617_Reachable_Assertion__fgets_61_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_67_good();");
  CWE617_Reachable_Assertion__fscanf_67_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_67_good();");
  CWE617_Reachable_Assertion__rand_67_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_41_good();");
  CWE617_Reachable_Assertion__rand_41_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_32_good();");
  CWE617_Reachable_Assertion__rand_32_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_12_good();");
  CWE617_Reachable_Assertion__fixed_12_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_31_good();");
  CWE617_Reachable_Assertion__fgets_31_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_31_good();");
  CWE617_Reachable_Assertion__listen_socket_31_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_63_good();");
  CWE617_Reachable_Assertion__fixed_63_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_45_good();");
  CWE617_Reachable_Assertion__fscanf_45_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_41_good();");
  CWE617_Reachable_Assertion__fixed_41_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_01_good();");
  CWE617_Reachable_Assertion__connect_socket_01_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_53_good();");
  CWE617_Reachable_Assertion__rand_53_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_65_good();");
  CWE617_Reachable_Assertion__connect_socket_65_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_09_good();");
  CWE617_Reachable_Assertion__zero_09_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_11_good();");
  CWE617_Reachable_Assertion__fixed_11_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_10_good();");
  CWE617_Reachable_Assertion__zero_10_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_04_good();");
  CWE617_Reachable_Assertion__listen_socket_04_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_03_good();");
  CWE617_Reachable_Assertion__connect_socket_03_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_14_good();");
  CWE617_Reachable_Assertion__listen_socket_14_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_61_good();");
  CWE617_Reachable_Assertion__fscanf_61_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_05_good();");
  CWE617_Reachable_Assertion__fixed_05_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_18_good();");
  CWE617_Reachable_Assertion__fgets_18_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_14_good();");
  CWE617_Reachable_Assertion__connect_socket_14_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_05_good();");
  CWE617_Reachable_Assertion__fgets_05_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_14_good();");
  CWE617_Reachable_Assertion__rand_14_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_02_good();");
  CWE617_Reachable_Assertion__fscanf_02_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_11_good();");
  CWE617_Reachable_Assertion__rand_11_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_63_good();");
  CWE617_Reachable_Assertion__rand_63_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_22_good();");
  CWE617_Reachable_Assertion__fscanf_22_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_17_good();");
  CWE617_Reachable_Assertion__fixed_17_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_12_good();");
  CWE617_Reachable_Assertion__listen_socket_12_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_66_good();");
  CWE617_Reachable_Assertion__listen_socket_66_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_41_good();");
  CWE617_Reachable_Assertion__listen_socket_41_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_51_good();");
  CWE617_Reachable_Assertion__fixed_51_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_12_good();");
  CWE617_Reachable_Assertion__zero_12_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_34_good();");
  CWE617_Reachable_Assertion__fgets_34_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_02_good();");
  CWE617_Reachable_Assertion__zero_02_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_08_good();");
  CWE617_Reachable_Assertion__fixed_08_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_16_good();");
  CWE617_Reachable_Assertion__listen_socket_16_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_52_good();");
  CWE617_Reachable_Assertion__fgets_52_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_03_good();");
  CWE617_Reachable_Assertion__zero_03_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_07_good();");
  CWE617_Reachable_Assertion__listen_socket_07_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_06_good();");
  CWE617_Reachable_Assertion__rand_06_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_13_good();");
  CWE617_Reachable_Assertion__rand_13_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_07_good();");
  CWE617_Reachable_Assertion__fgets_07_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_16_good();");
  CWE617_Reachable_Assertion__connect_socket_16_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_04_good();");
  CWE617_Reachable_Assertion__zero_04_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_52_good();");
  CWE617_Reachable_Assertion__fixed_52_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_10_good();");
  CWE617_Reachable_Assertion__rand_10_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_54_good();");
  CWE617_Reachable_Assertion__listen_socket_54_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_51_good();");
  CWE617_Reachable_Assertion__rand_51_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_64_good();");
  CWE617_Reachable_Assertion__connect_socket_64_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_65_good();");
  CWE617_Reachable_Assertion__fscanf_65_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_16_good();");
  CWE617_Reachable_Assertion__fscanf_16_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_03_good();");
  CWE617_Reachable_Assertion__fgets_03_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_11_good();");
  CWE617_Reachable_Assertion__fgets_11_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_02_good();");
  CWE617_Reachable_Assertion__rand_02_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_06_good();");
  CWE617_Reachable_Assertion__fgets_06_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_44_good();");
  CWE617_Reachable_Assertion__rand_44_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_08_good();");
  CWE617_Reachable_Assertion__connect_socket_08_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_10_good();");
  CWE617_Reachable_Assertion__fixed_10_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_17_good();");
  CWE617_Reachable_Assertion__listen_socket_17_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_64_good();");
  CWE617_Reachable_Assertion__fscanf_64_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_06_good();");
  CWE617_Reachable_Assertion__fixed_06_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_01_good();");
  CWE617_Reachable_Assertion__fscanf_01_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_21_good();");
  CWE617_Reachable_Assertion__listen_socket_21_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_04_good();");
  CWE617_Reachable_Assertion__rand_04_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_22_good();");
  CWE617_Reachable_Assertion__rand_22_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_68_good();");
  CWE617_Reachable_Assertion__fscanf_68_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_41_good();");
  CWE617_Reachable_Assertion__fscanf_41_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_52_good();");
  CWE617_Reachable_Assertion__connect_socket_52_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_09_good();");
  CWE617_Reachable_Assertion__fscanf_09_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_34_good();");
  CWE617_Reachable_Assertion__fixed_34_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_02_good();");
  CWE617_Reachable_Assertion__listen_socket_02_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_66_good();");
  CWE617_Reachable_Assertion__fscanf_66_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_08_good();");
  CWE617_Reachable_Assertion__fgets_08_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_15_good();");
  CWE617_Reachable_Assertion__listen_socket_15_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_01_good();");
  CWE617_Reachable_Assertion__rand_01_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_64_good();");
  CWE617_Reachable_Assertion__fixed_64_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_06_good();");
  CWE617_Reachable_Assertion__zero_06_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_15_good();");
  CWE617_Reachable_Assertion__zero_15_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_13_good();");
  CWE617_Reachable_Assertion__zero_13_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_21_good();");
  CWE617_Reachable_Assertion__fscanf_21_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_15_good();");
  CWE617_Reachable_Assertion__rand_15_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_09_good();");
  CWE617_Reachable_Assertion__fgets_09_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_45_good();");
  CWE617_Reachable_Assertion__fixed_45_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_12_good();");
  CWE617_Reachable_Assertion__rand_12_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_63_good();");
  CWE617_Reachable_Assertion__listen_socket_63_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_17_good();");
  CWE617_Reachable_Assertion__fgets_17_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_64_good();");
  CWE617_Reachable_Assertion__listen_socket_64_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_44_good();");
  CWE617_Reachable_Assertion__listen_socket_44_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_17_good();");
  CWE617_Reachable_Assertion__fscanf_17_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_42_good();");
  CWE617_Reachable_Assertion__fixed_42_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_54_good();");
  CWE617_Reachable_Assertion__fgets_54_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_67_good();");
  CWE617_Reachable_Assertion__connect_socket_67_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_22_good();");
  CWE617_Reachable_Assertion__listen_socket_22_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_17_good();");
  CWE617_Reachable_Assertion__connect_socket_17_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_44_good();");
  CWE617_Reachable_Assertion__fixed_44_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_09_good();");
  CWE617_Reachable_Assertion__rand_09_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_32_good();");
  CWE617_Reachable_Assertion__fscanf_32_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_16_good();");
  CWE617_Reachable_Assertion__zero_16_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_08_good();");
  CWE617_Reachable_Assertion__rand_08_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_07_good();");
  CWE617_Reachable_Assertion__connect_socket_07_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_18_good();");
  CWE617_Reachable_Assertion__fscanf_18_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_01_good();");
  CWE617_Reachable_Assertion__fixed_01_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_08_good();");
  CWE617_Reachable_Assertion__fscanf_08_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_68_good();");
  CWE617_Reachable_Assertion__listen_socket_68_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_63_good();");
  CWE617_Reachable_Assertion__fgets_63_good();
  printLine("Calling CWE617_Reachable_Assertion__rand_45_good();");
  CWE617_Reachable_Assertion__rand_45_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_45_good();");
  CWE617_Reachable_Assertion__listen_socket_45_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_13_good();");
  CWE617_Reachable_Assertion__connect_socket_13_good();
  printLine("Calling CWE617_Reachable_Assertion__fixed_14_good();");
  CWE617_Reachable_Assertion__fixed_14_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_06_good();");
  CWE617_Reachable_Assertion__listen_socket_06_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_11_good();");
  CWE617_Reachable_Assertion__fscanf_11_good();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_44_good();");
  CWE617_Reachable_Assertion__fscanf_44_good();
  printLine("Calling CWE617_Reachable_Assertion__zero_05_good();");
  CWE617_Reachable_Assertion__zero_05_good();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_51_good();");
  CWE617_Reachable_Assertion__connect_socket_51_good();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_51_good();");
  CWE617_Reachable_Assertion__listen_socket_51_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_65_good();");
  CWE617_Reachable_Assertion__fgets_65_good();
  printLine("Calling CWE617_Reachable_Assertion__fgets_12_bad();");
  CWE617_Reachable_Assertion__fgets_12_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_16_bad();");
  CWE617_Reachable_Assertion__fgets_16_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_14_bad();");
  CWE617_Reachable_Assertion__fscanf_14_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_22_bad();");
  CWE617_Reachable_Assertion__connect_socket_22_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_42_bad();");
  CWE617_Reachable_Assertion__connect_socket_42_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_41_bad();");
  CWE617_Reachable_Assertion__fgets_41_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_18_bad();");
  CWE617_Reachable_Assertion__connect_socket_18_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_03_bad();");
  CWE617_Reachable_Assertion__rand_03_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_07_bad();");
  CWE617_Reachable_Assertion__fscanf_07_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_34_bad();");
  CWE617_Reachable_Assertion__connect_socket_34_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_68_bad();");
  CWE617_Reachable_Assertion__fgets_68_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_14_bad();");
  CWE617_Reachable_Assertion__fgets_14_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_15_bad();");
  CWE617_Reachable_Assertion__fgets_15_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_61_bad();");
  CWE617_Reachable_Assertion__fixed_61_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_64_bad();");
  CWE617_Reachable_Assertion__rand_64_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_66_bad();");
  CWE617_Reachable_Assertion__fgets_66_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_53_bad();");
  CWE617_Reachable_Assertion__fgets_53_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_54_bad();");
  CWE617_Reachable_Assertion__rand_54_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_66_bad();");
  CWE617_Reachable_Assertion__fixed_66_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_31_bad();");
  CWE617_Reachable_Assertion__connect_socket_31_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_42_bad();");
  CWE617_Reachable_Assertion__rand_42_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_05_bad();");
  CWE617_Reachable_Assertion__fscanf_05_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_44_bad();");
  CWE617_Reachable_Assertion__connect_socket_44_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_18_bad();");
  CWE617_Reachable_Assertion__rand_18_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_64_bad();");
  CWE617_Reachable_Assertion__fgets_64_bad();
  printLine("Calling CWE617_Reachable_Assertion__fgets_01_bad();");
  CWE617_Reachable_Assertion__fgets_01_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_31_bad();");
  CWE617_Reachable_Assertion__fscanf_31_bad();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_05_bad();");
  CWE617_Reachable_Assertion__listen_socket_05_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_05_bad();");
  CWE617_Reachable_Assertion__rand_05_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_15_bad();");
  CWE617_Reachable_Assertion__fixed_15_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_54_bad();");
  CWE617_Reachable_Assertion__fixed_54_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_61_bad();");
  CWE617_Reachable_Assertion__rand_61_bad();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_13_bad();");
  CWE617_Reachable_Assertion__listen_socket_13_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_66_bad();");
  CWE617_Reachable_Assertion__rand_66_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_18_bad();");
  CWE617_Reachable_Assertion__fixed_18_bad();
  printLine("Calling CWE617_Reachable_Assertion__rand_07_bad();");
  CWE617_Reachable_Assertion__rand_07_bad();
  printLine("Calling CWE617_Reachable_Assertion__fixed_22_bad();");
  CWE617_Reachable_Assertion__fixed_22_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_03_bad();");
  CWE617_Reachable_Assertion__fscanf_03_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_54_bad();");
  CWE617_Reachable_Assertion__fscanf_54_bad();
  printLine("Calling CWE617_Reachable_Assertion__listen_socket_08_bad();");
  CWE617_Reachable_Assertion__listen_socket_08_bad();
  printLine("Calling CWE617_Reachable_Assertion__fscanf_15_bad();");
  CWE617_Reachable_Assertion__fscanf_15_bad();
  printLine("Calling CWE617_Reachable_Assertion__connect_socket_02_bad();");
  CWE617_Reachable_Assertion__connect_socket_02_bad();
  printLine("Calling CWE617_Reachable_Assertion__zero_18_bad();");
  CWE617_Reachable_Assertion__zero_18_bad();
}
// 63325C: using guessed type int globalArgc;
// 633260: using guessed type __int64 globalArgv;

//----- (0000000000403608) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_17_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_17.c", 0x1Cu, "CWE617_Reachable_Assertion__zero_17_bad");
}

//----- (0000000000403638) ----------------------------------------------------
void good1()
{
  int i; // [rsp+0h] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    ;
}

//----- (0000000000403651) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_17_good()
{
  good1();
}

//----- (0000000000403661) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_51b.c",
      0x34u,
      "CWE617_Reachable_Assertion__connect_socket_51b_badSink");
}

//----- (000000000040368D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_51b.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__connect_socket_51b_goodG2BSink");
}

//----- (00000000004036B9) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = inet_addr("127.0.0.1");
      v2 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v4 = recv(fd, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v6 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  if ( v6 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_17.c",
      0x71u,
      "CWE617_Reachable_Assertion__connect_socket_17_bad");
}
// 4036B9: using guessed type char buf[16];

//----- (00000000004037D0) ----------------------------------------------------
void goodG2B()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_17.c", 0x85u, "goodG2B");
}

//----- (000000000040381A) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_17_good()
{
  goodG2B();
}

//----- (000000000040382A) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_11_bad()
{
  globalReturnsTrue();
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_11.c", 0x24u, "CWE617_Reachable_Assertion__fixed_11_bad");
}

//----- (000000000040386F) ----------------------------------------------------
int goodG2B1()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_11.c", 0x3Cu, "goodG2B1");
  return result;
}

//----- (00000000004038C0) ----------------------------------------------------
__int64 goodG2B2()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_11.c", 0x4Bu, "goodG2B2");
  return result;
}

//----- (0000000000403905) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_11_good()
{
  goodG2B1();
  return goodG2B2();
}

//----- (000000000040391F) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_06_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_06.c", 0x20u, "CWE617_Reachable_Assertion__zero_06_bad");
}

//----- (0000000000403948) ----------------------------------------------------
__int64 good1_0()
{
  return 5LL;
}

//----- (0000000000403962) ----------------------------------------------------
void good2()
{
  ;
}

//----- (0000000000403968) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_06_good()
{
  good1_0();
  good2();
}

//----- (0000000000403982) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_53d_badSink(a1);
}

//----- (0000000000403999) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_53d_goodG2BSink(a1);
}

//----- (00000000004039B0) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_16_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_16.c",
      0x71u,
      "CWE617_Reachable_Assertion__connect_socket_16_bad");
  return result;
}
// 4039B0: using guessed type char buf[16];

//----- (0000000000403AAE) ----------------------------------------------------
void goodG2B_0()
{
  ;
}

//----- (0000000000403AE6) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_16_good()
{
  goodG2B_0();
}

//----- (0000000000403AF6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_05_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticTrue )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_05.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fscanf_05_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 63312C: using guessed type int staticTrue;

//----- (0000000000403B4F) ----------------------------------------------------
int goodG2B1_0()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse;
  if ( staticFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_05.c", 0x43u, "goodG2B1");
  return result;
}
// 63317C: using guessed type int staticFalse;

//----- (0000000000403B9C) ----------------------------------------------------
__int64 goodG2B2_0()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue;
  if ( staticTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_05.c", 0x52u, "goodG2B2");
  return result;
}
// 63312C: using guessed type int staticTrue;

//----- (0000000000403BDD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_05_good()
{
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (0000000000403BF7) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_53c_badSink(a1);
}

//----- (0000000000403C0E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_53c_goodG2BSink(a1);
}

//----- (0000000000403C25) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE617_Reachable_Assertion__listen_socket_63b_badSink(&v5);
}
// 403C25: using guessed type char buf[16];

//----- (0000000000403D55) ----------------------------------------------------
__int64 goodG2B_1()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__listen_socket_63b_goodG2BSink(&v1);
}

//----- (0000000000403D79) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_63_good()
{
  return goodG2B_1();
}

//----- (0000000000403D89) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_52c.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fscanf_52c_badSink");
}

//----- (0000000000403DB5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_52c.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_52c_goodG2BSink");
}

//----- (0000000000403DE1) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE617_Reachable_Assertion__listen_socket_53b_badSink(v7);
}
// 403DE1: using guessed type char buf[16];

//----- (0000000000403F0F) ----------------------------------------------------
void goodG2B_2()
{
  CWE617_Reachable_Assertion__listen_socket_53b_goodG2BSink(6);
}

//----- (0000000000403F31) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_53_good()
{
  goodG2B_2();
}

//----- (0000000000403F41) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_68_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE617_Reachable_Assertion__fscanf_68_badData = v1;
  return CWE617_Reachable_Assertion__fscanf_68b_badSink();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633268: using guessed type int CWE617_Reachable_Assertion__fscanf_68_badData;

//----- (0000000000403F82) ----------------------------------------------------
__int64 goodG2B_3()
{
  CWE617_Reachable_Assertion__fscanf_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__fscanf_68b_goodG2BSink();
}
// 63326C: using guessed type int CWE617_Reachable_Assertion__fscanf_68_goodG2BData;

//----- (0000000000403FAD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_68_good()
{
  return goodG2B_3();
}

//----- (0000000000403FBD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_34_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  result = (unsigned int)v10;
  v6 = v10;
  if ( v10 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_34.c",
      0x84u,
      "CWE617_Reachable_Assertion__listen_socket_34_bad");
  return result;
}
// 403FBD: using guessed type char buf[16];

//----- (000000000040410C) ----------------------------------------------------
__int64 goodG2B_4()
{
  return 6LL;
}

//----- (000000000040414F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_34_good()
{
  return goodG2B_4();
}

//----- (000000000040415F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_52c.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fixed_52c_badSink");
}

//----- (000000000040418B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_52c.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_52c_goodG2BSink");
}

//----- (00000000004041B7) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_65_bad()
{
  CWE617_Reachable_Assertion__fixed_65b_badSink(4);
}

//----- (00000000004041E2) ----------------------------------------------------
void goodG2B_5()
{
  CWE617_Reachable_Assertion__fixed_65b_goodG2BSink(6);
}

//----- (000000000040420D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_65_good()
{
  goodG2B_5();
}

//----- (000000000040421D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54e_badSink(a1);
}

//----- (0000000000404234) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54e_goodG2BSink(a1);
}

//----- (000000000040424B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_54_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE617_Reachable_Assertion__fscanf_54b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000404283) ----------------------------------------------------
void goodG2B_6()
{
  CWE617_Reachable_Assertion__fscanf_54b_goodG2BSink(6);
}

//----- (00000000004042A5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_54_good()
{
  goodG2B_6();
}

//----- (00000000004042B5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_15_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_15.c", 0x2Au, "CWE617_Reachable_Assertion__fixed_15_bad");
}

//----- (00000000004042ED) ----------------------------------------------------
void goodG2B1_1()
{
  ;
}

//----- (0000000000404325) ----------------------------------------------------
void goodG2B2_1()
{
  ;
}

//----- (000000000040435D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_15_good()
{
  goodG2B1_1();
  goodG2B2_1();
}

//----- (0000000000404377) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_66b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fscanf_66b_badSink");
  return result;
}

//----- (00000000004043AE) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_66b.c",
      0x2Au,
      "CWE617_Reachable_Assertion__fscanf_66b_goodG2BSink");
  return result;
}

//----- (00000000004043E5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_65b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fgets_65b_badSink");
}

//----- (0000000000404411) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_65b.c",
      0x29u,
      "CWE617_Reachable_Assertion__fgets_65b_goodG2BSink");
}

//----- (000000000040443D) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_51b_badSink(v6);
}
// 40443D: using guessed type char buf[16];

//----- (0000000000404525) ----------------------------------------------------
void goodG2B_7()
{
  CWE617_Reachable_Assertion__connect_socket_51b_goodG2BSink(6);
}

//----- (0000000000404547) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_51_good()
{
  goodG2B_7();
}

//----- (0000000000404557) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_54b_badSink(v2);
}

//----- (00000000004045C1) ----------------------------------------------------
void goodG2B_8()
{
  CWE617_Reachable_Assertion__rand_54b_goodG2BSink(6);
}

//----- (00000000004045E3) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_54_good()
{
  goodG2B_8();
}

//----- (00000000004045F3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_67_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE617_Reachable_Assertion__fscanf_67b_badSink(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000404631) ----------------------------------------------------
__int64 goodG2B_9()
{
  return CWE617_Reachable_Assertion__fscanf_67b_goodG2BSink(6);
}

//----- (0000000000404659) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_67_good()
{
  return goodG2B_9();
}

//----- (0000000000404669) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_54e.c",
      0x34u,
      "CWE617_Reachable_Assertion__listen_socket_54e_badSink");
}

//----- (0000000000404695) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_54e.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__listen_socket_54e_goodG2BSink");
}

//----- (00000000004046C1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE617_Reachable_Assertion__listen_socket_66b_badSink((__int64)&v5);
}
// 4046C1: using guessed type char buf[16];

//----- (00000000004047F7) ----------------------------------------------------
__int64 goodG2B_10()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__listen_socket_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000404821) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_66_good()
{
  return goodG2B_10();
}

//----- (0000000000404831) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_53_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE617_Reachable_Assertion__fscanf_53b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000404869) ----------------------------------------------------
void goodG2B_11()
{
  CWE617_Reachable_Assertion__fscanf_53b_goodG2BSink(6);
}

//----- (000000000040488B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_53_good()
{
  goodG2B_11();
}

//----- (000000000040489B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_53d_badSink(a1);
}

//----- (00000000004048B2) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_53d_goodG2BSink(a1);
}

//----- (00000000004048C9) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_52c_badSink(a1);
}

//----- (00000000004048E0) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_52c_goodG2BSink(a1);
}

//----- (00000000004048F7) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_14_bad()
{
  __int64 result; // rax

  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_14.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_14_bad");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000404921) ----------------------------------------------------
int good1_1()
{
  int result; // eax

  result = globalFive;
  if ( globalFive != 5 )
    result = printLine("Benign, fixed string");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040493C) ----------------------------------------------------
void good2_0()
{
  ;
}

//----- (0000000000404942) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_14_good()
{
  good1_1();
  good2_0();
}

//----- (000000000040495C) ----------------------------------------------------
__int64 badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__connect_socket_45_badData;
  if ( CWE617_Reachable_Assertion__connect_socket_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_45.c", 0x36u, "badSink");
  return result;
}
// 633180: using guessed type int CWE617_Reachable_Assertion__connect_socket_45_badData;

//----- (000000000040498E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_45_badData = v7;
  return badSink();
}
// 633180: using guessed type int CWE617_Reachable_Assertion__connect_socket_45_badData;
// 40498E: using guessed type char buf[16];

//----- (0000000000404A7F) ----------------------------------------------------
__int64 goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__connect_socket_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__connect_socket_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_45.c", 0x83u, "goodG2BSink");
  return result;
}
// 633184: using guessed type int CWE617_Reachable_Assertion__connect_socket_45_goodG2BData;

//----- (0000000000404AB1) ----------------------------------------------------
__int64 goodG2B_12()
{
  CWE617_Reachable_Assertion__connect_socket_45_goodG2BData = 6;
  return goodG2BSink();
}
// 633184: using guessed type int CWE617_Reachable_Assertion__connect_socket_45_goodG2BData;

//----- (0000000000404ADC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_45_good()
{
  return goodG2B_12();
}

//----- (0000000000404AEC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_05_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_05.c", 0x2Bu, "CWE617_Reachable_Assertion__rand_05_bad");
  return result;
}
// 633130: using guessed type int staticTrue_0;

//----- (0000000000404B75) ----------------------------------------------------
int goodG2B1_2()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse_0;
  if ( staticFalse_0 )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_05.c", 0x43u, "goodG2B1");
  return result;
}
// 633188: using guessed type int staticFalse_0;

//----- (0000000000404BC2) ----------------------------------------------------
__int64 goodG2B2_2()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue_0;
  if ( staticTrue_0 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_05.c", 0x52u, "goodG2B2");
  return result;
}
// 633130: using guessed type int staticTrue_0;

//----- (0000000000404C03) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_05_good()
{
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (0000000000404C1D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_65b.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__rand_65b_badSink");
}

//----- (0000000000404C49) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_65b.c",
      0x27u,
      "CWE617_Reachable_Assertion__rand_65b_goodG2BSink");
}

//----- (0000000000404C75) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_06_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_06.c",
      0x74u,
      "CWE617_Reachable_Assertion__connect_socket_06_bad");
  return result;
}
// 404C75: using guessed type char buf[16];

//----- (0000000000404D80) ----------------------------------------------------
__int64 goodG2B1_3()
{
  return 5LL;
}

//----- (0000000000404DCD) ----------------------------------------------------
__int64 goodG2B2_3()
{
  return 5LL;
}

//----- (0000000000404E0E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_06_good()
{
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (0000000000404E28) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_12_bad()
{
  __int64 result; // rax

  result = globalReturnsTrueOrFalse();
  if ( (_DWORD)result )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_12.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_12_bad");
  return result;
}

//----- (0000000000404E55) ----------------------------------------------------
__int64 good1_2()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000404E65) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_12_good()
{
  return good1_2();
}

//----- (0000000000404E75) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_54e.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fscanf_54e_badSink");
}

//----- (0000000000404EA1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_54e.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink");
}

//----- (0000000000404ECD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  __isoc99_fscanf(stdin, "%d", &v3);
  v2 = v3;
  return CWE617_Reachable_Assertion__fscanf_66b_badSink((__int64)&v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000404F0D) ----------------------------------------------------
__int64 goodG2B_13()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__fscanf_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000404F37) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_66_good()
{
  return goodG2B_13();
}

//----- (0000000000404F47) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_05_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_05.c", 0x2Bu, "CWE617_Reachable_Assertion__fixed_05_bad");
}

//----- (0000000000404F88) ----------------------------------------------------
int goodG2B1_4()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse_1;
  if ( staticFalse_1 )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_05.c", 0x43u, "goodG2B1");
  return result;
}
// 63318C: using guessed type int staticFalse_1;

//----- (0000000000404FD5) ----------------------------------------------------
__int64 goodG2B2_4()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue_1;
  if ( staticTrue_1 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_05.c", 0x52u, "goodG2B2");
  return result;
}
// 633134: using guessed type int staticTrue_1;

//----- (0000000000405016) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_05_good()
{
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (0000000000405030) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_15_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_15.c",
      0x37u,
      "CWE617_Reachable_Assertion__fgets_15_bad");
  return result;
}

//----- (00000000004050AE) ----------------------------------------------------
void goodG2B1_5()
{
  ;
}

//----- (00000000004050E6) ----------------------------------------------------
void goodG2B2_5()
{
  ;
}

//----- (000000000040511E) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_15_good()
{
  goodG2B1_5();
  goodG2B2_5();
}

//----- (0000000000405138) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_53c_badSink(a1);
}

//----- (000000000040514F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_53c_goodG2BSink(a1);
}

//----- (0000000000405166) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_53d_badSink(a1);
}

//----- (000000000040517D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_53d_goodG2BSink(a1);
}

//----- (0000000000405194) ----------------------------------------------------
__int64 __fastcall badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (00000000004051F1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_42_bad()
{
  __int64 result; // rax

  result = badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_42.c",
      0x34u,
      "CWE617_Reachable_Assertion__fgets_42_bad");
  return result;
}

//----- (000000000040522E) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 6LL;
}

//----- (0000000000405241) ----------------------------------------------------
__int64 goodG2B_14()
{
  __int64 result; // rax

  result = goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_42.c", 0x4Au, "goodG2B");
  return result;
}

//----- (000000000040527E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_42_good()
{
  return goodG2B_14();
}

//----- (000000000040528E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_52c_badSink(a1);
}

//----- (00000000004052A5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_52c_goodG2BSink(a1);
}

//----- (00000000004052BC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_68_bad()
{
  CWE617_Reachable_Assertion__fixed_68_badData = 4;
  return CWE617_Reachable_Assertion__fixed_68b_badSink();
}
// 633270: using guessed type int CWE617_Reachable_Assertion__fixed_68_badData;

//----- (00000000004052E7) ----------------------------------------------------
__int64 goodG2B_15()
{
  CWE617_Reachable_Assertion__fixed_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__fixed_68b_goodG2BSink();
}
// 633274: using guessed type int CWE617_Reachable_Assertion__fixed_68_goodG2BData;

//----- (0000000000405312) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_68_good()
{
  return goodG2B_15();
}

//----- (0000000000405322) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_34_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_34.c", 0x2Bu, "CWE617_Reachable_Assertion__fixed_34_bad");
}

//----- (0000000000405365) ----------------------------------------------------
__int64 goodG2B_16()
{
  return 6LL;
}

//----- (00000000004053A8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_34_good()
{
  return goodG2B_16();
}

//----- (00000000004053B8) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_04_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_04.c", 0x21u, "CWE617_Reachable_Assertion__zero_04_bad");
}

//----- (00000000004053E0) ----------------------------------------------------
__int64 good1_3()
{
  return 0LL;
}

//----- (00000000004053F9) ----------------------------------------------------
void good2_1()
{
  ;
}

//----- (00000000004053FF) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_04_good()
{
  good1_3();
  good2_1();
}

//----- (0000000000405419) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fgets_68_badData;
  if ( CWE617_Reachable_Assertion__fgets_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_68b.c",
      0x24u,
      "CWE617_Reachable_Assertion__fgets_68b_badSink");
  return result;
}
// 633284: using guessed type int CWE617_Reachable_Assertion__fgets_68_badData;

//----- (000000000040544B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fgets_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__fgets_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_68b.c",
      0x30u,
      "CWE617_Reachable_Assertion__fgets_68b_goodG2BSink");
  return result;
}
// 633280: using guessed type int CWE617_Reachable_Assertion__fgets_68_goodG2BData;

//----- (000000000040547D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE617_Reachable_Assertion__rand_65b_badSink)(v2);
}

//----- (00000000004054F0) ----------------------------------------------------
void goodG2B_17()
{
  CWE617_Reachable_Assertion__rand_65b_goodG2BSink(6);
}

//----- (000000000040551B) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_65_good()
{
  goodG2B_17();
}

//----- (000000000040552B) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_66b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fixed_66b_badSink");
  return result;
}

//----- (0000000000405562) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_66b.c",
      0x2Au,
      "CWE617_Reachable_Assertion__fixed_66b_goodG2BSink");
  return result;
}

//----- (0000000000405599) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_51b.c",
      0x34u,
      "CWE617_Reachable_Assertion__listen_socket_51b_badSink");
}

//----- (00000000004055C5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_51b.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__listen_socket_51b_goodG2BSink");
}

//----- (00000000004055F1) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_10_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_10.c", 0x24u, "CWE617_Reachable_Assertion__fixed_10_bad");
}

//----- (0000000000405632) ----------------------------------------------------
int goodG2B1_6()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_10.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (000000000040567F) ----------------------------------------------------
__int64 goodG2B2_6()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_10.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (00000000004056C0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_10_good()
{
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (00000000004056DA) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_64b.c",
      0x36u,
      "CWE617_Reachable_Assertion__connect_socket_64b_badSink");
  return result;
}

//----- (0000000000405718) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_64b.c",
      0x45u,
      "CWE617_Reachable_Assertion__connect_socket_64b_goodG2BSink");
  return result;
}

//----- (0000000000405756) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_15.c", 0x2Au, "CWE617_Reachable_Assertion__rand_15_bad");
  return result;
}

//----- (00000000004057D6) ----------------------------------------------------
void goodG2B1_7()
{
  ;
}

//----- (000000000040580E) ----------------------------------------------------
void goodG2B2_7()
{
  ;
}

//----- (0000000000405846) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_15_good()
{
  goodG2B1_7();
  goodG2B2_7();
}

//----- (0000000000405860) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_16_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_16.c",
      0x7Eu,
      "CWE617_Reachable_Assertion__listen_socket_16_bad");
  return result;
}
// 405860: using guessed type char buf[16];

//----- (00000000004059A4) ----------------------------------------------------
void goodG2B_18()
{
  ;
}

//----- (00000000004059DC) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_16_good()
{
  goodG2B_18();
}

//----- (00000000004059EC) ----------------------------------------------------
__int64 badSource_0()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (0000000000405A4B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_42_bad()
{
  __int64 result; // rax

  result = badSource_0();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_42.c", 0x27u, "CWE617_Reachable_Assertion__rand_42_bad");
  return result;
}

//----- (0000000000405A88) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 6LL;
}

//----- (0000000000405A9B) ----------------------------------------------------
__int64 goodG2B_19()
{
  __int64 result; // rax

  result = goodG2BSource_0();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_42.c", 0x3Du, "goodG2B");
  return result;
}

//----- (0000000000405AD8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_42_good()
{
  return goodG2B_19();
}

//----- (0000000000405AE8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_32_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  in_addr_t v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v11 = -1;
  fd = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v11 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  *v10 = v11;
  result = (unsigned int)*v9;
  v6 = *v9;
  if ( v6 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_32.c",
      0x75u,
      "CWE617_Reachable_Assertion__connect_socket_32_bad");
  return result;
}
// 405AE8: using guessed type char buf[16];

//----- (0000000000405C10) ----------------------------------------------------
__int64 goodG2B_20()
{
  return 6LL;
}

//----- (0000000000405C72) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_32_good()
{
  return goodG2B_20();
}

//----- (0000000000405C82) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_05_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_05.c",
      0x38u,
      "CWE617_Reachable_Assertion__fgets_05_bad");
  return result;
}
// 633138: using guessed type int staticTrue_2;

//----- (0000000000405D09) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse_2;
  if ( staticFalse_2 )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_05.c", 0x50u, "goodG2B1");
  return result;
}
// 633190: using guessed type int staticFalse_2;

//----- (0000000000405D56) ----------------------------------------------------
__int64 goodG2B2_8()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue_2;
  if ( staticTrue_2 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_05.c", 0x5Fu, "goodG2B2");
  return result;
}
// 633138: using guessed type int staticTrue_2;

//----- (0000000000405D97) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_05_good()
{
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (0000000000405DB1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_41.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fgets_41_badSink");
}

//----- (0000000000405DDD) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_41_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_41_badSink(v3);
}

//----- (0000000000405E45) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_41.c",
      0x3Du,
      "CWE617_Reachable_Assertion__fgets_41_goodG2BSink");
}

//----- (0000000000405E71) ----------------------------------------------------
void goodG2B_21()
{
  CWE617_Reachable_Assertion__fgets_41_goodG2BSink(6);
}

//----- (0000000000405E93) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_41_good()
{
  goodG2B_21();
}

//----- (0000000000405EA3) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_52_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE617_Reachable_Assertion__fscanf_52b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000405EDB) ----------------------------------------------------
void goodG2B_22()
{
  CWE617_Reachable_Assertion__fscanf_52b_goodG2BSink(6);
}

//----- (0000000000405EFD) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_52_good()
{
  goodG2B_22();
}

//----- (0000000000405F0D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_53c_badSink(a1);
}

//----- (0000000000405F24) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_53c_goodG2BSink(a1);
}

//----- (0000000000405F3B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__rand_68_badData;
  if ( CWE617_Reachable_Assertion__rand_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_68b.c",
      0x22u,
      "CWE617_Reachable_Assertion__rand_68b_badSink");
  return result;
}
// 633294: using guessed type int CWE617_Reachable_Assertion__rand_68_badData;

//----- (0000000000405F6D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__rand_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__rand_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_68b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__rand_68b_goodG2BSink");
  return result;
}
// 633290: using guessed type int CWE617_Reachable_Assertion__rand_68_goodG2BData;

//----- (0000000000405F9F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_51b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fscanf_51b_badSink");
}

//----- (0000000000405FCB) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_51b.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_51b_goodG2BSink");
}

//----- (0000000000405FF7) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_52c.c",
      0x20u,
      "CWE617_Reachable_Assertion__fgets_52c_badSink");
}

//----- (0000000000406023) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_52c.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fgets_52c_goodG2BSink");
}

//----- (000000000040604F) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_53_bad()
{
  CWE617_Reachable_Assertion__fixed_53b_badSink(4);
}

//----- (0000000000406071) ----------------------------------------------------
void goodG2B_23()
{
  CWE617_Reachable_Assertion__fixed_53b_goodG2BSink(6);
}

//----- (0000000000406093) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_53_good()
{
  goodG2B_23();
}

//----- (00000000004060A3) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 4060A3: using guessed type char buf[16];

//----- (00000000004061C6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_61b_goodG2BSource()
{
  return 6LL;
}

//----- (00000000004061D9) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_10_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = globalTrue;
  if ( globalTrue )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_10.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_10_bad");
  return result;
}
// 633164: using guessed type int globalTrue;
// 4061D9: using guessed type char buf[16];

//----- (000000000040632A) ----------------------------------------------------
int goodG2B1_9()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_10.c", 0x95u, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (0000000000406377) ----------------------------------------------------
__int64 goodG2B2_9()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_10.c", 0xA4u, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (00000000004063B8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_10_good()
{
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (00000000004063D2) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54e_badSink(a1);
}

//----- (00000000004063E9) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54e_goodG2BSink(a1);
}

//----- (0000000000406400) ----------------------------------------------------
void __fastcall badSink_0(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_44.c", 0x1Cu, "badSink");
}

//----- (000000000040642C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_44_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = badSink_0;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040646D) ----------------------------------------------------
void __fastcall goodG2BSink_0(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_44.c", 0x34u, "goodG2BSink");
}

//----- (0000000000406499) ----------------------------------------------------
void goodG2B_24()
{
  goodG2BSink_0(6);
}

//----- (00000000004064C4) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_44_good()
{
  goodG2B_24();
}

//----- (00000000004064D4) ----------------------------------------------------
__int64 __fastcall badSource_1(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( badStatic )
    v2 = 4;
  return v2;
}
// 633194: using guessed type int badStatic;

//----- (00000000004064F1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_21_bad()
{
  __int64 result; // rax

  badStatic = 1;
  result = badSource_1(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_21.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fixed_21_bad");
  return result;
}
// 633194: using guessed type int badStatic;

//----- (0000000000406538) ----------------------------------------------------
__int64 __fastcall goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633198: using guessed type int goodG2B1Static;

//----- (0000000000406565) ----------------------------------------------------
__int64 goodG2B1_10()
{
  __int64 result; // rax

  goodG2B1Static = 0;
  result = goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_21.c", 0x51u, "goodG2B1");
  return result;
}
// 633198: using guessed type int goodG2B1Static;

//----- (00000000004065AC) ----------------------------------------------------
__int64 __fastcall goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static )
    v2 = 6;
  return v2;
}
// 63319C: using guessed type int goodG2B2Static;

//----- (00000000004065C9) ----------------------------------------------------
__int64 goodG2B2_10()
{
  __int64 result; // rax

  goodG2B2Static = 1;
  result = goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_21.c", 0x67u, "goodG2B2");
  return result;
}
// 63319C: using guessed type int goodG2B2Static;

//----- (0000000000406610) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_21_good()
{
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (000000000040662A) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_03_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_03.c", 0x24u, "CWE617_Reachable_Assertion__fixed_03_bad");
}

//----- (0000000000406661) ----------------------------------------------------
void goodG2B1_11()
{
  ;
}

//----- (0000000000406698) ----------------------------------------------------
void goodG2B2_11()
{
  ;
}

//----- (00000000004066CF) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_03_good()
{
  goodG2B1_11();
  goodG2B2_11();
}

//----- (00000000004066E9) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_11_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_11.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_11_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000406746) ----------------------------------------------------
int goodG2B1_12()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_11.c", 0x3Cu, "goodG2B1");
  return result;
}

//----- (0000000000406797) ----------------------------------------------------
__int64 goodG2B2_12()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_11.c", 0x4Bu, "goodG2B2");
  return result;
}

//----- (00000000004067DC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_11_good()
{
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (00000000004067F6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_02_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_02.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_02_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000406845) ----------------------------------------------------
void goodG2B1_13()
{
  ;
}

//----- (000000000040687C) ----------------------------------------------------
void goodG2B2_13()
{
  ;
}

//----- (00000000004068B3) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_02_good()
{
  goodG2B1_13();
  goodG2B2_13();
}

//----- (00000000004068CD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 4;
  return CWE617_Reachable_Assertion__fixed_63b_badSink(&v1);
}

//----- (00000000004068F1) ----------------------------------------------------
__int64 goodG2B_25()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fixed_63b_goodG2BSink(&v1);
}

//----- (0000000000406915) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_63_good()
{
  return goodG2B_25();
}

//----- (0000000000406925) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_01_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_01.c",
      0x7Au,
      "CWE617_Reachable_Assertion__listen_socket_01_bad");
  return result;
}
// 406925: using guessed type char buf[16];

//----- (0000000000406A68) ----------------------------------------------------
void goodG2B_26()
{
  ;
}

//----- (0000000000406A9F) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_01_good()
{
  goodG2B_26();
}

//----- (0000000000406AAF) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_13_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_13.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_13_bad");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406B37) ----------------------------------------------------
int goodG2B1_14()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_13.c", 0x49u, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406B85) ----------------------------------------------------
__int64 goodG2B2_14()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_13.c", 0x58u, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406BC7) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_13_good()
{
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (0000000000406BE1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_53d.c",
      0x34u,
      "CWE617_Reachable_Assertion__listen_socket_53d_badSink");
}

//----- (0000000000406C0D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_53d.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__listen_socket_53d_goodG2BSink");
}

//----- (0000000000406C39) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_18_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_18.c", 0x23u, "CWE617_Reachable_Assertion__fixed_18_bad");
}

//----- (0000000000406C71) ----------------------------------------------------
void goodG2B_27()
{
  ;
}

//----- (0000000000406CA9) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_18_good()
{
  goodG2B_27();
}

//----- (0000000000406CB9) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_54b_badSink(v6);
}
// 406CB9: using guessed type char buf[16];

//----- (0000000000406DA1) ----------------------------------------------------
void goodG2B_28()
{
  CWE617_Reachable_Assertion__connect_socket_54b_goodG2BSink(6);
}

//----- (0000000000406DC3) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_54_good()
{
  goodG2B_28();
}

//----- (0000000000406DD3) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_18_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_18.c",
      0x6Fu,
      "CWE617_Reachable_Assertion__connect_socket_18_bad");
  return result;
}
// 406DD3: using guessed type char buf[16];

//----- (0000000000406ED1) ----------------------------------------------------
void goodG2B_29()
{
  ;
}

//----- (0000000000406F09) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_18_good()
{
  goodG2B_29();
}

//----- (0000000000406F19) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000406F46) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_61b_goodG2BSource()
{
  return 6LL;
}

//----- (0000000000406F59) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_10_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalTrue )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_10.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_10_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633164: using guessed type int globalTrue;

//----- (0000000000406FB2) ----------------------------------------------------
int goodG2B1_15()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_10.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (0000000000406FFF) ----------------------------------------------------
__int64 goodG2B2_15()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_10.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (0000000000407040) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_10_good()
{
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (000000000040705A) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_09_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_09.c", 0x24u, "CWE617_Reachable_Assertion__fixed_09_bad");
}

//----- (000000000040709B) ----------------------------------------------------
int goodG2B1_16()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_09.c", 0x3Cu, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004070E8) ----------------------------------------------------
__int64 goodG2B2_16()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_09.c", 0x4Bu, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407129) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_09_good()
{
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (0000000000407143) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_15_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_15.c", 0x1Cu, "CWE617_Reachable_Assertion__zero_15_bad");
}

//----- (0000000000407160) ----------------------------------------------------
void good1_4()
{
  ;
}

//----- (0000000000407167) ----------------------------------------------------
void good2_2()
{
  ;
}

//----- (000000000040716E) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_15_good()
{
  good1_4();
  good2_2();
}

//----- (0000000000407188) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54e_badSink(a1);
}

//----- (000000000040719F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54e_goodG2BSink(a1);
}

//----- (00000000004071B6) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_07_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = staticFive;
  if ( staticFive == 5 )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_07.c",
      0x83u,
      "CWE617_Reachable_Assertion__listen_socket_07_bad");
  return result;
}
// 63313C: using guessed type int staticFive;
// 4071B6: using guessed type char buf[16];

//----- (0000000000407308) ----------------------------------------------------
int goodG2B1_17()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive;
  if ( staticFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_07.c", 0x9Bu, "goodG2B1");
  return result;
}
// 63313C: using guessed type int staticFive;

//----- (0000000000407356) ----------------------------------------------------
__int64 goodG2B2_17()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive;
  if ( staticFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_07.c", 0xAAu, "goodG2B2");
  return result;
}
// 63313C: using guessed type int staticFive;

//----- (0000000000407398) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_07_good()
{
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (00000000004073B2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fixed_68_badData;
  if ( CWE617_Reachable_Assertion__fixed_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_68b.c",
      0x22u,
      "CWE617_Reachable_Assertion__fixed_68b_badSink");
  return result;
}
// 633270: using guessed type int CWE617_Reachable_Assertion__fixed_68_badData;

//----- (00000000004073E4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fixed_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__fixed_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_68b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fixed_68b_goodG2BSink");
  return result;
}
// 633274: using guessed type int CWE617_Reachable_Assertion__fixed_68_goodG2BData;

//----- (0000000000407416) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__listen_socket_61b_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_61a.c",
      0x39u,
      "CWE617_Reachable_Assertion__listen_socket_61_bad");
  return result;
}

//----- (0000000000407453) ----------------------------------------------------
__int64 goodG2B_30()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__listen_socket_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_61a.c", 0x4Au, "goodG2B");
  return result;
}

//----- (0000000000407490) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_61_good()
{
  return goodG2B_30();
}

//----- (00000000004074A0) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54d_badSink(a1);
}

//----- (00000000004074B7) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54d_goodG2BSink(a1);
}

//----- (00000000004074CE) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54c_badSink(a1);
}

//----- (00000000004074E5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54c_goodG2BSink(a1);
}

//----- (00000000004074FC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_12_bad()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  result = globalReturnsTrueOrFalse();
  if ( (_DWORD)result )
    v1 = 4;
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_12.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_12_bad");
  return result;
}

//----- (000000000040754A) ----------------------------------------------------
__int64 goodG2B_31()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000407598) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_12_good()
{
  return goodG2B_31();
}

//----- (00000000004075A8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_01_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_01.c",
      0x21u,
      "CWE617_Reachable_Assertion__fscanf_01_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004075F7) ----------------------------------------------------
void goodG2B_32()
{
  ;
}

//----- (000000000040762E) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_01_good()
{
  goodG2B_32();
}

//----- (000000000040763E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_34_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+8h] [rbp-8h]
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  v2 = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_34.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fscanf_34_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407697) ----------------------------------------------------
__int64 goodG2B_33()
{
  return 6LL;
}

//----- (00000000004076DA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_34_good()
{
  return goodG2B_33();
}

//----- (00000000004076EA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_13_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_13.c", 0x24u, "CWE617_Reachable_Assertion__rand_13_bad");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407774) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_13.c", 0x3Cu, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004077C2) ----------------------------------------------------
__int64 goodG2B2_18()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_13.c", 0x4Bu, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407804) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_13_good()
{
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000040781E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_65b.c",
      0x32u,
      "CWE617_Reachable_Assertion__connect_socket_65b_badSink");
}

//----- (000000000040784A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_65b.c",
      0x3Du,
      "CWE617_Reachable_Assertion__connect_socket_65b_goodG2BSink");
}

//----- (0000000000407876) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_63b.c",
      0x1Du,
      "CWE617_Reachable_Assertion__rand_63b_badSink");
  return result;
}

//----- (00000000004078AC) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_63b.c",
      0x29u,
      "CWE617_Reachable_Assertion__rand_63b_goodG2BSink");
  return result;
}

//----- (00000000004078E2) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_09_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_09.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_09_bad");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;
// 4078E2: using guessed type char buf[16];

//----- (0000000000407A33) ----------------------------------------------------
int goodG2B1_19()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_09.c", 0x95u, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000407A80) ----------------------------------------------------
__int64 goodG2B2_19()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_09.c", 0xA4u, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407AC1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_09_good()
{
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (0000000000407ADB) ----------------------------------------------------
__int64 __fastcall badSource_2(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  if ( badStatic_0 )
  {
    *(_QWORD *)s = 0LL;
    v4 = 0;
    v5 = 0;
    if ( fgets(s, 14, stdin) )
      v2 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  return v2;
}
// 6331A0: using guessed type int badStatic_0;

//----- (0000000000407B42) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_21_bad()
{
  __int64 result; // rax

  badStatic_0 = 1;
  result = badSource_2(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_21.c",
      0x3Bu,
      "CWE617_Reachable_Assertion__fgets_21_bad");
  return result;
}
// 6331A0: using guessed type int badStatic_0;

//----- (0000000000407B89) ----------------------------------------------------
__int64 __fastcall goodG2B1Source_0(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static_0 )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 6331A4: using guessed type int goodG2B1Static_0;

//----- (0000000000407BB6) ----------------------------------------------------
__int64 goodG2B1_20()
{
  __int64 result; // rax

  goodG2B1Static_0 = 0;
  result = goodG2B1Source_0(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_21.c", 0x5Eu, "goodG2B1");
  return result;
}
// 6331A4: using guessed type int goodG2B1Static_0;

//----- (0000000000407BFD) ----------------------------------------------------
__int64 __fastcall goodG2B2Source_0(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static_0 )
    v2 = 6;
  return v2;
}
// 6331A8: using guessed type int goodG2B2Static_0;

//----- (0000000000407C1A) ----------------------------------------------------
__int64 goodG2B2_20()
{
  __int64 result; // rax

  goodG2B2Static_0 = 1;
  result = goodG2B2Source_0(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_21.c", 0x74u, "goodG2B2");
  return result;
}
// 6331A8: using guessed type int goodG2B2Static_0;

//----- (0000000000407C61) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_21_good()
{
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (0000000000407C7B) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_03_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_03.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_03_bad");
  return result;
}

//----- (0000000000407CF8) ----------------------------------------------------
void goodG2B1_21()
{
  ;
}

//----- (0000000000407D2F) ----------------------------------------------------
void goodG2B2_21()
{
  ;
}

//----- (0000000000407D66) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_03_good()
{
  goodG2B1_21();
  goodG2B2_21();
}

//----- (0000000000407D80) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_63_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE617_Reachable_Assertion__fgets_63b_badSink(&v4);
}

//----- (0000000000407DEA) ----------------------------------------------------
__int64 goodG2B_34()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fgets_63b_goodG2BSink(&v1);
}

//----- (0000000000407E0E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_63_good()
{
  return goodG2B_34();
}

//----- (0000000000407E1E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fscanf_61b_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_61a.c",
      0x23u,
      "CWE617_Reachable_Assertion__fscanf_61_bad");
  return result;
}

//----- (0000000000407E5B) ----------------------------------------------------
__int64 goodG2B_35()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fscanf_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_61a.c", 0x34u, "goodG2B");
  return result;
}

//----- (0000000000407E98) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_61_good()
{
  return goodG2B_35();
}

//----- (0000000000407EA8) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_17_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    ;
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_17.c", 0x25u, "CWE617_Reachable_Assertion__fixed_17_bad");
}

//----- (0000000000407EF2) ----------------------------------------------------
void goodG2B_36()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_17.c", 0x39u, "goodG2B");
}

//----- (0000000000407F3C) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_17_good()
{
  goodG2B_36();
}

//----- (0000000000407F4C) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_53c_badSink(a1);
}

//----- (0000000000407F63) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_53c_goodG2BSink(a1);
}

//----- (0000000000407F7A) ----------------------------------------------------
void __fastcall badSink_1(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_44.c", 0x1Cu, "badSink");
}

//----- (0000000000407FA6) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_44_bad()
{
  badSink_1(4);
}

//----- (0000000000407FD1) ----------------------------------------------------
void __fastcall goodG2BSink_1(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_44.c", 0x34u, "goodG2BSink");
}

//----- (0000000000407FFD) ----------------------------------------------------
void goodG2B_37()
{
  goodG2BSink_1(6);
}

//----- (0000000000408028) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_44_good()
{
  goodG2B_37();
}

//----- (0000000000408038) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__rand_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__rand_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__rand_22_bad");
  return result;
}
// 6331AC: using guessed type int CWE617_Reachable_Assertion__rand_22_badGlobal;

//----- (000000000040807F) ----------------------------------------------------
__int64 goodG2B1_22()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__rand_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__rand_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 6331B0: using guessed type int CWE617_Reachable_Assertion__rand_22_goodG2B1Global;

//----- (00000000004080C6) ----------------------------------------------------
__int64 goodG2B2_22()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__rand_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__rand_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 6331B4: using guessed type int CWE617_Reachable_Assertion__rand_22_goodG2B2Global;

//----- (000000000040810D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_22_good()
{
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (0000000000408127) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54d_badSink(a1);
}

//----- (000000000040813E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54d_goodG2BSink(a1);
}

//----- (0000000000408155) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_05_bad()
{
  __int64 result; // rax

  result = (unsigned int)staticTrue_3;
  if ( staticTrue_3 )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_05.c", 0x21u, "CWE617_Reachable_Assertion__zero_05_bad");
  return result;
}
// 633140: using guessed type int staticTrue_3;

//----- (000000000040817E) ----------------------------------------------------
int good1_5()
{
  int result; // eax

  result = staticFalse_3;
  if ( staticFalse_3 )
    result = printLine("Benign, fixed string");
  return result;
}
// 6331B8: using guessed type int staticFalse_3;

//----- (0000000000408198) ----------------------------------------------------
void good2_3()
{
  ;
}

//----- (000000000040819E) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_05_good()
{
  good1_5();
  good2_3();
}

//----- (00000000004081B8) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_02_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_02.c", 0x24u, "CWE617_Reachable_Assertion__fixed_02_bad");
}

//----- (00000000004081EF) ----------------------------------------------------
void goodG2B1_23()
{
  ;
}

//----- (0000000000408226) ----------------------------------------------------
void goodG2B2_23()
{
  ;
}

//----- (000000000040825D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_02_good()
{
  goodG2B1_23();
  goodG2B2_23();
}

//----- (0000000000408277) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_07_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( staticFive_0 == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_07.c",
      0x2Au,
      "CWE617_Reachable_Assertion__fscanf_07_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633144: using guessed type int staticFive_0;

//----- (00000000004082D1) ----------------------------------------------------
int goodG2B1_24()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_07.c", 0x42u, "goodG2B1");
  return result;
}
// 633144: using guessed type int staticFive_0;

//----- (000000000040831F) ----------------------------------------------------
__int64 goodG2B2_24()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive_0;
  if ( staticFive_0 == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_07.c", 0x51u, "goodG2B2");
  return result;
}
// 633144: using guessed type int staticFive_0;

//----- (0000000000408361) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_07_good()
{
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (000000000040837B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_41.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__fscanf_41_badSink");
}

//----- (00000000004083A7) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_41_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE617_Reachable_Assertion__fscanf_41_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004083DF) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_41.c",
      0x30u,
      "CWE617_Reachable_Assertion__fscanf_41_goodG2BSink");
}

//----- (000000000040840B) ----------------------------------------------------
void goodG2B_38()
{
  CWE617_Reachable_Assertion__fscanf_41_goodG2BSink(6);
}

//----- (000000000040842D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_41_good()
{
  goodG2B_38();
}

//----- (000000000040843D) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_11_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = globalReturnsTrue();
  if ( result )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_11.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_11_bad");
  return result;
}
// 40843D: using guessed type char buf[16];

//----- (0000000000408592) ----------------------------------------------------
int goodG2B1_25()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_11.c", 0x95u, "goodG2B1");
  return result;
}

//----- (00000000004085E3) ----------------------------------------------------
__int64 goodG2B2_25()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_11.c", 0xA4u, "goodG2B2");
  return result;
}

//----- (0000000000408628) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_11_good()
{
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (0000000000408642) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_03.c", 0x24u, "CWE617_Reachable_Assertion__rand_03_bad");
  return result;
}

//----- (00000000004086C1) ----------------------------------------------------
void goodG2B1_26()
{
  ;
}

//----- (00000000004086F8) ----------------------------------------------------
void goodG2B2_26()
{
  ;
}

//----- (000000000040872F) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_03_good()
{
  goodG2B1_26();
  goodG2B2_26();
}

//----- (0000000000408749) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = CWE617_Reachable_Assertion__connect_socket_65b_badSink;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 408749: using guessed type char buf[16];

//----- (000000000040883A) ----------------------------------------------------
void goodG2B_39()
{
  CWE617_Reachable_Assertion__connect_socket_65b_goodG2BSink(6);
}

//----- (0000000000408865) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_65_good()
{
  goodG2B_39();
}

//----- (0000000000408875) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54c_badSink(a1);
}

//----- (000000000040888C) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54c_goodG2BSink(a1);
}

//----- (00000000004088A3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE617_Reachable_Assertion__rand_63b_badSink(&v6);
}

//----- (000000000040890F) ----------------------------------------------------
__int64 goodG2B_40()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__rand_63b_goodG2BSink(&v1);
}

//----- (0000000000408933) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_63_good()
{
  return goodG2B_40();
}

//----- (0000000000408943) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_12_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  else
  {
    v4 = 6;
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_12.c",
      0x36u,
      "CWE617_Reachable_Assertion__fgets_12_bad");
  return result;
}

//----- (00000000004089D7) ----------------------------------------------------
__int64 goodG2B_41()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000408A25) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_12_good()
{
  return goodG2B_41();
}

//----- (0000000000408A35) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54e_badSink(a1);
}

//----- (0000000000408A4C) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_54e_goodG2BSink(a1);
}

//----- (0000000000408A63) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_15_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_15.c",
      0x76u,
      "CWE617_Reachable_Assertion__connect_socket_15_bad");
  return result;
}
// 408A63: using guessed type char buf[16];

//----- (0000000000408B61) ----------------------------------------------------
void goodG2B1_27()
{
  ;
}

//----- (0000000000408B99) ----------------------------------------------------
void goodG2B2_27()
{
  ;
}

//----- (0000000000408BD1) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_15_good()
{
  goodG2B1_27();
  goodG2B2_27();
}

//----- (0000000000408BEB) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__connect_socket_68_badData;
  if ( CWE617_Reachable_Assertion__connect_socket_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_68b.c",
      0x38u,
      "CWE617_Reachable_Assertion__connect_socket_68b_badSink");
  return result;
}
// 633278: using guessed type int CWE617_Reachable_Assertion__connect_socket_68_badData;

//----- (0000000000408C1D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__connect_socket_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__connect_socket_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_68b.c",
      0x44u,
      "CWE617_Reachable_Assertion__connect_socket_68b_goodG2BSink");
  return result;
}
// 63327C: using guessed type int CWE617_Reachable_Assertion__connect_socket_68_goodG2BData;

//----- (0000000000408C4F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_61b_badSource()
{
  return 4LL;
}

//----- (0000000000408C62) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_61b_goodG2BSource()
{
  return 6LL;
}

//----- (0000000000408C75) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_18.c", 0x23u, "CWE617_Reachable_Assertion__rand_18_bad");
  return result;
}

//----- (0000000000408CF5) ----------------------------------------------------
void goodG2B_42()
{
  ;
}

//----- (0000000000408D2D) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_18_good()
{
  goodG2B_42();
}

//----- (0000000000408D3D) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_63b.c",
      0x1Fu,
      "CWE617_Reachable_Assertion__fgets_63b_badSink");
  return result;
}

//----- (0000000000408D73) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_63b.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fgets_63b_goodG2BSink");
  return result;
}

//----- (0000000000408DA9) ----------------------------------------------------
__int64 __fastcall badSource_3(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 408DA9: using guessed type char buf[16];

//----- (0000000000408E86) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_42_bad()
{
  __int64 result; // rax

  result = badSource_3(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_42.c",
      0x73u,
      "CWE617_Reachable_Assertion__connect_socket_42_bad");
  return result;
}

//----- (0000000000408EC3) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 6LL;
}

//----- (0000000000408ED6) ----------------------------------------------------
__int64 goodG2B_43()
{
  __int64 result; // rax

  result = goodG2BSource_1();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_42.c", 0x89u, "goodG2B");
  return result;
}

//----- (0000000000408F13) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_42_good()
{
  return goodG2B_43();
}

//----- (0000000000408F23) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54d_badSink(a1);
}

//----- (0000000000408F3A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54d_goodG2BSink(a1);
}

//----- (0000000000408F51) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_01_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_01.c", 0x21u, "CWE617_Reachable_Assertion__fixed_01_bad");
}

//----- (0000000000408F88) ----------------------------------------------------
void goodG2B_44()
{
  ;
}

//----- (0000000000408FBF) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_01_good()
{
  goodG2B_44();
}

//----- (0000000000408FCF) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_53d.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fixed_53d_badSink");
}

//----- (0000000000408FFB) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_53d.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_53d_goodG2BSink");
}

//----- (0000000000409027) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_66b.c",
      0x34u,
      "CWE617_Reachable_Assertion__connect_socket_66b_badSink");
  return result;
}

//----- (000000000040905E) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_66b.c",
      0x40u,
      "CWE617_Reachable_Assertion__connect_socket_66b_goodG2BSink");
  return result;
}

//----- (0000000000409095) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_12_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  result = globalReturnsTrueOrFalse();
  if ( (_DWORD)result )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  else
  {
    v5 = 6;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_12.c", 0x29u, "CWE617_Reachable_Assertion__rand_12_bad");
  return result;
}

//----- (000000000040912B) ----------------------------------------------------
__int64 goodG2B_45()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000409179) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_12_good()
{
  return goodG2B_45();
}

//----- (0000000000409189) ----------------------------------------------------
void __fastcall badSink_2(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_44.c", 0x1Eu, "badSink");
}

//----- (00000000004091B5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_44_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = badSink_2;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000409226) ----------------------------------------------------
void __fastcall goodG2BSink_2(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_44.c", 0x41u, "goodG2BSink");
}

//----- (0000000000409252) ----------------------------------------------------
void goodG2B_46()
{
  goodG2BSink_2(6);
}

//----- (000000000040927D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_44_good()
{
  goodG2B_46();
}

//----- (000000000040928D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__listen_socket_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__listen_socket_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__listen_socket_22_bad");
  return result;
}
// 6331BC: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_badGlobal;

//----- (00000000004092D4) ----------------------------------------------------
__int64 goodG2B1_28()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 6331C0: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Global;

//----- (000000000040931B) ----------------------------------------------------
__int64 goodG2B2_28()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 6331C4: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Global;

//----- (0000000000409362) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_22_good()
{
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (000000000040937C) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_11_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = globalReturnsTrue();
  if ( result )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_11.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_11_bad");
  return result;
}

//----- (0000000000409407) ----------------------------------------------------
int goodG2B1_29()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_11.c", 0x49u, "goodG2B1");
  return result;
}

//----- (0000000000409458) ----------------------------------------------------
__int64 goodG2B2_29()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_11.c", 0x58u, "goodG2B2");
  return result;
}

//----- (000000000040949D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_11_good()
{
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (00000000004094B7) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_02_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_02.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_02_bad");
  return result;
}

//----- (0000000000409534) ----------------------------------------------------
void goodG2B1_30()
{
  ;
}

//----- (000000000040956B) ----------------------------------------------------
void goodG2B2_30()
{
  ;
}

//----- (00000000004095A2) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_02_good()
{
  goodG2B1_30();
  goodG2B2_30();
}

//----- (00000000004095BC) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54c_badSink(a1);
}

//----- (00000000004095D3) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54c_goodG2BSink(a1);
}

//----- (00000000004095EA) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (00000000004095F5) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (0000000000409600) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_08_bad()
{
  staticReturnsTrue();
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_08.c", 0x32u, "CWE617_Reachable_Assertion__fixed_08_bad");
}

//----- (0000000000409645) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_08.c", 0x4Au, "goodG2B1");
  return result;
}

//----- (0000000000409696) ----------------------------------------------------
__int64 goodG2B2_31()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_08.c", 0x59u, "goodG2B2");
  return result;
}

//----- (00000000004096DB) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_08_good()
{
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (00000000004096F5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fixed_61b_badSource();
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_61a.c",
      0x23u,
      "CWE617_Reachable_Assertion__fixed_61_bad");
  return result;
}

//----- (0000000000409732) ----------------------------------------------------
__int64 goodG2B_47()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fixed_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_61a.c", 0x34u, "goodG2B");
  return result;
}

//----- (000000000040976F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_61_good()
{
  return goodG2B_47();
}

//----- (000000000040977F) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_64b.c",
      0x36u,
      "CWE617_Reachable_Assertion__listen_socket_64b_badSink");
  return result;
}

//----- (00000000004097BD) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_64b.c",
      0x45u,
      "CWE617_Reachable_Assertion__listen_socket_64b_goodG2BSink");
  return result;
}

//----- (00000000004097FB) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_12_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  else
  {
    v7 = 6;
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_12.c",
      0x75u,
      "CWE617_Reachable_Assertion__connect_socket_12_bad");
  return result;
}
// 4097FB: using guessed type char buf[16];

//----- (0000000000409915) ----------------------------------------------------
__int64 goodG2B_48()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000409963) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_12_good()
{
  return goodG2B_48();
}

//----- (0000000000409973) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_05_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_05.c",
      0x77u,
      "CWE617_Reachable_Assertion__connect_socket_05_bad");
  return result;
}
// 633148: using guessed type int staticTrue_4;
// 409973: using guessed type char buf[16];

//----- (0000000000409A7E) ----------------------------------------------------
int goodG2B1_32()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse_4;
  if ( staticFalse_4 )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_05.c", 0x8Fu, "goodG2B1");
  return result;
}
// 6331C8: using guessed type int staticFalse_4;

//----- (0000000000409ACB) ----------------------------------------------------
__int64 goodG2B2_32()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue_4;
  if ( staticTrue_4 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_05.c", 0x9Eu, "goodG2B2");
  return result;
}
// 633148: using guessed type int staticTrue_4;

//----- (0000000000409B0C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_05_good()
{
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (0000000000409B26) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_53c_badSink(a1);
}

//----- (0000000000409B3D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_53c_goodG2BSink(a1);
}

//----- (0000000000409B54) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_10_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = globalTrue;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_10.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_10_bad");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (0000000000409BDB) ----------------------------------------------------
int goodG2B1_33()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_10.c", 0x49u, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (0000000000409C28) ----------------------------------------------------
__int64 goodG2B2_33()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_10.c", 0x58u, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (0000000000409C69) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_10_good()
{
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (0000000000409C83) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v5 = v2;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_17.c", 0x25u, "CWE617_Reachable_Assertion__rand_17_bad");
}

//----- (0000000000409D15) ----------------------------------------------------
void goodG2B_49()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_17.c", 0x39u, "goodG2B");
}

//----- (0000000000409D5F) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_17_good()
{
  goodG2B_49();
}

//----- (0000000000409D6F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_52c.c",
      0x34u,
      "CWE617_Reachable_Assertion__connect_socket_52c_badSink");
}

//----- (0000000000409D9B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_52c.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink");
}

//----- (0000000000409DC7) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_07_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_07.c", 0x2Au, "CWE617_Reachable_Assertion__fixed_07_bad");
}

//----- (0000000000409E09) ----------------------------------------------------
int goodG2B1_34()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_07.c", 0x42u, "goodG2B1");
  return result;
}
// 63314C: using guessed type int staticFive_1;

//----- (0000000000409E57) ----------------------------------------------------
__int64 goodG2B2_34()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive_1;
  if ( staticFive_1 == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_07.c", 0x51u, "goodG2B2");
  return result;
}
// 63314C: using guessed type int staticFive_1;

//----- (0000000000409E99) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_07_good()
{
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (0000000000409EB3) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_65b.c",
      0x32u,
      "CWE617_Reachable_Assertion__listen_socket_65b_badSink");
}

//----- (0000000000409EDF) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_65b.c",
      0x3Du,
      "CWE617_Reachable_Assertion__listen_socket_65b_goodG2BSink");
}

//----- (0000000000409F0B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v7 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_68_badData = v7;
  return CWE617_Reachable_Assertion__connect_socket_68b_badSink();
}
// 633278: using guessed type int CWE617_Reachable_Assertion__connect_socket_68_badData;
// 409F0B: using guessed type char buf[16];

//----- (0000000000409FFC) ----------------------------------------------------
__int64 goodG2B_50()
{
  CWE617_Reachable_Assertion__connect_socket_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__connect_socket_68b_goodG2BSink();
}
// 63327C: using guessed type int CWE617_Reachable_Assertion__connect_socket_68_goodG2BData;

//----- (000000000040A027) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_68_good()
{
  return goodG2B_50();
}

//----- (000000000040A037) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_02.c", 0x24u, "CWE617_Reachable_Assertion__rand_02_bad");
  return result;
}

//----- (000000000040A0B6) ----------------------------------------------------
void goodG2B1_35()
{
  ;
}

//----- (000000000040A0ED) ----------------------------------------------------
void goodG2B2_35()
{
  ;
}

//----- (000000000040A124) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_02_good()
{
  goodG2B1_35();
  goodG2B2_35();
}

//----- (000000000040A13E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_34_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v9;
  result = (unsigned int)v9;
  v6 = v9;
  if ( v9 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_34.c",
      0x77u,
      "CWE617_Reachable_Assertion__connect_socket_34_bad");
  return result;
}
// 40A13E: using guessed type char buf[16];

//----- (000000000040A247) ----------------------------------------------------
__int64 goodG2B_51()
{
  return 6LL;
}

//----- (000000000040A28A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_34_good()
{
  return goodG2B_51();
}

//----- (000000000040A29A) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_01_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_01.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fgets_01_bad");
  return result;
}

//----- (000000000040A317) ----------------------------------------------------
void goodG2B_52()
{
  ;
}

//----- (000000000040A34E) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_01_good()
{
  goodG2B_52();
}

//----- (000000000040A35E) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fixed_22_badGlobal )
    v2 = 4;
  return v2;
}
// 6331D0: using guessed type int CWE617_Reachable_Assertion__fixed_22_badGlobal;

//----- (000000000040A37B) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fixed_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 6331D4: using guessed type int CWE617_Reachable_Assertion__fixed_22_goodG2B1Global;

//----- (000000000040A3A8) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fixed_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 6331D8: using guessed type int CWE617_Reachable_Assertion__fixed_22_goodG2B2Global;

//----- (000000000040A3C5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_53d.c",
      0x20u,
      "CWE617_Reachable_Assertion__fgets_53d_badSink");
}

//----- (000000000040A3F1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_53d.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fgets_53d_goodG2BSink");
}

//----- (000000000040A41D) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_53b_badSink(v2);
}

//----- (000000000040A487) ----------------------------------------------------
void goodG2B_53()
{
  CWE617_Reachable_Assertion__rand_53b_goodG2BSink(6);
}

//----- (000000000040A4A9) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_53_good()
{
  goodG2B_53();
}

//----- (000000000040A4B9) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040A518) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_61b_goodG2BSource()
{
  return 6LL;
}

//----- (000000000040A52B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_10_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_10.c", 0x24u, "CWE617_Reachable_Assertion__rand_10_bad");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (000000000040A5B4) ----------------------------------------------------
int goodG2B1_36()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_10.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (000000000040A601) ----------------------------------------------------
__int64 goodG2B2_36()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_10.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (000000000040A642) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_10_good()
{
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (000000000040A65C) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_65b.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__fscanf_65b_badSink");
}

//----- (000000000040A688) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_65b.c",
      0x27u,
      "CWE617_Reachable_Assertion__fscanf_65b_goodG2BSink");
}

//----- (000000000040A6B4) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_53b_badSink(v6);
}
// 40A6B4: using guessed type char buf[16];

//----- (000000000040A79C) ----------------------------------------------------
void goodG2B_54()
{
  CWE617_Reachable_Assertion__connect_socket_53b_goodG2BSink(6);
}

//----- (000000000040A7BE) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_53_good()
{
  goodG2B_54();
}

//----- (000000000040A7CE) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_53d_badSink(a1);
}

//----- (000000000040A7E5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_53d_goodG2BSink(a1);
}

//----- (000000000040A7FC) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54d_badSink(a1);
}

//----- (000000000040A813) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54d_goodG2BSink(a1);
}

//----- (000000000040A82A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_32_bad()
{
  __int64 result; // rax
  char s[8]; // [rsp+0h] [rbp-30h]
  int v2; // [rsp+8h] [rbp-28h]
  __int16 v3; // [rsp+Ch] [rbp-24h]
  int v4; // [rsp+10h] [rbp-20h]
  int v5; // [rsp+14h] [rbp-1Ch]
  int *v6; // [rsp+18h] [rbp-18h]
  int *v7; // [rsp+20h] [rbp-10h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v7 = &v4;
  v6 = &v4;
  v4 = -1;
  v8 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v8 = atoi(s);
  else
    printLine("fgets() failed.");
  *v7 = v8;
  result = (unsigned int)*v6;
  v5 = *v6;
  if ( v5 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_32.c",
      0x36u,
      "CWE617_Reachable_Assertion__fgets_32_bad");
  return result;
}

//----- (000000000040A8D2) ----------------------------------------------------
__int64 goodG2B_55()
{
  return 6LL;
}

//----- (000000000040A934) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_32_good()
{
  return goodG2B_55();
}

//----- (000000000040A944) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040A94F) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (000000000040A95A) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_08_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = staticReturnsTrue_0();
  if ( result )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_08.c",
      0x7Eu,
      "CWE617_Reachable_Assertion__connect_socket_08_bad");
  return result;
}
// 40A95A: using guessed type char buf[16];

//----- (000000000040AA69) ----------------------------------------------------
int goodG2B1_37()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse_0();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_08.c", 0x96u, "goodG2B1");
  return result;
}

//----- (000000000040AABA) ----------------------------------------------------
__int64 goodG2B2_37()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue_0();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_08.c", 0xA5u, "goodG2B2");
  return result;
}

//----- (000000000040AAFF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_08_good()
{
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (000000000040AB19) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE617_Reachable_Assertion__listen_socket_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 40AB19: using guessed type char buf[16];

//----- (000000000040AC50) ----------------------------------------------------
void goodG2B_56()
{
  CWE617_Reachable_Assertion__listen_socket_65b_goodG2BSink(6);
}

//----- (000000000040AC7B) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_65_good()
{
  goodG2B_56();
}

//----- (000000000040AC8B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_01.c", 0x21u, "CWE617_Reachable_Assertion__rand_01_bad");
  return result;
}

//----- (000000000040AD0A) ----------------------------------------------------
void goodG2B_57()
{
  ;
}

//----- (000000000040AD41) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_01_good()
{
  goodG2B_57();
}

//----- (000000000040AD51) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  *(_QWORD *)s = 0LL;
  v4 = 0;
  v5 = 0;
  if ( fgets(s, 14, stdin) )
    v2 = atoi(s);
  else
    printLine("fgets() failed.");
  return v2;
}

//----- (000000000040ADAE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_61b_goodG2BSource()
{
  return 6LL;
}

//----- (000000000040ADC1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_53d.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__rand_53d_badSink");
}

//----- (000000000040ADED) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_53d.c",
      0x29u,
      "CWE617_Reachable_Assertion__rand_53d_goodG2BSink");
}

//----- (000000000040AE19) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_15_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_15.c",
      0x83u,
      "CWE617_Reachable_Assertion__listen_socket_15_bad");
  return result;
}
// 40AE19: using guessed type char buf[16];

//----- (000000000040AF5D) ----------------------------------------------------
void goodG2B1_38()
{
  ;
}

//----- (000000000040AF95) ----------------------------------------------------
void goodG2B2_38()
{
  ;
}

//----- (000000000040AFCD) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_15_good()
{
  goodG2B1_38();
  goodG2B2_38();
}

//----- (000000000040AFE7) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_07_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = staticFive_2;
  if ( staticFive_2 == 5 )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_07.c",
      0x37u,
      "CWE617_Reachable_Assertion__fgets_07_bad");
  return result;
}
// 633150: using guessed type int staticFive_2;

//----- (000000000040B06F) ----------------------------------------------------
int goodG2B1_39()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive_2;
  if ( staticFive_2 == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_07.c", 0x4Fu, "goodG2B1");
  return result;
}
// 633150: using guessed type int staticFive_2;

//----- (000000000040B0BD) ----------------------------------------------------
__int64 goodG2B2_39()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive_2;
  if ( staticFive_2 == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_07.c", 0x5Eu, "goodG2B2");
  return result;
}
// 633150: using guessed type int staticFive_2;

//----- (000000000040B0FF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_07_good()
{
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (000000000040B119) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_53d_badSink(a1);
}

//----- (000000000040B130) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_53d_goodG2BSink(a1);
}

//----- (000000000040B147) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_68_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_68_badData = v4;
  return CWE617_Reachable_Assertion__fgets_68b_badSink();
}
// 633284: using guessed type int CWE617_Reachable_Assertion__fgets_68_badData;

//----- (000000000040B1B8) ----------------------------------------------------
__int64 goodG2B_58()
{
  CWE617_Reachable_Assertion__fgets_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__fgets_68b_goodG2BSink();
}
// 633280: using guessed type int CWE617_Reachable_Assertion__fgets_68_goodG2BData;

//----- (000000000040B1E3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_68_good()
{
  return goodG2B_58();
}

//----- (000000000040B1F3) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_66b.c",
      0x34u,
      "CWE617_Reachable_Assertion__listen_socket_66b_badSink");
  return result;
}

//----- (000000000040B22A) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_66b.c",
      0x40u,
      "CWE617_Reachable_Assertion__listen_socket_66b_goodG2BSink");
  return result;
}

//----- (000000000040B261) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_04.c", 0x2Bu, "CWE617_Reachable_Assertion__rand_04_bad");
  return result;
}

//----- (000000000040B2E9) ----------------------------------------------------
__int64 goodG2B1_40()
{
  return 0LL;
}

//----- (000000000040B335) ----------------------------------------------------
__int64 goodG2B2_40()
{
  return 1LL;
}

//----- (000000000040B375) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_04_good()
{
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (000000000040B38F) ----------------------------------------------------
__int64 __fastcall badSource_4(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40B38F: using guessed type char buf[16];

//----- (000000000040B4B2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_42_bad()
{
  __int64 result; // rax

  result = badSource_4(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_42.c",
      0x80u,
      "CWE617_Reachable_Assertion__listen_socket_42_bad");
  return result;
}

//----- (000000000040B4EF) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 6LL;
}

//----- (000000000040B502) ----------------------------------------------------
__int64 goodG2B_59()
{
  __int64 result; // rax

  result = goodG2BSource_2();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_42.c", 0x96u, "goodG2B");
  return result;
}

//----- (000000000040B53F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_42_good()
{
  return goodG2B_59();
}

//----- (000000000040B54F) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_16_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_16.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_16_bad");
}

//----- (000000000040B56C) ----------------------------------------------------
void good1_6()
{
  ;
}

//----- (000000000040B573) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_16_good()
{
  good1_6();
}

//----- (000000000040B583) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__rand_61b_badSource();
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_61a.c",
      0x23u,
      "CWE617_Reachable_Assertion__rand_61_bad");
  return result;
}

//----- (000000000040B5C0) ----------------------------------------------------
__int64 goodG2B_60()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__rand_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_61a.c", 0x34u, "goodG2B");
  return result;
}

//----- (000000000040B5FD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_61_good()
{
  return goodG2B_60();
}

//----- (000000000040B60D) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_04_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_04.c",
      0x38u,
      "CWE617_Reachable_Assertion__fgets_04_bad");
  return result;
}

//----- (000000000040B693) ----------------------------------------------------
__int64 goodG2B1_41()
{
  return 0LL;
}

//----- (000000000040B6DF) ----------------------------------------------------
__int64 goodG2B2_41()
{
  return 1LL;
}

//----- (000000000040B71F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_04_good()
{
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (000000000040B739) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_65_bad()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  void (__fastcall *v2)(int); // [rsp+8h] [rbp-8h]

  v2 = CWE617_Reachable_Assertion__fscanf_65b_badSink;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return ((__int64 (__fastcall *)(_QWORD))v2)(v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B77A) ----------------------------------------------------
void goodG2B_61()
{
  CWE617_Reachable_Assertion__fscanf_65b_goodG2BSink(6);
}

//----- (000000000040B7A5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_65_good()
{
  goodG2B_61();
}

//----- (000000000040B7B5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_16_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_16.c",
      0x25u,
      "CWE617_Reachable_Assertion__fscanf_16_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B805) ----------------------------------------------------
void goodG2B_62()
{
  ;
}

//----- (000000000040B83D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_16_good()
{
  goodG2B_62();
}

//----- (000000000040B84D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_54_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_54b_badSink(v3);
}

//----- (000000000040B8B5) ----------------------------------------------------
void goodG2B_63()
{
  CWE617_Reachable_Assertion__fgets_54b_goodG2BSink(6);
}

//----- (000000000040B8D7) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_54_good()
{
  goodG2B_63();
}

//----- (000000000040B8E7) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__connect_socket_22_badGlobal )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = inet_addr("127.0.0.1");
      v5 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v7 = recv(fd, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  return v2;
}
// 6331EC: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_badGlobal;
// 40B8E7: using guessed type char buf[16];

//----- (000000000040B9D2) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 6331F0: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global;

//----- (000000000040B9FF) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 6331F4: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global;

//----- (000000000040BA1C) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_54_bad()
{
  CWE617_Reachable_Assertion__fixed_54b_badSink(4);
}

//----- (000000000040BA3E) ----------------------------------------------------
void goodG2B_64()
{
  CWE617_Reachable_Assertion__fixed_54b_goodG2BSink(6);
}

//----- (000000000040BA60) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_54_good()
{
  goodG2B_64();
}

//----- (000000000040BA70) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_09_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_09.c", 0x24u, "CWE617_Reachable_Assertion__rand_09_bad");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BAF9) ----------------------------------------------------
int goodG2B1_42()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_09.c", 0x3Cu, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040BB46) ----------------------------------------------------
__int64 goodG2B2_42()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_09.c", 0x4Bu, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BB87) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_09_good()
{
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (000000000040BBA1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_09_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_TRUE )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_09.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_09_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BBFA) ----------------------------------------------------
int goodG2B1_43()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_09.c", 0x3Cu, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040BC47) ----------------------------------------------------
__int64 goodG2B2_43()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_09.c", 0x4Bu, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040BC88) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_09_good()
{
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (000000000040BCA2) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_52c_badSink(a1);
}

//----- (000000000040BCB9) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_52c_goodG2BSink(a1);
}

//----- (000000000040BCD0) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_07_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_07.c",
      0x76u,
      "CWE617_Reachable_Assertion__connect_socket_07_bad");
  return result;
}
// 633154: using guessed type int staticFive_3;
// 40BCD0: using guessed type char buf[16];

//----- (000000000040BDDC) ----------------------------------------------------
int goodG2B1_44()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive_3;
  if ( staticFive_3 == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_07.c", 0x8Eu, "goodG2B1");
  return result;
}
// 633154: using guessed type int staticFive_3;

//----- (000000000040BE2A) ----------------------------------------------------
__int64 goodG2B2_44()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive_3;
  if ( staticFive_3 == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_07.c", 0x9Du, "goodG2B2");
  return result;
}
// 633154: using guessed type int staticFive_3;

//----- (000000000040BE6C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_07_good()
{
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (000000000040BE86) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54c_badSink(a1);
}

//----- (000000000040BE9D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54c_goodG2BSink(a1);
}

//----- (000000000040BEB4) ----------------------------------------------------
__int64 __fastcall badSource_5(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040BEE1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_42_bad()
{
  __int64 result; // rax

  result = badSource_5(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_42.c",
      0x27u,
      "CWE617_Reachable_Assertion__fscanf_42_bad");
  return result;
}

//----- (000000000040BF1E) ----------------------------------------------------
__int64 goodG2BSource_3()
{
  return 6LL;
}

//----- (000000000040BF31) ----------------------------------------------------
__int64 goodG2B_65()
{
  __int64 result; // rax

  result = goodG2BSource_3();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_42.c", 0x3Du, "goodG2B");
  return result;
}

//----- (000000000040BF6E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_42_good()
{
  return goodG2B_65();
}

//----- (000000000040BF7E) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_05_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_05.c",
      0x84u,
      "CWE617_Reachable_Assertion__listen_socket_05_bad");
  return result;
}
// 633158: using guessed type int staticTrue_5;
// 40BF7E: using guessed type char buf[16];

//----- (000000000040C0CF) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFalse_5;
  if ( staticFalse_5 )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_05.c", 0x9Cu, "goodG2B1");
  return result;
}
// 6331CC: using guessed type int staticFalse_5;

//----- (000000000040C11C) ----------------------------------------------------
__int64 goodG2B2_45()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticTrue_5;
  if ( staticTrue_5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_05.c", 0xABu, "goodG2B2");
  return result;
}
// 633158: using guessed type int staticTrue_5;

//----- (000000000040C15D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_05_good()
{
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (000000000040C177) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_41.c",
      0x32u,
      "CWE617_Reachable_Assertion__listen_socket_41_badSink");
}

//----- (000000000040C1A3) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE617_Reachable_Assertion__listen_socket_41_badSink(v7);
}
// 40C1A3: using guessed type char buf[16];

//----- (000000000040C2D1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_41.c",
      0x89u,
      "CWE617_Reachable_Assertion__listen_socket_41_goodG2BSink");
}

//----- (000000000040C2FD) ----------------------------------------------------
void goodG2B_66()
{
  CWE617_Reachable_Assertion__listen_socket_41_goodG2BSink(6);
}

//----- (000000000040C31F) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_41_good()
{
  goodG2B_66();
}

//----- (000000000040C32F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fscanf_68_badData;
  if ( CWE617_Reachable_Assertion__fscanf_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_68b.c",
      0x22u,
      "CWE617_Reachable_Assertion__fscanf_68b_badSink");
  return result;
}
// 633268: using guessed type int CWE617_Reachable_Assertion__fscanf_68_badData;

//----- (000000000040C361) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fscanf_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__fscanf_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_68b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fscanf_68b_goodG2BSink");
  return result;
}
// 63326C: using guessed type int CWE617_Reachable_Assertion__fscanf_68_goodG2BData;

//----- (000000000040C393) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53b_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_53c_badSink(a1);
}

//----- (000000000040C3AA) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_53c_goodG2BSink(a1);
}

//----- (000000000040C3C1) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_65b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_65b.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__fixed_65b_badSink");
}

//----- (000000000040C3ED) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_65b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_65b.c",
      0x27u,
      "CWE617_Reachable_Assertion__fixed_65b_goodG2BSink");
}

//----- (000000000040C419) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_52c.c",
      0x34u,
      "CWE617_Reachable_Assertion__listen_socket_52c_badSink");
}

//----- (000000000040C445) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_52c.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__listen_socket_52c_goodG2BSink");
}

//----- (000000000040C471) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE617_Reachable_Assertion__listen_socket_68_badData = v8;
  return CWE617_Reachable_Assertion__listen_socket_68b_badSink();
}
// 633288: using guessed type int CWE617_Reachable_Assertion__listen_socket_68_badData;
// 40C471: using guessed type char buf[16];

//----- (000000000040C5A8) ----------------------------------------------------
__int64 goodG2B_67()
{
  CWE617_Reachable_Assertion__listen_socket_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__listen_socket_68b_goodG2BSink();
}
// 63328C: using guessed type int CWE617_Reachable_Assertion__listen_socket_68_goodG2BData;

//----- (000000000040C5D3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_68_good()
{
  return goodG2B_67();
}

//----- (000000000040C5E3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fixed_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__fixed_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__fixed_22_bad");
  return result;
}
// 6331D0: using guessed type int CWE617_Reachable_Assertion__fixed_22_badGlobal;

//----- (000000000040C62A) ----------------------------------------------------
__int64 goodG2B1_46()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fixed_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__fixed_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 6331D4: using guessed type int CWE617_Reachable_Assertion__fixed_22_goodG2B1Global;

//----- (000000000040C671) ----------------------------------------------------
__int64 goodG2B2_46()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fixed_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__fixed_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 6331D8: using guessed type int CWE617_Reachable_Assertion__fixed_22_goodG2B2Global;

//----- (000000000040C6B8) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_22_good()
{
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (000000000040C6D2) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54c_badSink(a1);
}

//----- (000000000040C6E9) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__rand_54c_goodG2BSink(a1);
}

//----- (000000000040C700) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_67b.c",
      0x38u,
      "CWE617_Reachable_Assertion__connect_socket_67b_badSink");
  return result;
}

//----- (000000000040C732) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_67b.c",
      0x44u,
      "CWE617_Reachable_Assertion__connect_socket_67b_goodG2BSink");
  return result;
}

//----- (000000000040C764) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_54e.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fixed_54e_badSink");
}

//----- (000000000040C790) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_54e.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_54e_goodG2BSink");
}

//----- (000000000040C7BC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_66_bad()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 4;
  v2 = 4;
  return CWE617_Reachable_Assertion__fixed_66b_badSink((__int64)&v1);
}

//----- (000000000040C7E6) ----------------------------------------------------
__int64 goodG2B_68()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__fixed_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040C810) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_66_good()
{
  return goodG2B_68();
}

//----- (000000000040C820) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE617_Reachable_Assertion__connect_socket_64b_badSink(&v5);
}
// 40C820: using guessed type char buf[16];

//----- (000000000040C90A) ----------------------------------------------------
__int64 goodG2B_69()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__connect_socket_64b_goodG2BSink(&v1);
}

//----- (000000000040C92E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_64_good()
{
  return goodG2B_69();
}

//----- (000000000040C93E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_54e.c",
      0x34u,
      "CWE617_Reachable_Assertion__connect_socket_54e_badSink");
}

//----- (000000000040C96A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_54e.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__connect_socket_54e_goodG2BSink");
}

//----- (000000000040C996) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_14_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = globalFive;
  if ( globalFive == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_14.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_14_bad");
  return result;
}
// 633168: using guessed type int globalFive;
// 40C996: using guessed type char buf[16];

//----- (000000000040CAA2) ----------------------------------------------------
int goodG2B1_47()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_14.c", 0x88u, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040CAF0) ----------------------------------------------------
__int64 goodG2B2_47()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_14.c", 0x97u, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040CB32) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_14_good()
{
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (000000000040CB4C) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_66b.c",
      0x20u,
      "CWE617_Reachable_Assertion__fgets_66b_badSink");
  return result;
}

//----- (000000000040CB83) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_66b.c",
      0x2Cu,
      "CWE617_Reachable_Assertion__fgets_66b_goodG2BSink");
  return result;
}

//----- (000000000040CBBA) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE617_Reachable_Assertion__listen_socket_52b_badSink(v7);
}
// 40CBBA: using guessed type char buf[16];

//----- (000000000040CCE8) ----------------------------------------------------
void goodG2B_70()
{
  CWE617_Reachable_Assertion__listen_socket_52b_goodG2BSink(6);
}

//----- (000000000040CD0A) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_52_good()
{
  goodG2B_70();
}

//----- (000000000040CD1A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_07_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)staticFive_4;
  if ( staticFive_4 == 5 )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_07.c", 0x2Au, "CWE617_Reachable_Assertion__rand_07_bad");
  return result;
}
// 63315C: using guessed type int staticFive_4;

//----- (000000000040CDA4) ----------------------------------------------------
int goodG2B1_48()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticFive_4;
  if ( staticFive_4 == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_07.c", 0x42u, "goodG2B1");
  return result;
}
// 63315C: using guessed type int staticFive_4;

//----- (000000000040CDF2) ----------------------------------------------------
__int64 goodG2B2_48()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)staticFive_4;
  if ( staticFive_4 == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_07.c", 0x51u, "goodG2B2");
  return result;
}
// 63315C: using guessed type int staticFive_4;

//----- (000000000040CE34) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_07_good()
{
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (000000000040CE4E) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_04_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_04.c",
      0x77u,
      "CWE617_Reachable_Assertion__connect_socket_04_bad");
  return result;
}
// 40CE4E: using guessed type char buf[16];

//----- (000000000040CF58) ----------------------------------------------------
__int64 goodG2B1_49()
{
  return 0LL;
}

//----- (000000000040CFA4) ----------------------------------------------------
__int64 goodG2B2_49()
{
  return 1LL;
}

//----- (000000000040CFE4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_04_good()
{
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (000000000040CFFE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_31_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  result = (unsigned int)v9;
  v5 = v9;
  if ( v9 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_31.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_31_bad");
  return result;
}
// 40CFFE: using guessed type char buf[16];

//----- (000000000040D107) ----------------------------------------------------
__int64 goodG2B_71()
{
  return 6LL;
}

//----- (000000000040D14A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_31_good()
{
  return goodG2B_71();
}

//----- (000000000040D15A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_52c_badSink(a1);
}

//----- (000000000040D171) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_52c_goodG2BSink(a1);
}

//----- (000000000040D188) ----------------------------------------------------
__int64 badSink_3()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__listen_socket_45_badData;
  if ( CWE617_Reachable_Assertion__listen_socket_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_45.c", 0x36u, "badSink");
  return result;
}
// 6331DC: using guessed type int CWE617_Reachable_Assertion__listen_socket_45_badData;

//----- (000000000040D1BA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE617_Reachable_Assertion__listen_socket_45_badData = v8;
  return badSink_3();
}
// 6331DC: using guessed type int CWE617_Reachable_Assertion__listen_socket_45_badData;
// 40D1BA: using guessed type char buf[16];

//----- (000000000040D2F1) ----------------------------------------------------
__int64 goodG2BSink_3()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__listen_socket_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__listen_socket_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_45.c", 0x90u, "goodG2BSink");
  return result;
}
// 6331E0: using guessed type int CWE617_Reachable_Assertion__listen_socket_45_goodG2BData;

//----- (000000000040D323) ----------------------------------------------------
__int64 goodG2B_72()
{
  CWE617_Reachable_Assertion__listen_socket_45_goodG2BData = 6;
  return goodG2BSink_3();
}
// 6331E0: using guessed type int CWE617_Reachable_Assertion__listen_socket_45_goodG2BData;

//----- (000000000040D34E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_45_good()
{
  return goodG2B_72();
}

//----- (000000000040D35E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_52c_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_52c.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__rand_52c_badSink");
}

//----- (000000000040D38A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_52c_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_52c.c",
      0x29u,
      "CWE617_Reachable_Assertion__rand_52c_goodG2BSink");
}

//----- (000000000040D3B6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_07_bad()
{
  __int64 result; // rax

  result = (unsigned int)staticFive_5;
  if ( staticFive_5 == 5 )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_07.c", 0x20u, "CWE617_Reachable_Assertion__zero_07_bad");
  return result;
}
// 633160: using guessed type int staticFive_5;

//----- (000000000040D3E0) ----------------------------------------------------
int good1_7()
{
  int result; // eax

  result = staticFive_5;
  if ( staticFive_5 != 5 )
    result = printLine("Benign, fixed string");
  return result;
}
// 633160: using guessed type int staticFive_5;

//----- (000000000040D3FB) ----------------------------------------------------
void good2_4()
{
  ;
}

//----- (000000000040D401) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_07_good()
{
  good1_7();
  good2_4();
}

//----- (000000000040D41B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_53_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_53b_badSink(v3);
}

//----- (000000000040D483) ----------------------------------------------------
void goodG2B_73()
{
  CWE617_Reachable_Assertion__fgets_53b_goodG2BSink(6);
}

//----- (000000000040D4A5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_53_good()
{
  goodG2B_73();
}

//----- (000000000040D4B5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_51_bad()
{
  int v0; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  __isoc99_fscanf(stdin, "%d", &v0);
  CWE617_Reachable_Assertion__fscanf_51b_badSink(v0);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040D4ED) ----------------------------------------------------
void goodG2B_74()
{
  CWE617_Reachable_Assertion__fscanf_51b_goodG2BSink(6);
}

//----- (000000000040D50F) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_51_good()
{
  goodG2B_74();
}

//----- (000000000040D51F) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_06_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_06.c",
      0x81u,
      "CWE617_Reachable_Assertion__listen_socket_06_bad");
  return result;
}
// 40D51F: using guessed type char buf[16];

//----- (000000000040D670) ----------------------------------------------------
__int64 goodG2B1_50()
{
  return 5LL;
}

//----- (000000000040D6BD) ----------------------------------------------------
__int64 goodG2B2_50()
{
  return 5LL;
}

//----- (000000000040D6FE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_06_good()
{
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000040D718) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_04_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_04.c", 0x2Bu, "CWE617_Reachable_Assertion__fixed_04_bad");
}

//----- (000000000040D758) ----------------------------------------------------
__int64 goodG2B1_51()
{
  return 0LL;
}

//----- (000000000040D7A4) ----------------------------------------------------
__int64 goodG2B2_51()
{
  return 1LL;
}

//----- (000000000040D7E4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_04_good()
{
  goodG2B1_51();
  return goodG2B2_51();
}

//----- (000000000040D7FE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_68_badData = v2;
  return CWE617_Reachable_Assertion__rand_68b_badSink();
}
// 633294: using guessed type int CWE617_Reachable_Assertion__rand_68_badData;

//----- (000000000040D871) ----------------------------------------------------
__int64 goodG2B_75()
{
  CWE617_Reachable_Assertion__rand_68_goodG2BData = 6;
  return CWE617_Reachable_Assertion__rand_68b_goodG2BSink();
}
// 633290: using guessed type int CWE617_Reachable_Assertion__rand_68_goodG2BData;

//----- (000000000040D89C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_68_good()
{
  return goodG2B_75();
}

//----- (000000000040D8AC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  result = (unsigned int)result;
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_34.c", 0x2Bu, "CWE617_Reachable_Assertion__rand_34_bad");
  return result;
}

//----- (000000000040D937) ----------------------------------------------------
__int64 goodG2B_76()
{
  return 6LL;
}

//----- (000000000040D97A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_34_good()
{
  return goodG2B_76();
}

//----- (000000000040D98A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_67_bad()
{
  return CWE617_Reachable_Assertion__fixed_67b_badSink(4);
}

//----- (000000000040D9B2) ----------------------------------------------------
__int64 goodG2B_77()
{
  return CWE617_Reachable_Assertion__fixed_67b_goodG2BSink(6);
}

//----- (000000000040D9DA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_67_good()
{
  return goodG2B_77();
}

//----- (000000000040D9EA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v5 = v8;
  return CWE617_Reachable_Assertion__connect_socket_67b_badSink(v8);
}
// 40D9EA: using guessed type char buf[16];

//----- (000000000040DAD8) ----------------------------------------------------
__int64 goodG2B_78()
{
  return CWE617_Reachable_Assertion__connect_socket_67b_goodG2BSink(6);
}

//----- (000000000040DB00) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_67_good()
{
  return goodG2B_78();
}

//----- (000000000040DB10) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_66b_badSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_66b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__rand_66b_badSink");
  return result;
}

//----- (000000000040DB47) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax

  result = *(unsigned int *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 8) <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_66b.c",
      0x2Au,
      "CWE617_Reachable_Assertion__rand_66b_goodG2BSink");
  return result;
}

//----- (000000000040DB7E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_34_bad()
{
  __int64 result; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+10h] [rbp-10h]
  int v5; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v6 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v6;
  result = (unsigned int)v6;
  v5 = v6;
  if ( v6 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_34.c",
      0x38u,
      "CWE617_Reachable_Assertion__fgets_34_bad");
  return result;
}

//----- (000000000040DC07) ----------------------------------------------------
__int64 goodG2B_79()
{
  return 6LL;
}

//----- (000000000040DC4A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_34_good()
{
  return goodG2B_79();
}

//----- (000000000040DC5A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_54e.c",
      0x20u,
      "CWE617_Reachable_Assertion__fgets_54e_badSink");
}

//----- (000000000040DC86) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_54e.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fgets_54e_goodG2BSink");
}

//----- (000000000040DCB2) ----------------------------------------------------
__int64 badSink_4()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fscanf_45_badData;
  if ( CWE617_Reachable_Assertion__fscanf_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_45.c", 0x20u, "badSink");
  return result;
}
// 6331E4: using guessed type int CWE617_Reachable_Assertion__fscanf_45_badData;

//----- (000000000040DCE4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_45_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  CWE617_Reachable_Assertion__fscanf_45_badData = v1;
  return badSink_4();
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 6331E4: using guessed type int CWE617_Reachable_Assertion__fscanf_45_badData;

//----- (000000000040DD25) ----------------------------------------------------
__int64 goodG2BSink_4()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fscanf_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__fscanf_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_45.c", 0x37u, "goodG2BSink");
  return result;
}
// 6331E8: using guessed type int CWE617_Reachable_Assertion__fscanf_45_goodG2BData;

//----- (000000000040DD57) ----------------------------------------------------
__int64 goodG2B_80()
{
  CWE617_Reachable_Assertion__fscanf_45_goodG2BData = 6;
  return goodG2BSink_4();
}
// 6331E8: using guessed type int CWE617_Reachable_Assertion__fscanf_45_goodG2BData;

//----- (000000000040DD82) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_45_good()
{
  return goodG2B_80();
}

//----- (000000000040DD92) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_66_bad()
{
  char s[8]; // [rsp+0h] [rbp-30h]
  int v2; // [rsp+8h] [rbp-28h]
  __int16 v3; // [rsp+Ch] [rbp-24h]
  char v4; // [rsp+10h] [rbp-20h]
  int v5; // [rsp+18h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v6 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v6;
  return CWE617_Reachable_Assertion__fgets_66b_badSink((__int64)&v4);
}

//----- (000000000040DE02) ----------------------------------------------------
__int64 goodG2B_81()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__fgets_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040DE2C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_66_good()
{
  return goodG2B_81();
}

//----- (000000000040DE3C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_06_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_4228E4, &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_06.c",
      0x28u,
      "CWE617_Reachable_Assertion__fscanf_06_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040DE95) ----------------------------------------------------
__int64 goodG2B1_52()
{
  return 5LL;
}

//----- (000000000040DEE2) ----------------------------------------------------
__int64 goodG2B2_52()
{
  return 5LL;
}

//----- (000000000040DF23) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_06_good()
{
  goodG2B1_52();
  return goodG2B2_52();
}

//----- (000000000040DF3D) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_52_bad()
{
  CWE617_Reachable_Assertion__fixed_52b_badSink(4);
}

//----- (000000000040DF5F) ----------------------------------------------------
void goodG2B_82()
{
  CWE617_Reachable_Assertion__fixed_52b_goodG2BSink(6);
}

//----- (000000000040DF81) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_52_good()
{
  goodG2B_82();
}

//----- (000000000040DF91) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (000000000040DF9C) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000040DFA7) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_08_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_08.c",
      0x32u,
      "CWE617_Reachable_Assertion__fscanf_08_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040E004) ----------------------------------------------------
int goodG2B1_53()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse_1();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_08.c", 0x4Au, "goodG2B1");
  return result;
}

//----- (000000000040E055) ----------------------------------------------------
__int64 goodG2B2_53()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue_1();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_08.c", 0x59u, "goodG2B2");
  return result;
}

//----- (000000000040E09A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_08_good()
{
  goodG2B1_53();
  return goodG2B2_53();
}

//----- (000000000040E0B4) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_51b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fixed_51b_badSink");
}

//----- (000000000040E0E0) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_51b.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_51b_goodG2BSink");
}

//----- (000000000040E10C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_13_bad()
{
  __int64 result; // rax

  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_13.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_13_bad");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E136) ----------------------------------------------------
int good1_8()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    result = printLine("Benign, fixed string");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040E151) ----------------------------------------------------
void good2_5()
{
  ;
}

//----- (000000000040E157) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_13_good()
{
  good1_8();
  good2_5();
}

//----- (000000000040E171) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_41.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__rand_41_badSink");
}

//----- (000000000040E19D) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_41_badSink(v2);
}

//----- (000000000040E207) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_41.c",
      0x30u,
      "CWE617_Reachable_Assertion__rand_41_goodG2BSink");
}

//----- (000000000040E233) ----------------------------------------------------
void goodG2B_83()
{
  CWE617_Reachable_Assertion__rand_41_goodG2BSink(6);
}

//----- (000000000040E255) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_41_good()
{
  goodG2B_83();
}

//----- (000000000040E265) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_16_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_16.c", 0x25u, "CWE617_Reachable_Assertion__fixed_16_bad");
}

//----- (000000000040E29D) ----------------------------------------------------
void goodG2B_84()
{
  ;
}

//----- (000000000040E2D5) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_16_good()
{
  goodG2B_84();
}

//----- (000000000040E2E5) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_52c_badSink(a1);
}

//----- (000000000040E2FC) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_52c_goodG2BSink(a1);
}

//----- (000000000040E313) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_53d.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__fscanf_53d_badSink");
}

//----- (000000000040E33F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_53d.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_53d_goodG2BSink");
}

//----- (000000000040E36B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54e_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_54e.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__rand_54e_badSink");
}

//----- (000000000040E397) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_54e_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_54e.c",
      0x29u,
      "CWE617_Reachable_Assertion__rand_54e_goodG2BSink");
}

//----- (000000000040E3C3) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_14_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = globalFive;
  if ( globalFive == 5 )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_14.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_14_bad");
  return result;
}
// 633168: using guessed type int globalFive;
// 40E3C3: using guessed type char buf[16];

//----- (000000000040E515) ----------------------------------------------------
int goodG2B1_54()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_14.c", 0x95u, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040E563) ----------------------------------------------------
__int64 goodG2B2_54()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_14.c", 0xA4u, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040E5A5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_14_good()
{
  goodG2B1_54();
  return goodG2B2_54();
}

//----- (000000000040E5BF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_11_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_11.c", 0x24u, "CWE617_Reachable_Assertion__rand_11_bad");
  return result;
}

//----- (000000000040E64C) ----------------------------------------------------
int goodG2B1_55()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_11.c", 0x3Cu, "goodG2B1");
  return result;
}

//----- (000000000040E69D) ----------------------------------------------------
__int64 goodG2B2_55()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_11.c", 0x4Bu, "goodG2B2");
  return result;
}

//----- (000000000040E6E2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_11_good()
{
  goodG2B1_55();
  return goodG2B2_55();
}

//----- (000000000040E6FC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_32_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  int v6; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  int *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = &v5;
  v5 = -1;
  v12 = -1;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  result = (unsigned int)*v9;
  v6 = *v9;
  if ( v6 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_32.c",
      0x82u,
      "CWE617_Reachable_Assertion__listen_socket_32_bad");
  return result;
}
// 40E6FC: using guessed type char buf[16];

//----- (000000000040E86A) ----------------------------------------------------
__int64 goodG2B_85()
{
  return 6LL;
}

//----- (000000000040E8CC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_32_good()
{
  return goodG2B_85();
}

//----- (000000000040E8DC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__connect_socket_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__connect_socket_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__connect_socket_22_bad");
  return result;
}
// 6331EC: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_badGlobal;

//----- (000000000040E923) ----------------------------------------------------
__int64 goodG2B1_56()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 6331F0: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global;

//----- (000000000040E96A) ----------------------------------------------------
__int64 goodG2B2_56()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 6331F4: using guessed type int CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global;

//----- (000000000040E9B1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_22_good()
{
  goodG2B1_56();
  return goodG2B2_56();
}

//----- (000000000040E9CB) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_64b.c",
      0x20u,
      "CWE617_Reachable_Assertion__fscanf_64b_badSink");
  return result;
}

//----- (000000000040EA09) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_64b.c",
      0x2Fu,
      "CWE617_Reachable_Assertion__fscanf_64b_goodG2BSink");
  return result;
}

//----- (000000000040EA47) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_51_bad()
{
  CWE617_Reachable_Assertion__fixed_51b_badSink(4);
}

//----- (000000000040EA69) ----------------------------------------------------
void goodG2B_86()
{
  CWE617_Reachable_Assertion__fixed_51b_goodG2BSink(6);
}

//----- (000000000040EA8B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_51_good()
{
  goodG2B_86();
}

//----- (000000000040EA9B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_09_bad()
{
  __int64 result; // rax

  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_09.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_09_bad");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040EAC4) ----------------------------------------------------
int good1_9()
{
  int result; // eax

  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040EADE) ----------------------------------------------------
void good2_6()
{
  ;
}

//----- (000000000040EAE4) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_09_good()
{
  good1_9();
  good2_6();
}

//----- (000000000040EAFE) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_67b.c",
      0x38u,
      "CWE617_Reachable_Assertion__listen_socket_67b_badSink");
  return result;
}

//----- (000000000040EB30) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_67b.c",
      0x44u,
      "CWE617_Reachable_Assertion__listen_socket_67b_goodG2BSink");
  return result;
}

//----- (000000000040EB62) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_03_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_03.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_03_bad");
}

//----- (000000000040EB7F) ----------------------------------------------------
void good1_10()
{
  ;
}

//----- (000000000040EB85) ----------------------------------------------------
void good2_7()
{
  ;
}

//----- (000000000040EB8B) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_03_good()
{
  good1_10();
  good2_7();
}

//----- (000000000040EBA5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  char v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+28h] [rbp-18h]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v9 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  v6 = v9;
  return CWE617_Reachable_Assertion__connect_socket_66b_badSink((__int64)&v5);
}
// 40EBA5: using guessed type char buf[16];

//----- (000000000040EC95) ----------------------------------------------------
__int64 goodG2B_87()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__connect_socket_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040ECBF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_66_good()
{
  return goodG2B_87();
}

//----- (000000000040ECCF) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_18_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_18.c",
      0x30u,
      "CWE617_Reachable_Assertion__fgets_18_bad");
  return result;
}

//----- (000000000040ED4D) ----------------------------------------------------
void goodG2B_88()
{
  ;
}

//----- (000000000040ED85) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_18_good()
{
  goodG2B_88();
}

//----- (000000000040ED95) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_52_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_52b_badSink(v3);
}

//----- (000000000040EDFD) ----------------------------------------------------
void goodG2B_89()
{
  CWE617_Reachable_Assertion__fgets_52b_goodG2BSink(6);
}

//----- (000000000040EE1F) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_52_good()
{
  goodG2B_89();
}

//----- (000000000040EE2F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_51b.c",
      0x20u,
      "CWE617_Reachable_Assertion__fgets_51b_badSink");
}

//----- (000000000040EE5B) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_51b.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fgets_51b_goodG2BSink");
}

//----- (000000000040EE87) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_14_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( globalFive == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_14.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_14_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633168: using guessed type int globalFive;

//----- (000000000040EEE1) ----------------------------------------------------
int goodG2B1_57()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_14.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040EF2F) ----------------------------------------------------
__int64 goodG2B2_57()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_14.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (000000000040EF71) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_14_good()
{
  goodG2B1_57();
  return goodG2B2_57();
}

//----- (000000000040EF8B) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_18_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_18.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_18_bad");
}

//----- (000000000040EFA9) ----------------------------------------------------
void good1_11()
{
  ;
}

//----- (000000000040EFB0) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_18_good()
{
  good1_11();
}

//----- (000000000040EFC0) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_52b_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_52c_badSink(a1);
}

//----- (000000000040EFD7) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_52b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink(a1);
}

//----- (000000000040EFEE) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_16_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_16.c",
      0x32u,
      "CWE617_Reachable_Assertion__fgets_16_bad");
  return result;
}

//----- (000000000040F06C) ----------------------------------------------------
void goodG2B_90()
{
  ;
}

//----- (000000000040F0A4) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_16_good()
{
  goodG2B_90();
}

//----- (000000000040F0B4) ----------------------------------------------------
__int64 badSink_5()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fixed_45_badData;
  if ( CWE617_Reachable_Assertion__fixed_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_45.c", 0x20u, "badSink");
  return result;
}
// 6331F8: using guessed type int CWE617_Reachable_Assertion__fixed_45_badData;

//----- (000000000040F0E6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_45_bad()
{
  CWE617_Reachable_Assertion__fixed_45_badData = 4;
  return badSink_5();
}
// 6331F8: using guessed type int CWE617_Reachable_Assertion__fixed_45_badData;

//----- (000000000040F111) ----------------------------------------------------
__int64 goodG2BSink_5()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fixed_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__fixed_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_45.c", 0x37u, "goodG2BSink");
  return result;
}
// 6331FC: using guessed type int CWE617_Reachable_Assertion__fixed_45_goodG2BData;

//----- (000000000040F143) ----------------------------------------------------
__int64 goodG2B_91()
{
  CWE617_Reachable_Assertion__fixed_45_goodG2BData = 6;
  return goodG2BSink_5();
}
// 6331FC: using guessed type int CWE617_Reachable_Assertion__fixed_45_goodG2BData;

//----- (000000000040F16E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_45_good()
{
  return goodG2B_91();
}

//----- (000000000040F17E) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_13_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_13.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_13_bad");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;
// 40F17E: using guessed type char buf[16];

//----- (000000000040F2D0) ----------------------------------------------------
int goodG2B1_58()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_13.c", 0x95u, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040F31E) ----------------------------------------------------
__int64 goodG2B2_58()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_13.c", 0xA4u, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040F360) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_13_good()
{
  goodG2B1_58();
  return goodG2B2_58();
}

//----- (000000000040F37A) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_04_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_04.c",
      0x84u,
      "CWE617_Reachable_Assertion__listen_socket_04_bad");
  return result;
}
// 40F37A: using guessed type char buf[16];

//----- (000000000040F4CA) ----------------------------------------------------
__int64 goodG2B1_59()
{
  return 0LL;
}

//----- (000000000040F516) ----------------------------------------------------
__int64 goodG2B2_59()
{
  return 1LL;
}

//----- (000000000040F556) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_04_good()
{
  goodG2B1_59();
  return goodG2B2_59();
}

//----- (000000000040F570) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_31_bad()
{
  __int64 result; // rax
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  result = (unsigned int)v10;
  v5 = v10;
  if ( v10 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_31.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_31_bad");
  return result;
}
// 40F570: using guessed type char buf[16];

//----- (000000000040F6BF) ----------------------------------------------------
__int64 goodG2B_92()
{
  return 6LL;
}

//----- (000000000040F702) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_31_good()
{
  return goodG2B_92();
}

//----- (000000000040F712) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_06_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_06.c", 0x28u, "CWE617_Reachable_Assertion__fixed_06_bad");
}

//----- (000000000040F753) ----------------------------------------------------
__int64 goodG2B1_60()
{
  return 5LL;
}

//----- (000000000040F7A0) ----------------------------------------------------
__int64 goodG2B2_60()
{
  return 5LL;
}

//----- (000000000040F7E1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_06_good()
{
  goodG2B1_60();
  return goodG2B2_60();
}

//----- (000000000040F7FB) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_63b.c",
      0x33u,
      "CWE617_Reachable_Assertion__connect_socket_63b_badSink");
  return result;
}

//----- (000000000040F831) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_63b.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__connect_socket_63b_goodG2BSink");
  return result;
}

//----- (000000000040F867) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_67b.c",
      0x22u,
      "CWE617_Reachable_Assertion__fscanf_67b_badSink");
  return result;
}

//----- (000000000040F899) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_67b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fscanf_67b_goodG2BSink");
  return result;
}

//----- (000000000040F8CB) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54d_badSink(a1);
}

//----- (000000000040F8E2) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fgets_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fgets_54d_goodG2BSink(a1);
}

//----- (000000000040F8F9) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_52b_badSink(v2);
}

//----- (000000000040F963) ----------------------------------------------------
void goodG2B_93()
{
  CWE617_Reachable_Assertion__rand_52b_goodG2BSink(6);
}

//----- (000000000040F985) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_52_good()
{
  goodG2B_93();
}

//----- (000000000040F995) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE617_Reachable_Assertion__fscanf_64b_badSink(&v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040F9CF) ----------------------------------------------------
__int64 goodG2B_94()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fscanf_64b_goodG2BSink(&v1);
}

//----- (000000000040F9F3) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_64_good()
{
  return goodG2B_94();
}

//----- (000000000040FA03) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_51b_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_51b.c",
      0x1Eu,
      "CWE617_Reachable_Assertion__rand_51b_badSink");
}

//----- (000000000040FA2F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__rand_51b_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_51b.c",
      0x29u,
      "CWE617_Reachable_Assertion__rand_51b_goodG2BSink");
}

//----- (000000000040FA5B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE617_Reachable_Assertion__listen_socket_67b_badSink(v9);
}
// 40FA5B: using guessed type char buf[16];

//----- (000000000040FB8F) ----------------------------------------------------
__int64 goodG2B_95()
{
  return CWE617_Reachable_Assertion__listen_socket_67b_goodG2BSink(6);
}

//----- (000000000040FBB7) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_67_good()
{
  return goodG2B_95();
}

//----- (000000000040FBC7) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_32_bad()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-1Ch]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v2;
  v4 = &v2;
  v2 = -1;
  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  *v5 = v1;
  result = (unsigned int)*v4;
  v3 = *v4;
  if ( v3 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_32.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_32_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040FC3F) ----------------------------------------------------
__int64 goodG2B_96()
{
  return 6LL;
}

//----- (000000000040FCA1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_32_good()
{
  return goodG2B_96();
}

//----- (000000000040FCB1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_16.c", 0x25u, "CWE617_Reachable_Assertion__rand_16_bad");
  return result;
}

//----- (000000000040FD31) ----------------------------------------------------
void goodG2B_97()
{
  ;
}

//----- (000000000040FD69) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_16_good()
{
  goodG2B_97();
}

//----- (000000000040FD79) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_51_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  *(_QWORD *)s = 0LL;
  v1 = 0;
  v2 = 0;
  if ( fgets(s, 14, stdin) )
    v3 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_51b_badSink(v3);
}

//----- (000000000040FDE1) ----------------------------------------------------
void goodG2B_98()
{
  CWE617_Reachable_Assertion__fgets_51b_goodG2BSink(6);
}

//----- (000000000040FE03) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_51_good()
{
  goodG2B_98();
}

//----- (000000000040FE13) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v1; // [rsp+8h] [rbp-18h]
  __int16 v2; // [rsp+Ch] [rbp-14h]
  int v3; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    v1 = 0;
    v2 = 0;
    if ( fgets(s, 14, stdin) )
      v3 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  if ( v3 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_17.c",
      0x32u,
      "CWE617_Reachable_Assertion__fgets_17_bad");
}

//----- (000000000040FEA3) ----------------------------------------------------
void goodG2B_99()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_17.c", 0x46u, "goodG2B");
}

//----- (000000000040FEED) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_17_good()
{
  goodG2B_99();
}

//----- (000000000040FEFD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_04_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, &unk_423CC8, &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_04.c",
      0x2Bu,
      "CWE617_Reachable_Assertion__fscanf_04_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040FF55) ----------------------------------------------------
__int64 goodG2B1_61()
{
  return 0LL;
}

//----- (000000000040FFA1) ----------------------------------------------------
__int64 goodG2B2_61()
{
  return 1LL;
}

//----- (000000000040FFE1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_04_good()
{
  goodG2B1_61();
  return goodG2B2_61();
}

//----- (000000000040FFFB) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_31_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+4h] [rbp-Ch]
  unsigned int v2; // [rsp+8h] [rbp-8h]
  unsigned int v3; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  v3 = v1;
  result = v1;
  v2 = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_31.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_31_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000410054) ----------------------------------------------------
__int64 goodG2B_100()
{
  return 6LL;
}

//----- (0000000000410097) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_31_good()
{
  return goodG2B_100();
}

//----- (00000000004100A7) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__listen_socket_22_badGlobal )
  {
    v9 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v9 = accept(fd, 0LL, 0LL);
        if ( v9 != -1 )
        {
          v7 = recv(v9, buf, 0xDuLL, 0);
          if ( v7 != -1 )
          {
            if ( v7 )
            {
              buf[v7] = 0;
              v2 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v9 != -1 )
      close(v9);
  }
  return v2;
}
// 6331BC: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_badGlobal;
// 4100A7: using guessed type char buf[16];

//----- (00000000004101D8) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 6331C0: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_goodG2B1Global;

//----- (0000000000410205) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 6331C4: using guessed type int CWE617_Reachable_Assertion__listen_socket_22_goodG2B2Global;

//----- (0000000000410222) ----------------------------------------------------
__int64 __fastcall badSource_6(unsigned int a1)
{
  int v1; // ebx
  int v2; // ebx
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  unsigned int v7; // [rsp+Ch] [rbp-14h]

  v7 = a1;
  if ( badStatic_1 )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      v3 = v2 ^ rand();
    }
    else
    {
      v4 = rand() << 30;
      v5 = (rand() << 15) ^ v4;
      v3 = ~(v5 ^ rand());
    }
    v7 = v3;
  }
  return v7;
}
// 633200: using guessed type int badStatic_1;

//----- (000000000041028B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_21_bad()
{
  __int64 result; // rax

  badStatic_1 = 1;
  result = badSource_6(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_21.c", 0x2Eu, "CWE617_Reachable_Assertion__rand_21_bad");
  return result;
}
// 633200: using guessed type int badStatic_1;

//----- (00000000004102D2) ----------------------------------------------------
__int64 __fastcall goodG2B1Source_1(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static_1 )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633204: using guessed type int goodG2B1Static_1;

//----- (00000000004102FF) ----------------------------------------------------
__int64 goodG2B1_62()
{
  __int64 result; // rax

  goodG2B1Static_1 = 0;
  result = goodG2B1Source_1(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_21.c", 0x51u, "goodG2B1");
  return result;
}
// 633204: using guessed type int goodG2B1Static_1;

//----- (0000000000410346) ----------------------------------------------------
__int64 __fastcall goodG2B2Source_1(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static_1 )
    v2 = 6;
  return v2;
}
// 633208: using guessed type int goodG2B2Static_1;

//----- (0000000000410363) ----------------------------------------------------
__int64 goodG2B2_62()
{
  __int64 result; // rax

  goodG2B2Static_1 = 1;
  result = goodG2B2Source_1(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_21.c", 0x67u, "goodG2B2");
  return result;
}
// 633208: using guessed type int goodG2B2Static_1;

//----- (00000000004103AA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_21_good()
{
  goodG2B1_62();
  return goodG2B2_62();
}

//----- (00000000004103C4) ----------------------------------------------------
__int64 __fastcall badSource_7(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  if ( badStatic_2 )
  {
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = inet_addr("127.0.0.1");
      v5 = htons(0x6987u);
      if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
      {
        v7 = recv(fd, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
  }
  return v2;
}
// 63320C: using guessed type int badStatic_2;
// 4103C4: using guessed type char buf[16];

//----- (00000000004104AF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_21_bad()
{
  __int64 result; // rax

  badStatic_2 = 1;
  result = badSource_7(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_21.c",
      0x7Au,
      "CWE617_Reachable_Assertion__connect_socket_21_bad");
  return result;
}
// 63320C: using guessed type int badStatic_2;

//----- (00000000004104F6) ----------------------------------------------------
__int64 __fastcall goodG2B1Source_2(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static_2 )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633210: using guessed type int goodG2B1Static_2;

//----- (0000000000410523) ----------------------------------------------------
__int64 goodG2B1_63()
{
  __int64 result; // rax

  goodG2B1Static_2 = 0;
  result = goodG2B1Source_2(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_21.c", 0x9Du, "goodG2B1");
  return result;
}
// 633210: using guessed type int goodG2B1Static_2;

//----- (000000000041056A) ----------------------------------------------------
__int64 __fastcall goodG2B2Source_2(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static_2 )
    v2 = 6;
  return v2;
}
// 633214: using guessed type int goodG2B2Static_2;

//----- (0000000000410587) ----------------------------------------------------
__int64 goodG2B2_63()
{
  __int64 result; // rax

  goodG2B2Static_2 = 1;
  result = goodG2B2Source_2(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_21.c", 0xB3u, "goodG2B2");
  return result;
}
// 633214: using guessed type int goodG2B2Static_2;

//----- (00000000004105CE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_21_good()
{
  goodG2B1_63();
  return goodG2B2_63();
}

//----- (00000000004105E8) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_03_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_03.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_03_bad");
  return result;
}
// 4105E8: using guessed type char buf[16];

//----- (00000000004106E5) ----------------------------------------------------
void goodG2B1_64()
{
  ;
}

//----- (000000000041071C) ----------------------------------------------------
void goodG2B2_64()
{
  ;
}

//----- (0000000000410753) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_03_good()
{
  goodG2B1_64();
  goodG2B2_64();
}

//----- (000000000041076D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int fd; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v6 = recv(fd, buf, 0xDuLL, 0);
      if ( v6 != -1 )
      {
        if ( v6 )
        {
          buf[v6] = 0;
          v5 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return CWE617_Reachable_Assertion__connect_socket_63b_badSink(&v5);
}
// 41076D: using guessed type char buf[16];

//----- (0000000000410857) ----------------------------------------------------
__int64 goodG2B_101()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__connect_socket_63b_goodG2BSink(&v1);
}

//----- (000000000041087B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_63_good()
{
  return goodG2B_101();
}

//----- (000000000041088B) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_64b.c",
      0x20u,
      "CWE617_Reachable_Assertion__fixed_64b_badSink");
  return result;
}

//----- (00000000004108C9) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_64b.c",
      0x2Fu,
      "CWE617_Reachable_Assertion__fixed_64b_goodG2BSink");
  return result;
}

//----- (0000000000410907) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_11_bad()
{
  __int64 result; // rax

  result = globalReturnsTrue();
  if ( (_DWORD)result )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_11.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_11_bad");
  return result;
}

//----- (0000000000410934) ----------------------------------------------------
int good1_12()
{
  int result; // eax

  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  return result;
}

//----- (0000000000410952) ----------------------------------------------------
__int64 good2_8()
{
  return globalReturnsTrue();
}

//----- (0000000000410962) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_11_good()
{
  good1_12();
  return good2_8();
}

//----- (000000000041097C) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_02_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_02.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_02_bad");
}

//----- (0000000000410999) ----------------------------------------------------
void good1_13()
{
  ;
}

//----- (000000000041099F) ----------------------------------------------------
void good2_9()
{
  ;
}

//----- (00000000004109A5) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_02_good()
{
  good1_13();
  good2_9();
}

//----- (00000000004109BF) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_06_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
  {
    result = atoi(s);
    v4 = result;
  }
  else
  {
    result = printLine("fgets() failed.");
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_06.c",
      0x35u,
      "CWE617_Reachable_Assertion__fgets_06_bad");
  return result;
}

//----- (0000000000410A46) ----------------------------------------------------
__int64 goodG2B1_65()
{
  return 5LL;
}

//----- (0000000000410A93) ----------------------------------------------------
__int64 goodG2B2_65()
{
  return 5LL;
}

//----- (0000000000410AD4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_06_good()
{
  goodG2B1_65();
  return goodG2B2_65();
}

//----- (0000000000410AEE) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_51b_badSink(v2);
}

//----- (0000000000410B58) ----------------------------------------------------
void goodG2B_102()
{
  CWE617_Reachable_Assertion__rand_51b_goodG2BSink(6);
}

//----- (0000000000410B7A) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_51_good()
{
  goodG2B_102();
}

//----- (0000000000410B8A) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_14_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_14.c", 0x24u, "CWE617_Reachable_Assertion__fixed_14_bad");
}
// 633168: using guessed type int globalFive;

//----- (0000000000410BCC) ----------------------------------------------------
int goodG2B1_66()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_14.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000410C1A) ----------------------------------------------------
__int64 goodG2B2_66()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_14.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000410C5C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_14_good()
{
  goodG2B1_66();
  return goodG2B2_66();
}

//----- (0000000000410C76) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fscanf_22_badGlobal )
    __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633220: using guessed type int CWE617_Reachable_Assertion__fscanf_22_badGlobal;

//----- (0000000000410CAD) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fscanf_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633224: using guessed type int CWE617_Reachable_Assertion__fscanf_22_goodG2B1Global;

//----- (0000000000410CDA) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fscanf_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 633228: using guessed type int CWE617_Reachable_Assertion__fscanf_22_goodG2B2Global;

//----- (0000000000410CF7) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_32_bad()
{
  int v0; // [rsp+4h] [rbp-1Ch]
  int v1; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+Ch] [rbp-14h]
  int *v3; // [rsp+10h] [rbp-10h]
  int *v4; // [rsp+18h] [rbp-8h]

  v4 = &v0;
  v3 = &v0;
  v2 = 4;
  v0 = 4;
  v1 = 4;
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_32.c", 0x29u, "CWE617_Reachable_Assertion__fixed_32_bad");
}

//----- (0000000000410D59) ----------------------------------------------------
__int64 goodG2B_103()
{
  return 6LL;
}

//----- (0000000000410DBB) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_32_good()
{
  return goodG2B_103();
}

//----- (0000000000410DCB) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_10_bad()
{
  __int64 result; // rax

  result = (unsigned int)globalTrue;
  if ( globalTrue )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_10.c", 0x1Bu, "CWE617_Reachable_Assertion__zero_10_bad");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (0000000000410DF4) ----------------------------------------------------
int good1_14()
{
  int result; // eax

  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (0000000000410E0E) ----------------------------------------------------
void good2_10()
{
  ;
}

//----- (0000000000410E14) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_10_good()
{
  good1_14();
  good2_10();
}

//----- (0000000000410E2E) ----------------------------------------------------
__int64 badSource_8()
{
  return 4LL;
}

//----- (0000000000410E41) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_42_bad()
{
  __int64 result; // rax

  result = badSource_8();
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_42.c",
      0x27u,
      "CWE617_Reachable_Assertion__fixed_42_bad");
  return result;
}

//----- (0000000000410E7E) ----------------------------------------------------
__int64 goodG2BSource_4()
{
  return 6LL;
}

//----- (0000000000410E91) ----------------------------------------------------
__int64 goodG2B_104()
{
  __int64 result; // rax

  result = goodG2BSource_4();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_42.c", 0x3Du, "goodG2B");
  return result;
}

//----- (0000000000410ECE) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_42_good()
{
  return goodG2B_104();
}

//----- (0000000000410EDE) ----------------------------------------------------
__int64 badSink_6()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__rand_45_badData;
  if ( CWE617_Reachable_Assertion__rand_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_45.c", 0x20u, "badSink");
  return result;
}
// 633218: using guessed type int CWE617_Reachable_Assertion__rand_45_badData;

//----- (0000000000410F10) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE617_Reachable_Assertion__rand_45_badData = v2;
  return badSink_6();
}
// 633218: using guessed type int CWE617_Reachable_Assertion__rand_45_badData;

//----- (0000000000410F83) ----------------------------------------------------
__int64 goodG2BSink_6()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__rand_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__rand_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_45.c", 0x37u, "goodG2BSink");
  return result;
}
// 63321C: using guessed type int CWE617_Reachable_Assertion__rand_45_goodG2BData;

//----- (0000000000410FB5) ----------------------------------------------------
__int64 goodG2B_105()
{
  CWE617_Reachable_Assertion__rand_45_goodG2BData = 6;
  return goodG2BSink_6();
}
// 63321C: using guessed type int CWE617_Reachable_Assertion__rand_45_goodG2BData;

//----- (0000000000410FE0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_45_good()
{
  return goodG2B_105();
}

//----- (0000000000410FF0) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_67b.c",
      0x22u,
      "CWE617_Reachable_Assertion__fixed_67b_badSink");
  return result;
}

//----- (0000000000411022) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_67b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fixed_67b_goodG2BSink");
  return result;
}

//----- (0000000000411054) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_06.c", 0x28u, "CWE617_Reachable_Assertion__rand_06_bad");
  return result;
}

//----- (00000000004110DD) ----------------------------------------------------
__int64 goodG2B1_67()
{
  return 5LL;
}

//----- (000000000041112A) ----------------------------------------------------
__int64 goodG2B2_67()
{
  return 5LL;
}

//----- (000000000041116B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_06_good()
{
  goodG2B1_67();
  return goodG2B2_67();
}

//----- (0000000000411185) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_64_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 4;
  return CWE617_Reachable_Assertion__fixed_64b_badSink(&v1);
}

//----- (00000000004111A9) ----------------------------------------------------
__int64 goodG2B_106()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fixed_64b_goodG2BSink(&v1);
}

//----- (00000000004111CD) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_64_good()
{
  return goodG2B_106();
}

//----- (00000000004111DD) ----------------------------------------------------
void __noreturn CWE617_Reachable_Assertion__zero_01_bad()
{
  __assert_fail("0", "CWE617_Reachable_Assertion__zero_01.c", 0x19u, "CWE617_Reachable_Assertion__zero_01_bad");
}

//----- (00000000004111FA) ----------------------------------------------------
void good1_15()
{
  ;
}

//----- (0000000000411200) ----------------------------------------------------
void CWE617_Reachable_Assertion__zero_01_good()
{
  good1_15();
}

//----- (0000000000411210) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_52b_badSink(v6);
}
// 411210: using guessed type char buf[16];

//----- (00000000004112F8) ----------------------------------------------------
void goodG2B_107()
{
  CWE617_Reachable_Assertion__connect_socket_52b_goodG2BSink(6);
}

//----- (000000000041131A) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_52_good()
{
  goodG2B_107();
}

//----- (000000000041132A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_41.c",
      0x32u,
      "CWE617_Reachable_Assertion__connect_socket_41_badSink");
}

//----- (0000000000411356) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  in_addr_t v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v6; // [rsp+2Ch] [rbp-4h]

  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = inet_addr("127.0.0.1");
    v2 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v4 = recv(fd, buf, 0xDuLL, 0);
      if ( v4 != -1 )
      {
        if ( v4 )
        {
          buf[v4] = 0;
          v6 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  CWE617_Reachable_Assertion__connect_socket_41_badSink(v6);
}
// 411356: using guessed type char buf[16];

//----- (000000000041143E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_41.c",
      0x7Cu,
      "CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink");
}

//----- (000000000041146A) ----------------------------------------------------
void goodG2B_108()
{
  CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(6);
}

//----- (000000000041148C) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_41_good()
{
  goodG2B_108();
}

//----- (000000000041149C) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_64b.c",
      0x22u,
      "CWE617_Reachable_Assertion__fgets_64b_badSink");
  return result;
}

//----- (00000000004114DA) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_64b.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_64b_goodG2BSink");
  return result;
}

//----- (0000000000411518) ----------------------------------------------------
void __fastcall badSink_7(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_44.c", 0x1Cu, "badSink");
}

//----- (0000000000411544) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_7)(v2);
}

//----- (00000000004115B7) ----------------------------------------------------
void __fastcall goodG2BSink_7(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_44.c", 0x34u, "goodG2BSink");
}

//----- (00000000004115E3) ----------------------------------------------------
void goodG2B_109()
{
  goodG2BSink_7(6);
}

//----- (000000000041160E) ----------------------------------------------------
void CWE617_Reachable_Assertion__rand_44_good()
{
  goodG2B_109();
}

//----- (000000000041161E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54c_badSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54d_badSink(a1);
}

//----- (0000000000411635) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_54c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__connect_socket_54d_goodG2BSink(a1);
}

//----- (000000000041164C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fscanf_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__fscanf_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__fscanf_22_bad");
  return result;
}
// 633220: using guessed type int CWE617_Reachable_Assertion__fscanf_22_badGlobal;

//----- (0000000000411693) ----------------------------------------------------
__int64 goodG2B1_68()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fscanf_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__fscanf_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633224: using guessed type int CWE617_Reachable_Assertion__fscanf_22_goodG2B1Global;

//----- (00000000004116DA) ----------------------------------------------------
__int64 goodG2B2_68()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fscanf_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__fscanf_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 633228: using guessed type int CWE617_Reachable_Assertion__fscanf_22_goodG2B2Global;

//----- (0000000000411721) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_22_good()
{
  goodG2B1_68();
  return goodG2B2_68();
}

//----- (000000000041173B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_31_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_31.c", 0x24u, "CWE617_Reachable_Assertion__fixed_31_bad");
}

//----- (000000000041177E) ----------------------------------------------------
__int64 goodG2B_110()
{
  return 6LL;
}

//----- (00000000004117C1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_31_good()
{
  return goodG2B_110();
}

//----- (00000000004117D1) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+2Ch] [rbp-14h]
  int fd; // [rsp+30h] [rbp-10h]
  int v6; // [rsp+34h] [rbp-Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              v7 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_17.c",
      0x7Eu,
      "CWE617_Reachable_Assertion__listen_socket_17_bad");
}
// 4117D1: using guessed type char buf[16];

//----- (000000000041192E) ----------------------------------------------------
void goodG2B_111()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_17.c", 0x92u, "goodG2B");
}

//----- (0000000000411978) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_17_good()
{
  goodG2B_111();
}

//----- (0000000000411988) ----------------------------------------------------
void __fastcall badSink_8(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_44.c", 0x32u, "badSink");
}

//----- (00000000004119B4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  in_addr_t v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  unsigned int v8; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_8;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v5 = recv(fd, buf, 0xDuLL, 0);
      if ( v5 != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          v8 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v8);
}
// 4119B4: using guessed type char buf[16];

//----- (0000000000411AA5) ----------------------------------------------------
void __fastcall goodG2BSink_8(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_44.c", 0x80u, "goodG2BSink");
}

//----- (0000000000411AD1) ----------------------------------------------------
void goodG2B_112()
{
  goodG2BSink_8(6);
}

//----- (0000000000411AFC) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_44_good()
{
  goodG2B_112();
}

//----- (0000000000411B0C) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_14_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = globalFive;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_14.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_14_bad");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000411B94) ----------------------------------------------------
int goodG2B1_69()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_14.c", 0x49u, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000411BE2) ----------------------------------------------------
__int64 goodG2B2_69()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_14.c", 0x58u, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000411C24) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_14_good()
{
  goodG2B1_69();
  return goodG2B2_69();
}

//----- (0000000000411C3E) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_09_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_09.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_09_bad");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000411CC5) ----------------------------------------------------
int goodG2B1_70()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_09.c", 0x49u, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000411D12) ----------------------------------------------------
__int64 goodG2B2_70()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_09.c", 0x58u, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000411D53) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_09_good()
{
  goodG2B1_70();
  return goodG2B2_70();
}

//----- (0000000000411D6D) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_63b.c",
      0x33u,
      "CWE617_Reachable_Assertion__listen_socket_63b_badSink");
  return result;
}

//----- (0000000000411DA3) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__listen_socket_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_63b.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__listen_socket_63b_goodG2BSink");
  return result;
}

//----- (0000000000411DD9) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_11_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = globalReturnsTrue();
  if ( result )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_11.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_11_bad");
  return result;
}
// 411DD9: using guessed type char buf[16];

//----- (0000000000411EE8) ----------------------------------------------------
int goodG2B1_71()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsFalse();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_11.c", 0x88u, "goodG2B1");
  return result;
}

//----- (0000000000411F39) ----------------------------------------------------
__int64 goodG2B2_71()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_11.c", 0x97u, "goodG2B2");
  return result;
}

//----- (0000000000411F7E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_11_good()
{
  goodG2B1_71();
  return goodG2B2_71();
}

//----- (0000000000411F98) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_02_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_02.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_02_bad");
  return result;
}
// 411F98: using guessed type char buf[16];

//----- (0000000000412095) ----------------------------------------------------
void goodG2B1_72()
{
  ;
}

//----- (00000000004120CC) ----------------------------------------------------
void goodG2B2_72()
{
  ;
}

//----- (0000000000412103) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_02_good()
{
  goodG2B1_72();
  goodG2B2_72();
}

//----- (000000000041211D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54e_badSink(a1);
}

//----- (0000000000412134) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fscanf_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink(a1);
}

//----- (000000000041214B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_15_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_15.c",
      0x2Au,
      "CWE617_Reachable_Assertion__fscanf_15_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041219B) ----------------------------------------------------
void goodG2B1_73()
{
  ;
}

//----- (00000000004121D3) ----------------------------------------------------
void goodG2B2_73()
{
  ;
}

//----- (000000000041220B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_15_good()
{
  goodG2B1_73();
  goodG2B2_73();
}

//----- (0000000000412225) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000412230) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (000000000041223B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_08_bad()
{
  __int64 result; // rax

  result = staticReturnsTrue_2();
  if ( (_DWORD)result )
    __assert_fail("0", "CWE617_Reachable_Assertion__zero_08.c", 0x28u, "CWE617_Reachable_Assertion__zero_08_bad");
  return result;
}

//----- (0000000000412268) ----------------------------------------------------
int good1_16()
{
  int result; // eax

  result = staticReturnsFalse_2();
  if ( result )
    result = printLine("Benign, fixed string");
  return result;
}

//----- (0000000000412286) ----------------------------------------------------
__int64 good2_11()
{
  return staticReturnsTrue_2();
}

//----- (0000000000412296) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__zero_08_good()
{
  good1_16();
  return good2_11();
}

//----- (00000000004122B0) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_64b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_64b.c",
      0x20u,
      "CWE617_Reachable_Assertion__rand_64b_badSink");
  return result;
}

//----- (00000000004122EE) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_64b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_64b.c",
      0x2Fu,
      "CWE617_Reachable_Assertion__rand_64b_goodG2BSink");
  return result;
}

//----- (000000000041232C) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_67b.c",
      0x24u,
      "CWE617_Reachable_Assertion__fgets_67b_badSink");
  return result;
}

//----- (000000000041235E) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_67b.c",
      0x30u,
      "CWE617_Reachable_Assertion__fgets_67b_goodG2BSink");
  return result;
}

//----- (0000000000412390) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_68b_badSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__listen_socket_68_badData;
  if ( CWE617_Reachable_Assertion__listen_socket_68_badData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_68b.c",
      0x38u,
      "CWE617_Reachable_Assertion__listen_socket_68b_badSink");
  return result;
}
// 633288: using guessed type int CWE617_Reachable_Assertion__listen_socket_68_badData;

//----- (00000000004123C2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_68b_goodG2BSink()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__listen_socket_68_goodG2BData;
  if ( CWE617_Reachable_Assertion__listen_socket_68_goodG2BData <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_68b.c",
      0x44u,
      "CWE617_Reachable_Assertion__listen_socket_68b_goodG2BSink");
  return result;
}
// 63328C: using guessed type int CWE617_Reachable_Assertion__listen_socket_68_goodG2BData;

//----- (00000000004123F4) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__connect_socket_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  in_addr_t v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+38h] [rbp-8h]
  int fd; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = inet_addr("127.0.0.1");
    v5 = htons(0x6987u);
    if ( connect(fd, (const struct sockaddr *)&s, 0x10u) != -1 )
    {
      v7 = recv(fd, buf, 0xDuLL, 0);
      if ( v7 != -1 )
      {
        if ( v7 )
        {
          buf[v7] = 0;
          v2 = atoi(buf);
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  return v2;
}
// 4123F4: using guessed type char buf[16];

//----- (00000000004124D1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_61b_goodG2BSource()
{
  return 6LL;
}

//----- (00000000004124E4) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_10_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = globalTrue;
  if ( globalTrue )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_10.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_10_bad");
  return result;
}
// 633164: using guessed type int globalTrue;
// 4124E4: using guessed type char buf[16];

//----- (00000000004125EF) ----------------------------------------------------
int goodG2B1_74()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFalse;
  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_10.c", 0x88u, "goodG2B1");
  return result;
}
// 633258: using guessed type int globalFalse;

//----- (000000000041263C) ----------------------------------------------------
__int64 goodG2B2_74()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_10.c", 0x97u, "goodG2B2");
  return result;
}
// 633164: using guessed type int globalTrue;

//----- (000000000041267D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_10_good()
{
  goodG2B1_74();
  return goodG2B2_74();
}

//----- (0000000000412697) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_64_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  return CWE617_Reachable_Assertion__fgets_64b_badSink(&v4);
}

//----- (0000000000412701) ----------------------------------------------------
__int64 goodG2B_113()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fgets_64b_goodG2BSink(&v1);
}

//----- (0000000000412725) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_64_good()
{
  return goodG2B_113();
}

//----- (0000000000412735) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_13_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_13.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_13_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041278F) ----------------------------------------------------
int goodG2B1_75()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_13.c", 0x3Cu, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004127DD) ----------------------------------------------------
__int64 goodG2B2_75()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_13.c", 0x4Bu, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041281F) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_13_good()
{
  goodG2B1_75();
  return goodG2B2_75();
}

//----- (0000000000412839) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_14_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_14.c", 0x24u, "CWE617_Reachable_Assertion__rand_14_bad");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (00000000004128C3) ----------------------------------------------------
int goodG2B1_76()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_14.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000412911) ----------------------------------------------------
__int64 goodG2B2_76()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_14.c", 0x4Bu, "goodG2B2");
  return result;
}
// 633168: using guessed type int globalFive;

//----- (0000000000412953) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_14_good()
{
  goodG2B1_76();
  return goodG2B2_76();
}

//----- (000000000041296D) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (0000000000412978) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (0000000000412983) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_08_bad()
{
  __int64 result; // rax
  int v1; // ebx
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-14h]

  v5 = -1;
  result = staticReturnsTrue_3();
  if ( (_DWORD)result )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      result = v2 ^ (unsigned int)rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      result = ~(v4 ^ (unsigned int)rand());
    }
    v5 = result;
  }
  if ( v5 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_08.c", 0x32u, "CWE617_Reachable_Assertion__rand_08_bad");
  return result;
}

//----- (0000000000412A10) ----------------------------------------------------
int goodG2B1_77()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse_3();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_08.c", 0x4Au, "goodG2B1");
  return result;
}

//----- (0000000000412A61) ----------------------------------------------------
__int64 goodG2B2_77()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue_3();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_08.c", 0x59u, "goodG2B2");
  return result;
}

//----- (0000000000412AA6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_08_good()
{
  goodG2B1_77();
  return goodG2B2_77();
}

//----- (0000000000412AC0) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_63b.c",
      0x1Du,
      "CWE617_Reachable_Assertion__fscanf_63b_badSink");
  return result;
}

//----- (0000000000412AF6) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fscanf_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_63b.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_63b_goodG2BSink");
  return result;
}

//----- (0000000000412B2C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-2Ch]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+Ch] [rbp-24h]
  int *v9; // [rsp+10h] [rbp-20h]
  int *v10; // [rsp+18h] [rbp-18h]

  v10 = &v6;
  v9 = &v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  result = (unsigned int)*v9;
  v7 = *v9;
  if ( v7 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_32.c", 0x29u, "CWE617_Reachable_Assertion__rand_32_bad");
  return result;
}

//----- (0000000000412BD6) ----------------------------------------------------
__int64 goodG2B_114()
{
  return 6LL;
}

//----- (0000000000412C38) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_32_good()
{
  return goodG2B_114();
}

//----- (0000000000412C48) ----------------------------------------------------
__int64 __fastcall badSource_9(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  if ( badStatic_3 )
  {
    v9 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v9 = accept(fd, 0LL, 0LL);
        if ( v9 != -1 )
        {
          v7 = recv(v9, buf, 0xDuLL, 0);
          if ( v7 != -1 )
          {
            if ( v7 )
            {
              buf[v7] = 0;
              v2 = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v9 != -1 )
      close(v9);
  }
  return v2;
}
// 63322C: using guessed type int badStatic_3;
// 412C48: using guessed type char buf[16];

//----- (0000000000412D79) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_21_bad()
{
  __int64 result; // rax

  badStatic_3 = 1;
  result = badSource_9(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_21.c",
      0x87u,
      "CWE617_Reachable_Assertion__listen_socket_21_bad");
  return result;
}
// 63322C: using guessed type int badStatic_3;

//----- (0000000000412DC0) ----------------------------------------------------
__int64 __fastcall goodG2B1Source_3(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static_3 )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633230: using guessed type int goodG2B1Static_3;

//----- (0000000000412DED) ----------------------------------------------------
__int64 goodG2B1_78()
{
  __int64 result; // rax

  goodG2B1Static_3 = 0;
  result = goodG2B1Source_3(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_21.c", 0xAAu, "goodG2B1");
  return result;
}
// 633230: using guessed type int goodG2B1Static_3;

//----- (0000000000412E34) ----------------------------------------------------
__int64 __fastcall goodG2B2Source_3(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static_3 )
    v2 = 6;
  return v2;
}
// 633234: using guessed type int goodG2B2Static_3;

//----- (0000000000412E51) ----------------------------------------------------
__int64 goodG2B2_78()
{
  __int64 result; // rax

  goodG2B2Static_3 = 1;
  result = goodG2B2Source_3(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_21.c", 0xC0u, "goodG2B2");
  return result;
}
// 633234: using guessed type int goodG2B2Static_3;

//----- (0000000000412E98) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_21_good()
{
  goodG2B1_78();
  return goodG2B2_78();
}

//----- (0000000000412EB2) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_03_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_03.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_03_bad");
  return result;
}
// 412EB2: using guessed type char buf[16];

//----- (0000000000412FF5) ----------------------------------------------------
void goodG2B1_79()
{
  ;
}

//----- (000000000041302C) ----------------------------------------------------
void goodG2B2_79()
{
  ;
}

//----- (0000000000413063) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_03_good()
{
  goodG2B1_79();
  goodG2B2_79();
}

//----- (000000000041307D) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_01_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = inet_addr("127.0.0.1");
    v3 = htons(0x6987u);
    result = connect(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = recv(fd, buf, 0xDuLL, 0);
      v5 = result;
      if ( result != -1 )
      {
        if ( v5 )
        {
          buf[v5] = 0;
          result = atoi(buf);
          v7 = result;
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_01.c",
      0x6Du,
      "CWE617_Reachable_Assertion__connect_socket_01_bad");
  return result;
}
// 41307D: using guessed type char buf[16];

//----- (000000000041317A) ----------------------------------------------------
void goodG2B_115()
{
  ;
}

//----- (00000000004131B1) ----------------------------------------------------
void CWE617_Reachable_Assertion__connect_socket_01_good()
{
  goodG2B_115();
}

//----- (00000000004131C1) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_31_bad()
{
  __int64 result; // rax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+14h] [rbp-Ch]
  int v5; // [rsp+18h] [rbp-8h]
  int v6; // [rsp+1Ch] [rbp-4h]

  v6 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v6 = atoi(s);
  else
    printLine("fgets() failed.");
  v5 = v6;
  result = (unsigned int)v6;
  v4 = v6;
  if ( v6 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_31.c",
      0x31u,
      "CWE617_Reachable_Assertion__fgets_31_bad");
  return result;
}

//----- (000000000041324A) ----------------------------------------------------
__int64 goodG2B_116()
{
  return 6LL;
}

//----- (000000000041328D) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_31_good()
{
  return goodG2B_116();
}

//----- (000000000041329D) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (00000000004132A8) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (00000000004132B3) ----------------------------------------------------
int CWE617_Reachable_Assertion__fgets_08_bad()
{
  int result; // eax
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  result = staticReturnsTrue_4();
  if ( result )
  {
    *(_QWORD *)s = 0LL;
    v2 = 0;
    v3 = 0;
    if ( fgets(s, 14, stdin) )
    {
      result = atoi(s);
      v4 = result;
    }
    else
    {
      result = printLine("fgets() failed.");
    }
  }
  if ( v4 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_08.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__fgets_08_bad");
  return result;
}

//----- (000000000041333E) ----------------------------------------------------
int goodG2B1_80()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse_4();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_08.c", 0x57u, "goodG2B1");
  return result;
}

//----- (000000000041338F) ----------------------------------------------------
__int64 goodG2B2_80()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue_4();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_08.c", 0x66u, "goodG2B2");
  return result;
}

//----- (00000000004133D4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_08_good()
{
  goodG2B1_80();
  return goodG2B2_80();
}

//----- (00000000004133EE) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53d_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_53d.c",
      0x34u,
      "CWE617_Reachable_Assertion__connect_socket_53d_badSink");
}

//----- (000000000041341A) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__connect_socket_53d_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_53d.c",
      0x3Fu,
      "CWE617_Reachable_Assertion__connect_socket_53d_goodG2BSink");
}

//----- (0000000000413446) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_67b_badSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_67b.c",
      0x22u,
      "CWE617_Reachable_Assertion__rand_67b_badSink");
  return result;
}

//----- (0000000000413478) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_67b_goodG2BSink(int a1)
{
  __int64 result; // rax

  result = (unsigned int)a1;
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__rand_67b.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__rand_67b_goodG2BSink");
  return result;
}

//----- (00000000004134AA) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_18_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_18.c",
      0x7Cu,
      "CWE617_Reachable_Assertion__listen_socket_18_bad");
  return result;
}
// 4134AA: using guessed type char buf[16];

//----- (00000000004135EE) ----------------------------------------------------
void goodG2B_117()
{
  ;
}

//----- (0000000000413626) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_18_good()
{
  goodG2B_117();
}

//----- (0000000000413636) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE617_Reachable_Assertion__listen_socket_51b_badSink(v7);
}
// 413636: using guessed type char buf[16];

//----- (0000000000413764) ----------------------------------------------------
void goodG2B_118()
{
  CWE617_Reachable_Assertion__listen_socket_51b_goodG2BSink(6);
}

//----- (0000000000413786) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_51_good()
{
  goodG2B_118();
}

//----- (0000000000413796) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE617_Reachable_Assertion__rand_64b_badSink(&v6);
}

//----- (0000000000413802) ----------------------------------------------------
__int64 goodG2B_119()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__rand_64b_goodG2BSink(&v1);
}

//----- (0000000000413826) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_64_good()
{
  return goodG2B_119();
}

//----- (0000000000413836) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__connect_socket_61b_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_61a.c",
      0x39u,
      "CWE617_Reachable_Assertion__connect_socket_61_bad");
  return result;
}

//----- (0000000000413873) ----------------------------------------------------
__int64 goodG2B_120()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__connect_socket_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_61a.c", 0x4Au, "goodG2B");
  return result;
}

//----- (00000000004138B0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_61_good()
{
  return goodG2B_120();
}

//----- (00000000004138C0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE617_Reachable_Assertion__rand_67b_badSink(v2);
}

//----- (0000000000413930) ----------------------------------------------------
__int64 goodG2B_121()
{
  return CWE617_Reachable_Assertion__rand_67b_goodG2BSink(6);
}

//----- (0000000000413958) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_67_good()
{
  return goodG2B_121();
}

//----- (0000000000413968) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_badSource(unsigned int a1)
{
  int v1; // ebx
  int v2; // ebx
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  unsigned int v7; // [rsp+Ch] [rbp-14h]

  v7 = a1;
  if ( CWE617_Reachable_Assertion__rand_22_badGlobal )
  {
    if ( rand() & 1 )
    {
      v1 = rand() << 30;
      v2 = (rand() << 15) ^ v1;
      v3 = v2 ^ rand();
    }
    else
    {
      v4 = rand() << 30;
      v5 = (rand() << 15) ^ v4;
      v3 = ~(v5 ^ rand());
    }
    v7 = v3;
  }
  return v7;
}
// 6331AC: using guessed type int CWE617_Reachable_Assertion__rand_22_badGlobal;

//----- (00000000004139D1) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__rand_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 6331B0: using guessed type int CWE617_Reachable_Assertion__rand_22_goodG2B1Global;

//----- (00000000004139FE) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__rand_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__rand_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 6331B4: using guessed type int CWE617_Reachable_Assertion__rand_22_goodG2B2Global;

//----- (0000000000413A1B) ----------------------------------------------------
__int64 __fastcall badSource_10(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( badStatic_4 )
    __isoc99_fscanf(stdin, "%d", &v2);
  return v2;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);
// 633238: using guessed type int badStatic_4;

//----- (0000000000413A52) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_21_bad()
{
  __int64 result; // rax

  badStatic_4 = 1;
  result = badSource_10(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_21.c",
      0x2Eu,
      "CWE617_Reachable_Assertion__fscanf_21_bad");
  return result;
}
// 633238: using guessed type int badStatic_4;

//----- (0000000000413A99) ----------------------------------------------------
__int64 __fastcall goodG2B1Source_4(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( goodG2B1Static_4 )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 63323C: using guessed type int goodG2B1Static_4;

//----- (0000000000413AC6) ----------------------------------------------------
__int64 goodG2B1_81()
{
  __int64 result; // rax

  goodG2B1Static_4 = 0;
  result = goodG2B1Source_4(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_21.c", 0x51u, "goodG2B1");
  return result;
}
// 63323C: using guessed type int goodG2B1Static_4;

//----- (0000000000413B0D) ----------------------------------------------------
__int64 __fastcall goodG2B2Source_4(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( goodG2B2Static_4 )
    v2 = 6;
  return v2;
}
// 633240: using guessed type int goodG2B2Static_4;

//----- (0000000000413B2A) ----------------------------------------------------
__int64 goodG2B2_81()
{
  __int64 result; // rax

  goodG2B2Static_4 = 1;
  result = goodG2B2Source_4(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_21.c", 0x67u, "goodG2B2");
  return result;
}
// 633240: using guessed type int goodG2B2Static_4;

//----- (0000000000413B71) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_21_good()
{
  goodG2B1_81();
  return goodG2B2_81();
}

//----- (0000000000413B8B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_03_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_03.c",
      0x24u,
      "CWE617_Reachable_Assertion__fscanf_03_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000413BDA) ----------------------------------------------------
void goodG2B1_82()
{
  ;
}

//----- (0000000000413C11) ----------------------------------------------------
void goodG2B2_82()
{
  ;
}

//----- (0000000000413C48) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_03_good()
{
  goodG2B1_82();
  goodG2B2_82();
}

//----- (0000000000413C62) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_63_bad()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  return CWE617_Reachable_Assertion__fscanf_63b_badSink(&v1);
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000413C9C) ----------------------------------------------------
__int64 goodG2B_122()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__fscanf_63b_goodG2BSink(&v1);
}

//----- (0000000000413CC0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_63_good()
{
  return goodG2B_122();
}

//----- (0000000000413CD0) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_41_badSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_41.c",
      0x1Cu,
      "CWE617_Reachable_Assertion__fixed_41_badSink");
}

//----- (0000000000413CFC) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_41_bad()
{
  CWE617_Reachable_Assertion__fixed_41_badSink(4);
}

//----- (0000000000413D1E) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_41_goodG2BSink(int a1)
{
  if ( a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_41.c",
      0x30u,
      "CWE617_Reachable_Assertion__fixed_41_goodG2BSink");
}

//----- (0000000000413D4A) ----------------------------------------------------
void goodG2B_123()
{
  CWE617_Reachable_Assertion__fixed_41_goodG2BSink(6);
}

//----- (0000000000413D6C) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_41_good()
{
  goodG2B_123();
}

//----- (0000000000413D7C) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v2; // [rsp+12h] [rbp-1Eh]
  int v3; // [rsp+14h] [rbp-1Ch]
  int v4; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v6; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  v6 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v3 = 0;
    v2 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v6 = accept(fd, 0LL, 0LL);
      if ( v6 != -1 )
      {
        v4 = recv(v6, buf, 0xDuLL, 0);
        if ( v4 != -1 )
        {
          if ( v4 )
          {
            buf[v4] = 0;
            v7 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v6 != -1 )
    close(v6);
  CWE617_Reachable_Assertion__listen_socket_54b_badSink(v7);
}
// 413D7C: using guessed type char buf[16];

//----- (0000000000413EAA) ----------------------------------------------------
void goodG2B_124()
{
  CWE617_Reachable_Assertion__listen_socket_54b_goodG2BSink(6);
}

//----- (0000000000413ECC) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_54_good()
{
  goodG2B_124();
}

//----- (0000000000413EDC) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  result = (unsigned int)result;
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__rand_31.c", 0x24u, "CWE617_Reachable_Assertion__rand_31_bad");
  return result;
}

//----- (0000000000413F67) ----------------------------------------------------
__int64 goodG2B_125()
{
  return 6LL;
}

//----- (0000000000413FAA) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_31_good()
{
  return goodG2B_125();
}

//----- (0000000000413FBA) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h]
  int v4; // [rsp+18h] [rbp-8h]
  __int16 v5; // [rsp+1Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fgets_22_badGlobal )
  {
    *(_QWORD *)s = 0LL;
    v4 = 0;
    v5 = 0;
    if ( fgets(s, 14, stdin) )
      v2 = atoi(s);
    else
      printLine("fgets() failed.");
  }
  return v2;
}
// 633244: using guessed type int CWE617_Reachable_Assertion__fgets_22_badGlobal;

//----- (0000000000414021) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_goodG2B1Source(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fgets_22_goodG2B1Global )
    printLine("Benign, fixed string");
  else
    v2 = 6;
  return v2;
}
// 633248: using guessed type int CWE617_Reachable_Assertion__fgets_22_goodG2B1Global;

//----- (000000000041404E) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fgets_22_goodG2B2Source(unsigned int a1)
{
  unsigned int v2; // [rsp+0h] [rbp-4h]

  v2 = a1;
  if ( CWE617_Reachable_Assertion__fgets_22_goodG2B2Global )
    v2 = 6;
  return v2;
}
// 63324C: using guessed type int CWE617_Reachable_Assertion__fgets_22_goodG2B2Global;

//----- (000000000041406B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_67_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+10h] [rbp-10h]
  int v5; // [rsp+1Ch] [rbp-4h]

  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  v4 = v5;
  return CWE617_Reachable_Assertion__fgets_67b_badSink(v5);
}

//----- (00000000004140D9) ----------------------------------------------------
__int64 goodG2B_126()
{
  return CWE617_Reachable_Assertion__fgets_67b_goodG2BSink(6);
}

//----- (0000000000414101) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_67_good()
{
  return goodG2B_126();
}

//----- (0000000000414111) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_12_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  else
  {
    v8 = 6;
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_12.c",
      0x82u,
      "CWE617_Reachable_Assertion__listen_socket_12_bad");
  return result;
}
// 414111: using guessed type char buf[16];

//----- (0000000000414271) ----------------------------------------------------
__int64 goodG2B_127()
{
  return globalReturnsTrueOrFalse();
}

//----- (00000000004142BF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_12_good()
{
  return goodG2B_127();
}

//----- (00000000004142CF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_61_bad()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fgets_61b_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_61a.c",
      0x25u,
      "CWE617_Reachable_Assertion__fgets_61_bad");
  return result;
}

//----- (000000000041430C) ----------------------------------------------------
__int64 goodG2B_128()
{
  __int64 result; // rax

  result = CWE617_Reachable_Assertion__fgets_61b_goodG2BSource();
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_61a.c", 0x36u, "goodG2B");
  return result;
}

//----- (0000000000414349) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_61_good()
{
  return goodG2B_128();
}

//----- (0000000000414359) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_09_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_09.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_09_bad");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;
// 414359: using guessed type char buf[16];

//----- (0000000000414464) ----------------------------------------------------
int goodG2B1_83()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_09.c", 0x88u, "goodG2B1");
  return result;
}
// 4265FC: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004144B1) ----------------------------------------------------
__int64 goodG2B2_83()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_09.c", 0x97u, "goodG2B2");
  return result;
}
// 4265F8: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004144F2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_09_good()
{
  goodG2B1_83();
  return goodG2B2_83();
}

//----- (000000000041450C) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_18_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_18.c",
      0x23u,
      "CWE617_Reachable_Assertion__fscanf_18_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041455C) ----------------------------------------------------
void goodG2B_129()
{
  ;
}

//----- (0000000000414594) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_18_good()
{
  goodG2B_129();
}

//----- (00000000004145A4) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE617_Reachable_Assertion__rand_66b_badSink((__int64)&v6);
}

//----- (0000000000414616) ----------------------------------------------------
__int64 goodG2B_130()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 6;
  v2 = 6;
  return CWE617_Reachable_Assertion__rand_66b_goodG2BSink((__int64)&v1);
}

//----- (0000000000414640) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__rand_66_good()
{
  return goodG2B_130();
}

//----- (0000000000414650) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54d_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54e_badSink(a1);
}

//----- (0000000000414667) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54d_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54e_goodG2BSink(a1);
}

//----- (000000000041467E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE617_Reachable_Assertion__listen_socket_64b_badSink(&v5);
}
// 41467E: using guessed type char buf[16];

//----- (00000000004147AE) ----------------------------------------------------
__int64 goodG2B_131()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 6;
  return CWE617_Reachable_Assertion__listen_socket_64b_goodG2BSink(&v1);
}

//----- (00000000004147D2) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_64_good()
{
  return goodG2B_131();
}

//----- (00000000004147E2) ----------------------------------------------------
int CWE617_Reachable_Assertion__connect_socket_13_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  in_addr_t v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v7; // [rsp+2Ch] [rbp-4h]

  v7 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = inet_addr("127.0.0.1");
      v3 = htons(0x6987u);
      result = connect(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = recv(fd, buf, 0xDuLL, 0);
        v5 = result;
        if ( result != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            result = atoi(buf);
            v7 = result;
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
  }
  if ( v7 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__connect_socket_13.c",
      0x70u,
      "CWE617_Reachable_Assertion__connect_socket_13_bad");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;
// 4147E2: using guessed type char buf[16];

//----- (00000000004148EE) ----------------------------------------------------
int goodG2B1_84()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_13.c", 0x88u, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041493C) ----------------------------------------------------
__int64 goodG2B2_84()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__connect_socket_13.c", 0x97u, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041497E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__connect_socket_13_good()
{
  goodG2B1_84();
  return goodG2B2_84();
}

//----- (0000000000414998) ----------------------------------------------------
void CWE617_Reachable_Assertion__fixed_13_bad()
{
  __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_13.c", 0x24u, "CWE617_Reachable_Assertion__fixed_13_bad");
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004149DA) ----------------------------------------------------
int goodG2B1_85()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  else
    result = printLine("Benign, fixed string");
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_13.c", 0x3Cu, "goodG2B1");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000414A28) ----------------------------------------------------
__int64 goodG2B2_85()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fixed_13.c", 0x4Bu, "goodG2B2");
  return result;
}
// 426600: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000414A6A) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fixed_13_good()
{
  goodG2B1_85();
  return goodG2B2_85();
}

//----- (0000000000414A84) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_12_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    __isoc99_fscanf(stdin, "%d", &v1);
  else
    v1 = 6;
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_12.c",
      0x29u,
      "CWE617_Reachable_Assertion__fscanf_12_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000414AEA) ----------------------------------------------------
__int64 goodG2B_132()
{
  return globalReturnsTrueOrFalse();
}

//----- (0000000000414B38) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_12_good()
{
  return goodG2B_132();
}

//----- (0000000000414B48) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_63b_badSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_63b.c",
      0x1Du,
      "CWE617_Reachable_Assertion__fixed_63b_badSink");
  return result;
}

//----- (0000000000414B7E) ----------------------------------------------------
__int64 __fastcall CWE617_Reachable_Assertion__fixed_63b_goodG2BSink(_DWORD *a1)
{
  __int64 result; // rax

  result = (unsigned int)*a1;
  if ( *a1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fixed_63b.c",
      0x29u,
      "CWE617_Reachable_Assertion__fixed_63b_goodG2BSink");
  return result;
}

//----- (0000000000414BB4) ----------------------------------------------------
void __fastcall badSink_9(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_44.c", 0x32u, "badSink");
}

//----- (0000000000414BE0) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  void (__fastcall *v7)(int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_9;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 414BE0: using guessed type char buf[16];

//----- (0000000000414D17) ----------------------------------------------------
void __fastcall goodG2BSink_9(int a1)
{
  if ( a1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_44.c", 0x8Du, "goodG2BSink");
}

//----- (0000000000414D43) ----------------------------------------------------
void goodG2B_133()
{
  goodG2BSink_9(6);
}

//----- (0000000000414D6E) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_44_good()
{
  goodG2B_133();
}

//----- (0000000000414D7E) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_22_bad()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fgets_22_badGlobal = 1;
  result = CWE617_Reachable_Assertion__fgets_22_badSource(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fgets_22a.c",
      0x26u,
      "CWE617_Reachable_Assertion__fgets_22_bad");
  return result;
}
// 633244: using guessed type int CWE617_Reachable_Assertion__fgets_22_badGlobal;

//----- (0000000000414DC5) ----------------------------------------------------
__int64 goodG2B1_86()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fgets_22_goodG2B1Global = 0;
  result = CWE617_Reachable_Assertion__fgets_22_goodG2B1Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_22a.c", 0x3Cu, "goodG2B1");
  return result;
}
// 633248: using guessed type int CWE617_Reachable_Assertion__fgets_22_goodG2B1Global;

//----- (0000000000414E0C) ----------------------------------------------------
__int64 goodG2B2_86()
{
  __int64 result; // rax

  CWE617_Reachable_Assertion__fgets_22_goodG2B2Global = 1;
  result = CWE617_Reachable_Assertion__fgets_22_goodG2B2Source(0xFFFFFFFF);
  if ( (int)result <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_22a.c", 0x4Au, "goodG2B2");
  return result;
}
// 63324C: using guessed type int CWE617_Reachable_Assertion__fgets_22_goodG2B2Global;

//----- (0000000000414E53) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_22_good()
{
  goodG2B1_86();
  return goodG2B2_86();
}

//----- (0000000000414E6D) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_02_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  result = socket(2, 1, 6);
  fd = result;
  if ( result != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    result = bind(fd, (const struct sockaddr *)&s, 0x10u);
    if ( result != -1 )
    {
      result = listen(fd, 5);
      if ( result != -1 )
      {
        result = accept(fd, 0LL, 0LL);
        v7 = result;
        if ( result != -1 )
        {
          result = recv(v7, buf, 0xDuLL, 0);
          v5 = result;
          if ( result != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              result = atoi(buf);
              v8 = result;
            }
          }
        }
      }
    }
  }
  if ( fd != -1 )
    result = close(fd);
  if ( v7 != -1 )
    result = close(v7);
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_02.c",
      0x7Du,
      "CWE617_Reachable_Assertion__listen_socket_02_bad");
  return result;
}
// 414E6D: using guessed type char buf[16];

//----- (0000000000414FB0) ----------------------------------------------------
void goodG2B1_87()
{
  ;
}

//----- (0000000000414FE7) ----------------------------------------------------
void goodG2B2_87()
{
  ;
}

//----- (000000000041501E) ----------------------------------------------------
void CWE617_Reachable_Assertion__listen_socket_02_good()
{
  goodG2B1_87();
  goodG2B2_87();
}

//----- (0000000000415038) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54b_badSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54c_badSink(a1);
}

//----- (000000000041504F) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__fixed_54b_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__fixed_54c_goodG2BSink(a1);
}

//----- (0000000000415066) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53c_badSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_53d_badSink(a1);
}

//----- (000000000041507D) ----------------------------------------------------
void __fastcall CWE617_Reachable_Assertion__listen_socket_53c_goodG2BSink(int a1)
{
  CWE617_Reachable_Assertion__listen_socket_53d_goodG2BSink(a1);
}

//----- (0000000000415094) ----------------------------------------------------
__int64 badSink_10()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fgets_45_badData;
  if ( CWE617_Reachable_Assertion__fgets_45_badData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_45.c", 0x22u, "badSink");
  return result;
}
// 633250: using guessed type int CWE617_Reachable_Assertion__fgets_45_badData;

//----- (00000000004150C6) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_45_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  int v4; // [rsp+1Ch] [rbp-4h]

  v4 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v4 = atoi(s);
  else
    printLine("fgets() failed.");
  CWE617_Reachable_Assertion__fgets_45_badData = v4;
  return badSink_10();
}
// 633250: using guessed type int CWE617_Reachable_Assertion__fgets_45_badData;

//----- (0000000000415137) ----------------------------------------------------
__int64 goodG2BSink_10()
{
  __int64 result; // rax

  result = (unsigned int)CWE617_Reachable_Assertion__fgets_45_goodG2BData;
  if ( CWE617_Reachable_Assertion__fgets_45_goodG2BData <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fgets_45.c", 0x44u, "goodG2BSink");
  return result;
}
// 633254: using guessed type int CWE617_Reachable_Assertion__fgets_45_goodG2BData;

//----- (0000000000415169) ----------------------------------------------------
__int64 goodG2B_134()
{
  CWE617_Reachable_Assertion__fgets_45_goodG2BData = 6;
  return goodG2BSink_10();
}
// 633254: using guessed type int CWE617_Reachable_Assertion__fgets_45_goodG2BData;

//----- (0000000000415194) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_45_good()
{
  return goodG2B_134();
}

//----- (00000000004151A4) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (00000000004151AF) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (00000000004151BA) ----------------------------------------------------
int CWE617_Reachable_Assertion__listen_socket_08_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  result = staticReturnsTrue_5();
  if ( result )
  {
    v7 = -1;
    result = socket(2, 1, 6);
    fd = result;
    if ( result != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      result = bind(fd, (const struct sockaddr *)&s, 0x10u);
      if ( result != -1 )
      {
        result = listen(fd, 5);
        if ( result != -1 )
        {
          result = accept(fd, 0LL, 0LL);
          v7 = result;
          if ( result != -1 )
          {
            result = recv(v7, buf, 0xDuLL, 0);
            v5 = result;
            if ( result != -1 )
            {
              if ( v5 )
              {
                buf[v5] = 0;
                result = atoi(buf);
                v8 = result;
              }
            }
          }
        }
      }
    }
    if ( fd != -1 )
      result = close(fd);
    if ( v7 != -1 )
      result = close(v7);
  }
  if ( v8 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__listen_socket_08.c",
      0x8Bu,
      "CWE617_Reachable_Assertion__listen_socket_08_bad");
  return result;
}
// 4151BA: using guessed type char buf[16];

//----- (000000000041530F) ----------------------------------------------------
int goodG2B1_88()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsFalse_5();
  if ( result )
    result = printLine("Benign, fixed string");
  else
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_08.c", 0xA3u, "goodG2B1");
  return result;
}

//----- (0000000000415360) ----------------------------------------------------
__int64 goodG2B2_88()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  result = staticReturnsTrue_5();
  if ( (_DWORD)result )
    v1 = 6;
  if ( v1 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__listen_socket_08.c", 0xB2u, "goodG2B2");
  return result;
}

//----- (00000000004153A5) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__listen_socket_08_good()
{
  goodG2B1_88();
  return goodG2B2_88();
}

//----- (00000000004153BF) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fgets_65_bad()
{
  char s[8]; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  __int16 v3; // [rsp+Ch] [rbp-14h]
  void (__fastcall *v4)(int); // [rsp+10h] [rbp-10h]
  unsigned int v5; // [rsp+1Ch] [rbp-4h]

  v4 = CWE617_Reachable_Assertion__fgets_65b_badSink;
  v5 = -1;
  *(_QWORD *)s = 0LL;
  v2 = 0;
  v3 = 0;
  if ( fgets(s, 14, stdin) )
    v5 = atoi(s);
  else
    printLine("fgets() failed.");
  return ((__int64 (__fastcall *)(_QWORD))v4)(v5);
}

//----- (0000000000415430) ----------------------------------------------------
void goodG2B_135()
{
  CWE617_Reachable_Assertion__fgets_65b_goodG2BSink(6);
}

//----- (000000000041545B) ----------------------------------------------------
void CWE617_Reachable_Assertion__fgets_65_good()
{
  goodG2B_135();
}

//----- (000000000041546B) ----------------------------------------------------
__int64 CWE617_Reachable_Assertion__fscanf_17_bad()
{
  __int64 result; // rax
  unsigned int v1; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v1 = -1;
  for ( i = 0; i <= 0; ++i )
    __isoc99_fscanf(stdin, "%d", &v1);
  result = v1;
  if ( (int)v1 <= 5 )
    __assert_fail(
      "data > 5",
      "CWE617_Reachable_Assertion__fscanf_17.c",
      0x25u,
      "CWE617_Reachable_Assertion__fscanf_17_bad");
  return result;
}
// 400C70: using guessed type __int64 __fastcall __isoc99_fscanf(_QWORD, _QWORD, _QWORD);

//----- (00000000004154CD) ----------------------------------------------------
void goodG2B_136()
{
  int v0; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  v0 = -1;
  for ( i = 0; i <= 0; ++i )
    v0 = 6;
  if ( v0 <= 5 )
    __assert_fail("data > 5", "CWE617_Reachable_Assertion__fscanf_17.c", 0x39u, "goodG2B");
}

//----- (0000000000415517) ----------------------------------------------------
void CWE617_Reachable_Assertion__fscanf_17_good()
{
  goodG2B_136();
}

//----- (0000000000415527) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (0000000000415548) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (0000000000415573) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (0000000000415594) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (00000000004155B9) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (00000000004155DF) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000415603) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000415627) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000041564B) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000041566F) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000041569F) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (00000000004156C0) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (00000000004156E4) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000041570F) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000041573B) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (0000000000415792) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400CA0: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041586B) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400DC0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041591F) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000041592A) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000415935) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000041594B) ----------------------------------------------------
void good1_17()
{
  ;
}

//----- (0000000000415951) ----------------------------------------------------
void good2_12()
{
  ;
}

//----- (0000000000415957) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000041595D) ----------------------------------------------------
void good4()
{
  ;
}

//----- (0000000000415963) ----------------------------------------------------
void good5()
{
  ;
}

//----- (0000000000415969) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000041596F) ----------------------------------------------------
void good7()
{
  ;
}

//----- (0000000000415975) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000041597B) ----------------------------------------------------
void good9()
{
  ;
}

//----- (0000000000415981) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (0000000000415987) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000041598D) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (0000000000415993) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (0000000000415999) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000041599F) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (00000000004159A5) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (00000000004159AB) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (00000000004159B1) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (00000000004159B7) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (00000000004159EA) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (0000000000415A8E) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (0000000000415AC2) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (0000000000415AE1) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (0000000000415B56) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (0000000000415B70) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (0000000000415B8A) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (0000000000415BB0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 632DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 632DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (0000000000415C24) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 1199 function(s) have been successfully decompiled
