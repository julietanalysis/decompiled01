/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_4008D0();
// int printf(const char *format, ...);
// int puts(const char *s);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int CWE398_Poor_Code_Quality__empty_else_13_bad();
int good1();
int good2();
int CWE398_Poor_Code_Quality__empty_else_13_good();
int CWE398_Poor_Code_Quality__five_06_bad();
int good1_0();
int good2_0();
int CWE398_Poor_Code_Quality__five_06_good();
int CWE398_Poor_Code_Quality__equals_13_bad();
int good1_1();
int good2_1();
int CWE398_Poor_Code_Quality__equals_13_good();
int CWE398_Poor_Code_Quality__empty_for_05_bad();
int good1_2();
int good2_2();
int CWE398_Poor_Code_Quality__empty_for_05_good();
int CWE398_Poor_Code_Quality__empty_block_15_bad();
int good1_3();
int good2_3();
int CWE398_Poor_Code_Quality__empty_block_15_good();
int CWE398_Poor_Code_Quality__empty_for_09_bad();
int good1_4();
int good2_4();
int CWE398_Poor_Code_Quality__empty_for_09_good();
int CWE398_Poor_Code_Quality__empty_while_14_bad();
int good1_5();
int good2_5();
int CWE398_Poor_Code_Quality__empty_while_14_good();
int CWE398_Poor_Code_Quality__addition_09_bad();
int good1_6();
int good2_6();
int CWE398_Poor_Code_Quality__addition_09_good();
int CWE398_Poor_Code_Quality__empty_for_13_bad();
int good1_7();
int good2_7();
int CWE398_Poor_Code_Quality__empty_for_13_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE398_Poor_Code_Quality__empty_while_08_bad();
int good1_8();
int good2_8();
int CWE398_Poor_Code_Quality__empty_while_08_good();
int CWE398_Poor_Code_Quality__five_13_bad();
int good1_9();
int good2_9();
int CWE398_Poor_Code_Quality__five_13_good();
int CWE398_Poor_Code_Quality__equals_09_bad();
int good1_10();
int good2_10();
int CWE398_Poor_Code_Quality__equals_09_good();
int CWE398_Poor_Code_Quality__semicolon_06_bad();
int good1_11();
int good2_11();
int CWE398_Poor_Code_Quality__semicolon_06_good();
int CWE398_Poor_Code_Quality__empty_if_04_bad();
int good1_12();
int good2_12();
int CWE398_Poor_Code_Quality__empty_if_04_good();
void CWE398_Poor_Code_Quality__empty_else_17_bad();
void good1_13();
void CWE398_Poor_Code_Quality__empty_else_17_good();
int CWE398_Poor_Code_Quality__equals_14_bad();
int good1_14();
int good2_13();
int CWE398_Poor_Code_Quality__equals_14_good();
int CWE398_Poor_Code_Quality__empty_while_02_bad();
int good1_15();
int good2_14();
int CWE398_Poor_Code_Quality__empty_while_02_good();
int CWE398_Poor_Code_Quality__empty_case_05_bad();
int good1_16();
int good2_15();
int CWE398_Poor_Code_Quality__empty_case_05_good();
int CWE398_Poor_Code_Quality__empty_else_03_bad();
int good1_17();
int good2_16();
int CWE398_Poor_Code_Quality__empty_else_03_good();
int CWE398_Poor_Code_Quality__five_05_bad();
int good1_18();
int good2_17();
int CWE398_Poor_Code_Quality__five_05_good();
int CWE398_Poor_Code_Quality__empty_case_13_bad();
int good1_19();
int good2_18();
int CWE398_Poor_Code_Quality__empty_case_13_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE398_Poor_Code_Quality__empty_for_08_bad();
int good1_20();
int good2_19();
int CWE398_Poor_Code_Quality__empty_for_08_good();
int CWE398_Poor_Code_Quality__empty_while_04_bad();
int good1_21();
int good2_20();
int CWE398_Poor_Code_Quality__empty_while_04_good();
int CWE398_Poor_Code_Quality__empty_else_18_bad();
int good1_22();
int CWE398_Poor_Code_Quality__empty_else_18_good();
int CWE398_Poor_Code_Quality__empty_for_03_bad();
int good1_23();
int good2_21();
int CWE398_Poor_Code_Quality__empty_for_03_good();
int CWE398_Poor_Code_Quality__empty_block_05_bad();
int good1_24();
int good2_22();
int CWE398_Poor_Code_Quality__empty_block_05_good();
int CWE398_Poor_Code_Quality__five_03_bad();
int good1_25();
int good2_23();
int CWE398_Poor_Code_Quality__five_03_good();
int CWE398_Poor_Code_Quality__empty_else_01_bad();
int good1_26();
int CWE398_Poor_Code_Quality__empty_else_01_good();
int CWE398_Poor_Code_Quality__equals_18_bad();
int good1_27();
int CWE398_Poor_Code_Quality__equals_18_good();
int CWE398_Poor_Code_Quality__empty_for_18_bad();
int good1_28();
int CWE398_Poor_Code_Quality__empty_for_18_good();
int CWE398_Poor_Code_Quality__empty_if_16_bad();
int good1_29();
int CWE398_Poor_Code_Quality__empty_if_16_good();
int CWE398_Poor_Code_Quality__five_18_bad();
int good1_30();
int CWE398_Poor_Code_Quality__five_18_good();
int CWE398_Poor_Code_Quality__addition_15_bad();
int good1_31();
int good2_24();
int CWE398_Poor_Code_Quality__addition_15_good();
int CWE398_Poor_Code_Quality__equals_04_bad();
int good1_32();
int good2_25();
int CWE398_Poor_Code_Quality__equals_04_good();
int CWE398_Poor_Code_Quality__empty_else_12_bad();
int good1_33();
int CWE398_Poor_Code_Quality__empty_else_12_good();
int CWE398_Poor_Code_Quality__semicolon_14_bad();
int good1_34();
int good2_26();
int CWE398_Poor_Code_Quality__semicolon_14_good();
int CWE398_Poor_Code_Quality__empty_if_15_bad();
int good1_35();
int good2_27();
int CWE398_Poor_Code_Quality__empty_if_15_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE398_Poor_Code_Quality__empty_block_08_bad();
int good1_36();
int good2_28();
int CWE398_Poor_Code_Quality__empty_block_08_good();
int CWE398_Poor_Code_Quality__empty_case_03_bad();
int good1_37();
int good2_29();
int CWE398_Poor_Code_Quality__empty_case_03_good();
int CWE398_Poor_Code_Quality__empty_for_12_bad();
int good1_38();
int CWE398_Poor_Code_Quality__empty_for_12_good();
int CWE398_Poor_Code_Quality__five_12_bad();
int good1_39();
int CWE398_Poor_Code_Quality__five_12_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
int CWE398_Poor_Code_Quality__empty_else_08_bad();
int good1_40();
int good2_30();
int CWE398_Poor_Code_Quality__empty_else_08_good();
int CWE398_Poor_Code_Quality__empty_case_18_bad();
int good1_41();
int CWE398_Poor_Code_Quality__empty_case_18_good();
void helperBad();
void CWE398_Poor_Code_Quality__empty_function_01_bad();
int helperGood1();
int good1_42();
int CWE398_Poor_Code_Quality__empty_function_01_good();
int CWE398_Poor_Code_Quality__empty_while_15_bad();
int good1_43();
int good2_31();
int CWE398_Poor_Code_Quality__empty_while_15_good();
int CWE398_Poor_Code_Quality__empty_for_06_bad();
int good1_44();
int good2_32();
int CWE398_Poor_Code_Quality__empty_for_06_good();
int CWE398_Poor_Code_Quality__empty_block_03_bad();
int good1_45();
int good2_33();
int CWE398_Poor_Code_Quality__empty_block_03_good();
int CWE398_Poor_Code_Quality__empty_else_11_bad();
int good1_46();
int good2_34();
int CWE398_Poor_Code_Quality__empty_else_11_good();
int CWE398_Poor_Code_Quality__empty_else_02_bad();
int good1_47();
int good2_35();
int CWE398_Poor_Code_Quality__empty_else_02_good();
int CWE398_Poor_Code_Quality__empty_for_17_bad();
int good1_48();
int CWE398_Poor_Code_Quality__empty_for_17_good();
int CWE398_Poor_Code_Quality__semicolon_04_bad();
int good1_49();
int good2_36();
int CWE398_Poor_Code_Quality__semicolon_04_good();
int CWE398_Poor_Code_Quality__five_17_bad();
int good1_50();
int CWE398_Poor_Code_Quality__five_17_good();
int CWE398_Poor_Code_Quality__addition_05_bad();
int good1_51();
int good2_37();
int CWE398_Poor_Code_Quality__addition_05_good();
int CWE398_Poor_Code_Quality__empty_case_12_bad();
int good1_52();
int CWE398_Poor_Code_Quality__empty_case_12_good();
__int64 staticReturnsTrue_3();
__int64 staticReturnsFalse_3();
int CWE398_Poor_Code_Quality__empty_if_08_bad();
int good1_53();
int good2_38();
int CWE398_Poor_Code_Quality__empty_if_08_good();
int CWE398_Poor_Code_Quality__equals_15_bad();
int good1_54();
int good2_39();
int CWE398_Poor_Code_Quality__equals_15_good();
int CWE398_Poor_Code_Quality__empty_if_05_bad();
int good1_55();
int good2_40();
int CWE398_Poor_Code_Quality__empty_if_05_good();
int CWE398_Poor_Code_Quality__empty_else_16_bad();
int good1_56();
int CWE398_Poor_Code_Quality__empty_else_16_good();
int CWE398_Poor_Code_Quality__empty_for_11_bad();
int good1_57();
int good2_41();
int CWE398_Poor_Code_Quality__empty_for_11_good();
int CWE398_Poor_Code_Quality__empty_for_02_bad();
int good1_58();
int good2_42();
int CWE398_Poor_Code_Quality__empty_for_02_good();
int CWE398_Poor_Code_Quality__addition_13_bad();
int good1_59();
int good2_43();
int CWE398_Poor_Code_Quality__addition_13_good();
int CWE398_Poor_Code_Quality__five_11_bad();
int good1_60();
int good2_44();
int CWE398_Poor_Code_Quality__five_11_good();
int CWE398_Poor_Code_Quality__five_02_bad();
int good1_61();
int good2_45();
int CWE398_Poor_Code_Quality__five_02_good();
int CWE398_Poor_Code_Quality__empty_if_13_bad();
int good1_62();
int good2_46();
int CWE398_Poor_Code_Quality__empty_if_13_good();
int CWE398_Poor_Code_Quality__empty_block_17_bad();
int good1_63();
int CWE398_Poor_Code_Quality__empty_block_17_good();
int CWE398_Poor_Code_Quality__empty_for_16_bad();
int good1_64();
int CWE398_Poor_Code_Quality__empty_for_16_good();
int CWE398_Poor_Code_Quality__empty_block_12_bad();
int good1_65();
int CWE398_Poor_Code_Quality__empty_block_12_good();
int CWE398_Poor_Code_Quality__five_16_bad();
int good1_66();
int CWE398_Poor_Code_Quality__five_16_good();
void CWE398_Poor_Code_Quality__empty_case_17_bad();
void good1_67();
void CWE398_Poor_Code_Quality__empty_case_17_good();
int CWE398_Poor_Code_Quality__five_10_bad();
int good1_68();
int good2_47();
int CWE398_Poor_Code_Quality__five_10_good();
int CWE398_Poor_Code_Quality__empty_while_05_bad();
int good1_69();
int good2_48();
int CWE398_Poor_Code_Quality__empty_while_05_good();
int CWE398_Poor_Code_Quality__empty_block_06_bad();
int good1_70();
int good2_49();
int CWE398_Poor_Code_Quality__empty_block_06_good();
int CWE398_Poor_Code_Quality__empty_if_03_bad();
int good1_71();
int good2_50();
int CWE398_Poor_Code_Quality__empty_if_03_good();
int CWE398_Poor_Code_Quality__empty_while_13_bad();
int good1_72();
int good2_51();
int CWE398_Poor_Code_Quality__empty_while_13_good();
int CWE398_Poor_Code_Quality__empty_case_02_bad();
int good1_73();
int good2_52();
int CWE398_Poor_Code_Quality__empty_case_02_good();
int CWE398_Poor_Code_Quality__five_14_bad();
int good1_74();
int good2_53();
int CWE398_Poor_Code_Quality__five_14_good();
int CWE398_Poor_Code_Quality__empty_if_11_bad();
int good1_75();
int good2_54();
int CWE398_Poor_Code_Quality__empty_if_11_good();
int CWE398_Poor_Code_Quality__empty_if_07_bad();
int good1_76();
int good2_55();
int CWE398_Poor_Code_Quality__empty_if_07_good();
int CWE398_Poor_Code_Quality__five_01_bad();
int good1_77();
int CWE398_Poor_Code_Quality__five_01_good();
int CWE398_Poor_Code_Quality__semicolon_15_bad();
int good1_78();
int good2_56();
int CWE398_Poor_Code_Quality__semicolon_15_good();
int CWE398_Poor_Code_Quality__addition_03_bad();
int good1_79();
int good2_57();
int CWE398_Poor_Code_Quality__addition_03_good();
int CWE398_Poor_Code_Quality__equals_05_bad();
int good1_80();
int good2_58();
int CWE398_Poor_Code_Quality__equals_05_good();
int CWE398_Poor_Code_Quality__empty_case_16_bad();
int good1_81();
int CWE398_Poor_Code_Quality__empty_case_16_good();
int CWE398_Poor_Code_Quality__semicolon_09_bad();
int good1_82();
int good2_59();
int CWE398_Poor_Code_Quality__semicolon_09_good();
int CWE398_Poor_Code_Quality__empty_for_01_bad();
int good1_83();
int CWE398_Poor_Code_Quality__empty_for_01_good();
int CWE398_Poor_Code_Quality__empty_case_10_bad();
int good1_84();
int good2_60();
int CWE398_Poor_Code_Quality__empty_case_10_good();
int CWE398_Poor_Code_Quality__empty_block_11_bad();
int good1_85();
int good2_61();
int CWE398_Poor_Code_Quality__empty_block_11_good();
int CWE398_Poor_Code_Quality__empty_block_02_bad();
int good1_86();
int good2_62();
int CWE398_Poor_Code_Quality__empty_block_02_good();
int CWE398_Poor_Code_Quality__addition_18_bad();
int good1_87();
int CWE398_Poor_Code_Quality__addition_18_good();
int CWE398_Poor_Code_Quality__equals_16_bad();
int good1_88();
int CWE398_Poor_Code_Quality__equals_16_good();
int CWE398_Poor_Code_Quality__empty_else_09_bad();
int good1_89();
int good2_63();
int CWE398_Poor_Code_Quality__empty_else_09_good();
int CWE398_Poor_Code_Quality__empty_if_06_bad();
int good1_90();
int good2_64();
int CWE398_Poor_Code_Quality__empty_if_06_good();
int CWE398_Poor_Code_Quality__empty_else_10_bad();
int good1_91();
int good2_65();
int CWE398_Poor_Code_Quality__empty_else_10_good();
int CWE398_Poor_Code_Quality__empty_block_16_bad();
int good1_92();
int CWE398_Poor_Code_Quality__empty_block_16_good();
int CWE398_Poor_Code_Quality__empty_case_01_bad();
int good1_93();
int CWE398_Poor_Code_Quality__empty_case_01_good();
int CWE398_Poor_Code_Quality__empty_for_10_bad();
int good1_94();
int good2_66();
int CWE398_Poor_Code_Quality__empty_for_10_good();
int CWE398_Poor_Code_Quality__empty_block_10_bad();
int good1_95();
int good2_67();
int CWE398_Poor_Code_Quality__empty_block_10_good();
int CWE398_Poor_Code_Quality__empty_while_03_bad();
int good1_96();
int good2_68();
int CWE398_Poor_Code_Quality__empty_while_03_good();
int CWE398_Poor_Code_Quality__empty_for_07_bad();
int good1_97();
int good2_69();
int CWE398_Poor_Code_Quality__empty_for_07_good();
int CWE398_Poor_Code_Quality__empty_block_01_bad();
int good1_98();
int CWE398_Poor_Code_Quality__empty_block_01_good();
int CWE398_Poor_Code_Quality__addition_12_bad();
int good1_99();
int CWE398_Poor_Code_Quality__addition_12_good();
__int64 staticReturnsTrue_4();
__int64 staticReturnsFalse_4();
int CWE398_Poor_Code_Quality__five_08_bad();
int good1_100();
int good2_70();
int CWE398_Poor_Code_Quality__five_08_good();
int CWE398_Poor_Code_Quality__empty_case_11_bad();
int good1_101();
int good2_71();
int CWE398_Poor_Code_Quality__empty_case_11_good();
int CWE398_Poor_Code_Quality__empty_if_12_bad();
int good1_102();
int CWE398_Poor_Code_Quality__empty_if_12_good();
int CWE398_Poor_Code_Quality__empty_while_06_bad();
int good1_103();
int good2_72();
int CWE398_Poor_Code_Quality__empty_while_06_good();
int CWE398_Poor_Code_Quality__empty_while_18_bad();
int good1_104();
int CWE398_Poor_Code_Quality__empty_while_18_good();
int CWE398_Poor_Code_Quality__semicolon_05_bad();
int good1_105();
int good2_73();
int CWE398_Poor_Code_Quality__semicolon_05_good();
__int64 staticReturnsTrue_5();
__int64 staticReturnsFalse_5();
int CWE398_Poor_Code_Quality__semicolon_08_bad();
int good1_106();
int good2_74();
int CWE398_Poor_Code_Quality__semicolon_08_good();
int CWE398_Poor_Code_Quality__equals_03_bad();
int good1_107();
int good2_75();
int CWE398_Poor_Code_Quality__equals_03_good();
int CWE398_Poor_Code_Quality__empty_case_09_bad();
int good1_108();
int good2_76();
int CWE398_Poor_Code_Quality__empty_case_09_good();
int CWE398_Poor_Code_Quality__empty_block_09_bad();
int good1_109();
int good2_77();
int CWE398_Poor_Code_Quality__empty_block_09_good();
int CWE398_Poor_Code_Quality__semicolon_13_bad();
int good1_110();
int good2_78();
int CWE398_Poor_Code_Quality__semicolon_13_good();
int CWE398_Poor_Code_Quality__empty_else_06_bad();
int good1_111();
int good2_79();
int CWE398_Poor_Code_Quality__empty_else_06_good();
int CWE398_Poor_Code_Quality__addition_17_bad();
int good1_112();
int CWE398_Poor_Code_Quality__addition_17_good();
int CWE398_Poor_Code_Quality__five_15_bad();
int good1_113();
int good2_80();
int CWE398_Poor_Code_Quality__five_15_good();
int CWE398_Poor_Code_Quality__empty_case_06_bad();
int good1_114();
int good2_81();
int CWE398_Poor_Code_Quality__empty_case_06_good();
int CWE398_Poor_Code_Quality__empty_while_12_bad();
int good1_115();
int CWE398_Poor_Code_Quality__empty_while_12_good();
__int64 staticReturnsTrue_6();
__int64 staticReturnsFalse_6();
int CWE398_Poor_Code_Quality__equals_08_bad();
int good1_116();
int good2_82();
int CWE398_Poor_Code_Quality__equals_08_good();
void CWE398_Poor_Code_Quality__empty_if_17_bad();
void good1_117();
void CWE398_Poor_Code_Quality__empty_if_17_good();
int CWE398_Poor_Code_Quality__empty_if_01_bad();
int good1_118();
int CWE398_Poor_Code_Quality__empty_if_01_good();
int CWE398_Poor_Code_Quality__addition_11_bad();
int good1_119();
int good2_83();
int CWE398_Poor_Code_Quality__addition_11_good();
int CWE398_Poor_Code_Quality__addition_02_bad();
int good1_120();
int good2_84();
int CWE398_Poor_Code_Quality__addition_02_good();
int CWE398_Poor_Code_Quality__empty_else_14_bad();
int good1_121();
int good2_85();
int CWE398_Poor_Code_Quality__empty_else_14_good();
int CWE398_Poor_Code_Quality__empty_block_13_bad();
int good1_122();
int good2_86();
int CWE398_Poor_Code_Quality__empty_block_13_good();
int CWE398_Poor_Code_Quality__empty_if_02_bad();
int good1_123();
int good2_87();
int CWE398_Poor_Code_Quality__empty_if_02_good();
int CWE398_Poor_Code_Quality__empty_block_07_bad();
int good1_124();
int good2_88();
int CWE398_Poor_Code_Quality__empty_block_07_good();
int CWE398_Poor_Code_Quality__addition_16_bad();
int good1_125();
int CWE398_Poor_Code_Quality__addition_16_good();
int CWE398_Poor_Code_Quality__empty_for_14_bad();
int good1_126();
int good2_89();
int CWE398_Poor_Code_Quality__empty_for_14_good();
int CWE398_Poor_Code_Quality__equals_12_bad();
int good1_127();
int CWE398_Poor_Code_Quality__equals_12_good();
int CWE398_Poor_Code_Quality__empty_else_04_bad();
int good1_128();
int good2_90();
int CWE398_Poor_Code_Quality__empty_else_04_good();
int CWE398_Poor_Code_Quality__semicolon_07_bad();
int good1_129();
int good2_91();
int CWE398_Poor_Code_Quality__semicolon_07_good();
int CWE398_Poor_Code_Quality__addition_10_bad();
int good1_130();
int good2_92();
int CWE398_Poor_Code_Quality__addition_10_good();
__int64 staticReturnsTrue_7();
__int64 staticReturnsFalse_7();
int CWE398_Poor_Code_Quality__empty_case_08_bad();
int good1_131();
int good2_93();
int CWE398_Poor_Code_Quality__empty_case_08_good();
int CWE398_Poor_Code_Quality__semicolon_03_bad();
int good1_132();
int good2_94();
int CWE398_Poor_Code_Quality__semicolon_03_good();
int CWE398_Poor_Code_Quality__empty_if_10_bad();
int good1_133();
int good2_95();
int CWE398_Poor_Code_Quality__empty_if_10_good();
int CWE398_Poor_Code_Quality__addition_07_bad();
int good1_134();
int good2_96();
int CWE398_Poor_Code_Quality__addition_07_good();
int CWE398_Poor_Code_Quality__empty_while_11_bad();
int good1_135();
int good2_97();
int CWE398_Poor_Code_Quality__empty_while_11_good();
int CWE398_Poor_Code_Quality__semicolon_18_bad();
int good1_136();
int CWE398_Poor_Code_Quality__semicolon_18_good();
int CWE398_Poor_Code_Quality__addition_01_bad();
int good1_137();
int CWE398_Poor_Code_Quality__addition_01_good();
int CWE398_Poor_Code_Quality__equals_07_bad();
int good1_138();
int good2_98();
int CWE398_Poor_Code_Quality__equals_07_good();
int CWE398_Poor_Code_Quality__empty_while_17_bad();
int good1_139();
int CWE398_Poor_Code_Quality__empty_while_17_good();
int CWE398_Poor_Code_Quality__equals_17_bad();
int good1_140();
int CWE398_Poor_Code_Quality__equals_17_good();
int CWE398_Poor_Code_Quality__empty_while_16_bad();
int good1_141();
int CWE398_Poor_Code_Quality__empty_while_16_good();
int CWE398_Poor_Code_Quality__empty_case_14_bad();
int good1_142();
int good2_99();
int CWE398_Poor_Code_Quality__empty_case_14_good();
int CWE398_Poor_Code_Quality__empty_while_10_bad();
int good1_143();
int good2_100();
int CWE398_Poor_Code_Quality__empty_while_10_good();
int CWE398_Poor_Code_Quality__equals_11_bad();
int good1_144();
int good2_101();
int CWE398_Poor_Code_Quality__equals_11_good();
int CWE398_Poor_Code_Quality__equals_02_bad();
int good1_145();
int good2_102();
int CWE398_Poor_Code_Quality__equals_02_good();
int CWE398_Poor_Code_Quality__empty_for_04_bad();
int good1_146();
int good2_103();
int CWE398_Poor_Code_Quality__empty_for_04_good();
int CWE398_Poor_Code_Quality__semicolon_12_bad();
int good1_147();
int CWE398_Poor_Code_Quality__semicolon_12_good();
int CWE398_Poor_Code_Quality__five_04_bad();
int good1_148();
int good2_104();
int CWE398_Poor_Code_Quality__five_04_good();
int CWE398_Poor_Code_Quality__empty_block_18_bad();
int good1_149();
int CWE398_Poor_Code_Quality__empty_block_18_good();
int CWE398_Poor_Code_Quality__empty_case_07_bad();
int good1_150();
int good2_105();
int CWE398_Poor_Code_Quality__empty_case_07_good();
int CWE398_Poor_Code_Quality__addition_04_bad();
int good1_151();
int good2_106();
int CWE398_Poor_Code_Quality__addition_04_good();
int CWE398_Poor_Code_Quality__empty_block_14_bad();
int good1_152();
int good2_107();
int CWE398_Poor_Code_Quality__empty_block_14_good();
int CWE398_Poor_Code_Quality__empty_while_01_bad();
int good1_153();
int CWE398_Poor_Code_Quality__empty_while_01_good();
int CWE398_Poor_Code_Quality__equals_10_bad();
int good1_154();
int good2_108();
int CWE398_Poor_Code_Quality__equals_10_good();
int CWE398_Poor_Code_Quality__addition_06_bad();
int good1_155();
int good2_109();
int CWE398_Poor_Code_Quality__addition_06_good();
int CWE398_Poor_Code_Quality__semicolon_10_bad();
int good1_156();
int good2_110();
int CWE398_Poor_Code_Quality__semicolon_10_good();
int CWE398_Poor_Code_Quality__empty_if_09_bad();
int good1_157();
int good2_111();
int CWE398_Poor_Code_Quality__empty_if_09_good();
int CWE398_Poor_Code_Quality__semicolon_17_bad();
int good1_158();
int CWE398_Poor_Code_Quality__semicolon_17_good();
int CWE398_Poor_Code_Quality__equals_01_bad();
int good1_159();
int CWE398_Poor_Code_Quality__equals_01_good();
int CWE398_Poor_Code_Quality__empty_case_04_bad();
int good1_160();
int good2_112();
int CWE398_Poor_Code_Quality__empty_case_04_good();
int CWE398_Poor_Code_Quality__empty_else_15_bad();
int good1_161();
int good2_113();
int CWE398_Poor_Code_Quality__empty_else_15_good();
int CWE398_Poor_Code_Quality__semicolon_11_bad();
int good1_162();
int good2_114();
int CWE398_Poor_Code_Quality__semicolon_11_good();
int CWE398_Poor_Code_Quality__semicolon_02_bad();
int good1_163();
int good2_115();
int CWE398_Poor_Code_Quality__semicolon_02_good();
int CWE398_Poor_Code_Quality__empty_if_18_bad();
int good1_164();
int CWE398_Poor_Code_Quality__empty_if_18_good();
int CWE398_Poor_Code_Quality__empty_while_07_bad();
int good1_165();
int good2_116();
int CWE398_Poor_Code_Quality__empty_while_07_good();
int CWE398_Poor_Code_Quality__empty_for_15_bad();
int good1_166();
int good2_117();
int CWE398_Poor_Code_Quality__empty_for_15_good();
int CWE398_Poor_Code_Quality__empty_block_04_bad();
int good1_167();
int good2_118();
int CWE398_Poor_Code_Quality__empty_block_04_good();
int CWE398_Poor_Code_Quality__semicolon_16_bad();
int good1_168();
int CWE398_Poor_Code_Quality__semicolon_16_good();
int CWE398_Poor_Code_Quality__five_09_bad();
int good1_169();
int good2_119();
int CWE398_Poor_Code_Quality__five_09_good();
int CWE398_Poor_Code_Quality__empty_while_09_bad();
int good1_170();
int good2_120();
int CWE398_Poor_Code_Quality__empty_while_09_good();
int CWE398_Poor_Code_Quality__equals_06_bad();
int good1_171();
int good2_121();
int CWE398_Poor_Code_Quality__equals_06_good();
int CWE398_Poor_Code_Quality__five_07_bad();
int good1_172();
int good2_122();
int CWE398_Poor_Code_Quality__five_07_good();
int CWE398_Poor_Code_Quality__addition_14_bad();
int good1_173();
int good2_123();
int CWE398_Poor_Code_Quality__addition_14_good();
int CWE398_Poor_Code_Quality__semicolon_01_bad();
int good1_174();
int CWE398_Poor_Code_Quality__semicolon_01_good();
int CWE398_Poor_Code_Quality__empty_if_14_bad();
int good1_175();
int good2_124();
int CWE398_Poor_Code_Quality__empty_if_14_good();
int CWE398_Poor_Code_Quality__empty_else_07_bad();
int good1_176();
int good2_125();
int CWE398_Poor_Code_Quality__empty_else_07_good();
int CWE398_Poor_Code_Quality__empty_case_15_bad();
int good1_177();
int good2_126();
int CWE398_Poor_Code_Quality__empty_case_15_good();
int CWE398_Poor_Code_Quality__empty_else_05_bad();
int good1_178();
int good2_127();
int CWE398_Poor_Code_Quality__empty_else_05_good();
__int64 staticReturnsTrue_8();
__int64 staticReturnsFalse_8();
int CWE398_Poor_Code_Quality__addition_08_bad();
int good1_179();
int good2_128();
int CWE398_Poor_Code_Quality__addition_08_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_180();
void good2_129();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_61B010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticTrue_1 = 1; // weak
int staticTrue_2 = 1; // weak
int staticTrue_3 = 1; // weak
int staticTrue_4 = 1; // weak
int staticTrue_5 = 1; // weak
int staticFive = 5; // weak
int staticTrue_6 = 1; // weak
int staticFive_0 = 5; // weak
int staticTrue_7 = 1; // weak
int staticFive_1 = 5; // weak
int staticFive_2 = 5; // weak
int staticFive_3 = 5; // weak
int staticFive_4 = 5; // weak
int staticFive_5 = 5; // weak
int staticFive_6 = 5; // weak
int staticFive_7 = 5; // weak
int staticFive_8 = 5; // weak
int staticTrue_8 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
char completed_6355; // weak
int staticFalse; // weak
int staticFalse_0; // weak
int staticFalse_1; // weak
int staticFalse_2; // weak
int staticFalse_3; // weak
int staticFalse_4; // weak
int staticFalse_5; // weak
int staticFalse_6; // weak
int staticFalse_7; // weak
int staticFalse_8; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (00000000004008A8) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400A20: using guessed type __int64 _gmon_start__(void);

//----- (00000000004008D0) ----------------------------------------------------
__int64 sub_4008D0()
{
  return qword_61B010();
}
// 61B010: using guessed type __int64 (*qword_61B010)(void);

//----- (0000000000400A30) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400A36: positive sp value 8 has been found

//----- (0000000000400A60) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6402335LL - (_QWORD)&completed_6355;
  if ( (unsigned __int64)(6402335LL - (_QWORD)&completed_6355) > 0xE )
    result = 0LL;
  return result;
}
// 61B118: using guessed type char completed_6355;

//----- (0000000000400A90) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400AD0) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 61B118: using guessed type char completed_6355;

//----- (0000000000400AF0) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400AF0: could not find valid save-restore pair for rbp

//----- (0000000000400B1D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_17_good();");
  CWE398_Poor_Code_Quality__empty_case_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_10_good();");
  CWE398_Poor_Code_Quality__empty_while_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_08_good();");
  CWE398_Poor_Code_Quality__empty_case_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_14_good();");
  CWE398_Poor_Code_Quality__five_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_13_good();");
  CWE398_Poor_Code_Quality__semicolon_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_11_good();");
  CWE398_Poor_Code_Quality__equals_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_13_good();");
  CWE398_Poor_Code_Quality__five_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_04_good();");
  CWE398_Poor_Code_Quality__empty_else_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_11_good();");
  CWE398_Poor_Code_Quality__empty_block_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_13_good();");
  CWE398_Poor_Code_Quality__empty_if_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_06_good();");
  CWE398_Poor_Code_Quality__empty_while_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_07_good();");
  CWE398_Poor_Code_Quality__five_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_02_good();");
  CWE398_Poor_Code_Quality__semicolon_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_02_good();");
  CWE398_Poor_Code_Quality__empty_block_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_10_good();");
  CWE398_Poor_Code_Quality__empty_for_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_function_01_good();");
  CWE398_Poor_Code_Quality__empty_function_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_17_good();");
  CWE398_Poor_Code_Quality__semicolon_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_06_good();");
  CWE398_Poor_Code_Quality__empty_block_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_04_good();");
  CWE398_Poor_Code_Quality__empty_while_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_08_good();");
  CWE398_Poor_Code_Quality__five_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_17_good();");
  CWE398_Poor_Code_Quality__empty_for_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_17_good();");
  CWE398_Poor_Code_Quality__empty_else_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_13_good();");
  CWE398_Poor_Code_Quality__empty_case_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_05_good();");
  CWE398_Poor_Code_Quality__addition_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_13_good();");
  CWE398_Poor_Code_Quality__equals_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_18_good();");
  CWE398_Poor_Code_Quality__semicolon_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_07_good();");
  CWE398_Poor_Code_Quality__empty_if_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_03_good();");
  CWE398_Poor_Code_Quality__empty_block_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_12_good();");
  CWE398_Poor_Code_Quality__empty_block_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_17_good();");
  CWE398_Poor_Code_Quality__empty_while_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_04_good();");
  CWE398_Poor_Code_Quality__equals_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_15_good();");
  CWE398_Poor_Code_Quality__empty_for_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_16_good();");
  CWE398_Poor_Code_Quality__equals_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_07_good();");
  CWE398_Poor_Code_Quality__empty_while_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_09_good();");
  CWE398_Poor_Code_Quality__empty_else_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_13_good();");
  CWE398_Poor_Code_Quality__empty_for_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_11_good();");
  CWE398_Poor_Code_Quality__empty_for_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_04_good();");
  CWE398_Poor_Code_Quality__empty_block_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_13_good();");
  CWE398_Poor_Code_Quality__empty_else_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_15_good();");
  CWE398_Poor_Code_Quality__empty_block_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_05_good();");
  CWE398_Poor_Code_Quality__empty_if_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_08_good();");
  CWE398_Poor_Code_Quality__semicolon_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_16_good();");
  CWE398_Poor_Code_Quality__empty_while_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_01_good();");
  CWE398_Poor_Code_Quality__equals_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_17_good();");
  CWE398_Poor_Code_Quality__addition_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_15_good();");
  CWE398_Poor_Code_Quality__five_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_12_good();");
  CWE398_Poor_Code_Quality__equals_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_10_good();");
  CWE398_Poor_Code_Quality__empty_if_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_17_good();");
  CWE398_Poor_Code_Quality__empty_if_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_11_good();");
  CWE398_Poor_Code_Quality__semicolon_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_09_good();");
  CWE398_Poor_Code_Quality__equals_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_08_good();");
  CWE398_Poor_Code_Quality__empty_block_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_17_good();");
  CWE398_Poor_Code_Quality__equals_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_14_good();");
  CWE398_Poor_Code_Quality__empty_block_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_01_good();");
  CWE398_Poor_Code_Quality__empty_if_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_16_good();");
  CWE398_Poor_Code_Quality__addition_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_09_good();");
  CWE398_Poor_Code_Quality__addition_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_05_good();");
  CWE398_Poor_Code_Quality__five_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_08_good();");
  CWE398_Poor_Code_Quality__empty_if_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_07_good();");
  CWE398_Poor_Code_Quality__empty_block_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_01_good();");
  CWE398_Poor_Code_Quality__five_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_08_good();");
  CWE398_Poor_Code_Quality__empty_for_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_18_good();");
  CWE398_Poor_Code_Quality__empty_if_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_14_good();");
  CWE398_Poor_Code_Quality__empty_else_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_03_good();");
  CWE398_Poor_Code_Quality__empty_if_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_05_good();");
  CWE398_Poor_Code_Quality__equals_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_07_good();");
  CWE398_Poor_Code_Quality__equals_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_09_good();");
  CWE398_Poor_Code_Quality__empty_case_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_09_good();");
  CWE398_Poor_Code_Quality__empty_for_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_08_good();");
  CWE398_Poor_Code_Quality__addition_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_11_good();");
  CWE398_Poor_Code_Quality__empty_if_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_15_good();");
  CWE398_Poor_Code_Quality__empty_if_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_01_good();");
  CWE398_Poor_Code_Quality__addition_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_18_good();");
  CWE398_Poor_Code_Quality__equals_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_06_good();");
  CWE398_Poor_Code_Quality__equals_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_01_good();");
  CWE398_Poor_Code_Quality__empty_for_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_10_good();");
  CWE398_Poor_Code_Quality__empty_block_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_06_good();");
  CWE398_Poor_Code_Quality__five_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_08_good();");
  CWE398_Poor_Code_Quality__equals_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_17_good();");
  CWE398_Poor_Code_Quality__empty_block_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_07_good();");
  CWE398_Poor_Code_Quality__empty_case_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_02_good();");
  CWE398_Poor_Code_Quality__empty_else_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_13_good();");
  CWE398_Poor_Code_Quality__empty_while_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_11_good();");
  CWE398_Poor_Code_Quality__empty_case_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_05_good();");
  CWE398_Poor_Code_Quality__empty_else_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_15_good();");
  CWE398_Poor_Code_Quality__empty_else_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_09_good();");
  CWE398_Poor_Code_Quality__empty_if_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_05_good();");
  CWE398_Poor_Code_Quality__empty_for_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_10_good();");
  CWE398_Poor_Code_Quality__equals_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_11_good();");
  CWE398_Poor_Code_Quality__addition_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_05_good();");
  CWE398_Poor_Code_Quality__empty_while_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_07_good();");
  CWE398_Poor_Code_Quality__empty_for_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_04_good();");
  CWE398_Poor_Code_Quality__empty_if_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_12_good();");
  CWE398_Poor_Code_Quality__semicolon_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_03_good();");
  CWE398_Poor_Code_Quality__empty_while_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_18_good();");
  CWE398_Poor_Code_Quality__addition_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_06_good();");
  CWE398_Poor_Code_Quality__semicolon_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_16_good();");
  CWE398_Poor_Code_Quality__empty_for_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_06_good();");
  CWE398_Poor_Code_Quality__empty_for_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_06_good();");
  CWE398_Poor_Code_Quality__empty_case_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_12_good();");
  CWE398_Poor_Code_Quality__empty_else_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_07_good();");
  CWE398_Poor_Code_Quality__empty_else_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_04_good();");
  CWE398_Poor_Code_Quality__empty_for_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_14_good();");
  CWE398_Poor_Code_Quality__empty_for_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_14_good();");
  CWE398_Poor_Code_Quality__semicolon_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_04_good();");
  CWE398_Poor_Code_Quality__semicolon_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_06_good();");
  CWE398_Poor_Code_Quality__addition_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_09_good();");
  CWE398_Poor_Code_Quality__five_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_02_good();");
  CWE398_Poor_Code_Quality__equals_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_10_good();");
  CWE398_Poor_Code_Quality__empty_case_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_05_good();");
  CWE398_Poor_Code_Quality__empty_block_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_02_good();");
  CWE398_Poor_Code_Quality__empty_if_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_01_good();");
  CWE398_Poor_Code_Quality__empty_block_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_11_good();");
  CWE398_Poor_Code_Quality__empty_else_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_01_good();");
  CWE398_Poor_Code_Quality__empty_else_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_12_good();");
  CWE398_Poor_Code_Quality__empty_if_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_02_good();");
  CWE398_Poor_Code_Quality__empty_while_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_01_good();");
  CWE398_Poor_Code_Quality__empty_case_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_09_good();");
  CWE398_Poor_Code_Quality__empty_while_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_09_good();");
  CWE398_Poor_Code_Quality__semicolon_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_12_good();");
  CWE398_Poor_Code_Quality__empty_case_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_03_good();");
  CWE398_Poor_Code_Quality__empty_for_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_06_good();");
  CWE398_Poor_Code_Quality__empty_else_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_02_good();");
  CWE398_Poor_Code_Quality__five_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_18_good();");
  CWE398_Poor_Code_Quality__empty_for_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_01_good();");
  CWE398_Poor_Code_Quality__semicolon_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_07_good();");
  CWE398_Poor_Code_Quality__semicolon_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_03_good();");
  CWE398_Poor_Code_Quality__semicolon_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_16_good();");
  CWE398_Poor_Code_Quality__empty_if_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_01_good();");
  CWE398_Poor_Code_Quality__empty_while_01_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_09_good();");
  CWE398_Poor_Code_Quality__empty_block_09_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_11_good();");
  CWE398_Poor_Code_Quality__five_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_04_good();");
  CWE398_Poor_Code_Quality__addition_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_12_good();");
  CWE398_Poor_Code_Quality__empty_for_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_14_good();");
  CWE398_Poor_Code_Quality__empty_while_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_15_good();");
  CWE398_Poor_Code_Quality__empty_while_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_16_good();");
  CWE398_Poor_Code_Quality__semicolon_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_02_good();");
  CWE398_Poor_Code_Quality__empty_case_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_02_good();");
  CWE398_Poor_Code_Quality__addition_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_14_good();");
  CWE398_Poor_Code_Quality__empty_case_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_14_good();");
  CWE398_Poor_Code_Quality__equals_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_02_good();");
  CWE398_Poor_Code_Quality__empty_for_02_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_10_good();");
  CWE398_Poor_Code_Quality__semicolon_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_04_good();");
  CWE398_Poor_Code_Quality__five_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_03_good();");
  CWE398_Poor_Code_Quality__five_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_13_good();");
  CWE398_Poor_Code_Quality__addition_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_18_good();");
  CWE398_Poor_Code_Quality__five_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_03_good();");
  CWE398_Poor_Code_Quality__empty_case_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_08_good();");
  CWE398_Poor_Code_Quality__empty_while_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_04_good();");
  CWE398_Poor_Code_Quality__empty_case_04_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_10_good();");
  CWE398_Poor_Code_Quality__five_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_14_good();");
  CWE398_Poor_Code_Quality__empty_if_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_12_good();");
  CWE398_Poor_Code_Quality__empty_while_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_05_good();");
  CWE398_Poor_Code_Quality__semicolon_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_15_good();");
  CWE398_Poor_Code_Quality__semicolon_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_16_good();");
  CWE398_Poor_Code_Quality__empty_else_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_16_good();");
  CWE398_Poor_Code_Quality__empty_case_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_15_good();");
  CWE398_Poor_Code_Quality__addition_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_03_good();");
  CWE398_Poor_Code_Quality__empty_else_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_06_good();");
  CWE398_Poor_Code_Quality__empty_if_06_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_18_good();");
  CWE398_Poor_Code_Quality__empty_case_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_18_good();");
  CWE398_Poor_Code_Quality__empty_while_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_16_good();");
  CWE398_Poor_Code_Quality__empty_block_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_03_good();");
  CWE398_Poor_Code_Quality__equals_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_10_good();");
  CWE398_Poor_Code_Quality__addition_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_05_good();");
  CWE398_Poor_Code_Quality__empty_case_05_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_16_good();");
  CWE398_Poor_Code_Quality__five_16_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_15_good();");
  CWE398_Poor_Code_Quality__empty_case_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_14_good();");
  CWE398_Poor_Code_Quality__addition_14_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_18_good();");
  CWE398_Poor_Code_Quality__empty_block_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_18_good();");
  CWE398_Poor_Code_Quality__empty_else_18_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_12_good();");
  CWE398_Poor_Code_Quality__addition_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_10_good();");
  CWE398_Poor_Code_Quality__empty_else_10_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_07_good();");
  CWE398_Poor_Code_Quality__addition_07_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_08_good();");
  CWE398_Poor_Code_Quality__empty_else_08_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_11_good();");
  CWE398_Poor_Code_Quality__empty_while_11_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_17_good();");
  CWE398_Poor_Code_Quality__five_17_good();
  printLine("Calling CWE398_Poor_Code_Quality__equals_15_good();");
  CWE398_Poor_Code_Quality__equals_15_good();
  printLine("Calling CWE398_Poor_Code_Quality__five_12_good();");
  CWE398_Poor_Code_Quality__five_12_good();
  printLine("Calling CWE398_Poor_Code_Quality__addition_03_good();");
  CWE398_Poor_Code_Quality__addition_03_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_13_good();");
  CWE398_Poor_Code_Quality__empty_block_13_good();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_17_bad();");
  CWE398_Poor_Code_Quality__empty_case_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_10_bad();");
  CWE398_Poor_Code_Quality__empty_while_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_08_bad();");
  CWE398_Poor_Code_Quality__empty_case_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_14_bad();");
  CWE398_Poor_Code_Quality__five_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_13_bad();");
  CWE398_Poor_Code_Quality__semicolon_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_11_bad();");
  CWE398_Poor_Code_Quality__equals_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_13_bad();");
  CWE398_Poor_Code_Quality__five_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_04_bad();");
  CWE398_Poor_Code_Quality__empty_else_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_11_bad();");
  CWE398_Poor_Code_Quality__empty_block_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_13_bad();");
  CWE398_Poor_Code_Quality__empty_if_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_06_bad();");
  CWE398_Poor_Code_Quality__empty_while_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_07_bad();");
  CWE398_Poor_Code_Quality__five_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_02_bad();");
  CWE398_Poor_Code_Quality__semicolon_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_02_bad();");
  CWE398_Poor_Code_Quality__empty_block_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_10_bad();");
  CWE398_Poor_Code_Quality__empty_for_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_function_01_bad();");
  CWE398_Poor_Code_Quality__empty_function_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_17_bad();");
  CWE398_Poor_Code_Quality__semicolon_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_06_bad();");
  CWE398_Poor_Code_Quality__empty_block_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_04_bad();");
  CWE398_Poor_Code_Quality__empty_while_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_08_bad();");
  CWE398_Poor_Code_Quality__five_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_17_bad();");
  CWE398_Poor_Code_Quality__empty_for_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_17_bad();");
  CWE398_Poor_Code_Quality__empty_else_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_13_bad();");
  CWE398_Poor_Code_Quality__empty_case_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_05_bad();");
  CWE398_Poor_Code_Quality__addition_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_13_bad();");
  CWE398_Poor_Code_Quality__equals_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_18_bad();");
  CWE398_Poor_Code_Quality__semicolon_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_07_bad();");
  CWE398_Poor_Code_Quality__empty_if_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_03_bad();");
  CWE398_Poor_Code_Quality__empty_block_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_12_bad();");
  CWE398_Poor_Code_Quality__empty_block_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_17_bad();");
  CWE398_Poor_Code_Quality__empty_while_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_04_bad();");
  CWE398_Poor_Code_Quality__equals_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_15_bad();");
  CWE398_Poor_Code_Quality__empty_for_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_16_bad();");
  CWE398_Poor_Code_Quality__equals_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_07_bad();");
  CWE398_Poor_Code_Quality__empty_while_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_09_bad();");
  CWE398_Poor_Code_Quality__empty_else_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_13_bad();");
  CWE398_Poor_Code_Quality__empty_for_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_11_bad();");
  CWE398_Poor_Code_Quality__empty_for_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_04_bad();");
  CWE398_Poor_Code_Quality__empty_block_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_13_bad();");
  CWE398_Poor_Code_Quality__empty_else_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_15_bad();");
  CWE398_Poor_Code_Quality__empty_block_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_05_bad();");
  CWE398_Poor_Code_Quality__empty_if_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_08_bad();");
  CWE398_Poor_Code_Quality__semicolon_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_16_bad();");
  CWE398_Poor_Code_Quality__empty_while_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_01_bad();");
  CWE398_Poor_Code_Quality__equals_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_17_bad();");
  CWE398_Poor_Code_Quality__addition_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_15_bad();");
  CWE398_Poor_Code_Quality__five_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_12_bad();");
  CWE398_Poor_Code_Quality__equals_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_10_bad();");
  CWE398_Poor_Code_Quality__empty_if_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_17_bad();");
  CWE398_Poor_Code_Quality__empty_if_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_11_bad();");
  CWE398_Poor_Code_Quality__semicolon_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_09_bad();");
  CWE398_Poor_Code_Quality__equals_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_08_bad();");
  CWE398_Poor_Code_Quality__empty_block_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_17_bad();");
  CWE398_Poor_Code_Quality__equals_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_14_bad();");
  CWE398_Poor_Code_Quality__empty_block_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_01_bad();");
  CWE398_Poor_Code_Quality__empty_if_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_16_bad();");
  CWE398_Poor_Code_Quality__addition_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_09_bad();");
  CWE398_Poor_Code_Quality__addition_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_05_bad();");
  CWE398_Poor_Code_Quality__five_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_08_bad();");
  CWE398_Poor_Code_Quality__empty_if_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_07_bad();");
  CWE398_Poor_Code_Quality__empty_block_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_01_bad();");
  CWE398_Poor_Code_Quality__five_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_08_bad();");
  CWE398_Poor_Code_Quality__empty_for_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_18_bad();");
  CWE398_Poor_Code_Quality__empty_if_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_14_bad();");
  CWE398_Poor_Code_Quality__empty_else_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_03_bad();");
  CWE398_Poor_Code_Quality__empty_if_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_05_bad();");
  CWE398_Poor_Code_Quality__equals_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_07_bad();");
  CWE398_Poor_Code_Quality__equals_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_09_bad();");
  CWE398_Poor_Code_Quality__empty_case_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_09_bad();");
  CWE398_Poor_Code_Quality__empty_for_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_08_bad();");
  CWE398_Poor_Code_Quality__addition_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_11_bad();");
  CWE398_Poor_Code_Quality__empty_if_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_15_bad();");
  CWE398_Poor_Code_Quality__empty_if_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_01_bad();");
  CWE398_Poor_Code_Quality__addition_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_18_bad();");
  CWE398_Poor_Code_Quality__equals_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_06_bad();");
  CWE398_Poor_Code_Quality__equals_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_01_bad();");
  CWE398_Poor_Code_Quality__empty_for_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_10_bad();");
  CWE398_Poor_Code_Quality__empty_block_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_06_bad();");
  CWE398_Poor_Code_Quality__five_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_08_bad();");
  CWE398_Poor_Code_Quality__equals_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_17_bad();");
  CWE398_Poor_Code_Quality__empty_block_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_07_bad();");
  CWE398_Poor_Code_Quality__empty_case_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_02_bad();");
  CWE398_Poor_Code_Quality__empty_else_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_13_bad();");
  CWE398_Poor_Code_Quality__empty_while_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_11_bad();");
  CWE398_Poor_Code_Quality__empty_case_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_05_bad();");
  CWE398_Poor_Code_Quality__empty_else_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_15_bad();");
  CWE398_Poor_Code_Quality__empty_else_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_09_bad();");
  CWE398_Poor_Code_Quality__empty_if_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_05_bad();");
  CWE398_Poor_Code_Quality__empty_for_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_10_bad();");
  CWE398_Poor_Code_Quality__equals_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_11_bad();");
  CWE398_Poor_Code_Quality__addition_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_05_bad();");
  CWE398_Poor_Code_Quality__empty_while_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_07_bad();");
  CWE398_Poor_Code_Quality__empty_for_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_04_bad();");
  CWE398_Poor_Code_Quality__empty_if_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_12_bad();");
  CWE398_Poor_Code_Quality__semicolon_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_03_bad();");
  CWE398_Poor_Code_Quality__empty_while_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_18_bad();");
  CWE398_Poor_Code_Quality__addition_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_06_bad();");
  CWE398_Poor_Code_Quality__semicolon_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_16_bad();");
  CWE398_Poor_Code_Quality__empty_for_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_06_bad();");
  CWE398_Poor_Code_Quality__empty_for_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_06_bad();");
  CWE398_Poor_Code_Quality__empty_case_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_12_bad();");
  CWE398_Poor_Code_Quality__empty_else_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_07_bad();");
  CWE398_Poor_Code_Quality__empty_else_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_04_bad();");
  CWE398_Poor_Code_Quality__empty_for_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_14_bad();");
  CWE398_Poor_Code_Quality__empty_for_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_14_bad();");
  CWE398_Poor_Code_Quality__semicolon_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_04_bad();");
  CWE398_Poor_Code_Quality__semicolon_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_06_bad();");
  CWE398_Poor_Code_Quality__addition_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_09_bad();");
  CWE398_Poor_Code_Quality__five_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_02_bad();");
  CWE398_Poor_Code_Quality__equals_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_10_bad();");
  CWE398_Poor_Code_Quality__empty_case_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_05_bad();");
  CWE398_Poor_Code_Quality__empty_block_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_02_bad();");
  CWE398_Poor_Code_Quality__empty_if_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_01_bad();");
  CWE398_Poor_Code_Quality__empty_block_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_11_bad();");
  CWE398_Poor_Code_Quality__empty_else_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_01_bad();");
  CWE398_Poor_Code_Quality__empty_else_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_12_bad();");
  CWE398_Poor_Code_Quality__empty_if_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_02_bad();");
  CWE398_Poor_Code_Quality__empty_while_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_01_bad();");
  CWE398_Poor_Code_Quality__empty_case_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_09_bad();");
  CWE398_Poor_Code_Quality__empty_while_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_09_bad();");
  CWE398_Poor_Code_Quality__semicolon_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_12_bad();");
  CWE398_Poor_Code_Quality__empty_case_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_03_bad();");
  CWE398_Poor_Code_Quality__empty_for_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_06_bad();");
  CWE398_Poor_Code_Quality__empty_else_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_02_bad();");
  CWE398_Poor_Code_Quality__five_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_18_bad();");
  CWE398_Poor_Code_Quality__empty_for_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_01_bad();");
  CWE398_Poor_Code_Quality__semicolon_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_07_bad();");
  CWE398_Poor_Code_Quality__semicolon_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_03_bad();");
  CWE398_Poor_Code_Quality__semicolon_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_16_bad();");
  CWE398_Poor_Code_Quality__empty_if_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_01_bad();");
  CWE398_Poor_Code_Quality__empty_while_01_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_09_bad();");
  CWE398_Poor_Code_Quality__empty_block_09_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_11_bad();");
  CWE398_Poor_Code_Quality__five_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_04_bad();");
  CWE398_Poor_Code_Quality__addition_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_12_bad();");
  CWE398_Poor_Code_Quality__empty_for_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_14_bad();");
  CWE398_Poor_Code_Quality__empty_while_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_15_bad();");
  CWE398_Poor_Code_Quality__empty_while_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_16_bad();");
  CWE398_Poor_Code_Quality__semicolon_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_02_bad();");
  CWE398_Poor_Code_Quality__empty_case_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_02_bad();");
  CWE398_Poor_Code_Quality__addition_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_14_bad();");
  CWE398_Poor_Code_Quality__empty_case_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_14_bad();");
  CWE398_Poor_Code_Quality__equals_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_for_02_bad();");
  CWE398_Poor_Code_Quality__empty_for_02_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_10_bad();");
  CWE398_Poor_Code_Quality__semicolon_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_04_bad();");
  CWE398_Poor_Code_Quality__five_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_03_bad();");
  CWE398_Poor_Code_Quality__five_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_13_bad();");
  CWE398_Poor_Code_Quality__addition_13_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_18_bad();");
  CWE398_Poor_Code_Quality__five_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_03_bad();");
  CWE398_Poor_Code_Quality__empty_case_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_08_bad();");
  CWE398_Poor_Code_Quality__empty_while_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_04_bad();");
  CWE398_Poor_Code_Quality__empty_case_04_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_10_bad();");
  CWE398_Poor_Code_Quality__five_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_14_bad();");
  CWE398_Poor_Code_Quality__empty_if_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_12_bad();");
  CWE398_Poor_Code_Quality__empty_while_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_05_bad();");
  CWE398_Poor_Code_Quality__semicolon_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__semicolon_15_bad();");
  CWE398_Poor_Code_Quality__semicolon_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_16_bad();");
  CWE398_Poor_Code_Quality__empty_else_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_16_bad();");
  CWE398_Poor_Code_Quality__empty_case_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_15_bad();");
  CWE398_Poor_Code_Quality__addition_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_03_bad();");
  CWE398_Poor_Code_Quality__empty_else_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_if_06_bad();");
  CWE398_Poor_Code_Quality__empty_if_06_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_18_bad();");
  CWE398_Poor_Code_Quality__empty_case_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_18_bad();");
  CWE398_Poor_Code_Quality__empty_while_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_16_bad();");
  CWE398_Poor_Code_Quality__empty_block_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_03_bad();");
  CWE398_Poor_Code_Quality__equals_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_10_bad();");
  CWE398_Poor_Code_Quality__addition_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_05_bad();");
  CWE398_Poor_Code_Quality__empty_case_05_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_16_bad();");
  CWE398_Poor_Code_Quality__five_16_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_case_15_bad();");
  CWE398_Poor_Code_Quality__empty_case_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_14_bad();");
  CWE398_Poor_Code_Quality__addition_14_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_18_bad();");
  CWE398_Poor_Code_Quality__empty_block_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_18_bad();");
  CWE398_Poor_Code_Quality__empty_else_18_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_12_bad();");
  CWE398_Poor_Code_Quality__addition_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_10_bad();");
  CWE398_Poor_Code_Quality__empty_else_10_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_07_bad();");
  CWE398_Poor_Code_Quality__addition_07_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_else_08_bad();");
  CWE398_Poor_Code_Quality__empty_else_08_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_while_11_bad();");
  CWE398_Poor_Code_Quality__empty_while_11_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_17_bad();");
  CWE398_Poor_Code_Quality__five_17_bad();
  printLine("Calling CWE398_Poor_Code_Quality__equals_15_bad();");
  CWE398_Poor_Code_Quality__equals_15_bad();
  printLine("Calling CWE398_Poor_Code_Quality__five_12_bad();");
  CWE398_Poor_Code_Quality__five_12_bad();
  printLine("Calling CWE398_Poor_Code_Quality__addition_03_bad();");
  CWE398_Poor_Code_Quality__addition_03_bad();
  printLine("Calling CWE398_Poor_Code_Quality__empty_block_13_bad();");
  CWE398_Poor_Code_Quality__empty_block_13_bad();
  return 0;
}
// 61B14C: using guessed type int globalArgc;
// 61B150: using guessed type __int64 globalArgv;

//----- (00000000004027A0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004027FB) ----------------------------------------------------
int good1()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040286E) ----------------------------------------------------
int good2()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004028D5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_13_good()
{
  good1();
  return good2();
}

//----- (00000000004028EF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_06_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000402909) ----------------------------------------------------
int good1_0()
{
  return printLine("Hello from good()");
}

//----- (000000000040292F) ----------------------------------------------------
int good2_0()
{
  return printLine("Hello from good()");
}

//----- (0000000000402949) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_06_good()
{
  good1_0();
  return good2_0();
}

//----- (0000000000402963) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402993) ----------------------------------------------------
int good1_1()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004029DC) ----------------------------------------------------
int good2_1()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402A19) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_13_good()
{
  good1_1();
  return good2_1();
}

//----- (0000000000402A33) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_05_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticTrue;
  if ( staticTrue )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0BC: using guessed type int staticTrue;

//----- (0000000000402A64) ----------------------------------------------------
int good1_2()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( staticFalse )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 61B11C: using guessed type int staticFalse;

//----- (0000000000402AAB) ----------------------------------------------------
int good2_2()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticTrue;
  if ( staticTrue )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0BC: using guessed type int staticTrue;

//----- (0000000000402AE6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_05_good()
{
  good1_2();
  return good2_2();
}

//----- (0000000000402B00) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_15_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000402B11) ----------------------------------------------------
int good1_3()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000402B2C) ----------------------------------------------------
int good2_3()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000402B47) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_15_good()
{
  good1_3();
  return good2_3();
}

//----- (0000000000402B61) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_09_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402B92) ----------------------------------------------------
int good1_4()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000402BD9) ----------------------------------------------------
int good2_4()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402C14) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_09_good()
{
  good1_4();
  return good2_4();
}

//----- (0000000000402C2E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_14_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000402C63) ----------------------------------------------------
int good1_5()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (0000000000402CAF) ----------------------------------------------------
int good2_5()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000402CEF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_14_good()
{
  good1_5();
  return good2_5();
}

//----- (0000000000402D09) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402D46) ----------------------------------------------------
int good1_6()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000402D9A) ----------------------------------------------------
int good2_6()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402DE2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_09_good()
{
  good1_6();
  return good2_6();
}

//----- (0000000000402DFC) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_13_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402E2E) ----------------------------------------------------
int good1_7()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402E76) ----------------------------------------------------
int good2_7()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402EB2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_13_good()
{
  good1_7();
  return good2_7();
}

//----- (0000000000402ECC) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (0000000000402ED7) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (0000000000402EE2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_08_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticReturnsTrue();
  if ( result )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (0000000000402F1A) ----------------------------------------------------
int good1_8()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000402F69) ----------------------------------------------------
int good2_8()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticReturnsTrue();
  if ( result )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000402FAC) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_08_good()
{
  good1_8();
  return good2_8();
}

//----- (0000000000402FC6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402FE1) ----------------------------------------------------
int good1_9()
{
  int result; // eax

  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000403008) ----------------------------------------------------
int good2_9()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000403023) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_13_good()
{
  good1_9();
  return good2_9();
}

//----- (000000000040303D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040306C) ----------------------------------------------------
int good1_10()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004030B4) ----------------------------------------------------
int good2_10()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004030F0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_09_good()
{
  good1_10();
  return good2_10();
}

//----- (000000000040310A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_06_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000403124) ----------------------------------------------------
int good1_11()
{
  return printLine("Hello from good()");
}

//----- (000000000040314A) ----------------------------------------------------
int good2_11()
{
  return printLine("Hello from good()");
}

//----- (0000000000403164) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_06_good()
{
  good1_11();
  return good2_11();
}

//----- (000000000040317E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_04_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (00000000004031D7) ----------------------------------------------------
int good1_12()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000403248) ----------------------------------------------------
int good2_12()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (00000000004032AD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_04_good()
{
  good1_12();
  return good2_12();
}

//----- (00000000004032C7) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_else_17_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    printLine("Hello from bad()");
  }
}

//----- (000000000040332A) ----------------------------------------------------
void good1_13()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    printLine("Hello from good()");
  }
}

//----- (0000000000403399) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_else_17_good()
{
  good1_13();
}

//----- (00000000004033A9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004033D9) ----------------------------------------------------
int good1_14()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 61B110: using guessed type int globalFive;

//----- (0000000000403422) ----------------------------------------------------
int good2_13()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040345F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_14_good()
{
  good1_14();
  return good2_13();
}

//----- (0000000000403479) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_02_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (00000000004034A3) ----------------------------------------------------
int good1_15()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (00000000004034D8) ----------------------------------------------------
int good2_14()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (000000000040350D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_02_good()
{
  good1_15();
  return good2_14();
}

//----- (0000000000403527) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_05_bad()
{
  int result; // eax

  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0C0: using guessed type int staticTrue_0;

//----- (0000000000403577) ----------------------------------------------------
int good1_16()
{
  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 61B120: using guessed type int staticFalse_0;

//----- (00000000004035DF) ----------------------------------------------------
int good2_15()
{
  int result; // eax

  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0C0: using guessed type int staticTrue_0;

//----- (000000000040363B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_05_good()
{
  good1_16();
  return good2_15();
}

//----- (0000000000403655) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_03_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (00000000004036A5) ----------------------------------------------------
int good1_17()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000403701) ----------------------------------------------------
int good2_16()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040375D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_03_good()
{
  good1_17();
  return good2_16();
}

//----- (0000000000403777) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_05_bad()
{
  int result; // eax

  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B0C4: using guessed type int staticTrue_1;

//----- (0000000000403791) ----------------------------------------------------
int good1_18()
{
  int result; // eax

  if ( staticFalse_1 )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 61B124: using guessed type int staticFalse_1;

//----- (00000000004037B7) ----------------------------------------------------
int good2_17()
{
  int result; // eax

  result = staticTrue_1;
  if ( staticTrue_1 )
    result = printLine("Hello from good()");
  return result;
}
// 61B0C4: using guessed type int staticTrue_1;

//----- (00000000004037D1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_05_good()
{
  good1_18();
  return good2_17();
}

//----- (00000000004037EB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040383C) ----------------------------------------------------
int good1_19()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004038A5) ----------------------------------------------------
int good2_18()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000403902) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_13_good()
{
  good1_19();
  return good2_18();
}

//----- (000000000040391C) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (0000000000403927) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (0000000000403932) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_08_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticReturnsTrue_0();
  if ( result )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (0000000000403967) ----------------------------------------------------
int good1_20()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (00000000004039B2) ----------------------------------------------------
int good2_19()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticReturnsTrue_0();
  if ( result )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004039F1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_08_good()
{
  good1_20();
  return good2_19();
}

//----- (0000000000403A0B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_04_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (0000000000403A3E) ----------------------------------------------------
int good1_21()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000403A88) ----------------------------------------------------
int good2_20()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000403AC6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_04_good()
{
  good1_21();
  return good2_20();
}

//----- (0000000000403AE0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_18_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000403B31) ----------------------------------------------------
int good1_22()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000403B8E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_18_good()
{
  return good1_22();
}

//----- (0000000000403B9E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_03_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (0000000000403BC5) ----------------------------------------------------
int good1_23()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000403BF6) ----------------------------------------------------
int good2_21()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000403C27) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_03_good()
{
  good1_23();
  return good2_21();
}

//----- (0000000000403C41) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_05_bad()
{
  int result; // eax

  result = staticTrue_2;
  if ( staticTrue_2 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B0C8: using guessed type int staticTrue_2;

//----- (0000000000403C5B) ----------------------------------------------------
int good1_24()
{
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 61B128: using guessed type int staticFalse_2;

//----- (0000000000403C8B) ----------------------------------------------------
int good2_22()
{
  int result; // eax

  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0C8: using guessed type int staticTrue_2;

//----- (0000000000403CAF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_05_good()
{
  good1_24();
  return good2_22();
}

//----- (0000000000403CC9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_03_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000403CD9) ----------------------------------------------------
int good1_25()
{
  return printLine("Hello from good()");
}

//----- (0000000000403CE9) ----------------------------------------------------
int good2_23()
{
  return printLine("Hello from good()");
}

//----- (0000000000403CF9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_03_good()
{
  good1_25();
  return good2_23();
}

//----- (0000000000403D13) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_01_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000403D63) ----------------------------------------------------
int good1_26()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000403DBF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_01_good()
{
  return good1_26();
}

//----- (0000000000403DCF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_18_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (0000000000403DF5) ----------------------------------------------------
int good1_27()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000403E28) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_18_good()
{
  return good1_27();
}

//----- (0000000000403E38) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_18_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (0000000000403E60) ----------------------------------------------------
int good1_28()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000403E92) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_18_good()
{
  return good1_28();
}

//----- (0000000000403EA2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_16_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000403EF3) ----------------------------------------------------
int good1_29()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000403F50) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_16_good()
{
  return good1_29();
}

//----- (0000000000403F60) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_18_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000403F71) ----------------------------------------------------
int good1_30()
{
  return printLine("Hello from good()");
}

//----- (0000000000403F82) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_18_good()
{
  return good1_30();
}

//----- (0000000000403F92) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_15_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000403FC6) ----------------------------------------------------
int good1_31()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000404005) ----------------------------------------------------
int good2_24()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000404044) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_15_good()
{
  good1_31();
  return good2_24();
}

//----- (000000000040405E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_04_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (000000000040408C) ----------------------------------------------------
int good1_32()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (00000000004040D3) ----------------------------------------------------
int good2_25()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (000000000040410E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_04_good()
{
  good1_32();
  return good2_25();
}

//----- (0000000000404128) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  else
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004041DA) ----------------------------------------------------
int good1_33()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  else
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000404298) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_12_good()
{
  return good1_33();
}

//----- (00000000004042A8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004042C3) ----------------------------------------------------
int good1_34()
{
  int result; // eax

  if ( globalFive == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004042EA) ----------------------------------------------------
int good2_26()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000404305) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_14_good()
{
  good1_34();
  return good2_26();
}

//----- (000000000040431F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_15_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000404370) ----------------------------------------------------
int good1_35()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (00000000004043CD) ----------------------------------------------------
int good2_27()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040442A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_15_good()
{
  good1_35();
  return good2_27();
}

//----- (0000000000404444) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (000000000040444F) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000040445A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_1();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (0000000000404478) ----------------------------------------------------
int good1_36()
{
  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (00000000004044AC) ----------------------------------------------------
int good2_28()
{
  int result; // eax

  result = staticReturnsTrue_1();
  if ( result )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004044D4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_08_good()
{
  good1_36();
  return good2_28();
}

//----- (00000000004044EE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_03_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (0000000000404534) ----------------------------------------------------
int good1_37()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000404586) ----------------------------------------------------
int good2_29()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (00000000004045D8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_03_good()
{
  good1_37();
  return good2_29();
}

//----- (00000000004045F2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_12_bad()
{
  int result; // eax
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  else
  {
    for ( j = 0; j <= 9; ++j )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000404650) ----------------------------------------------------
int good1_38()
{
  int result; // eax
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  else
  {
    for ( j = 0; j <= 9; ++j )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004046B8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_12_good()
{
  return good1_38();
}

//----- (00000000004046C8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    result = printLine("Hello from bad()");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (00000000004046F2) ----------------------------------------------------
int good1_39()
{
  globalReturnsTrueOrFalse();
  return printLine("Hello from good()");
}

//----- (000000000040471C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_12_good()
{
  return good1_39();
}

//----- (000000000040472C) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000404737) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (0000000000404742) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (00000000004047A0) ----------------------------------------------------
int good1_40()
{
  if ( (unsigned int)staticReturnsFalse_2() )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000404816) ----------------------------------------------------
int good2_30()
{
  int result; // eax

  result = staticReturnsTrue_2();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000404880) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_08_good()
{
  good1_40();
  return good2_30();
}

//----- (000000000040489A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_18_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (00000000004048E1) ----------------------------------------------------
int good1_41()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000404934) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_18_good()
{
  return good1_41();
}

//----- (0000000000404944) ----------------------------------------------------
void helperBad()
{
  ;
}

//----- (000000000040494A) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_function_01_bad()
{
  helperBad();
}

//----- (000000000040495A) ----------------------------------------------------
int helperGood1()
{
  return printLine("helperGood1()");
}

//----- (000000000040496A) ----------------------------------------------------
int good1_42()
{
  return helperGood1();
}

//----- (000000000040497A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_function_01_good()
{
  return good1_42();
}

//----- (000000000040498A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_15_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (00000000004049B5) ----------------------------------------------------
int good1_43()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (00000000004049EB) ----------------------------------------------------
int good2_31()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000404A21) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_15_good()
{
  good1_43();
  return good2_31();
}

//----- (0000000000404A3B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_06_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (0000000000404A6C) ----------------------------------------------------
int good1_44()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000404AB3) ----------------------------------------------------
int good2_32()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000404AEE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_06_good()
{
  good1_44();
  return good2_32();
}

//----- (0000000000404B08) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_03_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000404B18) ----------------------------------------------------
int good1_45()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000404B32) ----------------------------------------------------
int good2_33()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000404B4C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_03_good()
{
  good1_45();
  return good2_33();
}

//----- (0000000000404B66) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (0000000000404BC4) ----------------------------------------------------
int good1_46()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000404C3A) ----------------------------------------------------
int good2_34()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000404CA4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_11_good()
{
  good1_46();
  return good2_34();
}

//----- (0000000000404CBE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_02_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000404D0E) ----------------------------------------------------
int good1_47()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000404D6A) ----------------------------------------------------
int good2_35()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000404DC6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_02_good()
{
  good1_47();
  return good2_35();
}

//----- (0000000000404DE0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_17_bad()
{
  int result; // eax
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    for ( j = 0; j <= 9; ++j )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (0000000000404E1A) ----------------------------------------------------
int good1_48()
{
  int result; // eax
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    for ( j = 0; j <= 9; ++j )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000404E5E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_17_good()
{
  return good1_48();
}

//----- (0000000000404E6E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_04_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000404E87) ----------------------------------------------------
int good1_49()
{
  return printLine("Hello from good()");
}

//----- (0000000000404EAC) ----------------------------------------------------
int good2_36()
{
  return printLine("Hello from good()");
}

//----- (0000000000404EC5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_04_good()
{
  good1_49();
  return good2_36();
}

//----- (0000000000404EDF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_17_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    result = printLine("Hello from bad()");
  return result;
}

//----- (0000000000404F06) ----------------------------------------------------
int good1_50()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000404F2D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_17_good()
{
  return good1_50();
}

//----- (0000000000404F3D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_05_bad()
{
  int result; // eax

  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 61B0CC: using guessed type int staticTrue_3;

//----- (0000000000404F7A) ----------------------------------------------------
int good1_51()
{
  if ( staticFalse_3 )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 61B12C: using guessed type int staticFalse_3;

//----- (0000000000404FCE) ----------------------------------------------------
int good2_37()
{
  int result; // eax

  result = staticTrue_3;
  if ( staticTrue_3 )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 61B0CC: using guessed type int staticTrue_3;

//----- (0000000000405016) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_05_good()
{
  good1_51();
  return good2_37();
}

//----- (0000000000405030) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  else
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004050CE) ----------------------------------------------------
int good1_52()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  else
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000405178) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_12_good()
{
  return good1_52();
}

//----- (0000000000405188) ----------------------------------------------------
__int64 staticReturnsTrue_3()
{
  return 1LL;
}

//----- (0000000000405193) ----------------------------------------------------
__int64 staticReturnsFalse_3()
{
  return 0LL;
}

//----- (000000000040519E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (00000000004051FC) ----------------------------------------------------
int good1_53()
{
  if ( (unsigned int)staticReturnsFalse_3() )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000405272) ----------------------------------------------------
int good2_38()
{
  int result; // eax

  result = staticReturnsTrue_3();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004052DC) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_08_good()
{
  good1_53();
  return good2_38();
}

//----- (00000000004052F6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_15_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (000000000040531C) ----------------------------------------------------
int good1_54()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (000000000040534F) ----------------------------------------------------
int good2_39()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000405382) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_15_good()
{
  good1_54();
  return good2_39();
}

//----- (000000000040539C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_05_bad()
{
  int result; // eax

  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0D0: using guessed type int staticTrue_4;

//----- (00000000004053F6) ----------------------------------------------------
int good1_55()
{
  if ( staticFalse_4 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B130: using guessed type int staticFalse_4;

//----- (0000000000405468) ----------------------------------------------------
int good2_40()
{
  int result; // eax

  result = staticTrue_4;
  if ( staticTrue_4 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0D0: using guessed type int staticTrue_4;

//----- (00000000004054CE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_05_good()
{
  good1_55();
  return good2_40();
}

//----- (00000000004054E8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_16_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000405539) ----------------------------------------------------
int good1_56()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000405596) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_16_good()
{
  return good1_56();
}

//----- (00000000004055A6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_11_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (00000000004055DB) ----------------------------------------------------
int good1_57()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000405626) ----------------------------------------------------
int good2_41()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000405665) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_11_good()
{
  good1_57();
  return good2_41();
}

//----- (000000000040567F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_02_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (00000000004056A6) ----------------------------------------------------
int good1_58()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (00000000004056D7) ----------------------------------------------------
int good2_42()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000405708) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_02_good()
{
  good1_58();
  return good2_42();
}

//----- (0000000000405722) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405760) ----------------------------------------------------
int good1_59()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004057B5) ----------------------------------------------------
int good2_43()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004057FE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_13_good()
{
  good1_59();
  return good2_43();
}

//----- (0000000000405818) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (0000000000405836) ----------------------------------------------------
int good1_60()
{
  int result; // eax

  if ( (unsigned int)globalReturnsFalse() )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000405860) ----------------------------------------------------
int good2_44()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
    result = printLine("Hello from good()");
  return result;
}

//----- (000000000040587E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_11_good()
{
  good1_60();
  return good2_44();
}

//----- (0000000000405898) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_02_bad()
{
  return printLine("Hello from bad()");
}

//----- (00000000004058A8) ----------------------------------------------------
int good1_61()
{
  return printLine("Hello from good()");
}

//----- (00000000004058B8) ----------------------------------------------------
int good2_45()
{
  return printLine("Hello from good()");
}

//----- (00000000004058C8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_02_good()
{
  good1_61();
  return good2_45();
}

//----- (00000000004058E2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040593D) ----------------------------------------------------
int good1_62()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004059B0) ----------------------------------------------------
int good2_46()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405A17) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_13_good()
{
  good1_62();
  return good2_46();
}

//----- (0000000000405A31) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_17_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    result = printLine("Hello from bad()");
  return result;
}

//----- (0000000000405A58) ----------------------------------------------------
int good1_63()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000405A89) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_17_good()
{
  return good1_63();
}

//----- (0000000000405A99) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_16_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (0000000000405AC1) ----------------------------------------------------
int good1_64()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000405AF3) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_16_good()
{
  return good1_64();
}

//----- (0000000000405B03) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_12_bad()
{
  if ( (unsigned int)globalReturnsTrueOrFalse() )
    return printLine("Hello from bad()");
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000405B37) ----------------------------------------------------
int good1_65()
{
  globalReturnsTrueOrFalse();
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000405B75) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_12_good()
{
  return good1_65();
}

//----- (0000000000405B85) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_16_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000405B96) ----------------------------------------------------
int good1_66()
{
  return printLine("Hello from good()");
}

//----- (0000000000405BA7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_16_good()
{
  return good1_66();
}

//----- (0000000000405BB7) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_case_17_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    rand();
    printLine("Hello from bad()");
  }
}

//----- (0000000000405C10) ----------------------------------------------------
void good1_67()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    printLine("Hello from good()");
  }
}

//----- (0000000000405C75) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_case_17_good()
{
  good1_67();
}

//----- (0000000000405C85) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
    result = printLine("Hello from bad()");
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000405C9F) ----------------------------------------------------
int good1_68()
{
  int result; // eax

  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000405CC5) ----------------------------------------------------
int good2_47()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
    result = printLine("Hello from good()");
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000405CDF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_10_good()
{
  good1_68();
  return good2_47();
}

//----- (0000000000405CF9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_05_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0D4: using guessed type int staticTrue_5;

//----- (0000000000405D2D) ----------------------------------------------------
int good1_69()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( staticFalse_5 )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 61B134: using guessed type int staticFalse_5;

//----- (0000000000405D78) ----------------------------------------------------
int good2_48()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticTrue_5;
  if ( staticTrue_5 )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0D4: using guessed type int staticTrue_5;

//----- (0000000000405DB7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_05_good()
{
  good1_69();
  return good2_48();
}

//----- (0000000000405DD1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_06_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000405DEB) ----------------------------------------------------
int good1_70()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000405E1B) ----------------------------------------------------
int good2_49()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000405E3F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_06_good()
{
  good1_70();
  return good2_49();
}

//----- (0000000000405E59) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_03_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000405EA9) ----------------------------------------------------
int good1_71()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000405F05) ----------------------------------------------------
int good2_50()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000405F61) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_03_good()
{
  good1_71();
  return good2_50();
}

//----- (0000000000405F7B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_13_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405FB0) ----------------------------------------------------
int good1_72()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405FFC) ----------------------------------------------------
int good2_51()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040603C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_13_good()
{
  good1_72();
  return good2_51();
}

//----- (0000000000406056) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_02_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (000000000040609C) ----------------------------------------------------
int good1_73()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (00000000004060EE) ----------------------------------------------------
int good2_52()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000406140) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_02_good()
{
  good1_73();
  return good2_52();
}

//----- (000000000040615A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000406175) ----------------------------------------------------
int good1_74()
{
  int result; // eax

  if ( globalFive == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040619C) ----------------------------------------------------
int good2_53()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004061B7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_14_good()
{
  good1_74();
  return good2_53();
}

//----- (00000000004061D1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (000000000040622F) ----------------------------------------------------
int good1_75()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (00000000004062A5) ----------------------------------------------------
int good2_54()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (000000000040630F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_11_good()
{
  good1_75();
  return good2_54();
}

//----- (0000000000406329) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_07_bad()
{
  int result; // eax

  result = staticFive;
  if ( staticFive == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0D8: using guessed type int staticFive;

//----- (0000000000406384) ----------------------------------------------------
int good1_76()
{
  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B0D8: using guessed type int staticFive;

//----- (00000000004063F7) ----------------------------------------------------
int good2_55()
{
  int result; // eax

  result = staticFive;
  if ( staticFive == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0D8: using guessed type int staticFive;

//----- (000000000040645E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_07_good()
{
  good1_76();
  return good2_55();
}

//----- (0000000000406478) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_01_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000406488) ----------------------------------------------------
int good1_77()
{
  return printLine("Hello from good()");
}

//----- (0000000000406498) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_01_good()
{
  return good1_77();
}

//----- (00000000004064A8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_15_bad()
{
  return printLine("Hello from bad()");
}

//----- (00000000004064B9) ----------------------------------------------------
int good1_78()
{
  return printLine("Hello from good()");
}

//----- (00000000004064CA) ----------------------------------------------------
int good2_56()
{
  return printLine("Hello from good()");
}

//----- (00000000004064DB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_15_good()
{
  good1_78();
  return good2_56();
}

//----- (00000000004064F5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_03_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000406528) ----------------------------------------------------
int good1_79()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000406566) ----------------------------------------------------
int good2_57()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004065A4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_03_good()
{
  good1_79();
  return good2_57();
}

//----- (00000000004065BE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_05_bad()
{
  int result; // eax

  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 61B0DC: using guessed type int staticTrue_6;

//----- (00000000004065ED) ----------------------------------------------------
int good1_80()
{
  if ( staticFalse_6 )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 61B138: using guessed type int staticFalse_6;

//----- (0000000000406635) ----------------------------------------------------
int good2_58()
{
  int result; // eax

  result = staticTrue_6;
  if ( staticTrue_6 )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 61B0DC: using guessed type int staticTrue_6;

//----- (0000000000406671) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_05_good()
{
  good1_80();
  return good2_58();
}

//----- (000000000040668B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_16_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (00000000004066D2) ----------------------------------------------------
int good1_81()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000406725) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_16_good()
{
  return good1_81();
}

//----- (0000000000406735) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLine("Hello from bad()");
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040674F) ----------------------------------------------------
int good1_82()
{
  int result; // eax

  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000406775) ----------------------------------------------------
int good2_59()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLine("Hello from good()");
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040678F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_09_good()
{
  good1_82();
  return good2_59();
}

//----- (00000000004067A9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_01_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (00000000004067D0) ----------------------------------------------------
int good1_83()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000406801) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_01_good()
{
  return good1_83();
}

//----- (0000000000406811) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000406861) ----------------------------------------------------
int good1_84()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (00000000004068C9) ----------------------------------------------------
int good2_60()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000406925) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_10_good()
{
  good1_84();
  return good2_60();
}

//----- (000000000040693F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (000000000040695D) ----------------------------------------------------
int good1_85()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000406991) ----------------------------------------------------
int good2_61()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004069B9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_11_good()
{
  good1_85();
  return good2_61();
}

//----- (00000000004069D3) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_02_bad()
{
  return printLine("Hello from bad()");
}

//----- (00000000004069E3) ----------------------------------------------------
int good1_86()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (00000000004069FD) ----------------------------------------------------
int good2_62()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000406A17) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_02_good()
{
  good1_86();
  return good2_62();
}

//----- (0000000000406A31) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_18_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000406A65) ----------------------------------------------------
int good1_87()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000406AA4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_18_good()
{
  return good1_87();
}

//----- (0000000000406AB4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_16_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (0000000000406ADA) ----------------------------------------------------
int good1_88()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000406B0D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_16_good()
{
  return good1_88();
}

//----- (0000000000406B1D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406B77) ----------------------------------------------------
int good1_89()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000406BE9) ----------------------------------------------------
int good2_63()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406C4F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_09_good()
{
  good1_89();
  return good2_63();
}

//----- (0000000000406C69) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_06_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000406CC3) ----------------------------------------------------
int good1_90()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000406D35) ----------------------------------------------------
int good2_64()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000406D9B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_06_good()
{
  good1_90();
  return good2_64();
}

//----- (0000000000406DB5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000406E0F) ----------------------------------------------------
int good1_91()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000406E81) ----------------------------------------------------
int good2_65()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000406EE7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_10_good()
{
  good1_91();
  return good2_65();
}

//----- (0000000000406F01) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_16_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000406F12) ----------------------------------------------------
int good1_92()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000406F2D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_16_good()
{
  return good1_92();
}

//----- (0000000000406F3D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_01_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (0000000000406F83) ----------------------------------------------------
int good1_93()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000406FD5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_01_good()
{
  return good1_93();
}

//----- (0000000000406FE5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_10_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000407016) ----------------------------------------------------
int good1_94()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (000000000040705D) ----------------------------------------------------
int good2_66()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000407098) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_10_good()
{
  good1_94();
  return good2_66();
}

//----- (00000000004070B2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
    result = printLine("Hello from bad()");
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (00000000004070CC) ----------------------------------------------------
int good1_95()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (00000000004070FC) ----------------------------------------------------
int good2_67()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000407120) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_10_good()
{
  good1_95();
  return good2_67();
}

//----- (000000000040713A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_03_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (0000000000407164) ----------------------------------------------------
int good1_96()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000407199) ----------------------------------------------------
int good2_68()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (00000000004071CE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_03_good()
{
  good1_96();
  return good2_68();
}

//----- (00000000004071E8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_07_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0E0: using guessed type int staticFive_0;

//----- (000000000040721A) ----------------------------------------------------
int good1_97()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 61B0E0: using guessed type int staticFive_0;

//----- (0000000000407262) ----------------------------------------------------
int good2_69()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0E0: using guessed type int staticFive_0;

//----- (000000000040729E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_07_good()
{
  good1_97();
  return good2_69();
}

//----- (00000000004072B8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_01_bad()
{
  return printLine("Hello from bad()");
}

//----- (00000000004072C8) ----------------------------------------------------
int good1_98()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (00000000004072E2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_01_good()
{
  return good1_98();
}

//----- (00000000004072F2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  else
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}

//----- (0000000000407369) ----------------------------------------------------
int good1_99()
{
  globalReturnsTrueOrFalse();
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004073EB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_12_good()
{
  return good1_99();
}

//----- (00000000004073FB) ----------------------------------------------------
__int64 staticReturnsTrue_4()
{
  return 1LL;
}

//----- (0000000000407406) ----------------------------------------------------
__int64 staticReturnsFalse_4()
{
  return 0LL;
}

//----- (0000000000407411) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_4();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (000000000040742F) ----------------------------------------------------
int good1_100()
{
  int result; // eax

  if ( (unsigned int)staticReturnsFalse_4() )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000407459) ----------------------------------------------------
int good2_70()
{
  int result; // eax

  result = staticReturnsTrue_4();
  if ( result )
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000407477) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_08_good()
{
  good1_100();
  return good2_70();
}

//----- (0000000000407491) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (00000000004074E5) ----------------------------------------------------
int good1_101()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000407551) ----------------------------------------------------
int good2_71()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004075B1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_11_good()
{
  good1_101();
  return good2_71();
}

//----- (00000000004075CB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  else
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (000000000040767D) ----------------------------------------------------
int good1_102()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  else
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (000000000040773B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_12_good()
{
  return good1_102();
}

//----- (000000000040774B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_06_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (000000000040777F) ----------------------------------------------------
int good1_103()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (00000000004077CA) ----------------------------------------------------
int good2_72()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000407809) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_06_good()
{
  good1_103();
  return good2_72();
}

//----- (0000000000407823) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_18_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (000000000040784E) ----------------------------------------------------
int good1_104()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000407884) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_18_good()
{
  return good1_104();
}

//----- (0000000000407894) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_05_bad()
{
  int result; // eax

  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B0E4: using guessed type int staticTrue_7;

//----- (00000000004078AE) ----------------------------------------------------
int good1_105()
{
  int result; // eax

  if ( staticFalse_7 )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 61B13C: using guessed type int staticFalse_7;

//----- (00000000004078D4) ----------------------------------------------------
int good2_73()
{
  int result; // eax

  result = staticTrue_7;
  if ( staticTrue_7 )
    result = printLine("Hello from good()");
  return result;
}
// 61B0E4: using guessed type int staticTrue_7;

//----- (00000000004078EE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_05_good()
{
  good1_105();
  return good2_73();
}

//----- (0000000000407908) ----------------------------------------------------
__int64 staticReturnsTrue_5()
{
  return 1LL;
}

//----- (0000000000407913) ----------------------------------------------------
__int64 staticReturnsFalse_5()
{
  return 0LL;
}

//----- (000000000040791E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_5();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (000000000040793C) ----------------------------------------------------
int good1_106()
{
  int result; // eax

  if ( (unsigned int)staticReturnsFalse_5() )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000407966) ----------------------------------------------------
int good2_74()
{
  int result; // eax

  result = staticReturnsTrue_5();
  if ( result )
    result = printLine("Hello from good()");
  return result;
}

//----- (0000000000407984) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_08_good()
{
  good1_106();
  return good2_74();
}

//----- (000000000040799E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_03_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (00000000004079C3) ----------------------------------------------------
int good1_107()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (00000000004079F5) ----------------------------------------------------
int good2_75()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000407A27) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_03_good()
{
  good1_107();
  return good2_75();
}

//----- (0000000000407A41) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407A91) ----------------------------------------------------
int good1_108()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000407AF9) ----------------------------------------------------
int good2_76()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407B55) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_09_good()
{
  good1_108();
  return good2_76();
}

//----- (0000000000407B6F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLine("Hello from bad()");
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407B89) ----------------------------------------------------
int good1_109()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000407BB9) ----------------------------------------------------
int good2_77()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407BDD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_09_good()
{
  good1_109();
  return good2_77();
}

//----- (0000000000407BF7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407C12) ----------------------------------------------------
int good1_110()
{
  int result; // eax

  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407C39) ----------------------------------------------------
int good2_78()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407C54) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_13_good()
{
  good1_110();
  return good2_78();
}

//----- (0000000000407C6E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_06_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000407CC8) ----------------------------------------------------
int good1_111()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000407D3A) ----------------------------------------------------
int good2_79()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000407DA0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_06_good()
{
  good1_111();
  return good2_79();
}

//----- (0000000000407DBA) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_17_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}

//----- (0000000000407E00) ----------------------------------------------------
int good1_112()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}

//----- (0000000000407E51) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_17_good()
{
  return good1_112();
}

//----- (0000000000407E61) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_15_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000407E72) ----------------------------------------------------
int good1_113()
{
  return printLine("Hello from good()");
}

//----- (0000000000407E83) ----------------------------------------------------
int good2_80()
{
  return printLine("Hello from good()");
}

//----- (0000000000407E94) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_15_good()
{
  good1_113();
  return good2_80();
}

//----- (0000000000407EAE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_06_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (0000000000407EFE) ----------------------------------------------------
int good1_114()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000407F66) ----------------------------------------------------
int good2_81()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000407FC2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_06_good()
{
  good1_114();
  return good2_81();
}

//----- (0000000000407FDC) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_12_bad()
{
  int v0; // eax
  int result; // eax
  int v2; // eax
  int v3; // [rsp+8h] [rbp-8h]
  int v4; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v4 = 0;
    do
      v0 = v4++;
    while ( v0 <= 9 );
    result = printLine("Hello from bad()");
  }
  else
  {
    v3 = 0;
    while ( 1 )
    {
      v2 = v3++;
      if ( v2 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000408041) ----------------------------------------------------
int good1_115()
{
  int v0; // eax
  int result; // eax
  int v2; // eax
  int v3; // [rsp+8h] [rbp-8h]
  int v4; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v4 = 0;
    while ( 1 )
    {
      v0 = v4++;
      if ( v0 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  else
  {
    v3 = 0;
    while ( 1 )
    {
      v2 = v3++;
      if ( v2 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (00000000004080B1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_12_good()
{
  return good1_115();
}

//----- (00000000004080C1) ----------------------------------------------------
__int64 staticReturnsTrue_6()
{
  return 1LL;
}

//----- (00000000004080CC) ----------------------------------------------------
__int64 staticReturnsFalse_6()
{
  return 0LL;
}

//----- (00000000004080D7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_6();
  if ( result )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}

//----- (000000000040810A) ----------------------------------------------------
int good1_116()
{
  if ( (unsigned int)staticReturnsFalse_6() )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000408156) ----------------------------------------------------
int good2_82()
{
  int result; // eax

  result = staticReturnsTrue_6();
  if ( result )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}

//----- (0000000000408196) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_08_good()
{
  good1_116();
  return good2_82();
}

//----- (00000000004081B0) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_if_17_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    printLine("Hello from bad()");
  }
}

//----- (0000000000408213) ----------------------------------------------------
void good1_117()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    printLine("Hello from good()");
  }
}

//----- (0000000000408282) ----------------------------------------------------
void CWE398_Poor_Code_Quality__empty_if_17_good()
{
  good1_117();
}

//----- (0000000000408292) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_01_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (00000000004082E2) ----------------------------------------------------
int good1_118()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040833E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_01_good()
{
  return good1_118();
}

//----- (000000000040834E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}

//----- (000000000040838F) ----------------------------------------------------
int good1_119()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004083E7) ----------------------------------------------------
int good2_83()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}

//----- (0000000000408433) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_11_good()
{
  good1_119();
  return good2_83();
}

//----- (000000000040844D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_02_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000408480) ----------------------------------------------------
int good1_120()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004084BE) ----------------------------------------------------
int good2_84()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004084FC) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_02_good()
{
  good1_120();
  return good2_84();
}

//----- (0000000000408516) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000408571) ----------------------------------------------------
int good1_121()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (00000000004085E4) ----------------------------------------------------
int good2_85()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040864B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_14_good()
{
  good1_121();
  return good2_85();
}

//----- (0000000000408665) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_13_bad()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000408680) ----------------------------------------------------
int good1_122()
{
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004086B1) ----------------------------------------------------
int good2_86()
{
  int result; // eax

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413408: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004086D6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_13_good()
{
  good1_122();
  return good2_86();
}

//----- (00000000004086F0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_02_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000408740) ----------------------------------------------------
int good1_123()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040879C) ----------------------------------------------------
int good2_87()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (00000000004087F8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_02_good()
{
  good1_123();
  return good2_87();
}

//----- (0000000000408812) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_07_bad()
{
  int result; // eax

  result = staticFive_1;
  if ( staticFive_1 == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B0E8: using guessed type int staticFive_1;

//----- (000000000040882D) ----------------------------------------------------
int good1_124()
{
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 61B0E8: using guessed type int staticFive_1;

//----- (000000000040885E) ----------------------------------------------------
int good2_88()
{
  int result; // eax

  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0E8: using guessed type int staticFive_1;

//----- (0000000000408883) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_07_good()
{
  good1_124();
  return good2_88();
}

//----- (000000000040889D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_16_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (00000000004088D1) ----------------------------------------------------
int good1_125()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000408910) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_16_good()
{
  return good1_125();
}

//----- (0000000000408920) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_14_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      ;
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000408952) ----------------------------------------------------
int good1_126()
{
  int i; // [rsp+Ch] [rbp-4h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (000000000040899A) ----------------------------------------------------
int good2_89()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    for ( i = 0; i <= 9; ++i )
      printLine("Inside the for statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004089D6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_14_good()
{
  good1_126();
  return good2_89();
}

//----- (00000000004089F0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  else
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}

//----- (0000000000408A4D) ----------------------------------------------------
int good1_127()
{
  globalReturnsTrueOrFalse();
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000408AB7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_12_good()
{
  return good1_127();
}

//----- (0000000000408AC7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_04_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (0000000000408B20) ----------------------------------------------------
int good1_128()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000408B91) ----------------------------------------------------
int good2_90()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (0000000000408BF6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_04_good()
{
  good1_128();
  return good2_90();
}

//----- (0000000000408C10) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_07_bad()
{
  int result; // eax

  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B0EC: using guessed type int staticFive_2;

//----- (0000000000408C2B) ----------------------------------------------------
int good1_129()
{
  int result; // eax

  if ( staticFive_2 == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 61B0EC: using guessed type int staticFive_2;

//----- (0000000000408C52) ----------------------------------------------------
int good2_91()
{
  int result; // eax

  result = staticFive_2;
  if ( staticFive_2 == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 61B0EC: using guessed type int staticFive_2;

//----- (0000000000408C6D) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_07_good()
{
  good1_129();
  return good2_91();
}

//----- (0000000000408C87) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000408CC4) ----------------------------------------------------
int good1_130()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000408D18) ----------------------------------------------------
int good2_92()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000408D60) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_10_good()
{
  good1_130();
  return good2_92();
}

//----- (0000000000408D7A) ----------------------------------------------------
__int64 staticReturnsTrue_7()
{
  return 1LL;
}

//----- (0000000000408D85) ----------------------------------------------------
__int64 staticReturnsFalse_7()
{
  return 0LL;
}

//----- (0000000000408D90) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_7();
  if ( result )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (0000000000408DE4) ----------------------------------------------------
int good1_131()
{
  if ( (unsigned int)staticReturnsFalse_7() )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (0000000000408E50) ----------------------------------------------------
int good2_93()
{
  int result; // eax

  result = staticReturnsTrue_7();
  if ( result )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000408EB0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_08_good()
{
  good1_131();
  return good2_93();
}

//----- (0000000000408ECA) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_03_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000408EDA) ----------------------------------------------------
int good1_132()
{
  return printLine("Hello from good()");
}

//----- (0000000000408EEA) ----------------------------------------------------
int good2_94()
{
  return printLine("Hello from good()");
}

//----- (0000000000408EFA) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_03_good()
{
  good1_132();
  return good2_94();
}

//----- (0000000000408F14) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000408F6E) ----------------------------------------------------
int good1_133()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000408FE0) ----------------------------------------------------
int good2_95()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000409046) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_10_good()
{
  good1_133();
  return good2_95();
}

//----- (0000000000409060) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_07_bad()
{
  int result; // eax

  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 61B0F0: using guessed type int staticFive_3;

//----- (000000000040909E) ----------------------------------------------------
int good1_134()
{
  if ( staticFive_3 != 5 )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 61B0F0: using guessed type int staticFive_3;

//----- (00000000004090F3) ----------------------------------------------------
int good2_96()
{
  int result; // eax

  result = staticFive_3;
  if ( staticFive_3 == 5 )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 61B0F0: using guessed type int staticFive_3;

//----- (000000000040913C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_07_good()
{
  good1_134();
  return good2_96();
}

//----- (0000000000409156) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_11_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (000000000040918E) ----------------------------------------------------
int good1_135()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (00000000004091DD) ----------------------------------------------------
int good2_97()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000409220) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_11_good()
{
  good1_135();
  return good2_97();
}

//----- (000000000040923A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_18_bad()
{
  return printLine("Hello from bad()");
}

//----- (000000000040924B) ----------------------------------------------------
int good1_136()
{
  return printLine("Hello from good()");
}

//----- (000000000040925C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_18_good()
{
  return good1_136();
}

//----- (000000000040926C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_01_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (000000000040929F) ----------------------------------------------------
int good1_137()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (00000000004092DD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_01_good()
{
  return good1_137();
}

//----- (00000000004092ED) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_07_bad()
{
  int result; // eax

  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 61B0F4: using guessed type int staticFive_4;

//----- (000000000040931D) ----------------------------------------------------
int good1_138()
{
  if ( staticFive_4 != 5 )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 61B0F4: using guessed type int staticFive_4;

//----- (0000000000409366) ----------------------------------------------------
int good2_98()
{
  int result; // eax

  result = staticFive_4;
  if ( staticFive_4 == 5 )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 61B0F4: using guessed type int staticFive_4;

//----- (00000000004093A3) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_07_good()
{
  good1_138();
  return good2_98();
}

//----- (00000000004093BD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_17_bad()
{
  int v0; // eax
  int result; // eax
  int v2; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = 0;
    do
      v0 = v2++;
    while ( v0 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}

//----- (00000000004093FA) ----------------------------------------------------
int good1_139()
{
  int v0; // eax
  int result; // eax
  int v2; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = 0;
    while ( 1 )
    {
      v0 = v2++;
      if ( v0 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}

//----- (0000000000409442) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_17_good()
{
  return good1_139();
}

//----- (0000000000409452) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_17_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}

//----- (000000000040948A) ----------------------------------------------------
int good1_140()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}

//----- (00000000004094CF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_17_good()
{
  return good1_140();
}

//----- (00000000004094DF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_16_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (000000000040950A) ----------------------------------------------------
int good1_141()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000409540) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_16_good()
{
  return good1_141();
}

//----- (0000000000409550) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (00000000004095A1) ----------------------------------------------------
int good1_142()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (000000000040960A) ----------------------------------------------------
int good2_99()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000409667) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_14_good()
{
  good1_142();
  return good2_99();
}

//----- (0000000000409681) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_10_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (00000000004096B5) ----------------------------------------------------
int good1_143()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000409700) ----------------------------------------------------
int good2_100()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (000000000040973F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_10_good()
{
  good1_143();
  return good2_100();
}

//----- (0000000000409759) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}

//----- (000000000040978C) ----------------------------------------------------
int good1_144()
{
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (00000000004097D8) ----------------------------------------------------
int good2_101()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}

//----- (0000000000409818) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_11_good()
{
  good1_144();
  return good2_101();
}

//----- (0000000000409832) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_02_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (0000000000409857) ----------------------------------------------------
int good1_145()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (0000000000409889) ----------------------------------------------------
int good2_102()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (00000000004098BB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_02_good()
{
  good1_145();
  return good2_102();
}

//----- (00000000004098D5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_04_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (0000000000409905) ----------------------------------------------------
int good1_146()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (000000000040994B) ----------------------------------------------------
int good2_103()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (0000000000409985) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_04_good()
{
  good1_146();
  return good2_103();
}

//----- (000000000040999F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_12_bad()
{
  int result; // eax

  if ( (unsigned int)globalReturnsTrueOrFalse() )
    result = printLine("Hello from bad()");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (00000000004099C9) ----------------------------------------------------
int good1_147()
{
  globalReturnsTrueOrFalse();
  return printLine("Hello from good()");
}

//----- (00000000004099F3) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_12_good()
{
  return good1_147();
}

//----- (0000000000409A03) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_04_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000409A1C) ----------------------------------------------------
int good1_148()
{
  return printLine("Hello from good()");
}

//----- (0000000000409A41) ----------------------------------------------------
int good2_104()
{
  return printLine("Hello from good()");
}

//----- (0000000000409A5A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_04_good()
{
  good1_148();
  return good2_104();
}

//----- (0000000000409A74) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_18_bad()
{
  return printLine("Hello from bad()");
}

//----- (0000000000409A85) ----------------------------------------------------
int good1_149()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (0000000000409AA0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_18_good()
{
  return good1_149();
}

//----- (0000000000409AB0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_07_bad()
{
  int result; // eax

  result = staticFive_5;
  if ( staticFive_5 == 5 )
  {
    rand();
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0F8: using guessed type int staticFive_5;

//----- (0000000000409B01) ----------------------------------------------------
int good1_150()
{
  if ( staticFive_5 != 5 )
    return printLine("Benign, fixed string");
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}
// 61B0F8: using guessed type int staticFive_5;

//----- (0000000000409B6A) ----------------------------------------------------
int good2_105()
{
  int result; // eax

  result = staticFive_5;
  if ( staticFive_5 == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the case statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0F8: using guessed type int staticFive_5;

//----- (0000000000409BC7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_07_good()
{
  good1_150();
  return good2_105();
}

//----- (0000000000409BE1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_04_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000409C1D) ----------------------------------------------------
int good1_151()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000409C70) ----------------------------------------------------
int good2_106()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000409CB7) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_04_good()
{
  good1_151();
  return good2_106();
}

//----- (0000000000409CD1) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000409CEC) ----------------------------------------------------
int good1_152()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  printLine("Inside the block");
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (0000000000409D1D) ----------------------------------------------------
int good2_107()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    printLine("Inside the block");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (0000000000409D42) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_14_good()
{
  good1_152();
  return good2_107();
}

//----- (0000000000409D5C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_01_bad()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  do
    v0 = v2++;
  while ( v0 <= 9 );
  return printLine("Hello from bad()");
}

//----- (0000000000409D86) ----------------------------------------------------
int good1_153()
{
  int v0; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = 0;
  while ( 1 )
  {
    v0 = v2++;
    if ( v0 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}

//----- (0000000000409DBB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_01_good()
{
  return good1_153();
}

//----- (0000000000409DCB) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    printIntLine(1u);
    result = printIntLine(1u);
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000409DFA) ----------------------------------------------------
int good1_154()
{
  if ( globalFalse )
    return printLine("Benign, fixed string");
  printIntLine(1u);
  return printIntLine(5u);
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000409E42) ----------------------------------------------------
int good2_108()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
  {
    printIntLine(1u);
    result = printIntLine(5u);
  }
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000409E7E) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_10_good()
{
  good1_154();
  return good2_108();
}

//----- (0000000000409E98) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_06_bad()
{
  printIntLine(0);
  return printIntLine(0);
}

//----- (0000000000409ED5) ----------------------------------------------------
int good1_155()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000409F29) ----------------------------------------------------
int good2_109()
{
  printIntLine(0);
  return printIntLine(2u);
}

//----- (0000000000409F71) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_06_good()
{
  good1_155();
  return good2_109();
}

//----- (0000000000409F8B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_10_bad()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
    result = printLine("Hello from bad()");
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000409FA5) ----------------------------------------------------
int good1_156()
{
  int result; // eax

  if ( globalFalse )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 61B148: using guessed type int globalFalse;

//----- (0000000000409FCB) ----------------------------------------------------
int good2_110()
{
  int result; // eax

  result = globalTrue;
  if ( globalTrue )
    result = printLine("Hello from good()");
  return result;
}
// 61B10C: using guessed type int globalTrue;

//----- (0000000000409FE5) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_10_good()
{
  good1_156();
  return good2_110();
}

//----- (0000000000409FFF) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A059) ----------------------------------------------------
int good1_157()
{
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040A0CB) ----------------------------------------------------
int good2_111()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A131) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_09_good()
{
  good1_157();
  return good2_111();
}

//----- (000000000040A14B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_17_bad()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    result = printLine("Hello from bad()");
  return result;
}

//----- (000000000040A172) ----------------------------------------------------
int good1_158()
{
  int result; // eax
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
    result = printLine("Hello from good()");
  return result;
}

//----- (000000000040A199) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_17_good()
{
  return good1_158();
}

//----- (000000000040A1A9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_01_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (000000000040A1CE) ----------------------------------------------------
int good1_159()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (000000000040A200) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_01_good()
{
  return good1_159();
}

//----- (000000000040A210) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_04_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (000000000040A25F) ----------------------------------------------------
int good1_160()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (000000000040A2C6) ----------------------------------------------------
int good2_112()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (000000000040A321) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_04_good()
{
  good1_160();
  return good2_112();
}

//----- (000000000040A33B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_15_bad()
{
  if ( !(rand() % 3) )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (000000000040A38C) ----------------------------------------------------
int good1_161()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040A3E9) ----------------------------------------------------
int good2_113()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040A446) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_15_good()
{
  good1_161();
  return good2_113();
}

//----- (000000000040A460) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_11_bad()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
    result = printLine("Hello from bad()");
  return result;
}

//----- (000000000040A47E) ----------------------------------------------------
int good1_162()
{
  int result; // eax

  if ( (unsigned int)globalReturnsFalse() )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}

//----- (000000000040A4A8) ----------------------------------------------------
int good2_114()
{
  int result; // eax

  result = globalReturnsTrue();
  if ( result )
    result = printLine("Hello from good()");
  return result;
}

//----- (000000000040A4C6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_11_good()
{
  good1_162();
  return good2_114();
}

//----- (000000000040A4E0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_02_bad()
{
  return printLine("Hello from bad()");
}

//----- (000000000040A4F0) ----------------------------------------------------
int good1_163()
{
  return printLine("Hello from good()");
}

//----- (000000000040A500) ----------------------------------------------------
int good2_115()
{
  return printLine("Hello from good()");
}

//----- (000000000040A510) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_02_good()
{
  good1_163();
  return good2_115();
}

//----- (000000000040A52A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_18_bad()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  return printLine("Hello from bad()");
}

//----- (000000000040A57B) ----------------------------------------------------
int good1_164()
{
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}

//----- (000000000040A5D8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_18_good()
{
  return good1_164();
}

//----- (000000000040A5E8) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_07_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B0FC: using guessed type int staticFive_6;

//----- (000000000040A61D) ----------------------------------------------------
int good1_165()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( staticFive_6 != 5 )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 61B0FC: using guessed type int staticFive_6;

//----- (000000000040A669) ----------------------------------------------------
int good2_116()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = staticFive_6;
  if ( staticFive_6 == 5 )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B0FC: using guessed type int staticFive_6;

//----- (000000000040A6A9) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_07_good()
{
  good1_165();
  return good2_116();
}

//----- (000000000040A6C3) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_15_bad()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    ;
  return printLine("Hello from bad()");
}

//----- (000000000040A6EB) ----------------------------------------------------
int good1_166()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (000000000040A71D) ----------------------------------------------------
int good2_117()
{
  int i; // [rsp+Ch] [rbp-4h]

  for ( i = 0; i <= 9; ++i )
    printLine("Inside the for statement");
  return printLine("Hello from good()");
}

//----- (000000000040A74F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_for_15_good()
{
  good1_166();
  return good2_117();
}

//----- (000000000040A769) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_04_bad()
{
  return printLine("Hello from bad()");
}

//----- (000000000040A782) ----------------------------------------------------
int good1_167()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (000000000040A7B1) ----------------------------------------------------
int good2_118()
{
  printLine("Inside the block");
  return printLine("Hello from good()");
}

//----- (000000000040A7D4) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_block_04_good()
{
  good1_167();
  return good2_118();
}

//----- (000000000040A7EE) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_16_bad()
{
  return printLine("Hello from bad()");
}

//----- (000000000040A7FF) ----------------------------------------------------
int good1_168()
{
  return printLine("Hello from good()");
}

//----- (000000000040A810) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_16_good()
{
  return good1_168();
}

//----- (000000000040A820) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_09_bad()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLine("Hello from bad()");
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A83A) ----------------------------------------------------
int good1_169()
{
  int result; // eax

  if ( GLOBAL_CONST_FALSE )
    result = printLine("Benign, fixed string");
  else
    result = printLine("Hello from good()");
  return result;
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040A860) ----------------------------------------------------
int good2_119()
{
  int result; // eax

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
    result = printLine("Hello from good()");
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A87A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_09_good()
{
  good1_169();
  return good2_119();
}

//----- (000000000040A894) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_09_bad()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0;
    do
      v1 = v2++;
    while ( v1 <= 9 );
    result = printLine("Hello from bad()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A8C8) ----------------------------------------------------
int good1_170()
{
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v2 = 0;
  while ( 1 )
  {
    v1 = v2++;
    if ( v1 > 9 )
      break;
    printLine("Inside the while statement");
  }
  return printLine("Hello from good()");
}
// 413404: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000040A913) ----------------------------------------------------
int good2_120()
{
  int result; // eax
  int v1; // eax
  int v2; // [rsp+Ch] [rbp-4h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0;
    while ( 1 )
    {
      v1 = v2++;
      if ( v1 > 9 )
        break;
      printLine("Inside the while statement");
    }
    result = printLine("Hello from good()");
  }
  return result;
}
// 413400: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040A952) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_while_09_good()
{
  good1_170();
  return good2_120();
}

//----- (000000000040A96C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_06_bad()
{
  printIntLine(1u);
  return printIntLine(1u);
}

//----- (000000000040A99B) ----------------------------------------------------
int good1_171()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (000000000040A9E3) ----------------------------------------------------
int good2_121()
{
  printIntLine(1u);
  return printIntLine(5u);
}

//----- (000000000040AA1F) ----------------------------------------------------
int CWE398_Poor_Code_Quality__equals_06_good()
{
  good1_171();
  return good2_121();
}

//----- (000000000040AA39) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_07_bad()
{
  int result; // eax

  result = staticFive_7;
  if ( staticFive_7 == 5 )
    result = printLine("Hello from bad()");
  return result;
}
// 61B100: using guessed type int staticFive_7;

//----- (000000000040AA54) ----------------------------------------------------
int good1_172()
{
  int result; // eax

  if ( staticFive_7 == 5 )
    result = printLine("Hello from good()");
  else
    result = printLine("Benign, fixed string");
  return result;
}
// 61B100: using guessed type int staticFive_7;

//----- (000000000040AA7B) ----------------------------------------------------
int good2_122()
{
  int result; // eax

  result = staticFive_7;
  if ( staticFive_7 == 5 )
    result = printLine("Hello from good()");
  return result;
}
// 61B100: using guessed type int staticFive_7;

//----- (000000000040AA96) ----------------------------------------------------
int CWE398_Poor_Code_Quality__five_07_good()
{
  good1_172();
  return good2_122();
}

//----- (000000000040AAB0) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040AAEE) ----------------------------------------------------
int good1_173()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}
// 61B110: using guessed type int globalFive;

//----- (000000000040AB43) ----------------------------------------------------
int good2_123()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040AB8C) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_14_good()
{
  good1_173();
  return good2_123();
}

//----- (000000000040ABA6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_01_bad()
{
  return printLine("Hello from bad()");
}

//----- (000000000040ABB6) ----------------------------------------------------
int good1_174()
{
  return printLine("Hello from good()");
}

//----- (000000000040ABC6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__semicolon_01_good()
{
  return good1_174();
}

//----- (000000000040ABD6) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_14_bad()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040AC31) ----------------------------------------------------
int good1_175()
{
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B110: using guessed type int globalFive;

//----- (000000000040ACA4) ----------------------------------------------------
int good2_124()
{
  int result; // eax

  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B110: using guessed type int globalFive;

//----- (000000000040AD0B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_if_14_good()
{
  good1_175();
  return good2_124();
}

//----- (000000000040AD25) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_07_bad()
{
  int result; // eax

  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B104: using guessed type int staticFive_8;

//----- (000000000040AD80) ----------------------------------------------------
int good1_176()
{
  if ( staticFive_8 != 5 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B104: using guessed type int staticFive_8;

//----- (000000000040ADF3) ----------------------------------------------------
int good2_125()
{
  int result; // eax

  result = staticFive_8;
  if ( staticFive_8 == 5 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B104: using guessed type int staticFive_8;

//----- (000000000040AE5A) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_07_good()
{
  good1_176();
  return good2_125();
}

//----- (000000000040AE74) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_15_bad()
{
  rand();
  return printLine("Hello from bad()");
}

//----- (000000000040AEBB) ----------------------------------------------------
int good1_177()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (000000000040AF0E) ----------------------------------------------------
int good2_126()
{
  if ( !(rand() % 3) )
    printLine("Inside the case statement");
  return printLine("Hello from good()");
}

//----- (000000000040AF61) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_case_15_good()
{
  good1_177();
  return good2_126();
}

//----- (000000000040AF7B) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_05_bad()
{
  int result; // eax

  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    if ( !(rand() % 3) )
      printLine("Inside the else statement");
    result = printLine("Hello from bad()");
  }
  return result;
}
// 61B108: using guessed type int staticTrue_8;

//----- (000000000040AFD5) ----------------------------------------------------
int good1_178()
{
  if ( staticFalse_8 )
    return printLine("Benign, fixed string");
  if ( rand() % 3 )
    printLine("Inside the else statement");
  else
    printLine("Inside the if statement");
  return printLine("Hello from good()");
}
// 61B140: using guessed type int staticFalse_8;

//----- (000000000040B047) ----------------------------------------------------
int good2_127()
{
  int result; // eax

  result = staticTrue_8;
  if ( staticTrue_8 )
  {
    if ( rand() % 3 )
      printLine("Inside the else statement");
    else
      printLine("Inside the if statement");
    result = printLine("Hello from good()");
  }
  return result;
}
// 61B108: using guessed type int staticTrue_8;

//----- (000000000040B0AD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__empty_else_05_good()
{
  good1_178();
  return good2_127();
}

//----- (000000000040B0C7) ----------------------------------------------------
__int64 staticReturnsTrue_8()
{
  return 1LL;
}

//----- (000000000040B0D2) ----------------------------------------------------
__int64 staticReturnsFalse_8()
{
  return 0LL;
}

//----- (000000000040B0DD) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_08_bad()
{
  int result; // eax

  result = staticReturnsTrue_8();
  if ( result )
  {
    printIntLine(0);
    result = printIntLine(0);
  }
  return result;
}

//----- (000000000040B11E) ----------------------------------------------------
int good1_179()
{
  if ( (unsigned int)staticReturnsFalse_8() )
    return printLine("Benign, fixed string");
  printIntLine(0);
  return printIntLine(2u);
}

//----- (000000000040B176) ----------------------------------------------------
int good2_128()
{
  int result; // eax

  result = staticReturnsTrue_8();
  if ( result )
  {
    printIntLine(0);
    result = printIntLine(2u);
  }
  return result;
}

//----- (000000000040B1C2) ----------------------------------------------------
int CWE398_Poor_Code_Quality__addition_08_good()
{
  good1_179();
  return good2_128();
}

//----- (000000000040B1DC) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000040B1FD) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000040B228) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000040B249) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000040B26E) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000040B294) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000040B2B8) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000040B2DC) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000040B300) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000040B324) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000040B354) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000040B375) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000040B399) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000040B3C4) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000040B3F0) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000040B447) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400900: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B520) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 4009B0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000040B5D4) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000040B5DF) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000040B5EA) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000040B600) ----------------------------------------------------
void good1_180()
{
  ;
}

//----- (000000000040B606) ----------------------------------------------------
void good2_129()
{
  ;
}

//----- (000000000040B60C) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000040B612) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000040B618) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000040B61E) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000040B624) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000040B62A) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000040B630) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000040B636) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000040B63C) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000040B642) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000040B648) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000040B64E) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000040B654) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000040B65A) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000040B660) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000040B666) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000040B66C) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000040B69F) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000040B743) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000040B777) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000040B796) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000040B80B) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000040B825) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000040B83F) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000040B870) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 61ADD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 61ADD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000040B8E4) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 751 function(s) have been successfully decompiled
