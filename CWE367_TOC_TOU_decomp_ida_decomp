/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400AD0();
// int printf(const char *format, ...);
// int close(int fd);
// int puts(const char *s);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void __noreturn exit(int status);
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// size_t strlen(const char *s);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int __xstat(int ver, const char *filename, struct stat *stat_buf);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int access(const char *name, int type);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// ssize_t write(int fd, const void *buf, size_t n);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// int open(const char *file, int oflag, ...);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int CWE367_TOC_TOU__stat_05_bad();
int good1();
int good2();
int CWE367_TOC_TOU__stat_05_good();
int CWE367_TOC_TOU__access_04_bad();
int good1_0();
int good2_0();
int CWE367_TOC_TOU__access_04_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE367_TOC_TOU__stat_08_bad();
int good1_1();
int good2_1();
int CWE367_TOC_TOU__stat_08_good();
int CWE367_TOC_TOU__access_12_bad();
int good1_2();
int CWE367_TOC_TOU__access_12_good();
int CWE367_TOC_TOU__stat_06_bad();
int good1_3();
int good2_2();
int CWE367_TOC_TOU__stat_06_good();
int CWE367_TOC_TOU__access_14_bad();
int good1_4();
int good2_3();
int CWE367_TOC_TOU__access_14_good();
int CWE367_TOC_TOU__stat_13_bad();
int good1_5();
int good2_4();
int CWE367_TOC_TOU__stat_13_good();
void CWE367_TOC_TOU__stat_17_bad();
void good1_6();
void CWE367_TOC_TOU__stat_17_good();
int CWE367_TOC_TOU__access_09_bad();
int good1_7();
int good2_5();
int CWE367_TOC_TOU__access_09_good();
int CWE367_TOC_TOU__stat_04_bad();
int good1_8();
int good2_6();
int CWE367_TOC_TOU__stat_04_good();
int CWE367_TOC_TOU__access_07_bad();
int good1_9();
int good2_7();
int CWE367_TOC_TOU__access_07_good();
int CWE367_TOC_TOU__access_13_bad();
int good1_10();
int good2_8();
int CWE367_TOC_TOU__access_13_good();
int CWE367_TOC_TOU__stat_18_bad();
int good1_11();
int CWE367_TOC_TOU__stat_18_good();
int CWE367_TOC_TOU__stat_11_bad();
int good1_12();
int good2_9();
int CWE367_TOC_TOU__stat_11_good();
int CWE367_TOC_TOU__stat_02_bad();
int good1_13();
int good2_10();
int CWE367_TOC_TOU__stat_02_good();
void CWE367_TOC_TOU__access_17_bad();
void good1_14();
void CWE367_TOC_TOU__access_17_good();
int CWE367_TOC_TOU__access_11_bad();
int good1_15();
int good2_11();
int CWE367_TOC_TOU__access_11_good();
int CWE367_TOC_TOU__access_02_bad();
int good1_16();
int good2_12();
int CWE367_TOC_TOU__access_02_good();
int CWE367_TOC_TOU__stat_12_bad();
int good1_17();
int CWE367_TOC_TOU__stat_12_good();
int CWE367_TOC_TOU__stat_07_bad();
int good1_18();
int good2_13();
int CWE367_TOC_TOU__stat_07_good();
int CWE367_TOC_TOU__stat_10_bad();
int good1_19();
int good2_14();
int CWE367_TOC_TOU__stat_10_good();
int CWE367_TOC_TOU__access_06_bad();
int good1_20();
int good2_15();
int CWE367_TOC_TOU__access_06_good();
int CWE367_TOC_TOU__stat_16_bad();
int good1_21();
int CWE367_TOC_TOU__stat_16_good();
int CWE367_TOC_TOU__stat_03_bad();
int good1_22();
int good2_16();
int CWE367_TOC_TOU__stat_03_good();
int CWE367_TOC_TOU__stat_15_bad();
int good1_23();
int good2_17();
int CWE367_TOC_TOU__stat_15_good();
int CWE367_TOC_TOU__access_16_bad();
int good1_24();
int CWE367_TOC_TOU__access_16_good();
int CWE367_TOC_TOU__stat_14_bad();
int good1_25();
int good2_18();
int CWE367_TOC_TOU__stat_14_good();
int CWE367_TOC_TOU__access_10_bad();
int good1_26();
int good2_19();
int CWE367_TOC_TOU__access_10_good();
int CWE367_TOC_TOU__stat_01_bad();
int good1_27();
int CWE367_TOC_TOU__stat_01_good();
int CWE367_TOC_TOU__access_03_bad();
int good1_28();
int good2_20();
int CWE367_TOC_TOU__access_03_good();
int CWE367_TOC_TOU__access_15_bad();
int good1_29();
int good2_21();
int CWE367_TOC_TOU__access_15_good();
int CWE367_TOC_TOU__stat_09_bad();
int good1_30();
int good2_22();
int CWE367_TOC_TOU__stat_09_good();
int CWE367_TOC_TOU__access_05_bad();
int good1_31();
int good2_23();
int CWE367_TOC_TOU__access_05_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE367_TOC_TOU__access_08_bad();
int good1_32();
int good2_24();
int CWE367_TOC_TOU__access_08_good();
int CWE367_TOC_TOU__access_01_bad();
int good1_33();
int CWE367_TOC_TOU__access_01_good();
int CWE367_TOC_TOU__access_18_bad();
int good1_34();
int CWE367_TOC_TOU__access_18_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_35();
void good2_25();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
int __fastcall stat(char *filename, struct stat *stat_buf);
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_60C010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue_0 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int staticFalse; // weak
int staticFalse_0; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400AA8) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400CA0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400AD0) ----------------------------------------------------
__int64 sub_400AD0()
{
  return qword_60C010();
}
// 60C010: using guessed type __int64 (*qword_60C010)(void);

//----- (0000000000400CB0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400CB6: positive sp value 8 has been found

//----- (0000000000400CE0) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6340895LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6340895LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000400D10) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400D50) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 60C120: using guessed type char completed_6355;

//----- (0000000000400D70) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400D70: could not find valid save-restore pair for rbp

//----- (0000000000400D9D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE367_TOC_TOU__access_10_good();");
  CWE367_TOC_TOU__access_10_good();
  printLine("Calling CWE367_TOC_TOU__stat_09_good();");
  CWE367_TOC_TOU__stat_09_good();
  printLine("Calling CWE367_TOC_TOU__stat_06_good();");
  CWE367_TOC_TOU__stat_06_good();
  printLine("Calling CWE367_TOC_TOU__stat_07_good();");
  CWE367_TOC_TOU__stat_07_good();
  printLine("Calling CWE367_TOC_TOU__access_13_good();");
  CWE367_TOC_TOU__access_13_good();
  printLine("Calling CWE367_TOC_TOU__access_05_good();");
  CWE367_TOC_TOU__access_05_good();
  printLine("Calling CWE367_TOC_TOU__access_06_good();");
  CWE367_TOC_TOU__access_06_good();
  printLine("Calling CWE367_TOC_TOU__stat_02_good();");
  CWE367_TOC_TOU__stat_02_good();
  printLine("Calling CWE367_TOC_TOU__access_11_good();");
  CWE367_TOC_TOU__access_11_good();
  printLine("Calling CWE367_TOC_TOU__access_02_good();");
  CWE367_TOC_TOU__access_02_good();
  printLine("Calling CWE367_TOC_TOU__access_07_good();");
  CWE367_TOC_TOU__access_07_good();
  printLine("Calling CWE367_TOC_TOU__stat_08_good();");
  CWE367_TOC_TOU__stat_08_good();
  printLine("Calling CWE367_TOC_TOU__stat_18_good();");
  CWE367_TOC_TOU__stat_18_good();
  printLine("Calling CWE367_TOC_TOU__access_08_good();");
  CWE367_TOC_TOU__access_08_good();
  printLine("Calling CWE367_TOC_TOU__stat_11_good();");
  CWE367_TOC_TOU__stat_11_good();
  printLine("Calling CWE367_TOC_TOU__stat_10_good();");
  CWE367_TOC_TOU__stat_10_good();
  printLine("Calling CWE367_TOC_TOU__access_09_good();");
  CWE367_TOC_TOU__access_09_good();
  printLine("Calling CWE367_TOC_TOU__stat_15_good();");
  CWE367_TOC_TOU__stat_15_good();
  printLine("Calling CWE367_TOC_TOU__stat_03_good();");
  CWE367_TOC_TOU__stat_03_good();
  printLine("Calling CWE367_TOC_TOU__access_16_good();");
  CWE367_TOC_TOU__access_16_good();
  printLine("Calling CWE367_TOC_TOU__access_03_good();");
  CWE367_TOC_TOU__access_03_good();
  printLine("Calling CWE367_TOC_TOU__access_01_good();");
  CWE367_TOC_TOU__access_01_good();
  printLine("Calling CWE367_TOC_TOU__stat_01_good();");
  CWE367_TOC_TOU__stat_01_good();
  printLine("Calling CWE367_TOC_TOU__stat_12_good();");
  CWE367_TOC_TOU__stat_12_good();
  printLine("Calling CWE367_TOC_TOU__access_18_good();");
  CWE367_TOC_TOU__access_18_good();
  printLine("Calling CWE367_TOC_TOU__access_17_good();");
  CWE367_TOC_TOU__access_17_good();
  printLine("Calling CWE367_TOC_TOU__access_14_good();");
  CWE367_TOC_TOU__access_14_good();
  printLine("Calling CWE367_TOC_TOU__stat_04_good();");
  CWE367_TOC_TOU__stat_04_good();
  printLine("Calling CWE367_TOC_TOU__stat_17_good();");
  CWE367_TOC_TOU__stat_17_good();
  printLine("Calling CWE367_TOC_TOU__stat_14_good();");
  CWE367_TOC_TOU__stat_14_good();
  printLine("Calling CWE367_TOC_TOU__access_15_good();");
  CWE367_TOC_TOU__access_15_good();
  printLine("Calling CWE367_TOC_TOU__access_04_good();");
  CWE367_TOC_TOU__access_04_good();
  printLine("Calling CWE367_TOC_TOU__stat_16_good();");
  CWE367_TOC_TOU__stat_16_good();
  printLine("Calling CWE367_TOC_TOU__stat_05_good();");
  CWE367_TOC_TOU__stat_05_good();
  printLine("Calling CWE367_TOC_TOU__stat_13_good();");
  CWE367_TOC_TOU__stat_13_good();
  printLine("Calling CWE367_TOC_TOU__access_12_good();");
  CWE367_TOC_TOU__access_12_good();
  printLine("Calling CWE367_TOC_TOU__access_10_bad();");
  CWE367_TOC_TOU__access_10_bad();
  printLine("Calling CWE367_TOC_TOU__stat_09_bad();");
  CWE367_TOC_TOU__stat_09_bad();
  printLine("Calling CWE367_TOC_TOU__stat_06_bad();");
  CWE367_TOC_TOU__stat_06_bad();
  printLine("Calling CWE367_TOC_TOU__stat_07_bad();");
  CWE367_TOC_TOU__stat_07_bad();
  printLine("Calling CWE367_TOC_TOU__access_13_bad();");
  CWE367_TOC_TOU__access_13_bad();
  printLine("Calling CWE367_TOC_TOU__access_05_bad();");
  CWE367_TOC_TOU__access_05_bad();
  printLine("Calling CWE367_TOC_TOU__access_06_bad();");
  CWE367_TOC_TOU__access_06_bad();
  printLine("Calling CWE367_TOC_TOU__stat_02_bad();");
  CWE367_TOC_TOU__stat_02_bad();
  printLine("Calling CWE367_TOC_TOU__access_11_bad();");
  CWE367_TOC_TOU__access_11_bad();
  printLine("Calling CWE367_TOC_TOU__access_02_bad();");
  CWE367_TOC_TOU__access_02_bad();
  printLine("Calling CWE367_TOC_TOU__access_07_bad();");
  CWE367_TOC_TOU__access_07_bad();
  printLine("Calling CWE367_TOC_TOU__stat_08_bad();");
  CWE367_TOC_TOU__stat_08_bad();
  printLine("Calling CWE367_TOC_TOU__stat_18_bad();");
  CWE367_TOC_TOU__stat_18_bad();
  printLine("Calling CWE367_TOC_TOU__access_08_bad();");
  CWE367_TOC_TOU__access_08_bad();
  printLine("Calling CWE367_TOC_TOU__stat_11_bad();");
  CWE367_TOC_TOU__stat_11_bad();
  printLine("Calling CWE367_TOC_TOU__stat_10_bad();");
  CWE367_TOC_TOU__stat_10_bad();
  printLine("Calling CWE367_TOC_TOU__access_09_bad();");
  CWE367_TOC_TOU__access_09_bad();
  printLine("Calling CWE367_TOC_TOU__stat_15_bad();");
  CWE367_TOC_TOU__stat_15_bad();
  printLine("Calling CWE367_TOC_TOU__stat_03_bad();");
  CWE367_TOC_TOU__stat_03_bad();
  printLine("Calling CWE367_TOC_TOU__access_16_bad();");
  CWE367_TOC_TOU__access_16_bad();
  printLine("Calling CWE367_TOC_TOU__access_03_bad();");
  CWE367_TOC_TOU__access_03_bad();
  printLine("Calling CWE367_TOC_TOU__access_01_bad();");
  CWE367_TOC_TOU__access_01_bad();
  printLine("Calling CWE367_TOC_TOU__stat_01_bad();");
  CWE367_TOC_TOU__stat_01_bad();
  printLine("Calling CWE367_TOC_TOU__stat_12_bad();");
  CWE367_TOC_TOU__stat_12_bad();
  printLine("Calling CWE367_TOC_TOU__access_18_bad();");
  CWE367_TOC_TOU__access_18_bad();
  printLine("Calling CWE367_TOC_TOU__access_17_bad();");
  CWE367_TOC_TOU__access_17_bad();
  printLine("Calling CWE367_TOC_TOU__access_14_bad();");
  CWE367_TOC_TOU__access_14_bad();
  printLine("Calling CWE367_TOC_TOU__stat_04_bad();");
  CWE367_TOC_TOU__stat_04_bad();
  printLine("Calling CWE367_TOC_TOU__stat_17_bad();");
  CWE367_TOC_TOU__stat_17_bad();
  printLine("Calling CWE367_TOC_TOU__stat_14_bad();");
  CWE367_TOC_TOU__stat_14_bad();
  printLine("Calling CWE367_TOC_TOU__access_15_bad();");
  CWE367_TOC_TOU__access_15_bad();
  printLine("Calling CWE367_TOC_TOU__access_04_bad();");
  CWE367_TOC_TOU__access_04_bad();
  printLine("Calling CWE367_TOC_TOU__stat_16_bad();");
  CWE367_TOC_TOU__stat_16_bad();
  printLine("Calling CWE367_TOC_TOU__stat_05_bad();");
  CWE367_TOC_TOU__stat_05_bad();
  printLine("Calling CWE367_TOC_TOU__stat_13_bad();");
  CWE367_TOC_TOU__stat_13_bad();
  printLine("Calling CWE367_TOC_TOU__access_12_bad();");
  CWE367_TOC_TOU__access_12_bad();
  return 0;
}
// 60C134: using guessed type int globalArgc;
// 60C138: using guessed type __int64 globalArgv;

//----- (0000000000401378) ----------------------------------------------------
int CWE367_TOC_TOU__stat_05_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = staticTrue;
  if ( staticTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C0FC: using guessed type int staticTrue;

//----- (00000000004014A7) ----------------------------------------------------
int good1()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( staticFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C124: using guessed type int staticFalse;

//----- (000000000040159E) ----------------------------------------------------
int good2()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticTrue;
  if ( staticTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C0FC: using guessed type int staticTrue;

//----- (000000000040168A) ----------------------------------------------------
int CWE367_TOC_TOU__stat_05_good()
{
  good1();
  return good2();
}

//----- (00000000004016A4) ----------------------------------------------------
int CWE367_TOC_TOU__access_04_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004017AF) ----------------------------------------------------
int good1_0()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004018A5) ----------------------------------------------------
int good2_0()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000401990) ----------------------------------------------------
int CWE367_TOC_TOU__access_04_good()
{
  good1_0();
  return good2_0();
}

//----- (00000000004019AA) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (00000000004019B5) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (00000000004019C0) ----------------------------------------------------
int CWE367_TOC_TOU__stat_08_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000401AF3) ----------------------------------------------------
int good1_1()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000401BEE) ----------------------------------------------------
int good2_1()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000401CDE) ----------------------------------------------------
int CWE367_TOC_TOU__stat_08_good()
{
  good1_1();
  return good2_1();
}

//----- (0000000000401CF8) ----------------------------------------------------
int CWE367_TOC_TOU__access_12_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int v5; // [rsp+68h] [rbp-8h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    v5 = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    v5 = open(s, 2);
    if ( v5 == -1 )
      exit(1);
    v0 = write(v5, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( v5 != -1 )
      LODWORD(v0) = close(v5);
  }
  return v0;
}

//----- (0000000000401EE6) ----------------------------------------------------
int good1_2()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int v5; // [rsp+68h] [rbp-8h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    v5 = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    v5 = open(s, 2);
    if ( v5 == -1 )
      exit(1);
    v0 = write(v5, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( v5 != -1 )
      LODWORD(v0) = close(v5);
  }
  return v0;
}

//----- (00000000004020B4) ----------------------------------------------------
int CWE367_TOC_TOU__access_12_good()
{
  return good1_2();
}

//----- (00000000004020C4) ----------------------------------------------------
int CWE367_TOC_TOU__stat_06_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004021F3) ----------------------------------------------------
int good1_3()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004022EA) ----------------------------------------------------
int good2_2()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004023D6) ----------------------------------------------------
int CWE367_TOC_TOU__stat_06_good()
{
  good1_3();
  return good2_2();
}

//----- (00000000004023F0) ----------------------------------------------------
int CWE367_TOC_TOU__access_14_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (00000000004024FD) ----------------------------------------------------
int good1_4()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (00000000004025F5) ----------------------------------------------------
int good2_3()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (00000000004026E2) ----------------------------------------------------
int CWE367_TOC_TOU__access_14_good()
{
  good1_4();
  return good2_3();
}

//----- (00000000004026FC) ----------------------------------------------------
int CWE367_TOC_TOU__stat_13_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040282C) ----------------------------------------------------
int good1_5()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402924) ----------------------------------------------------
int good2_4()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000402A11) ----------------------------------------------------
int CWE367_TOC_TOU__stat_13_good()
{
  good1_5();
  return good2_4();
}

//----- (0000000000402A2B) ----------------------------------------------------
void CWE367_TOC_TOU__stat_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-110h]
  char v1; // [rsp+8h] [rbp-108h]
  int v2; // [rsp+60h] [rbp-B0h]
  char v3; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+108h] [rbp-8h]
  int i; // [rsp+10Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    memset(&v1, 0, 0x58uLL);
    v2 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v3) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    if ( write(fd, "Bad Sink...", 0xBuLL) == -1 )
      exit(1);
    if ( fd != -1 )
      close(fd);
  }
}

//----- (0000000000402B66) ----------------------------------------------------
void good1_6()
{
  char s[8]; // [rsp+0h] [rbp-70h]
  char v1; // [rsp+8h] [rbp-68h]
  int v2; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    memset(&v1, 0, 0x58uLL);
    v2 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    if ( write(fd, "Good Sink...", 0xCuLL) == -1 )
      exit(1);
    if ( fd != -1 )
      close(fd);
  }
}

//----- (0000000000402C5E) ----------------------------------------------------
void CWE367_TOC_TOU__stat_17_good()
{
  good1_6();
}

//----- (0000000000402C6E) ----------------------------------------------------
int CWE367_TOC_TOU__access_09_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F0: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402D7A) ----------------------------------------------------
int good1_7()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000402E71) ----------------------------------------------------
int good2_5()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F0: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402F5D) ----------------------------------------------------
int CWE367_TOC_TOU__access_09_good()
{
  good1_7();
  return good2_5();
}

//----- (0000000000402F77) ----------------------------------------------------
int CWE367_TOC_TOU__stat_04_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004030A5) ----------------------------------------------------
int good1_8()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040319B) ----------------------------------------------------
int good2_6()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000403286) ----------------------------------------------------
int CWE367_TOC_TOU__stat_04_good()
{
  good1_8();
  return good2_6();
}

//----- (00000000004032A0) ----------------------------------------------------
int CWE367_TOC_TOU__access_07_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticFive;
  if ( staticFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C100: using guessed type int staticFive;

//----- (00000000004033AD) ----------------------------------------------------
int good1_9()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( staticFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 60C100: using guessed type int staticFive;

//----- (00000000004034A5) ----------------------------------------------------
int good2_7()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticFive;
  if ( staticFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C100: using guessed type int staticFive;

//----- (0000000000403592) ----------------------------------------------------
int CWE367_TOC_TOU__access_07_good()
{
  good1_9();
  return good2_7();
}

//----- (00000000004035AC) ----------------------------------------------------
int CWE367_TOC_TOU__access_13_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004036B9) ----------------------------------------------------
int good1_10()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004037B1) ----------------------------------------------------
int good2_8()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040389E) ----------------------------------------------------
int CWE367_TOC_TOU__access_13_good()
{
  good1_10();
  return good2_8();
}

//----- (00000000004038B8) ----------------------------------------------------
int CWE367_TOC_TOU__stat_18_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004039DA) ----------------------------------------------------
int good1_11()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000403AB9) ----------------------------------------------------
int CWE367_TOC_TOU__stat_18_good()
{
  return good1_11();
}

//----- (0000000000403AC9) ----------------------------------------------------
int CWE367_TOC_TOU__stat_11_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000403BFC) ----------------------------------------------------
int good1_12()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000403CF7) ----------------------------------------------------
int good2_9()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000403DE7) ----------------------------------------------------
int CWE367_TOC_TOU__stat_11_good()
{
  good1_12();
  return good2_9();
}

//----- (0000000000403E01) ----------------------------------------------------
int CWE367_TOC_TOU__stat_02_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000403F22) ----------------------------------------------------
int good1_13()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000404000) ----------------------------------------------------
int good2_10()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004040DE) ----------------------------------------------------
int CWE367_TOC_TOU__stat_02_good()
{
  good1_13();
  return good2_10();
}

//----- (00000000004040F8) ----------------------------------------------------
void CWE367_TOC_TOU__access_17_bad()
{
  char s[8]; // [rsp+0h] [rbp-70h]
  char v1; // [rsp+8h] [rbp-68h]
  int v2; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    memset(&v1, 0, 0x58uLL);
    v2 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    if ( write(fd, "Bad Sink...", 0xBuLL) == -1 )
      exit(1);
    if ( fd != -1 )
      close(fd);
  }
}

//----- (0000000000404210) ----------------------------------------------------
void good1_14()
{
  char s[8]; // [rsp+0h] [rbp-70h]
  char v1; // [rsp+8h] [rbp-68h]
  int v2; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+68h] [rbp-8h]
  int i; // [rsp+6Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    *(_QWORD *)s = 0LL;
    memset(&v1, 0, 0x58uLL);
    v2 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    if ( write(fd, "Good Sink...", 0xCuLL) == -1 )
      exit(1);
    if ( fd != -1 )
      close(fd);
  }
}

//----- (0000000000404308) ----------------------------------------------------
void CWE367_TOC_TOU__access_17_good()
{
  good1_14();
}

//----- (0000000000404318) ----------------------------------------------------
int CWE367_TOC_TOU__access_11_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000404428) ----------------------------------------------------
int good1_15()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsFalse() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000404523) ----------------------------------------------------
int good2_11()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalReturnsTrue();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000404613) ----------------------------------------------------
int CWE367_TOC_TOU__access_11_good()
{
  good1_15();
  return good2_11();
}

//----- (000000000040462D) ----------------------------------------------------
int CWE367_TOC_TOU__access_02_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040472B) ----------------------------------------------------
int good1_16()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000404809) ----------------------------------------------------
int good2_12()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004048E7) ----------------------------------------------------
int CWE367_TOC_TOU__access_02_good()
{
  good1_16();
  return good2_12();
}

//----- (0000000000404901) ----------------------------------------------------
int CWE367_TOC_TOU__stat_12_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char file[8]; // [rsp+70h] [rbp-A0h]
  char v6; // [rsp+78h] [rbp-98h]
  int v7; // [rsp+D0h] [rbp-40h]
  int v8; // [rsp+108h] [rbp-8h]
  int fd; // [rsp+10Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)file) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    *(_QWORD *)file = 0LL;
    memset(&v6, 0, 0x58uLL);
    v7 = 0;
    v8 = -1;
    if ( !fgets(file, 100, stdin) )
    {
      printLine("fgets() failed");
      file[0] = 0;
    }
    if ( file[0] )
      file[strlen(file) - 1] = 0;
    v8 = open(file, 2);
    if ( v8 == -1 )
      exit(1);
    v0 = write(v8, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( v8 != -1 )
      LODWORD(v0) = close(v8);
  }
  return v0;
}

//----- (0000000000404B2A) ----------------------------------------------------
int good1_17()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int v5; // [rsp+68h] [rbp-8h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    v5 = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    v5 = open(s, 2);
    if ( v5 == -1 )
      exit(1);
    v0 = write(v5, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( v5 != -1 )
      LODWORD(v0) = close(v5);
  }
  return v0;
}

//----- (0000000000404CF8) ----------------------------------------------------
int CWE367_TOC_TOU__stat_12_good()
{
  return good1_17();
}

//----- (0000000000404D08) ----------------------------------------------------
int CWE367_TOC_TOU__stat_07_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C104: using guessed type int staticFive_0;

//----- (0000000000404E38) ----------------------------------------------------
int good1_18()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( staticFive_0 == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 60C104: using guessed type int staticFive_0;

//----- (0000000000404F30) ----------------------------------------------------
int good2_13()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C104: using guessed type int staticFive_0;

//----- (000000000040501D) ----------------------------------------------------
int CWE367_TOC_TOU__stat_07_good()
{
  good1_18();
  return good2_13();
}

//----- (0000000000405037) ----------------------------------------------------
int CWE367_TOC_TOU__stat_10_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C10C: using guessed type int globalTrue;

//----- (0000000000405166) ----------------------------------------------------
int good1_19()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( globalFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C130: using guessed type int globalFalse;

//----- (000000000040525D) ----------------------------------------------------
int good2_14()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C10C: using guessed type int globalTrue;

//----- (0000000000405349) ----------------------------------------------------
int CWE367_TOC_TOU__stat_10_good()
{
  good1_19();
  return good2_14();
}

//----- (0000000000405363) ----------------------------------------------------
int CWE367_TOC_TOU__access_06_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040546F) ----------------------------------------------------
int good1_20()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405566) ----------------------------------------------------
int good2_15()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405652) ----------------------------------------------------
int CWE367_TOC_TOU__access_06_good()
{
  good1_20();
  return good2_15();
}

//----- (000000000040566C) ----------------------------------------------------
int CWE367_TOC_TOU__stat_16_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040578E) ----------------------------------------------------
int good1_21()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040586D) ----------------------------------------------------
int CWE367_TOC_TOU__stat_16_good()
{
  return good1_21();
}

//----- (000000000040587D) ----------------------------------------------------
int CWE367_TOC_TOU__stat_03_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040599E) ----------------------------------------------------
int good1_22()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405A7C) ----------------------------------------------------
int good2_16()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405B5A) ----------------------------------------------------
int CWE367_TOC_TOU__stat_03_good()
{
  good1_22();
  return good2_16();
}

//----- (0000000000405B74) ----------------------------------------------------
int CWE367_TOC_TOU__stat_15_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405C96) ----------------------------------------------------
int good1_23()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405D75) ----------------------------------------------------
int good2_17()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405E54) ----------------------------------------------------
int CWE367_TOC_TOU__stat_15_good()
{
  good1_23();
  return good2_17();
}

//----- (0000000000405E6E) ----------------------------------------------------
int CWE367_TOC_TOU__access_16_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000405F6D) ----------------------------------------------------
int good1_24()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040604C) ----------------------------------------------------
int CWE367_TOC_TOU__access_16_good()
{
  return good1_24();
}

//----- (000000000040605C) ----------------------------------------------------
int CWE367_TOC_TOU__stat_14_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (000000000040618C) ----------------------------------------------------
int good1_25()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  else
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (0000000000406284) ----------------------------------------------------
int good2_18()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalFive;
  if ( globalFive == 5 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C110: using guessed type int globalFive;

//----- (0000000000406371) ----------------------------------------------------
int CWE367_TOC_TOU__stat_14_good()
{
  good1_25();
  return good2_18();
}

//----- (000000000040638B) ----------------------------------------------------
int CWE367_TOC_TOU__access_10_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C10C: using guessed type int globalTrue;

//----- (0000000000406497) ----------------------------------------------------
int good1_26()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( globalFalse )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C130: using guessed type int globalFalse;

//----- (000000000040658E) ----------------------------------------------------
int good2_19()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = globalTrue;
  if ( globalTrue )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C10C: using guessed type int globalTrue;

//----- (000000000040667A) ----------------------------------------------------
int CWE367_TOC_TOU__access_10_good()
{
  good1_26();
  return good2_19();
}

//----- (0000000000406694) ----------------------------------------------------
int CWE367_TOC_TOU__stat_01_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( stat(s, (struct stat *)&v5) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004067B5) ----------------------------------------------------
int good1_27()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406893) ----------------------------------------------------
int CWE367_TOC_TOU__stat_01_good()
{
  return good1_27();
}

//----- (00000000004068A3) ----------------------------------------------------
int CWE367_TOC_TOU__access_03_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004069A1) ----------------------------------------------------
int good1_28()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406A7F) ----------------------------------------------------
int good2_20()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406B5D) ----------------------------------------------------
int CWE367_TOC_TOU__access_03_good()
{
  good1_28();
  return good2_20();
}

//----- (0000000000406B77) ----------------------------------------------------
int CWE367_TOC_TOU__access_15_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406C76) ----------------------------------------------------
int good1_29()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406D55) ----------------------------------------------------
int good2_21()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000406E34) ----------------------------------------------------
int CWE367_TOC_TOU__access_15_good()
{
  good1_29();
  return good2_21();
}

//----- (0000000000406E4E) ----------------------------------------------------
int CWE367_TOC_TOU__stat_09_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-110h]
  char v3; // [rsp+8h] [rbp-108h]
  int v4; // [rsp+60h] [rbp-B0h]
  char v5; // [rsp+70h] [rbp-A0h]
  int fd; // [rsp+10Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( stat(s, (struct stat *)&v5) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F0: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000406F7D) ----------------------------------------------------
int good1_30()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( GLOBAL_CONST_FALSE )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000407074) ----------------------------------------------------
int good2_22()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 4096F0: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000407160) ----------------------------------------------------
int CWE367_TOC_TOU__stat_09_good()
{
  good1_30();
  return good2_22();
}

//----- (000000000040717A) ----------------------------------------------------
int CWE367_TOC_TOU__access_05_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticTrue_0;
  if ( staticTrue_0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C108: using guessed type int staticTrue_0;

//----- (0000000000407286) ----------------------------------------------------
int good1_31()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( staticFalse_0 )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C128: using guessed type int staticFalse_0;

//----- (000000000040737D) ----------------------------------------------------
int good2_23()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticTrue_0;
  if ( staticTrue_0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}
// 60C108: using guessed type int staticTrue_0;

//----- (0000000000407469) ----------------------------------------------------
int CWE367_TOC_TOU__access_05_good()
{
  good1_31();
  return good2_23();
}

//----- (0000000000407483) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (000000000040748E) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (0000000000407499) ----------------------------------------------------
int CWE367_TOC_TOU__access_08_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue_0();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    if ( access(s, 2) == -1 )
      exit(1);
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Bad Sink...", 0xBuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (00000000004075A9) ----------------------------------------------------
int good1_32()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  if ( (unsigned int)staticReturnsFalse_0() )
  {
    LODWORD(v0) = printLine("Benign, fixed string");
  }
  else
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (00000000004076A4) ----------------------------------------------------
int good2_24()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  LODWORD(v0) = staticReturnsTrue_0();
  if ( (_DWORD)v0 )
  {
    *(_QWORD *)s = 0LL;
    memset(&v3, 0, 0x58uLL);
    v4 = 0;
    fd = -1;
    if ( !fgets(s, 100, stdin) )
    {
      printLine("fgets() failed");
      s[0] = 0;
    }
    if ( s[0] )
      s[strlen(s) - 1] = 0;
    fd = open(s, 2);
    if ( fd == -1 )
      exit(1);
    v0 = write(fd, "Good Sink...", 0xCuLL);
    if ( v0 == -1 )
      exit(1);
    if ( fd != -1 )
      LODWORD(v0) = close(fd);
  }
  return v0;
}

//----- (0000000000407794) ----------------------------------------------------
int CWE367_TOC_TOU__access_08_good()
{
  good1_32();
  return good2_24();
}

//----- (00000000004077AE) ----------------------------------------------------
int CWE367_TOC_TOU__access_01_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (00000000004078AC) ----------------------------------------------------
int good1_33()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (000000000040798A) ----------------------------------------------------
int CWE367_TOC_TOU__access_01_good()
{
  return good1_33();
}

//----- (000000000040799A) ----------------------------------------------------
int CWE367_TOC_TOU__access_18_bad()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  if ( access(s, 2) == -1 )
    exit(1);
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Bad Sink...", 0xBuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000407A99) ----------------------------------------------------
int good1_34()
{
  ssize_t v0; // rax
  char s[8]; // [rsp+0h] [rbp-70h]
  char v3; // [rsp+8h] [rbp-68h]
  int v4; // [rsp+60h] [rbp-10h]
  int fd; // [rsp+6Ch] [rbp-4h]

  *(_QWORD *)s = 0LL;
  memset(&v3, 0, 0x58uLL);
  v4 = 0;
  fd = -1;
  if ( !fgets(s, 100, stdin) )
  {
    printLine("fgets() failed");
    s[0] = 0;
  }
  if ( s[0] )
    s[strlen(s) - 1] = 0;
  fd = open(s, 2);
  if ( fd == -1 )
    exit(1);
  v0 = write(fd, "Good Sink...", 0xCuLL);
  if ( v0 == -1 )
    exit(1);
  if ( fd != -1 )
    LODWORD(v0) = close(fd);
  return v0;
}

//----- (0000000000407B78) ----------------------------------------------------
int CWE367_TOC_TOU__access_18_good()
{
  return good1_34();
}

//----- (0000000000407B88) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (0000000000407BA9) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (0000000000407BD4) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (0000000000407BF5) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (0000000000407C1A) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (0000000000407C40) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000407C64) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000407C88) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (0000000000407CAC) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (0000000000407CD0) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (0000000000407D00) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (0000000000407D21) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (0000000000407D45) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (0000000000407D70) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (0000000000407D9C) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (0000000000407DF3) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400B10: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407ECC) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400C00: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407F80) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (0000000000407F8B) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000407F96) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (0000000000407FAC) ----------------------------------------------------
void good1_35()
{
  ;
}

//----- (0000000000407FB2) ----------------------------------------------------
void good2_25()
{
  ;
}

//----- (0000000000407FB8) ----------------------------------------------------
void good3()
{
  ;
}

//----- (0000000000407FBE) ----------------------------------------------------
void good4()
{
  ;
}

//----- (0000000000407FC4) ----------------------------------------------------
void good5()
{
  ;
}

//----- (0000000000407FCA) ----------------------------------------------------
void good6()
{
  ;
}

//----- (0000000000407FD0) ----------------------------------------------------
void good7()
{
  ;
}

//----- (0000000000407FD6) ----------------------------------------------------
void good8()
{
  ;
}

//----- (0000000000407FDC) ----------------------------------------------------
void good9()
{
  ;
}

//----- (0000000000407FE2) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (0000000000407FE8) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (0000000000407FEE) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (0000000000407FF4) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (0000000000407FFA) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (0000000000408000) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (0000000000408006) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000040800C) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (0000000000408012) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (0000000000408018) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000040804B) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (00000000004080EF) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (0000000000408123) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (0000000000408142) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (00000000004081B7) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (00000000004081D1) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (00000000004081EB) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (0000000000408220) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 60BDD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 60BDD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (00000000004082A0) ----------------------------------------------------
int __fastcall stat(char *filename, struct stat *stat_buf)
{
  return __xstat(1, filename, stat_buf);
}

//----- (00000000004082B0) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 195 function(s) have been successfully decompiled
