/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_400BD0();
// int printf(const char *format, ...);
// void *memset(void *s, int c, size_t n);
// int close(int fd);
// int puts(const char *s);
// uint16_t htons(uint16_t hostshort);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void __noreturn exit(int status);
// void *malloc(size_t size);
// FILE *fopen(const char *filename, const char *modes);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// int listen(int fd, int n);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// int usleep(__useconds_t useconds);
// void __noreturn pthread_exit(void *retval);
// int atoi(const char *nptr);
// int socket(int domain, int type, int protocol);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int fclose(FILE *stream);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
// size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_11_bad();
int goodB2G1();
int goodB2G2();
int goodG2B1();
int goodG2B2();
int CWE400_Resource_Exhaustion__rand_fwrite_11_good();
int CWE400_Resource_Exhaustion__rand_fwrite_02_bad();
int goodB2G1_0();
int goodB2G2_0();
int goodG2B1_0();
int goodG2B2_0();
int CWE400_Resource_Exhaustion__rand_fwrite_02_good();
void CWE400_Resource_Exhaustion__rand_sleep_17_bad();
void goodB2G();
int goodG2B();
int CWE400_Resource_Exhaustion__rand_sleep_17_good();
int CWE400_Resource_Exhaustion__rand_sleep_11_bad();
int goodB2G1_1();
int goodB2G2_1();
int goodG2B1_1();
int goodG2B2_1();
int CWE400_Resource_Exhaustion__rand_sleep_11_good();
int CWE400_Resource_Exhaustion__rand_fwrite_10_bad();
int goodB2G1_2();
int goodB2G2_2();
int goodG2B1_2();
int goodG2B2_2();
int CWE400_Resource_Exhaustion__rand_fwrite_10_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_51_bad();
__int64 goodG2B_0();
__int64 goodB2G_0();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_51_good();
int CWE400_Resource_Exhaustion__rand_fwrite_68_bad();
int goodG2B_1();
int goodB2G_1();
int CWE400_Resource_Exhaustion__rand_fwrite_68_good();
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE400_Resource_Exhaustion__rand_sleep_08_bad();
int goodB2G1_3();
int goodB2G2_3();
int goodG2B1_3();
int goodG2B2_3();
int CWE400_Resource_Exhaustion__rand_sleep_08_good();
int CWE400_Resource_Exhaustion__rand_sleep_09_bad();
int goodB2G1_4();
int goodB2G2_4();
int goodG2B1_4();
int goodG2B2_4();
int CWE400_Resource_Exhaustion__rand_sleep_09_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_goodB2GSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_sleep_05_bad();
int goodB2G1_5();
int goodB2G2_5();
int goodG2B1_5();
int goodG2B2_5();
int CWE400_Resource_Exhaustion__rand_sleep_05_good();
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_badSource();
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_goodG2BSource();
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_goodB2GSource();
int CWE400_Resource_Exhaustion__rand_sleep_10_bad();
int goodB2G1_6();
int goodB2G2_6();
int goodG2B1_6();
int goodG2B2_6();
int CWE400_Resource_Exhaustion__rand_sleep_10_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_goodB2GSink(int a1);
int __fastcall badSink(__useconds_t a1);
__int64 CWE400_Resource_Exhaustion__rand_sleep_44_bad();
int __fastcall goodG2BSink(__useconds_t a1);
int goodG2B_2();
int __fastcall goodB2GSink(signed int a1);
__int64 goodB2G_2();
__int64 CWE400_Resource_Exhaustion__rand_sleep_44_good();
__int64 badSink_0();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_45_bad();
__int64 goodG2BSink_0();
__int64 goodG2B_3();
__int64 goodB2GSink_0();
__int64 goodB2G_3();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_45_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_goodB2GSink(signed int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_06_bad();
__int64 goodB2G1_7();
__int64 goodB2G2_7();
__int64 goodG2B1_7();
__int64 goodG2B2_7();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_06_good();
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_65_bad();
int goodG2B_4();
__int64 goodB2G_4();
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_65_good();
int CWE400_Resource_Exhaustion__rand_sleep_01_bad();
int goodG2B_5();
int goodB2G_5();
int CWE400_Resource_Exhaustion__rand_sleep_01_good();
int CWE400_Resource_Exhaustion__rand_fwrite_61_bad();
int goodG2B_6();
int goodB2G_6();
int CWE400_Resource_Exhaustion__rand_fwrite_61_good();
int CWE400_Resource_Exhaustion__rand_fwrite_07_bad();
int goodB2G1_8();
int goodB2G2_8();
int goodG2B1_8();
int goodG2B2_8();
int CWE400_Resource_Exhaustion__rand_fwrite_07_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_15_bad();
int goodB2G1_9();
int goodB2G2_9();
int goodG2B1_9();
int goodG2B2_9();
int CWE400_Resource_Exhaustion__listen_socket_sleep_15_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_goodB2GSink(signed int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_goodB2GSink(int a1);
__int64 __fastcall badSource(unsigned int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_42_bad();
__int64 goodG2BSource();
int goodG2B_7();
__int64 __fastcall goodB2GSource(unsigned int a1);
int goodB2G_7();
int CWE400_Resource_Exhaustion__listen_socket_sleep_42_good();
int CWE400_Resource_Exhaustion__rand_sleep_61_bad();
int goodG2B_8();
int goodB2G_8();
int CWE400_Resource_Exhaustion__rand_sleep_61_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_badSink();
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodG2BSink();
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodB2GSink();
int CWE400_Resource_Exhaustion__rand_sleep_02_bad();
int goodB2G1_10();
int goodB2G2_10();
int goodG2B1_10();
int goodG2B2_10();
int CWE400_Resource_Exhaustion__rand_sleep_02_good();
int CWE400_Resource_Exhaustion__rand_sleep_07_bad();
int goodB2G1_11();
int goodB2G2_11();
int goodG2B1_11();
int goodG2B2_11();
int CWE400_Resource_Exhaustion__rand_sleep_07_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(int *a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_goodG2BSink(int *a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_goodB2GSink(int *a1);
int CWE400_Resource_Exhaustion__rand_sleep_67_bad();
int goodG2B_9();
int goodB2G_9();
int CWE400_Resource_Exhaustion__rand_sleep_67_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_05_bad();
int goodB2G1_12();
int goodB2G2_12();
int goodG2B1_12();
int goodG2B2_12();
int CWE400_Resource_Exhaustion__listen_socket_sleep_05_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_32_bad();
__int64 goodG2B_10();
__int64 goodB2G_10();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_32_good();
int __fastcall badSink_1(__useconds_t a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_41_bad();
int __fastcall goodG2BSink_1(__useconds_t a1);
int goodG2B_11();
int __fastcall goodB2GSink_1(signed int a1);
int goodB2G_11();
int CWE400_Resource_Exhaustion__listen_socket_sleep_41_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_goodB2GSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodB2GSink(signed int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_bad();
int goodG2B_12();
int goodB2G_12();
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_01_bad();
int goodG2B_13();
int goodB2G_13();
int CWE400_Resource_Exhaustion__rand_fwrite_01_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_64_bad();
__int64 goodG2B_14();
__int64 goodB2G_14();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_64_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_badSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodG2BSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodB2GSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodB2GSink(signed int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_04_bad();
__int64 goodB2G1_13();
__int64 goodB2G2_13();
__int64 goodG2B1_13();
__int64 goodG2B2_13();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_04_good();
int CWE400_Resource_Exhaustion__rand_fwrite_54_bad();
int goodG2B_15();
void goodB2G_15();
void CWE400_Resource_Exhaustion__rand_fwrite_54_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_53_bad();
int goodG2B_16();
int goodB2G_16();
int CWE400_Resource_Exhaustion__listen_socket_sleep_53_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE400_Resource_Exhaustion__listen_socket_sleep_08_bad();
int goodB2G1_14();
int goodB2G2_14();
int goodG2B1_14();
int goodG2B2_14();
int CWE400_Resource_Exhaustion__listen_socket_sleep_08_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_67_bad();
__int64 goodG2B_17();
__int64 goodB2G_17();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_67_good();
int CWE400_Resource_Exhaustion__rand_sleep_54_bad();
int goodG2B_18();
int goodB2G_18();
int CWE400_Resource_Exhaustion__rand_sleep_54_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodB2GSink(signed int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_09_bad();
int goodB2G1_15();
__int64 goodB2G2_15();
__int64 goodG2B1_15();
__int64 goodG2B2_15();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_09_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Sink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Sink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_goodB2GSink(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_14_bad();
int goodB2G1_16();
__int64 goodB2G2_16();
__int64 goodG2B1_16();
__int64 goodG2B2_16();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_14_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_11_bad();
int goodB2G1_17();
int goodB2G2_17();
int goodG2B1_17();
int goodG2B2_17();
int CWE400_Resource_Exhaustion__listen_socket_sleep_11_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_07_bad();
int goodB2G1_18();
int goodB2G2_18();
int goodG2B1_18();
int goodG2B2_18();
int CWE400_Resource_Exhaustion__listen_socket_sleep_07_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_badSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_goodG2BSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink(__int64 a1);
int CWE400_Resource_Exhaustion__rand_fwrite_04_bad();
int goodB2G1_19();
int goodB2G2_19();
int goodG2B1_19();
int goodG2B2_19();
int CWE400_Resource_Exhaustion__rand_fwrite_04_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_12_bad();
__int64 goodB2G_19();
__int64 goodG2B_19();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_12_good();
int CWE400_Resource_Exhaustion__rand_sleep_53_bad();
int goodG2B_20();
int goodB2G_20();
int CWE400_Resource_Exhaustion__rand_sleep_53_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_66_bad();
int goodG2B_21();
int goodB2G_21();
int CWE400_Resource_Exhaustion__rand_fwrite_66_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_badSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodG2BSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodB2GSink(signed int *a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_31_bad();
__int64 goodG2B_22();
__int64 goodB2G_22();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_31_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_sleep_66_bad();
int goodG2B_23();
int goodB2G_23();
int CWE400_Resource_Exhaustion__rand_sleep_66_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_14_bad();
int goodB2G1_20();
int goodB2G2_20();
int goodG2B1_20();
int goodG2B2_20();
int CWE400_Resource_Exhaustion__listen_socket_sleep_14_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_32_bad();
int goodG2B_24();
int goodB2G_24();
int CWE400_Resource_Exhaustion__listen_socket_sleep_32_good();
int CWE400_Resource_Exhaustion__rand_sleep_63_bad();
int goodG2B_25();
int goodB2G_25();
int CWE400_Resource_Exhaustion__rand_sleep_63_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_11_bad();
int goodB2G1_21();
__int64 goodB2G2_21();
__int64 goodG2B1_21();
__int64 goodG2B2_21();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_11_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_02_bad();
__int64 goodB2G1_22();
__int64 goodB2G2_22();
__int64 goodG2B1_22();
__int64 goodG2B2_22();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_02_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Sink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Sink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_64_bad();
int goodG2B_26();
int goodB2G_26();
int CWE400_Resource_Exhaustion__listen_socket_sleep_64_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_badSource();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_goodG2BSource();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_10_bad();
int goodB2G1_23();
__int64 goodB2G2_23();
__int64 goodG2B1_23();
__int64 goodG2B2_23();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_10_good();
int CWE400_Resource_Exhaustion__rand_fwrite_52_bad();
int goodG2B_27();
void goodB2G_27();
void CWE400_Resource_Exhaustion__rand_fwrite_52_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_04_bad();
int goodB2G1_24();
int goodB2G2_24();
int goodG2B1_24();
int goodG2B2_24();
int CWE400_Resource_Exhaustion__listen_socket_sleep_04_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_01_bad();
__int64 goodG2B_28();
__int64 goodB2G_28();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_01_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_sleep_52_bad();
int goodG2B_29();
int goodB2G_29();
int CWE400_Resource_Exhaustion__rand_sleep_52_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_67_bad();
int goodG2B_30();
int goodB2G_30();
int CWE400_Resource_Exhaustion__listen_socket_sleep_67_good();
int CWE400_Resource_Exhaustion__rand_sleep_16_bad();
int goodB2G_31();
int goodG2B_31();
int CWE400_Resource_Exhaustion__rand_sleep_16_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61_bad();
__int64 goodG2B_32();
__int64 goodB2G_32();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Sink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Sink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BSink(__useconds_t a1);
int CWE400_Resource_Exhaustion__rand_fwrite_51_bad();
int goodG2B_33();
void goodB2G_33();
void CWE400_Resource_Exhaustion__rand_fwrite_51_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_goodB2GSink(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_07_bad();
int goodB2G1_25();
__int64 goodB2G2_25();
__int64 goodG2B1_25();
__int64 goodG2B2_25();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_07_good();
void CWE400_Resource_Exhaustion__listen_socket_sleep_17_bad();
void goodB2G_34();
int goodG2B_34();
int CWE400_Resource_Exhaustion__listen_socket_sleep_17_good();
int CWE400_Resource_Exhaustion__rand_sleep_51_bad();
int goodG2B_35();
int goodB2G_35();
int CWE400_Resource_Exhaustion__rand_sleep_51_good();
int badSink_2();
int CWE400_Resource_Exhaustion__rand_fwrite_45_bad();
int goodG2BSink_2();
int goodG2B_36();
int goodB2GSink_2();
int goodB2G_36();
int CWE400_Resource_Exhaustion__rand_fwrite_45_good();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_badSource();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_goodG2BSource();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_goodB2GSource();
int CWE400_Resource_Exhaustion__rand_fwrite_13_bad();
int goodB2G1_26();
int goodB2G2_26();
int goodG2B1_26();
int goodG2B2_26();
int CWE400_Resource_Exhaustion__rand_fwrite_13_good();
int CWE400_Resource_Exhaustion__rand_fwrite_06_bad();
int goodB2G1_27();
int goodB2G2_27();
int goodG2B1_27();
int goodG2B2_27();
int CWE400_Resource_Exhaustion__rand_fwrite_06_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_bad();
int goodB2G1_28();
int goodB2G2_28();
int goodG2B_37();
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_good();
int badSink_3();
int CWE400_Resource_Exhaustion__rand_sleep_45_bad();
int goodG2BSink_3();
int goodG2B_38();
int goodB2GSink_3();
int goodB2G_37();
int CWE400_Resource_Exhaustion__rand_sleep_45_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_sleep_06_bad();
int goodB2G1_29();
int goodB2G2_29();
int goodG2B1_28();
int goodG2B2_28();
int CWE400_Resource_Exhaustion__rand_sleep_06_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_66_bad();
int goodG2B_39();
int goodB2G_38();
int CWE400_Resource_Exhaustion__listen_socket_sleep_66_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_badSink(int *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_goodG2BSink(int *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_goodB2GSink(int *a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_13_bad();
int goodB2G1_30();
int goodB2G2_30();
int goodG2B1_29();
int goodG2B2_29();
int CWE400_Resource_Exhaustion__listen_socket_sleep_13_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_34_bad();
__int64 goodG2B_40();
__int64 goodB2G_39();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_34_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodG2BSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodB2GSink(signed int *a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_54_bad();
__int64 goodG2B_41();
__int64 goodB2G_40();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_54_good();
int CWE400_Resource_Exhaustion__rand_fwrite_14_bad();
int goodB2G1_31();
int goodB2G2_31();
int goodG2B1_30();
int goodG2B2_30();
int CWE400_Resource_Exhaustion__rand_fwrite_14_good();
int CWE400_Resource_Exhaustion__rand_fwrite_32_bad();
int goodG2B_42();
int goodB2G_41();
int CWE400_Resource_Exhaustion__rand_fwrite_32_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_badSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_goodG2BSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(signed int *a1);
int CWE400_Resource_Exhaustion__rand_sleep_14_bad();
int goodB2G1_32();
int goodB2G2_32();
int goodG2B1_31();
int goodG2B2_31();
int CWE400_Resource_Exhaustion__rand_sleep_14_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_goodG2BSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_sleep_32_bad();
int goodG2B_43();
int goodB2G_42();
int CWE400_Resource_Exhaustion__rand_sleep_32_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_goodB2GSink(int a1);
int __fastcall badSink_4(__useconds_t a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_21_bad();
int __fastcall goodB2G1Sink(signed int a1);
int goodB2G1_33();
int __fastcall goodB2G2Sink(signed int a1);
int goodB2G2_33();
int __fastcall goodG2BSink_4(__useconds_t a1);
int goodG2B_44();
int CWE400_Resource_Exhaustion__listen_socket_sleep_21_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_03_bad();
int goodB2G1_34();
int goodB2G2_34();
int goodG2B1_32();
int goodG2B2_32();
int CWE400_Resource_Exhaustion__listen_socket_sleep_03_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_31_bad();
int goodG2B_45();
int goodB2G_43();
int CWE400_Resource_Exhaustion__listen_socket_sleep_31_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_63_bad();
int goodG2B_46();
int goodB2G_44();
int CWE400_Resource_Exhaustion__listen_socket_sleep_63_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_18_bad();
int goodB2G_45();
int goodG2B_47();
int CWE400_Resource_Exhaustion__listen_socket_sleep_18_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_31_bad();
int goodG2B_48();
int goodB2G_46();
int CWE400_Resource_Exhaustion__rand_fwrite_31_good();
int CWE400_Resource_Exhaustion__rand_sleep_64_bad();
int goodG2B_49();
int goodB2G_47();
int CWE400_Resource_Exhaustion__rand_sleep_64_good();
int CWE400_Resource_Exhaustion__rand_sleep_04_bad();
int goodB2G1_35();
int goodB2G2_35();
int goodG2B1_33();
int goodG2B2_33();
int CWE400_Resource_Exhaustion__rand_sleep_04_good();
int CWE400_Resource_Exhaustion__rand_sleep_31_bad();
int goodG2B_50();
int goodB2G_48();
int CWE400_Resource_Exhaustion__rand_sleep_31_good();
int CWE400_Resource_Exhaustion__rand_fwrite_67_bad();
int goodG2B_51();
int goodB2G_49();
int CWE400_Resource_Exhaustion__rand_fwrite_67_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_12_bad();
int goodB2G_50();
int goodG2B_52();
int CWE400_Resource_Exhaustion__listen_socket_sleep_12_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_65_bad();
__int64 goodG2B_53();
__int64 goodB2G_51();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_65_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_15_bad();
__int64 goodB2G1_36();
__int64 goodB2G2_36();
__int64 goodG2B1_34();
__int64 goodG2B2_34();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_15_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_03_bad();
__int64 goodB2G1_37();
__int64 goodB2G2_37();
__int64 goodG2B1_35();
__int64 goodG2B2_35();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_03_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Sink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Sink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BSink(int a1);
__int64 badSource_0();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_42_bad();
__int64 goodG2BSource_0();
__int64 goodG2B_54();
__int64 goodB2GSource_0();
__int64 goodB2G_52();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_42_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_goodB2GSink(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_badSink();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_goodG2BSink();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_goodB2GSink();
int CWE400_Resource_Exhaustion__rand_fwrite_64_bad();
int goodG2B_55();
int goodB2G_53();
int CWE400_Resource_Exhaustion__rand_fwrite_64_good();
int __fastcall badSink_5(__useconds_t a1);
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_44_bad();
int __fastcall goodG2BSink_5(__useconds_t a1);
int goodG2B_56();
int __fastcall goodB2GSink_4(signed int a1);
__int64 goodB2G_54();
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_44_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_badSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_goodG2BSink(__useconds_t *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_goodB2GSink(signed int *a1);
void CWE400_Resource_Exhaustion__rand_for_loop_17_bad();
void goodB2G_55();
__int64 goodG2B_57();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_17_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_02_bad();
int goodB2G1_38();
int goodB2G2_38();
int goodG2B1_36();
int goodG2B2_36();
int CWE400_Resource_Exhaustion__listen_socket_sleep_02_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_22_bad();
int goodB2G1_39();
__int64 goodB2G2_39();
__int64 goodG2B_58();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_22_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_05_bad();
int goodB2G1_40();
__int64 goodB2G2_40();
__int64 goodG2B1_37();
__int64 goodG2B2_37();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_05_good();
__int64 __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_61b_badSource(unsigned int a1);
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodG2BSource();
__int64 __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodB2GSource(unsigned int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_10_bad();
int goodB2G1_41();
int goodB2G2_41();
int goodG2B1_38();
int goodG2B2_38();
int CWE400_Resource_Exhaustion__listen_socket_sleep_10_good();
__int64 __fastcall badSink_6(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_41_bad();
__int64 __fastcall goodG2BSink_6(int a1);
__int64 goodG2B_59();
__int64 __fastcall goodB2GSink_5(int a1);
__int64 goodB2G_56();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_41_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_sleep_22_bad();
int goodB2G1_42();
int goodB2G2_42();
int goodG2B_60();
int CWE400_Resource_Exhaustion__rand_sleep_22_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68_bad();
__int64 goodG2B_61();
__int64 goodB2G_57();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_01_bad();
int goodG2B_62();
int goodB2G_58();
int CWE400_Resource_Exhaustion__listen_socket_sleep_01_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodB2GSink(signed int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_badSink(__int64 a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_goodG2BSink(__int64 a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_goodB2GSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_goodB2GSink(signed int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(int *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_goodG2BSink(int *a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_goodB2GSink(int *a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_61_bad();
int goodG2B_63();
int goodB2G_59();
int CWE400_Resource_Exhaustion__listen_socket_sleep_61_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_53_bad();
__int64 goodG2B_64();
__int64 goodB2G_60();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_53_good();
int CWE400_Resource_Exhaustion__rand_sleep_13_bad();
int goodB2G1_43();
int goodB2G2_43();
int goodG2B1_39();
int goodG2B2_39();
int CWE400_Resource_Exhaustion__rand_sleep_13_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_09_bad();
int goodB2G1_44();
int goodB2G2_44();
int goodG2B1_40();
int goodG2B2_40();
int CWE400_Resource_Exhaustion__listen_socket_sleep_09_good();
__int64 __fastcall badSink_7(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_44_bad();
__int64 __fastcall goodG2BSink_7(int a1);
__int64 goodG2B_65();
__int64 __fastcall goodB2GSink_6(int a1);
__int64 goodB2G_61();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_44_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_goodB2GSink(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_66_bad();
__int64 goodG2B_66();
__int64 goodB2G_62();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_66_good();
int __fastcall badSink_8(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_21_bad();
int __fastcall goodB2G1Sink_0(int a1);
int goodB2G1_45();
int __fastcall goodB2G2Sink_0(int a1);
int goodB2G2_45();
int __fastcall goodG2BSink_8(int a1);
int goodG2B_67();
int CWE400_Resource_Exhaustion__rand_fwrite_21_good();
int CWE400_Resource_Exhaustion__rand_fwrite_03_bad();
int goodB2G1_46();
int goodB2G2_46();
int goodG2B1_41();
int goodG2B2_41();
int CWE400_Resource_Exhaustion__rand_fwrite_03_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_34_bad();
int goodG2B_68();
int goodB2G_63();
int CWE400_Resource_Exhaustion__listen_socket_sleep_34_good();
int CWE400_Resource_Exhaustion__rand_fwrite_63_bad();
int goodG2B_69();
int goodB2G_64();
int CWE400_Resource_Exhaustion__rand_fwrite_63_good();
int CWE400_Resource_Exhaustion__rand_fwrite_18_bad();
int goodB2G_65();
int goodG2B_70();
int CWE400_Resource_Exhaustion__rand_fwrite_18_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_goodB2GSink(int a1);
int __fastcall badSink_9(__useconds_t a1);
int CWE400_Resource_Exhaustion__rand_sleep_21_bad();
int __fastcall goodB2G1Sink_1(signed int a1);
int goodB2G1_47();
int __fastcall goodB2G2Sink_1(signed int a1);
int goodB2G2_47();
int __fastcall goodG2BSink_9(__useconds_t a1);
int goodG2B_71();
int CWE400_Resource_Exhaustion__rand_sleep_21_good();
int CWE400_Resource_Exhaustion__rand_sleep_03_bad();
int goodB2G1_48();
int goodB2G2_48();
int goodG2B1_42();
int goodG2B2_42();
int CWE400_Resource_Exhaustion__rand_sleep_03_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodB2GSink(signed int a1);
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE400_Resource_Exhaustion__rand_fwrite_08_bad();
int goodB2G1_49();
int goodB2G2_49();
int goodG2B1_43();
int goodG2B2_43();
int CWE400_Resource_Exhaustion__rand_fwrite_08_good();
int CWE400_Resource_Exhaustion__rand_sleep_18_bad();
int goodB2G_66();
int goodG2B_72();
int CWE400_Resource_Exhaustion__rand_sleep_18_good();
int CWE400_Resource_Exhaustion__rand_fwrite_22_bad();
int goodB2G1_50();
int goodB2G2_50();
int goodG2B_73();
int CWE400_Resource_Exhaustion__rand_fwrite_22_good();
__int64 staticReturnsTrue_2();
__int64 staticReturnsFalse_2();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_08_bad();
int goodB2G1_51();
__int64 goodB2G2_51();
__int64 goodG2B1_44();
__int64 goodG2B2_44();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_08_good();
int CWE400_Resource_Exhaustion__rand_fwrite_12_bad();
int goodB2G_67();
int goodG2B_74();
int CWE400_Resource_Exhaustion__rand_fwrite_12_good();
int __fastcall badSink_10(int a1);
__int64 CWE400_Resource_Exhaustion__rand_fwrite_44_bad();
int __fastcall goodG2BSink_10(int a1);
int goodG2B_75();
void __fastcall goodB2GSink_7(int a1);
__int64 goodB2G_68();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_44_good();
int CWE400_Resource_Exhaustion__rand_fwrite_09_bad();
int goodB2G1_52();
int goodB2G2_52();
int goodG2B1_45();
int goodG2B2_45();
int CWE400_Resource_Exhaustion__rand_fwrite_09_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_52_bad();
__int64 goodG2B_76();
__int64 goodB2G_69();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_52_good();
int CWE400_Resource_Exhaustion__rand_sleep_12_bad();
int goodB2G_70();
int goodG2B_77();
int CWE400_Resource_Exhaustion__rand_sleep_12_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_badSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_goodG2BSink(int a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__listen_socket_sleep_54_bad();
int goodG2B_78();
int goodB2G_71();
int CWE400_Resource_Exhaustion__listen_socket_sleep_54_good();
void CWE400_Resource_Exhaustion__rand_fwrite_17_bad();
void goodB2G_72();
void goodG2B_79();
void CWE400_Resource_Exhaustion__rand_fwrite_17_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_16_bad();
__int64 goodB2G_73();
__int64 goodG2B_80();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_16_good();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_65_bad();
int goodG2B_81();
__int64 goodB2G_74();
__int64 CWE400_Resource_Exhaustion__rand_fwrite_65_good();
int CWE400_Resource_Exhaustion__rand_fwrite_15_bad();
int goodB2G1_53();
int goodB2G2_53();
int goodG2B1_46();
int goodG2B2_46();
int CWE400_Resource_Exhaustion__rand_fwrite_15_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_52_bad();
int goodG2B_82();
int goodB2G_75();
int CWE400_Resource_Exhaustion__listen_socket_sleep_52_good();
__int64 badSource_1();
int CWE400_Resource_Exhaustion__rand_fwrite_42_bad();
__int64 goodG2BSource_1();
int goodG2B_83();
__int64 goodB2GSource_1();
int goodB2G_76();
int CWE400_Resource_Exhaustion__rand_fwrite_42_good();
__int64 CWE400_Resource_Exhaustion__rand_sleep_65_bad();
int goodG2B_84();
__int64 goodB2G_77();
__int64 CWE400_Resource_Exhaustion__rand_sleep_65_good();
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_sleep_15_bad();
int goodB2G1_54();
int goodB2G2_54();
int goodG2B1_47();
int goodG2B2_47();
int CWE400_Resource_Exhaustion__rand_sleep_15_good();
int __fastcall badSink_11(__useconds_t a1);
int CWE400_Resource_Exhaustion__rand_sleep_41_bad();
int __fastcall goodG2BSink_11(__useconds_t a1);
int goodG2B_85();
int __fastcall goodB2GSink_8(signed int a1);
int goodB2G_78();
int CWE400_Resource_Exhaustion__rand_sleep_41_good();
int badSink_12();
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_bad();
int goodG2BSink_12();
int goodG2B_86();
int goodB2GSink_9();
int goodB2G_79();
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_16_bad();
int goodB2G_80();
int goodG2B_87();
int CWE400_Resource_Exhaustion__listen_socket_sleep_16_good();
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_68b_badSink();
int CWE400_Resource_Exhaustion__rand_fwrite_68b_goodG2BSink();
int CWE400_Resource_Exhaustion__rand_fwrite_68b_goodB2GSink();
__int64 badSource_2();
int CWE400_Resource_Exhaustion__rand_sleep_42_bad();
__int64 goodG2BSource_2();
int goodG2B_88();
__int64 goodB2GSource_2();
int goodB2G_81();
int CWE400_Resource_Exhaustion__rand_sleep_42_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_13_bad();
int goodB2G1_55();
__int64 goodB2G2_55();
__int64 goodG2B1_48();
__int64 goodG2B2_48();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_13_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_63_bad();
__int64 goodG2B_89();
__int64 goodB2G_82();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_63_good();
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(int *a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_goodG2BSink(int *a1);
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_goodB2GSink(int *a1);
int CWE400_Resource_Exhaustion__rand_sleep_68b_badSink();
int CWE400_Resource_Exhaustion__rand_sleep_68b_goodG2BSink();
int CWE400_Resource_Exhaustion__rand_sleep_68b_goodB2GSink();
int CWE400_Resource_Exhaustion__rand_fwrite_05_bad();
int goodB2G1_56();
int goodB2G2_56();
int goodG2B1_49();
int goodG2B2_49();
int CWE400_Resource_Exhaustion__rand_fwrite_05_good();
int __fastcall badSink_13(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_41_bad();
int __fastcall goodG2BSink_13(int a1);
int goodG2B_90();
void __fastcall goodB2GSink_10(int a1);
void goodB2G_83();
int CWE400_Resource_Exhaustion__rand_fwrite_41_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_51_bad();
int goodG2B_91();
int goodB2G_84();
int CWE400_Resource_Exhaustion__listen_socket_sleep_51_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_goodB2GSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_badSink(int a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_goodG2BSink(int a1);
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_goodB2GSink(int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_53_bad();
int goodG2B_92();
void goodB2G_85();
void CWE400_Resource_Exhaustion__rand_fwrite_53_good();
int CWE400_Resource_Exhaustion__rand_fwrite_34_bad();
int goodG2B_93();
int goodB2G_86();
int CWE400_Resource_Exhaustion__rand_fwrite_34_good();
__int64 __fastcall badSink_14(int a1);
__int64 CWE400_Resource_Exhaustion__rand_for_loop_21_bad();
int __fastcall goodB2G1Sink_2(int a1);
int goodB2G1_57();
__int64 __fastcall goodB2G2Sink_2(int a1);
__int64 goodB2G2_57();
__int64 __fastcall goodG2BSink_14(int a1);
__int64 goodG2B_94();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_21_good();
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_badSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_goodG2BSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_goodB2GSink(__int64 a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_badSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_goodG2BSink(__useconds_t a1);
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_goodB2GSink(signed int a1);
int CWE400_Resource_Exhaustion__rand_fwrite_16_bad();
int goodB2G_87();
int goodG2B_95();
int CWE400_Resource_Exhaustion__rand_fwrite_16_good();
int CWE400_Resource_Exhaustion__listen_socket_sleep_06_bad();
int goodB2G1_58();
int goodB2G2_58();
int goodG2B1_50();
int goodG2B2_50();
int CWE400_Resource_Exhaustion__listen_socket_sleep_06_good();
int CWE400_Resource_Exhaustion__rand_sleep_68_bad();
int goodG2B_96();
int goodB2G_88();
int CWE400_Resource_Exhaustion__rand_sleep_68_good();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_18_bad();
__int64 goodB2G_89();
__int64 goodG2B_97();
__int64 CWE400_Resource_Exhaustion__rand_for_loop_18_good();
int CWE400_Resource_Exhaustion__rand_sleep_34_bad();
int goodG2B_98();
int goodB2G_90();
int CWE400_Resource_Exhaustion__rand_sleep_34_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1();
void good2();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_633010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue_0 = 1; // weak
int staticFive_1 = 5; // weak
int staticFive_2 = 5; // weak
int staticTrue_1 = 1; // weak
int staticTrue_2 = 1; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
char completed_6355; // weak
int staticFalse; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_45_badData; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData; // weak
int staticFalse_0; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_45_badData; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_45_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Global; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal; // weak
int CWE400_Resource_Exhaustion__rand_sleep_45_badData; // weak
int CWE400_Resource_Exhaustion__rand_sleep_45_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData; // weak
int badStatic; // weak
int goodB2G1Static; // weak
int goodB2G2Static; // weak
int goodG2BStatic; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal; // weak
int staticFalse_1; // weak
int CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal; // weak
int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Global; // weak
int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global; // weak
int CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal; // weak
int badStatic_0; // weak
int goodB2G1Static_0; // weak
int goodB2G2Static_0; // weak
int goodG2BStatic_0; // weak
int badStatic_1; // weak
int goodB2G1Static_1; // weak
int goodB2G2Static_1; // weak
int goodG2BStatic_1; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_badData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodG2BData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData; // weak
int staticFalse_2; // weak
int badStatic_2; // weak
int goodB2G1Static_2; // weak
int goodB2G2Static_2; // weak
int goodG2BStatic_2; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_68_badData; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_68_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodG2BData; // weak
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_badData; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_68_badData; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_68_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData; // weak
int CWE400_Resource_Exhaustion__rand_sleep_68_goodG2BData; // weak
int CWE400_Resource_Exhaustion__rand_sleep_68_badData; // weak
int CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (0000000000400BB0) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400E00: using guessed type __int64 _gmon_start__(void);

//----- (0000000000400BD0) ----------------------------------------------------
__int64 sub_400BD0()
{
  return qword_633010();
}
// 633010: using guessed type __int64 (*qword_633010)(void);

//----- (0000000000400E10) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400E16: positive sp value 8 has been found

//----- (0000000000400E40) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6500703LL - (_QWORD)&completed_6355;
  if ( (unsigned __int64)(6500703LL - (_QWORD)&completed_6355) > 0xE )
    result = 0LL;
  return result;
}
// 633158: using guessed type char completed_6355;

//----- (0000000000400E70) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400EB0) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 633158: using guessed type char completed_6355;

//----- (0000000000400ED0) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400ED0: could not find valid save-restore pair for rbp

//----- (0000000000400EFD) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_05_good();");
  CWE400_Resource_Exhaustion__rand_sleep_05_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_41_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_41_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_16_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_16_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_45_good();");
  CWE400_Resource_Exhaustion__rand_sleep_45_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_41_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_41_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_64_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_64_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_65_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_65_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_02_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_02_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_04_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_04_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_03_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_03_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_66_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_66_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_04_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_04_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_45_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_45_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_51_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_51_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_21_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_21_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_03_good();");
  CWE400_Resource_Exhaustion__rand_sleep_03_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_34_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_34_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_66_good();");
  CWE400_Resource_Exhaustion__rand_sleep_66_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_16_good();");
  CWE400_Resource_Exhaustion__rand_sleep_16_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_21_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_21_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_12_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_12_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_07_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_07_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_18_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_18_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_68_good();");
  CWE400_Resource_Exhaustion__rand_sleep_68_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_05_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_05_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_12_good();");
  CWE400_Resource_Exhaustion__rand_sleep_12_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_14_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_14_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_09_good();");
  CWE400_Resource_Exhaustion__rand_sleep_09_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_22_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_22_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_34_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_34_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_42_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_42_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_03_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_03_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_08_good();");
  CWE400_Resource_Exhaustion__rand_sleep_08_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_63_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_63_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_53_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_53_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_61_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_61_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_61_good();");
  CWE400_Resource_Exhaustion__rand_sleep_61_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_01_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_01_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_51_good();");
  CWE400_Resource_Exhaustion__rand_sleep_51_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_09_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_09_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_21_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_21_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_44_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_44_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_03_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_03_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_02_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_02_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_51_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_51_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_11_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_11_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_12_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_12_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_04_good();");
  CWE400_Resource_Exhaustion__rand_sleep_04_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_15_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_15_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_10_good();");
  CWE400_Resource_Exhaustion__rand_sleep_10_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_07_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_07_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_07_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_07_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_14_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_14_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_06_good();");
  CWE400_Resource_Exhaustion__rand_sleep_06_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_15_good();");
  CWE400_Resource_Exhaustion__rand_sleep_15_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_54_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_54_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_53_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_53_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_52_good();");
  CWE400_Resource_Exhaustion__rand_sleep_52_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_13_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_13_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_07_good();");
  CWE400_Resource_Exhaustion__rand_sleep_07_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_13_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_13_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_22_good();");
  CWE400_Resource_Exhaustion__rand_sleep_22_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_15_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_15_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_10_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_10_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_54_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_54_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_61_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_61_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_67_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_67_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_42_good();");
  CWE400_Resource_Exhaustion__rand_sleep_42_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_17_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_17_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_65_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_65_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_34_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_34_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_63_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_63_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_53_good();");
  CWE400_Resource_Exhaustion__rand_sleep_53_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_54_good();");
  CWE400_Resource_Exhaustion__rand_sleep_54_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_42_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_42_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_32_good();");
  CWE400_Resource_Exhaustion__rand_sleep_32_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_11_good();");
  CWE400_Resource_Exhaustion__rand_sleep_11_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_02_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_02_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_22_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_22_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_22_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_68_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_68_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_05_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_05_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_16_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_16_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_66_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_66_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_42_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_42_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_65_good();");
  CWE400_Resource_Exhaustion__rand_sleep_65_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_45_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_45_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_15_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_15_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_41_good();");
  CWE400_Resource_Exhaustion__rand_sleep_41_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_10_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_10_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_31_good();");
  CWE400_Resource_Exhaustion__rand_sleep_31_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_16_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_16_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_08_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_08_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_08_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_08_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_18_good();");
  CWE400_Resource_Exhaustion__rand_sleep_18_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_31_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_31_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_64_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_64_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_31_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_31_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_34_good();");
  CWE400_Resource_Exhaustion__rand_sleep_34_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_67_good();");
  CWE400_Resource_Exhaustion__rand_sleep_67_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_06_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_06_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_09_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_09_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_32_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_32_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_45_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_45_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_66_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_66_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_53_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_53_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_13_good();");
  CWE400_Resource_Exhaustion__rand_sleep_13_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_67_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_67_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_44_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_44_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_61_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_61_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_52_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_52_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_64_good();");
  CWE400_Resource_Exhaustion__rand_sleep_64_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_21_good();");
  CWE400_Resource_Exhaustion__rand_sleep_21_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_01_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_01_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_17_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_17_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_52_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_52_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_10_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_10_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_31_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_31_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_32_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_32_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_63_good();");
  CWE400_Resource_Exhaustion__rand_sleep_63_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_08_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_08_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_18_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_18_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_06_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_06_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_11_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_11_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_05_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_05_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_52_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_52_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_14_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_14_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_01_good();");
  CWE400_Resource_Exhaustion__rand_sleep_01_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_54_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_54_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_17_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_17_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_14_good();");
  CWE400_Resource_Exhaustion__rand_sleep_14_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_63_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_63_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_41_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_41_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_68_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_68_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_09_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_09_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_02_good();");
  CWE400_Resource_Exhaustion__rand_sleep_02_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_68_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_68_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_17_good();");
  CWE400_Resource_Exhaustion__rand_sleep_17_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_64_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_64_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_65_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_65_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_04_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_04_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_32_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_32_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_01_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_01_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_18_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_18_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_11_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_11_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_44_good();");
  CWE400_Resource_Exhaustion__rand_sleep_44_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_44_good();");
  CWE400_Resource_Exhaustion__rand_fwrite_44_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_51_good();");
  CWE400_Resource_Exhaustion__rand_for_loop_51_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_67_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_67_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_12_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_12_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_06_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_06_good();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_13_good();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_13_good();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_05_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_05_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_41_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_41_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_16_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_16_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_45_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_45_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_41_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_41_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_64_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_64_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_65_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_65_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_02_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_02_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_04_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_04_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_03_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_03_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_66_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_66_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_04_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_04_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_45_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_45_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_51_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_51_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_21_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_21_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_03_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_03_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_34_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_34_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_66_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_66_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_16_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_16_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_21_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_21_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_12_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_12_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_07_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_07_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_18_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_18_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_68_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_68_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_05_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_05_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_12_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_12_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_14_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_14_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_09_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_09_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_22_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_22_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_34_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_34_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_42_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_42_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_03_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_03_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_08_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_08_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_63_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_63_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_53_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_53_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_61_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_61_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_61_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_61_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_01_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_01_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_51_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_51_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_09_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_09_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_21_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_21_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_44_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_44_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_03_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_03_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_02_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_02_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_51_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_51_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_11_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_11_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_12_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_12_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_04_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_04_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_15_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_15_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_10_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_10_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_07_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_07_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_07_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_07_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_14_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_14_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_06_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_06_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_15_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_15_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_54_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_54_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_53_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_53_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_52_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_52_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_13_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_13_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_07_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_07_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_13_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_13_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_22_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_22_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_15_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_15_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_10_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_10_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_54_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_54_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_61_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_61_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_67_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_67_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_42_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_42_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_17_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_17_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_65_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_65_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_34_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_34_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_63_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_63_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_53_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_53_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_54_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_54_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_42_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_42_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_32_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_32_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_11_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_11_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_02_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_02_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_22_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_22_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_22_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_68_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_68_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_05_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_05_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_16_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_16_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_66_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_66_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_42_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_42_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_65_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_65_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_45_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_45_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_15_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_15_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_41_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_41_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_10_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_10_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_31_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_31_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_16_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_16_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_08_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_08_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_08_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_08_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_18_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_18_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_31_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_31_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_64_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_64_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_31_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_31_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_34_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_34_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_67_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_67_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_06_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_06_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_09_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_09_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_32_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_32_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_45_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_45_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_66_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_66_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_53_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_53_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_13_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_13_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_67_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_67_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_44_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_44_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_61_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_61_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_52_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_52_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_64_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_64_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_21_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_21_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_01_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_01_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_17_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_17_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_52_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_52_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_10_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_10_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_31_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_31_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_32_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_32_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_63_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_63_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_08_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_08_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_18_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_18_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_06_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_06_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_11_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_11_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_05_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_05_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_52_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_52_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_14_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_14_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_01_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_01_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_54_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_54_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_17_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_17_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_14_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_14_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_63_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_63_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_41_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_41_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_68_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_68_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_09_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_09_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_02_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_02_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_68_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_68_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_17_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_17_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_64_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_64_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_65_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_65_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_04_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_04_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_32_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_32_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_01_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_01_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_18_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_18_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_11_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_11_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_sleep_44_bad();");
  CWE400_Resource_Exhaustion__rand_sleep_44_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_fwrite_44_bad();");
  CWE400_Resource_Exhaustion__rand_fwrite_44_bad();
  printLine("Calling CWE400_Resource_Exhaustion__rand_for_loop_51_bad();");
  CWE400_Resource_Exhaustion__rand_for_loop_51_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_67_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_67_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_12_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_12_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_06_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_06_bad();
  printLine("Calling CWE400_Resource_Exhaustion__listen_socket_sleep_13_bad();");
  CWE400_Resource_Exhaustion__listen_socket_sleep_13_bad();
  return 0;
}
// 633224: using guessed type int globalArgc;
// 633228: using guessed type __int64 globalArgv;

//----- (00000000004026F8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_badSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040279B) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_goodG2BSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040283E) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_65b_goodB2GSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (00000000004028F1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000402A07) ----------------------------------------------------
int goodB2G1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000402B38) ----------------------------------------------------
int goodB2G2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalReturnsTrue();
  if ( result && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000402C5E) ----------------------------------------------------
int goodG2B1()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v3 = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000402D38) ----------------------------------------------------
int goodG2B2()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v3 = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000402E06) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_11_good()
{
  goodB2G1();
  goodB2G2();
  goodG2B1();
  return goodG2B2();
}

//----- (0000000000402E34) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000402F2A) ----------------------------------------------------
int goodB2G1_0()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000403030) ----------------------------------------------------
int goodB2G2_0()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000403136) ----------------------------------------------------
int goodG2B1_0()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004031E4) ----------------------------------------------------
int goodG2B2_0()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000403292) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_02_good()
{
  goodB2G1_0();
  goodB2G2_0();
  goodG2B1_0();
  return goodG2B2_0();
}

//----- (00000000004032C0) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_sleep_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __useconds_t useconds; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    usleep(useconds);
    printLine("Sleep time possibly too long");
  }
}

//----- (000000000040335A) ----------------------------------------------------
void goodB2G()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+4h] [rbp-1Ch]
  int j; // [rsp+8h] [rbp-18h]
  int i; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      printLine("Sleep time OK");
    }
  }
}

//----- (000000000040340F) ----------------------------------------------------
int goodG2B()
{
  int result; // eax
  __useconds_t useconds; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
    useconds = 20;
  for ( j = 0; j <= 0; ++j )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000403461) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_17_good()
{
  goodB2G();
  return goodG2B();
}

//----- (000000000040347B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (000000000040350B) ----------------------------------------------------
int goodB2G1_1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (00000000004035C2) ----------------------------------------------------
int goodB2G2_1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}

//----- (000000000040366D) ----------------------------------------------------
int goodG2B1_1()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (00000000004036C1) ----------------------------------------------------
int goodG2B2_1()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
    useconds = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000403709) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_11_good()
{
  goodB2G1_1();
  goodB2G2_1();
  goodG2B1_1();
  return goodG2B2_1();
}

//----- (0000000000403737) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (0000000000403845) ----------------------------------------------------
int goodB2G1_2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (000000000040396E) ----------------------------------------------------
int goodB2G2_2()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalTrue;
  if ( globalTrue && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (0000000000403A8C) ----------------------------------------------------
int goodG2B1_2()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v3 = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (0000000000403B5E) ----------------------------------------------------
int goodG2B2_2()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( globalTrue )
    v3 = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (0000000000403C24) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_10_good()
{
  goodB2G1_2();
  goodB2G2_2();
  goodG2B1_2();
  return goodG2B2_2();
}

//----- (0000000000403C52) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_51b_badSink(v2);
}

//----- (0000000000403CBC) ----------------------------------------------------
__int64 goodG2B_0()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_51b_goodG2BSink(20);
}

//----- (0000000000403CDE) ----------------------------------------------------
__int64 goodB2G_0()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_51b_goodB2GSink(v2);
}

//----- (0000000000403D48) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_51_good()
{
  goodG2B_0();
  return goodB2G_0();
}

//----- (0000000000403D62) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_68_badData = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_68b_badSink();
}
// 633230: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_badData;

//----- (0000000000403DD5) ----------------------------------------------------
int goodG2B_1()
{
  CWE400_Resource_Exhaustion__rand_fwrite_68_goodG2BData = 20;
  return CWE400_Resource_Exhaustion__rand_fwrite_68b_goodG2BSink();
}
// 633234: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_goodG2BData;

//----- (0000000000403E00) ----------------------------------------------------
int goodB2G_1()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_68b_goodB2GSink();
}
// 633238: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData;

//----- (0000000000403E73) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_68_good()
{
  goodG2B_1();
  return goodB2G_1();
}

//----- (0000000000403E8D) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (0000000000403E98) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (0000000000403EA3) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000403F33) ----------------------------------------------------
int goodB2G1_3()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (0000000000403FEA) ----------------------------------------------------
int goodB2G2_3()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticReturnsTrue();
  if ( result )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}

//----- (0000000000404095) ----------------------------------------------------
int goodG2B1_3()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsFalse() )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = staticReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (00000000004040E9) ----------------------------------------------------
int goodG2B2_3()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue() )
    useconds = 20;
  result = staticReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000404131) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_08_good()
{
  goodB2G1_3();
  goodB2G2_3();
  goodG2B1_3();
  return goodG2B2_3();
}

//----- (000000000040415F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004041E7) ----------------------------------------------------
int goodB2G1_4()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000404296) ----------------------------------------------------
int goodB2G2_4()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000404339) ----------------------------------------------------
int goodG2B1_4()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000404385) ----------------------------------------------------
int goodG2B2_4()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
    useconds = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004043C5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_09_good()
{
  goodB2G1_4();
  goodB2G2_4();
  goodG2B1_4();
  return goodG2B2_4();
}

//----- (00000000004043F3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54d_badSink(a1);
}

//----- (000000000040440A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54d_goodG2BSink(a1);
}

//----- (0000000000404421) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54c_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_54d_goodB2GSink(a1);
}

//----- (0000000000404438) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53d_badSink(a1);
}

//----- (000000000040444F) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodG2BSink(a1);
}

//----- (0000000000404466) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodB2GSink(a1);
}

//----- (000000000040447D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticTrue;
  if ( staticTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63312C: using guessed type int staticTrue;

//----- (0000000000404505) ----------------------------------------------------
int goodB2G1_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( staticFalse )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 63312C: using guessed type int staticTrue;
// 63315C: using guessed type int staticFalse;

//----- (00000000004045B4) ----------------------------------------------------
int goodB2G2_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticTrue;
  if ( staticTrue )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 63312C: using guessed type int staticTrue;

//----- (0000000000404657) ----------------------------------------------------
int goodG2B1_5()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFalse )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = staticTrue;
  if ( staticTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63312C: using guessed type int staticTrue;
// 63315C: using guessed type int staticFalse;

//----- (00000000004046A3) ----------------------------------------------------
int goodG2B2_5()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticTrue )
    useconds = 20;
  result = staticTrue;
  if ( staticTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63312C: using guessed type int staticTrue;

//----- (00000000004046E3) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_05_good()
{
  goodB2G1_5();
  goodB2G2_5();
  goodG2B1_5();
  return goodG2B2_5();
}

//----- (0000000000404711) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (0000000000404770) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_goodG2BSource()
{
  return 20LL;
}

//----- (0000000000404783) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004047E2) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (000000000040486A) ----------------------------------------------------
int goodB2G1_6()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (0000000000404919) ----------------------------------------------------
int goodB2G2_6()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (00000000004049BC) ----------------------------------------------------
int goodG2B1_6()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (0000000000404A08) ----------------------------------------------------
int goodG2B2_6()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalTrue )
    useconds = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (0000000000404A48) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_10_good()
{
  goodB2G1_6();
  goodB2G2_6();
  goodG2B1_6();
  return goodG2B2_6();
}

//----- (0000000000404A76) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_badSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000404B19) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_goodG2BSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000404BBC) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53d_goodB2GSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (0000000000404C6F) ----------------------------------------------------
int __fastcall badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000404C90) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink)(v2);
}

//----- (0000000000404D03) ----------------------------------------------------
int __fastcall goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000404D24) ----------------------------------------------------
int goodG2B_2()
{
  return goodG2BSink(0x14u);
}

//----- (0000000000404D4F) ----------------------------------------------------
int __fastcall goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000404D8B) ----------------------------------------------------
__int64 goodB2G_2()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink)(v2);
}

//----- (0000000000404DFE) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_44_good()
{
  goodG2B_2();
  return goodB2G_2();
}

//----- (0000000000404E18) ----------------------------------------------------
__int64 badSink_0()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}
// 633160: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_badData;

//----- (0000000000404E57) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_45_badData = v2;
  return badSink_0();
}
// 633160: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_badData;

//----- (0000000000404ECA) ----------------------------------------------------
__int64 goodG2BSink_0()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData;
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}
// 633164: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData;

//----- (0000000000404F09) ----------------------------------------------------
__int64 goodG2B_3()
{
  CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData = 20;
  return goodG2BSink_0();
}
// 633164: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_goodG2BData;

//----- (0000000000404F34) ----------------------------------------------------
__int64 goodB2GSink_0()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  result = (unsigned int)CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData;
  v1 = CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData > 0
    && CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v1;
      if ( v1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633168: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData;

//----- (0000000000404F7F) ----------------------------------------------------
__int64 goodB2G_3()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData = v2;
  return goodB2GSink_0();
}
// 633168: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_45_goodB2GData;

//----- (0000000000404FF2) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_45_good()
{
  goodG2B_3();
  return goodB2G_3();
}

//----- (000000000040500C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040502D) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040504E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_65b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000040508A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54d_badSink(a1);
}

//----- (00000000004050A1) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54d_goodG2BSink(a1);
}

//----- (00000000004050B8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54c_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54d_goodB2GSink(a1);
}

//----- (00000000004050CF) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v7;
    if ( v7 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040516F) ----------------------------------------------------
__int64 goodB2G1_7()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  result = 5LL;
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000405227) ----------------------------------------------------
__int64 goodB2G2_7()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  result = 5LL;
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004052D3) ----------------------------------------------------
__int64 goodG2B1_7()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000405337) ----------------------------------------------------
__int64 goodG2B2_7()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040538F) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_06_good()
{
  goodB2G1_7();
  goodB2G2_7();
  goodG2B1_7();
  return goodG2B2_7();
}

//----- (00000000004053BD) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_65_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(__useconds_t); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE400_Resource_Exhaustion__listen_socket_sleep_65b_badSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 4053BD: using guessed type char buf[16];

//----- (00000000004054F4) ----------------------------------------------------
int goodG2B_4()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodG2BSink(0x14u);
}

//----- (000000000040551F) ----------------------------------------------------
__int64 goodB2G_4()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(signed int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodB2GSink;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 40551F: using guessed type char buf[16];

//----- (0000000000405656) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_65_good()
{
  goodG2B_4();
  return goodB2G_4();
}

//----- (0000000000405670) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004056E4) ----------------------------------------------------
int goodG2B_5()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000405710) ----------------------------------------------------
int goodB2G_5()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000040579F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_01_good()
{
  goodG2B_5();
  return goodB2G_5();
}

//----- (00000000004057B9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_61_bad()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_61b_badSource();
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040586D) ----------------------------------------------------
int goodG2B_6()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_61b_goodG2BSource();
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000405921) ----------------------------------------------------
int goodB2G_6()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_61b_goodB2GSource();
  v2 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v2 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (00000000004059E5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_61_good()
{
  goodG2B_6();
  return goodB2G_6();
}

//----- (00000000004059FF) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticFive;
  if ( staticFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633130: using guessed type int staticFive;

//----- (0000000000405B0F) ----------------------------------------------------
int goodB2G1_8()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticFive;
  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633130: using guessed type int staticFive;

//----- (0000000000405C3A) ----------------------------------------------------
int goodB2G2_8()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticFive;
  if ( staticFive == 5 && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633130: using guessed type int staticFive;

//----- (0000000000405D5A) ----------------------------------------------------
int goodG2B1_8()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive == 5 )
    v3 = 20;
  else
    printLine("Benign, fixed string");
  result = staticFive;
  if ( staticFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633130: using guessed type int staticFive;

//----- (0000000000405E2E) ----------------------------------------------------
int goodG2B2_8()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( staticFive == 5 )
    v3 = 20;
  result = staticFive;
  if ( staticFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633130: using guessed type int staticFive;

//----- (0000000000405EF6) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_07_good()
{
  goodB2G1_8();
  goodB2G2_8();
  goodG2B1_8();
  return goodG2B2_8();
}

//----- (0000000000405F24) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000405F45) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000405F66) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000405FA2) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_15_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 405FA2: using guessed type char buf[16];

//----- (00000000004060DC) ----------------------------------------------------
int goodB2G1_9()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 4060DC: using guessed type char buf[16];

//----- (0000000000406231) ----------------------------------------------------
int goodB2G2_9()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 406231: using guessed type char buf[16];

//----- (0000000000406386) ----------------------------------------------------
int goodG2B1_9()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004063B4) ----------------------------------------------------
int goodG2B2_9()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004063E2) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_15_good()
{
  goodB2G1_9();
  goodB2G2_9();
  goodG2B1_9();
  return goodG2B2_9();
}

//----- (0000000000406410) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53d_badSink(a1);
}

//----- (0000000000406427) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53d_goodG2BSink(a1);
}

//----- (000000000040643E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53c_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53d_goodB2GSink(a1);
}

//----- (0000000000406455) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54e_badSink(a1);
}

//----- (000000000040646C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54e_goodG2BSink(a1);
}

//----- (0000000000406483) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54d_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54e_goodB2GSink(a1);
}

//----- (000000000040649A) ----------------------------------------------------
__int64 __fastcall badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 40649A: using guessed type char buf[16];

//----- (00000000004065BD) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_42_bad()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = badSource(0xFFFFFFFF);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004065EF) ----------------------------------------------------
__int64 goodG2BSource()
{
  return 20LL;
}

//----- (0000000000406602) ----------------------------------------------------
int goodG2B_7()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = goodG2BSource();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000406634) ----------------------------------------------------
__int64 __fastcall goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 406634: using guessed type char buf[16];

//----- (0000000000406757) ----------------------------------------------------
int goodB2G_7()
{
  signed int useconds; // [rsp+Ch] [rbp-4h]

  useconds = goodB2GSource(0xFFFFFFFF);
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (00000000004067A4) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_42_good()
{
  goodB2G_7();
  return goodG2B_7();
}

//----- (00000000004067BE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_61_bad()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__rand_sleep_61b_badSource();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004067F0) ----------------------------------------------------
int goodG2B_8()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__rand_sleep_61b_goodG2BSource();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000406822) ----------------------------------------------------
int goodB2G_8()
{
  signed int useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__rand_sleep_61b_goodB2GSource();
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (000000000040686F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_61_good()
{
  goodG2B_8();
  return goodB2G_8();
}

//----- (0000000000406889) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_badSink()
{
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_68_badData);
  return printLine("Sleep time possibly too long");
}
// 633244: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_badData;

//----- (00000000004068B0) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodG2BSink()
{
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodG2BData);
  return printLine("Sleep time possibly too long");
}
// 633240: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodG2BData;

//----- (00000000004068D7) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodB2GSink()
{
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData <= 0
    || CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData > 2000 )
  {
    return printLine("Sleep time too long");
  }
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData);
  return printLine("Sleep time OK");
}
// 63323C: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData;

//----- (0000000000406919) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040698D) ----------------------------------------------------
int goodB2G1_10()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000406A1C) ----------------------------------------------------
int goodB2G2_10()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000406AAB) ----------------------------------------------------
int goodG2B1_10()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000406AD7) ----------------------------------------------------
int goodG2B2_10()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000406B03) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_02_good()
{
  goodB2G1_10();
  goodB2G2_10();
  goodG2B1_10();
  return goodG2B2_10();
}

//----- (0000000000406B31) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633134: using guessed type int staticFive_0;

//----- (0000000000406BBB) ----------------------------------------------------
int goodB2G1_11()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 633134: using guessed type int staticFive_0;

//----- (0000000000406C6C) ----------------------------------------------------
int goodB2G2_11()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( staticFive_0 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 633134: using guessed type int staticFive_0;

//----- (0000000000406D11) ----------------------------------------------------
int goodG2B1_11()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_0 == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633134: using guessed type int staticFive_0;

//----- (0000000000406D5F) ----------------------------------------------------
int goodG2B2_11()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_0 == 5 )
    useconds = 20;
  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633134: using guessed type int staticFive_0;

//----- (0000000000406DA1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_07_good()
{
  goodB2G1_11();
  goodB2G2_11();
  goodG2B1_11();
  return goodG2B2_11();
}

//----- (0000000000406DCF) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+1Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v2 = *a1;
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000406E1A) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_goodG2BSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+1Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v2 = *a1;
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000406E65) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_64b_goodB2GSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+1Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = (unsigned int)*a1;
  v2 = *a1;
  if ( *a1 > 0 && v2 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000406EBC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_67b_badSink(v2);
}

//----- (0000000000406F2C) ----------------------------------------------------
int goodG2B_9()
{
  return CWE400_Resource_Exhaustion__rand_sleep_67b_goodG2BSink(0x14u);
}

//----- (0000000000406F54) ----------------------------------------------------
int goodB2G_9()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_67b_goodB2GSink(v2);
}

//----- (0000000000406FC4) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_67_good()
{
  goodG2B_9();
  return goodB2G_9();
}

//----- (0000000000406FDE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_05_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticTrue_0 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633138: using guessed type int staticTrue_0;
// 406FDE: using guessed type char buf[16];

//----- (000000000040712E) ----------------------------------------------------
int goodB2G1_12()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticTrue_0 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 633138: using guessed type int staticTrue_0;
// 63316C: using guessed type int staticFalse_0;
// 40712E: using guessed type char buf[16];

//----- (00000000004072A5) ----------------------------------------------------
int goodB2G2_12()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticTrue_0 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 633138: using guessed type int staticTrue_0;
// 4072A5: using guessed type char buf[16];

//----- (0000000000407410) ----------------------------------------------------
int goodG2B1_12()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFalse_0 )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633138: using guessed type int staticTrue_0;
// 63316C: using guessed type int staticFalse_0;

//----- (000000000040745C) ----------------------------------------------------
int goodG2B2_12()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticTrue_0 )
    useconds = 20;
  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633138: using guessed type int staticTrue_0;

//----- (000000000040749C) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_05_good()
{
  goodB2G1_12();
  goodB2G2_12();
  goodG2B1_12();
  return goodG2B2_12();
}

//----- (00000000004074CA) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+Ch] [rbp-34h]
  int v7; // [rsp+10h] [rbp-30h]
  int v8; // [rsp+14h] [rbp-2Ch]
  int *v9; // [rsp+18h] [rbp-28h]
  int *v10; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  v10 = &v6;
  v9 = &v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  v7 = *v9;
  for ( i = 0LL; ; ++i )
  {
    result = v7;
    if ( v7 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000407581) ----------------------------------------------------
__int64 goodG2B_10()
{
  __int64 result; // rax
  int v1; // [rsp+Ch] [rbp-24h]
  int v2; // [rsp+10h] [rbp-20h]
  int v3; // [rsp+14h] [rbp-1Ch]
  int *v4; // [rsp+18h] [rbp-18h]
  int *v5; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 20;
  v1 = 20;
  v2 = 20;
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004075F0) ----------------------------------------------------
__int64 goodB2G_10()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+Ch] [rbp-34h]
  int v7; // [rsp+10h] [rbp-30h]
  int v8; // [rsp+14h] [rbp-2Ch]
  int *v9; // [rsp+18h] [rbp-28h]
  int *v10; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  v10 = &v6;
  v9 = &v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  result = (unsigned int)*v9;
  v7 = *v9;
  i = 0LL;
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004076B3) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_32_good()
{
  goodG2B_10();
  return goodB2G_10();
}

//----- (00000000004076CD) ----------------------------------------------------
int __fastcall badSink_1(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004076EE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_41_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return badSink_1(v8);
}
// 4076EE: using guessed type char buf[16];

//----- (000000000040781C) ----------------------------------------------------
int __fastcall goodG2BSink_1(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040783D) ----------------------------------------------------
int goodG2B_11()
{
  return goodG2BSink_1(0x14u);
}

//----- (000000000040785F) ----------------------------------------------------
int __fastcall goodB2GSink_1(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000040789B) ----------------------------------------------------
int goodB2G_11()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return goodB2GSink_1(v8);
}
// 40789B: using guessed type char buf[16];

//----- (00000000004079C9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_41_good()
{
  goodB2G_11();
  return goodG2B_11();
}

//----- (00000000004079E3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54c_badSink(a1);
}

//----- (00000000004079FA) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54c_goodG2BSink(a1);
}

//----- (0000000000407A11) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54b_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_54c_goodB2GSink(a1);
}

//----- (0000000000407A28) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53c_badSink(a1);
}

//----- (0000000000407A3F) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodG2BSink(a1);
}

//----- (0000000000407A56) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53c_goodB2GSink(a1);
}

//----- (0000000000407A6D) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000407A8E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000407AAF) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000407AEB) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000407B2A) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000407B69) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_67b_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)a1;
  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000407BB4) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_68_badData = v8;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_68b_badSink();
}
// 633244: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_badData;
// 407BB4: using guessed type char buf[16];

//----- (0000000000407CEB) ----------------------------------------------------
int goodG2B_12()
{
  CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodG2BData = 20;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodG2BSink();
}
// 633240: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodG2BData;

//----- (0000000000407D16) ----------------------------------------------------
int goodB2G_12()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData = v8;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_68b_goodB2GSink();
}
// 63323C: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_68_goodB2GData;
// 407D16: using guessed type char buf[16];

//----- (0000000000407E4D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_68_good()
{
  goodG2B_12();
  return goodB2G_12();
}

//----- (0000000000407E67) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54c_badSink(a1);
}

//----- (0000000000407E7E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54c_goodG2BSink(a1);
}

//----- (0000000000407E95) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54c_goodB2GSink(a1);
}

//----- (0000000000407EAC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000407FA2) ----------------------------------------------------
int goodG2B_13()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000408050) ----------------------------------------------------
int goodB2G_13()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000408156) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_01_good()
{
  goodG2B_13();
  return goodB2G_13();
}

//----- (0000000000408170) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(&v6);
}

//----- (00000000004081DC) ----------------------------------------------------
__int64 goodG2B_14()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_for_loop_64b_goodG2BSink(&v1);
}

//----- (0000000000408200) ----------------------------------------------------
__int64 goodB2G_14()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_64b_goodB2GSink(&v6);
}

//----- (000000000040826C) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_64_good()
{
  goodG2B_14();
  return goodB2G_14();
}

//----- (0000000000408286) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_badSink(__int64 a1)
{
  usleep(*(_DWORD *)(a1 + 8));
  return printLine("Sleep time possibly too long");
}

//----- (00000000004082B2) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodG2BSink(__int64 a1)
{
  usleep(*(_DWORD *)(a1 + 8));
  return printLine("Sleep time possibly too long");
}

//----- (00000000004082DE) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodB2GSink(__int64 a1)
{
  signed int useconds; // [rsp+1Ch] [rbp-4h]

  useconds = *(_DWORD *)(a1 + 8);
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (0000000000408325) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000408346) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000408367) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_65b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (00000000004083A3) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v7;
    if ( v7 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000408441) ----------------------------------------------------
__int64 goodB2G1_13()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  result = 0LL;
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004084F7) ----------------------------------------------------
__int64 goodB2G2_13()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  result = 1LL;
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004085A1) ----------------------------------------------------
__int64 goodG2B1_13()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000408603) ----------------------------------------------------
__int64 goodG2B2_13()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000408659) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_04_good()
{
  goodB2G1_13();
  goodB2G2_13();
  goodG2B1_13();
  return goodG2B2_13();
}

//----- (0000000000408687) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_54b_badSink(v2);
}

//----- (00000000004086F1) ----------------------------------------------------
int goodG2B_15()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54b_goodG2BSink(20);
}

//----- (0000000000408713) ----------------------------------------------------
void goodB2G_15()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_54b_goodB2GSink(v2);
}

//----- (000000000040877D) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_54_good()
{
  goodG2B_15();
  goodB2G_15();
}

//----- (0000000000408797) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_53_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53b_badSink(v8);
}
// 408797: using guessed type char buf[16];

//----- (00000000004088C5) ----------------------------------------------------
int goodG2B_16()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodG2BSink(0x14u);
}

//----- (00000000004088E7) ----------------------------------------------------
int goodB2G_16()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_53b_goodB2GSink(v8);
}
// 4088E7: using guessed type char buf[16];

//----- (0000000000408A15) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_53_good()
{
  goodG2B_16();
  return goodB2G_16();
}

//----- (0000000000408A2F) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (0000000000408A3A) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (0000000000408A45) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_08_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue_0();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 408A45: using guessed type char buf[16];

//----- (0000000000408B9D) ----------------------------------------------------
int goodB2G1_14()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 408B9D: using guessed type char buf[16];

//----- (0000000000408D1C) ----------------------------------------------------
int goodB2G2_14()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticReturnsTrue_0();
  if ( result )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 408D1C: using guessed type char buf[16];

//----- (0000000000408E8F) ----------------------------------------------------
int goodG2B1_14()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsFalse_0() )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = staticReturnsTrue_0();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000408EE3) ----------------------------------------------------
int goodG2B2_14()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)staticReturnsTrue_0() )
    useconds = 20;
  result = staticReturnsTrue_0();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000408F2B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_08_good()
{
  goodB2G1_14();
  goodB2G2_14();
  goodG2B1_14();
  return goodG2B2_14();
}

//----- (0000000000408F59) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_67b_badSink(v2);
}

//----- (0000000000408FC9) ----------------------------------------------------
__int64 goodG2B_17()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_67b_goodG2BSink(20);
}

//----- (0000000000408FF1) ----------------------------------------------------
__int64 goodB2G_17()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_67b_goodB2GSink(v2);
}

//----- (0000000000409061) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_67_good()
{
  goodG2B_17();
  return goodB2G_17();
}

//----- (000000000040907B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_54b_badSink(v2);
}

//----- (00000000004090E5) ----------------------------------------------------
int goodG2B_18()
{
  return CWE400_Resource_Exhaustion__rand_sleep_54b_goodG2BSink(0x14u);
}

//----- (0000000000409107) ----------------------------------------------------
int goodB2G_18()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_54b_goodB2GSink(v2);
}

//----- (0000000000409171) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_54_good()
{
  goodG2B_18();
  return goodB2G_18();
}

//----- (000000000040918B) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004091AC) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004091CD) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000409209) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004092A9) ----------------------------------------------------
int goodB2G1_15()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000409361) ----------------------------------------------------
__int64 goodB2G2_15()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040940D) ----------------------------------------------------
__int64 goodG2B1_15()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v2 = 20;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000409471) ----------------------------------------------------
__int64 goodG2B2_15()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( GLOBAL_CONST_TRUE )
    v2 = 20;
  result = (unsigned int)GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004094C9) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_09_good()
{
  goodB2G1_15();
  goodB2G2_15();
  goodG2B1_15();
  return goodG2B2_15();
}

//----- (00000000004094F7) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 6331A8: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal;

//----- (000000000040953A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Sink(int a1)
{
  int result; // eax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 6331AC: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global;

//----- (0000000000409595) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Sink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global && a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 6331B0: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global;

//----- (00000000004095E4) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 6331B4: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal;

//----- (0000000000409627) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53c_badSink(a1);
}

//----- (000000000040963E) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53c_goodG2BSink(a1);
}

//----- (0000000000409655) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53b_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53c_goodB2GSink(a1);
}

//----- (000000000040966C) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (000000000040970E) ----------------------------------------------------
int goodB2G1_16()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (00000000004097C8) ----------------------------------------------------
__int64 goodB2G2_16()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)globalFive;
  if ( globalFive == 5 && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000409876) ----------------------------------------------------
__int64 goodG2B1_16()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( globalFive == 5 )
    v2 = 20;
  else
    printLine("Benign, fixed string");
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (00000000004098DC) ----------------------------------------------------
__int64 goodG2B2_16()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( globalFive == 5 )
    v2 = 20;
  result = (unsigned int)globalFive;
  if ( globalFive == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000409936) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_14_good()
{
  goodB2G1_16();
  goodB2G2_16();
  goodG2B1_16();
  return goodG2B2_16();
}

//----- (0000000000409964) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52c_badSink(a1);
}

//----- (000000000040997B) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodG2BSink(a1);
}

//----- (0000000000409992) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52c_goodB2GSink(a1);
}

//----- (00000000004099A9) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_53d_badSink(a1);
}

//----- (00000000004099C0) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_53d_goodG2BSink(a1);
}

//----- (00000000004099D7) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53c_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_53d_goodB2GSink(a1);
}

//----- (00000000004099EE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_11_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 4099EE: using guessed type char buf[16];

//----- (0000000000409B46) ----------------------------------------------------
int goodB2G1_17()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 409B46: using guessed type char buf[16];

//----- (0000000000409CC5) ----------------------------------------------------
int goodB2G2_17()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalReturnsTrue();
  if ( result )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 409CC5: using guessed type char buf[16];

//----- (0000000000409E38) ----------------------------------------------------
int goodG2B1_17()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000409E8C) ----------------------------------------------------
int goodG2B2_17()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrue() )
    useconds = 20;
  result = globalReturnsTrue();
  if ( result )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (0000000000409ED4) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_11_good()
{
  goodB2G1_17();
  goodB2G2_17();
  goodG2B1_17();
  return goodG2B2_17();
}

//----- (0000000000409F02) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_07_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63313C: using guessed type int staticFive_1;
// 409F02: using guessed type char buf[16];

//----- (000000000040A054) ----------------------------------------------------
int goodB2G1_18()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 63313C: using guessed type int staticFive_1;
// 40A054: using guessed type char buf[16];

//----- (000000000040A1CD) ----------------------------------------------------
int goodB2G2_18()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_1 == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 63313C: using guessed type int staticFive_1;
// 40A1CD: using guessed type char buf[16];

//----- (000000000040A33A) ----------------------------------------------------
int goodG2B1_18()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_1 == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63313C: using guessed type int staticFive_1;

//----- (000000000040A388) ----------------------------------------------------
int goodG2B2_18()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( staticFive_1 == 5 )
    useconds = 20;
  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63313C: using guessed type int staticFive_1;

//----- (000000000040A3CA) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_07_good()
{
  goodB2G1_18();
  goodB2G2_18();
  goodG2B1_18();
  return goodG2B2_18();
}

//----- (000000000040A3F8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_badSink(__int64 a1)
{
  usleep(*(_DWORD *)(a1 + 8));
  return printLine("Sleep time possibly too long");
}

//----- (000000000040A424) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_goodG2BSink(__int64 a1)
{
  usleep(*(_DWORD *)(a1 + 8));
  return printLine("Sleep time possibly too long");
}

//----- (000000000040A450) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink(__int64 a1)
{
  signed int useconds; // [rsp+1Ch] [rbp-4h]

  useconds = *(_DWORD *)(a1 + 8);
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (000000000040A497) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v8 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040A5A3) ----------------------------------------------------
int goodB2G1_19()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  result = 0;
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000040A6CA) ----------------------------------------------------
int goodB2G2_19()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  result = 1;
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000040A7E6) ----------------------------------------------------
int goodG2B1_19()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040A8B6) ----------------------------------------------------
int goodG2B2_19()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040A97A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_04_good()
{
  goodB2G1_19();
  goodB2G2_19();
  goodG2B1_19();
  return goodG2B2_19();
}

//----- (000000000040A9A8) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 j; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  else
  {
    v8 = 20;
  }
  result = globalReturnsTrueOrFalse();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v8;
      if ( v8 <= i )
        break;
      printLine("Hello");
    }
  }
  else if ( v8 > 0 && v8 <= 20 )
  {
    for ( j = 0LL; ; ++j )
    {
      result = v8;
      if ( v8 <= j )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040AA93) ----------------------------------------------------
__int64 goodB2G_19()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  __int64 result; // rax
  unsigned __int64 j; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v13; // [rsp+1Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v13 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v13 = v7;
  }
  result = globalReturnsTrueOrFalse();
  if ( (_DWORD)result )
  {
    if ( v13 > 0 && v13 <= 20 )
    {
      for ( i = 0LL; ; ++i )
      {
        result = v13;
        if ( v13 <= i )
          break;
        printLine("Hello");
      }
    }
  }
  else if ( v13 > 0 && v13 <= 20 )
  {
    for ( j = 0LL; ; ++j )
    {
      result = v13;
      if ( v13 <= j )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040ABCC) ----------------------------------------------------
__int64 goodG2B_19()
{
  __int64 result; // rax
  unsigned __int64 j; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    for ( i = 0LL; ; ++i )
    {
      result = 20LL;
      if ( i >= 0x14 )
        break;
      printLine("Hello");
    }
  }
  else
  {
    for ( j = 0LL; ; ++j )
    {
      result = 20LL;
      if ( j >= 0x14 )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040AC63) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_12_good()
{
  goodB2G_19();
  return goodG2B_19();
}

//----- (000000000040AC7D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_53b_badSink(v2);
}

//----- (000000000040ACE7) ----------------------------------------------------
int goodG2B_20()
{
  return CWE400_Resource_Exhaustion__rand_sleep_53b_goodG2BSink(0x14u);
}

//----- (000000000040AD09) ----------------------------------------------------
int goodB2G_20()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_53b_goodB2GSink(v2);
}

//----- (000000000040AD73) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_53_good()
{
  goodG2B_20();
  return goodB2G_20();
}

//----- (000000000040AD8D) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_badSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040AE30) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_goodG2BSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040AED3) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54e_goodB2GSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000040AF86) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_66b_badSink((__int64)&v6);
}

//----- (000000000040AFF8) ----------------------------------------------------
int goodG2B_21()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 20;
  v2 = 20;
  return CWE400_Resource_Exhaustion__rand_fwrite_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040B022) ----------------------------------------------------
int goodB2G_21()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_66b_goodB2GSink((__int64)&v6);
}

//----- (000000000040B094) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_66_good()
{
  goodG2B_21();
  return goodB2G_21();
}

//----- (000000000040B0AE) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_badSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040B0E1) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodG2BSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040B114) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodB2GSink(signed int *a1)
{
  signed int useconds; // [rsp+14h] [rbp-Ch]

  useconds = *a1;
  if ( *a1 <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (000000000040B162) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+Ch] [rbp-24h]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040B1FA) ----------------------------------------------------
__int64 goodG2B_22()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040B24A) ----------------------------------------------------
__int64 goodB2G_22()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+Ch] [rbp-24h]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  result = (unsigned int)result;
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040B2EE) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_31_good()
{
  goodG2B_22();
  return goodB2G_22();
}

//----- (000000000040B308) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040B329) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040B34A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54e_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000040B386) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_66b_badSink((__int64)&v6);
}

//----- (000000000040B3F8) ----------------------------------------------------
int goodG2B_23()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 20;
  v2 = 20;
  return CWE400_Resource_Exhaustion__rand_sleep_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040B422) ----------------------------------------------------
int goodB2G_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink((__int64)&v6);
}

//----- (000000000040B494) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_66_good()
{
  goodG2B_23();
  return goodB2G_23();
}

//----- (000000000040B4AE) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_52c_badSink(a1);
}

//----- (000000000040B4C5) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_52c_goodG2BSink(a1);
}

//----- (000000000040B4DC) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52b_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_52c_goodB2GSink(a1);
}

//----- (000000000040B4F3) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_14_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;
// 40B4F3: using guessed type char buf[16];

//----- (000000000040B645) ----------------------------------------------------
int goodB2G1_20()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 633150: using guessed type int globalFive;
// 40B645: using guessed type char buf[16];

//----- (000000000040B7BE) ----------------------------------------------------
int goodB2G2_20()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;
// 40B7BE: using guessed type char buf[16];

//----- (000000000040B92B) ----------------------------------------------------
int goodG2B1_20()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (000000000040B979) ----------------------------------------------------
int goodG2B2_20()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
    useconds = 20;
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (000000000040B9BB) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_14_good()
{
  goodB2G1_20();
  goodB2G2_20();
  goodG2B1_20();
  return goodG2B2_20();
}

//----- (000000000040B9E9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_32_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  __useconds_t *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = (__useconds_t *)&v5;
  v5 = -1;
  v12 = -1;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  useconds = *v9;
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 40B9E9: using guessed type char buf[16];

//----- (000000000040BB4C) ----------------------------------------------------
int goodG2B_24()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  __useconds_t useconds; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 20;
  v1 = 20;
  useconds = 20;
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040BBA3) ----------------------------------------------------
int goodB2G_24()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  int v5; // [rsp+28h] [rbp-28h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-24h]
  int v7; // [rsp+30h] [rbp-20h]
  int fd; // [rsp+34h] [rbp-1Ch]
  __useconds_t *v9; // [rsp+38h] [rbp-18h]
  int *v10; // [rsp+40h] [rbp-10h]
  int v11; // [rsp+48h] [rbp-8h]
  int v12; // [rsp+4Ch] [rbp-4h]

  v10 = &v5;
  v9 = (__useconds_t *)&v5;
  v5 = -1;
  v12 = -1;
  fd = -1;
  v11 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v11 = accept(fd, 0LL, 0LL);
      if ( v11 != -1 )
      {
        v7 = recv(v11, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v12 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v11 != -1 )
    close(v11);
  *v10 = v12;
  useconds = *v9;
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 40BBA3: using guessed type char buf[16];

//----- (000000000040BD21) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_32_good()
{
  goodG2B_24();
  return goodB2G_24();
}

//----- (000000000040BD3B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_63b_badSink((__useconds_t *)&v6);
}

//----- (000000000040BDA7) ----------------------------------------------------
int goodG2B_25()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_sleep_63b_goodG2BSink((__useconds_t *)&v1);
}

//----- (000000000040BDCB) ----------------------------------------------------
int goodB2G_25()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_63b_goodB2GSink(&v6);
}

//----- (000000000040BE37) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_63_good()
{
  goodG2B_25();
  return goodB2G_25();
}

//----- (000000000040BE51) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_11_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = globalReturnsTrue();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040BEF9) ----------------------------------------------------
int goodB2G1_21()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = globalReturnsFalse();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040BFB9) ----------------------------------------------------
__int64 goodB2G2_21()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)globalReturnsTrue() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = globalReturnsTrue();
  if ( (_DWORD)result && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040C06D) ----------------------------------------------------
__int64 goodG2B1_21()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( (unsigned int)globalReturnsFalse() )
    printLine("Benign, fixed string");
  else
    v2 = 20;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040C0D9) ----------------------------------------------------
__int64 goodG2B2_21()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( (unsigned int)globalReturnsTrue() )
    v2 = 20;
  result = globalReturnsTrue();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040C139) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_11_good()
{
  goodB2G1_21();
  goodB2G2_21();
  goodG2B1_21();
  return goodG2B2_21();
}

//----- (000000000040C167) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_02_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040C1F3) ----------------------------------------------------
__int64 goodB2G1_22()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040C28B) ----------------------------------------------------
__int64 goodB2G2_22()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040C323) ----------------------------------------------------
__int64 goodG2B1_22()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040C367) ----------------------------------------------------
__int64 goodG2B2_22()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040C3AB) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_02_good()
{
  goodB2G1_22();
  goodB2G2_22();
  goodG2B1_22();
  return goodG2B2_22();
}

//----- (000000000040C3D9) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_52c_badSink(a1);
}

//----- (000000000040C3F0) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_52c_goodG2BSink(a1);
}

//----- (000000000040C407) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_52c_goodB2GSink(a1);
}

//----- (000000000040C41E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_badSink(__useconds_t a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal;
  if ( CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 6331BC: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal;

//----- (000000000040C449) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Sink(signed int a1)
{
  if ( CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}
// 6331C0: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Global;

//----- (000000000040C49B) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Sink(signed int a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global;
  if ( CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global )
  {
    if ( a1 <= 0 || a1 > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(a1);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 6331C4: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global;

//----- (000000000040C4E1) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BSink(__useconds_t a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal;
  if ( CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 6331C8: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal;

//----- (000000000040C50C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040C533) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040C55A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000040C59C) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_64_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_64b_badSink((__useconds_t *)&v5);
}
// 40C59C: using guessed type char buf[16];

//----- (000000000040C6CC) ----------------------------------------------------
int goodG2B_26()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodG2BSink((__useconds_t *)&v1);
}

//----- (000000000040C6F0) ----------------------------------------------------
int goodB2G_26()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_64b_goodB2GSink(&v5);
}
// 40C6F0: using guessed type char buf[16];

//----- (000000000040C820) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_64_good()
{
  goodG2B_26();
  return goodB2G_26();
}

//----- (000000000040C83A) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040C899) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000040C8AC) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040C90B) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_10_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)globalTrue;
  if ( globalTrue )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (000000000040C9AB) ----------------------------------------------------
int goodB2G1_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = globalFalse;
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (000000000040CA63) ----------------------------------------------------
__int64 goodB2G2_23()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( globalTrue )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)globalTrue;
  if ( globalTrue && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (000000000040CB0F) ----------------------------------------------------
__int64 goodG2B1_23()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    v2 = 20;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (000000000040CB73) ----------------------------------------------------
__int64 goodG2B2_23()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( globalTrue )
    v2 = 20;
  result = (unsigned int)globalTrue;
  if ( globalTrue )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (000000000040CBCB) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_10_good()
{
  goodB2G1_23();
  goodB2G2_23();
  goodG2B1_23();
  return goodG2B2_23();
}

//----- (000000000040CBF9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_52b_badSink(v2);
}

//----- (000000000040CC63) ----------------------------------------------------
int goodG2B_27()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_52b_goodG2BSink(20);
}

//----- (000000000040CC85) ----------------------------------------------------
void goodB2G_27()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_52b_goodB2GSink(v2);
}

//----- (000000000040CCEF) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_52_good()
{
  goodG2B_27();
  goodB2G_27();
}

//----- (000000000040CD09) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54d_badSink(a1);
}

//----- (000000000040CD20) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54d_goodG2BSink(a1);
}

//----- (000000000040CD37) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54c_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54d_goodB2GSink(a1);
}

//----- (000000000040CD4E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_04_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 40CD4E: using guessed type char buf[16];

//----- (000000000040CE9C) ----------------------------------------------------
int goodB2G1_24()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 40CE9C: using guessed type char buf[16];

//----- (000000000040D011) ----------------------------------------------------
int goodB2G2_24()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 40D011: using guessed type char buf[16];

//----- (000000000040D17A) ----------------------------------------------------
int goodG2B1_24()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D1C4) ----------------------------------------------------
int goodG2B2_24()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D202) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_04_good()
{
  goodB2G1_24();
  goodB2G2_24();
  goodG2B1_24();
  return goodG2B2_24();
}

//----- (000000000040D230) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_01_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040D2BC) ----------------------------------------------------
__int64 goodG2B_28()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040D300) ----------------------------------------------------
__int64 goodB2G_28()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040D398) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_01_good()
{
  goodG2B_28();
  return goodB2G_28();
}

//----- (000000000040D3B2) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040D3EB) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040D424) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53d_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040D469) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_52b_badSink(v2);
}

//----- (000000000040D4D3) ----------------------------------------------------
int goodG2B_29()
{
  return CWE400_Resource_Exhaustion__rand_sleep_52b_goodG2BSink(0x14u);
}

//----- (000000000040D4F5) ----------------------------------------------------
int goodB2G_29()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_52b_goodB2GSink(v2);
}

//----- (000000000040D55F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_52_good()
{
  goodG2B_29();
  return goodB2G_29();
}

//----- (000000000040D579) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D59A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D5BB) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_51b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000040D5F7) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_67_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_67b_badSink(v9);
}
// 40D5F7: using guessed type char buf[16];

//----- (000000000040D72B) ----------------------------------------------------
int goodG2B_30()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodG2BSink(0x14u);
}

//----- (000000000040D753) ----------------------------------------------------
int goodB2G_30()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  int v6; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v8; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  v5 = v9;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_67b_goodB2GSink(v9);
}
// 40D753: using guessed type char buf[16];

//----- (000000000040D887) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_67_good()
{
  goodG2B_30();
  return goodB2G_30();
}

//----- (000000000040D8A1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D917) ----------------------------------------------------
int goodB2G_31()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000040D9A8) ----------------------------------------------------
int goodG2B_31()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040D9D6) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_16_good()
{
  goodB2G_31();
  return goodG2B_31();
}

//----- (000000000040D9F0) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61_bad()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_61b_badSource();
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040DA3A) ----------------------------------------------------
__int64 goodG2B_32()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodG2BSource();
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000040DA84) ----------------------------------------------------
__int64 goodB2G_32()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_for_loop_61b_goodB2GSource();
  v1 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v1;
      if ( v1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000040DADA) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_61_good()
{
  goodG2B_32();
  return goodB2G_32();
}

//----- (000000000040DAF4) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_badSink(__useconds_t a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal;
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63317C: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal;

//----- (000000000040DB1F) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Sink(signed int a1)
{
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}
// 633180: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Global;

//----- (000000000040DB71) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Sink(signed int a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global;
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global )
  {
    if ( a1 <= 0 || a1 > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(a1);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 633184: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global;

//----- (000000000040DBB7) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BSink(__useconds_t a1)
{
  int result; // eax

  result = CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal;
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633188: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal;

//----- (000000000040DBE2) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_51b_badSink(v2);
}

//----- (000000000040DC4C) ----------------------------------------------------
int goodG2B_33()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_51b_goodG2BSink(20);
}

//----- (000000000040DC6E) ----------------------------------------------------
void goodB2G_33()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_51b_goodB2GSink(v2);
}

//----- (000000000040DCD8) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_51_good()
{
  goodG2B_33();
  goodB2G_33();
}

//----- (000000000040DCF2) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_badSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040DD95) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_goodG2BSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040DE38) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_51b_goodB2GSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000040DEEB) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_07_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)staticFive_2;
  if ( staticFive_2 == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633140: using guessed type int staticFive_2;

//----- (000000000040DF8D) ----------------------------------------------------
int goodB2G1_25()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = staticFive_2;
  if ( staticFive_2 != 5 )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633140: using guessed type int staticFive_2;

//----- (000000000040E047) ----------------------------------------------------
__int64 goodB2G2_25()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticFive_2 == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)staticFive_2;
  if ( staticFive_2 == 5 && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633140: using guessed type int staticFive_2;

//----- (000000000040E0F5) ----------------------------------------------------
__int64 goodG2B1_25()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( staticFive_2 == 5 )
    v2 = 20;
  else
    printLine("Benign, fixed string");
  result = (unsigned int)staticFive_2;
  if ( staticFive_2 == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633140: using guessed type int staticFive_2;

//----- (000000000040E15B) ----------------------------------------------------
__int64 goodG2B2_25()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( staticFive_2 == 5 )
    v2 = 20;
  result = (unsigned int)staticFive_2;
  if ( staticFive_2 == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633140: using guessed type int staticFive_2;

//----- (000000000040E1B5) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_07_good()
{
  goodB2G1_25();
  goodB2G2_25();
  goodG2B1_25();
  return goodG2B2_25();
}

//----- (000000000040E1E3) ----------------------------------------------------
void CWE400_Resource_Exhaustion__listen_socket_sleep_17_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  __useconds_t useconds; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
  {
    usleep(useconds);
    printLine("Sleep time possibly too long");
  }
}
// 40E1E3: using guessed type char buf[16];

//----- (000000000040E348) ----------------------------------------------------
void goodB2G_34()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v2; // [rsp+12h] [rbp-2Eh]
  int v3; // [rsp+14h] [rbp-2Ch]
  int v4; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int v6; // [rsp+30h] [rbp-10h]
  __useconds_t useconds; // [rsp+34h] [rbp-Ch]
  int j; // [rsp+38h] [rbp-8h]
  int i; // [rsp+3Ch] [rbp-4h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
  {
    fd = -1;
    v6 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v3 = 0;
      v2 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v6 = accept(fd, 0LL, 0LL);
        if ( v6 != -1 )
        {
          v4 = recv(v6, buf, 0xDuLL, 0);
          if ( v4 != -1 )
          {
            if ( v4 )
            {
              buf[v4] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v6 != -1 )
      close(v6);
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      printLine("Sleep time OK");
    }
  }
}
// 40E348: using guessed type char buf[16];

//----- (000000000040E4C8) ----------------------------------------------------
int goodG2B_34()
{
  int result; // eax
  __useconds_t useconds; // [rsp+4h] [rbp-Ch]
  int j; // [rsp+8h] [rbp-8h]
  int i; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  for ( i = 0; i <= 0; ++i )
    useconds = 20;
  for ( j = 0; j <= 0; ++j )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}

//----- (000000000040E51A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_17_good()
{
  goodB2G_34();
  return goodG2B_34();
}

//----- (000000000040E534) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_51_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_51b_badSink(v2);
}

//----- (000000000040E59E) ----------------------------------------------------
int goodG2B_35()
{
  return CWE400_Resource_Exhaustion__rand_sleep_51b_goodG2BSink(0x14u);
}

//----- (000000000040E5C0) ----------------------------------------------------
int goodB2G_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_sleep_51b_goodB2GSink(v2);
}

//----- (000000000040E62A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_51_good()
{
  goodG2B_35();
  return goodB2G_35();
}

//----- (000000000040E644) ----------------------------------------------------
int badSink_2()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_45_badData;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}
// 633170: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_badData;

//----- (000000000040E6ED) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_45_badData = v2;
  return badSink_2();
}
// 633170: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_badData;

//----- (000000000040E760) ----------------------------------------------------
int goodG2BSink_2()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_45_goodG2BData;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}
// 633174: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_goodG2BData;

//----- (000000000040E809) ----------------------------------------------------
int goodG2B_36()
{
  CWE400_Resource_Exhaustion__rand_fwrite_45_goodG2BData = 20;
  return goodG2BSink_2();
}
// 633174: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_goodG2BData;

//----- (000000000040E834) ----------------------------------------------------
int goodB2GSink_2()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData;
  v2 = CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData > 0
    && CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v2 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633178: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData;

//----- (000000000040E8ED) ----------------------------------------------------
int goodB2G_36()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData = v2;
  return goodB2GSink_2();
}
// 633178: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_45_goodB2GData;

//----- (000000000040E960) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_45_good()
{
  goodG2B_36();
  return goodB2G_36();
}

//----- (000000000040E97A) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_badSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040E9D9) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000040E9EC) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_61b_goodB2GSource()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000040EA4B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EB5B) ----------------------------------------------------
int goodB2G1_26()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EC86) ----------------------------------------------------
int goodB2G2_26()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EDA6) ----------------------------------------------------
int goodG2B1_26()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 20;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EE7A) ----------------------------------------------------
int goodG2B2_26()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v3 = 20;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040EF42) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_13_good()
{
  goodB2G1_26();
  goodB2G2_26();
  goodG2B1_26();
  return goodG2B2_26();
}

//----- (000000000040EF70) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v8 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040F07E) ----------------------------------------------------
int goodB2G1_27()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  result = 5;
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000040F1A7) ----------------------------------------------------
int goodB2G2_27()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  result = 5;
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000040F2C5) ----------------------------------------------------
int goodG2B1_27()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040F397) ----------------------------------------------------
int goodG2B2_27()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000040F45D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_06_good()
{
  goodB2G1_27();
  goodB2G2_27();
  goodG2B1_27();
  return goodG2B2_27();
}

//----- (000000000040F48B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal = 1;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_22_badSink(v8);
}
// 63317C: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_badGlobal;
// 40F48B: using guessed type char buf[16];

//----- (000000000040F5C3) ----------------------------------------------------
int goodB2G1_28()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Global = 0;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Sink(v8);
}
// 633180: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G1Global;
// 40F5C3: using guessed type char buf[16];

//----- (000000000040F6FB) ----------------------------------------------------
int goodB2G2_28()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global = 1;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Sink(v8);
}
// 633184: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodB2G2Global;
// 40F6FB: using guessed type char buf[16];

//----- (000000000040F833) ----------------------------------------------------
int goodG2B_37()
{
  CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal = 1;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BSink(0x14u);
}
// 633188: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_22_goodG2BGlobal;

//----- (000000000040F85F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_22_good()
{
  goodB2G1_28();
  goodB2G2_28();
  return goodG2B_37();
}

//----- (000000000040F883) ----------------------------------------------------
int badSink_3()
{
  usleep(CWE400_Resource_Exhaustion__rand_sleep_45_badData);
  return printLine("Sleep time possibly too long");
}
// 63318C: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_badData;

//----- (000000000040F8AA) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_45_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_45_badData = v2;
  return badSink_3();
}
// 63318C: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_badData;

//----- (000000000040F91D) ----------------------------------------------------
int goodG2BSink_3()
{
  usleep(CWE400_Resource_Exhaustion__rand_sleep_45_goodG2BData);
  return printLine("Sleep time possibly too long");
}
// 633190: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_goodG2BData;

//----- (000000000040F944) ----------------------------------------------------
int goodG2B_38()
{
  CWE400_Resource_Exhaustion__rand_sleep_45_goodG2BData = 20;
  return goodG2BSink_3();
}
// 633190: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_goodG2BData;

//----- (000000000040F96F) ----------------------------------------------------
int goodB2GSink_3()
{
  if ( CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData <= 0
    || CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData > 2000 )
  {
    return printLine("Sleep time too long");
  }
  usleep(CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData);
  return printLine("Sleep time OK");
}
// 633194: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData;

//----- (000000000040F9B1) ----------------------------------------------------
int goodB2G_37()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData = v2;
  return goodB2GSink_3();
}
// 633194: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_45_goodB2GData;

//----- (000000000040FA24) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_45_good()
{
  goodG2B_38();
  return goodB2G_37();
}

//----- (000000000040FA3E) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54c_badSink(a1);
}

//----- (000000000040FA55) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54c_goodG2BSink(a1);
}

//----- (000000000040FA6C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54b_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54c_goodB2GSink(a1);
}

//----- (000000000040FA83) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_06_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040FB0B) ----------------------------------------------------
int goodB2G1_29()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000040FBBA) ----------------------------------------------------
int goodB2G2_29()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000040FC5D) ----------------------------------------------------
int goodG2B1_28()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040FCA9) ----------------------------------------------------
int goodG2B2_28()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000040FCE9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_06_good()
{
  goodB2G1_29();
  goodB2G2_29();
  goodG2B1_28();
  return goodG2B2_28();
}

//----- (000000000040FD17) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_66_bad()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_66b_badSink((__int64)&v5);
}
// 40FD17: using guessed type char buf[16];

//----- (000000000040FE4D) ----------------------------------------------------
int goodG2B_39()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 20;
  v2 = 20;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodG2BSink((__int64)&v1);
}

//----- (000000000040FE77) ----------------------------------------------------
int goodB2G_38()
{
  char buf[16]; // [rsp+0h] [rbp-50h]
  __int16 s; // [rsp+10h] [rbp-40h]
  uint16_t v3; // [rsp+12h] [rbp-3Eh]
  int v4; // [rsp+14h] [rbp-3Ch]
  char v5; // [rsp+20h] [rbp-30h]
  int v6; // [rsp+28h] [rbp-28h]
  int v7; // [rsp+40h] [rbp-10h]
  int fd; // [rsp+44h] [rbp-Ch]
  int v9; // [rsp+48h] [rbp-8h]
  int v10; // [rsp+4Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_66b_goodB2GSink((__int64)&v5);
}
// 40FE77: using guessed type char buf[16];

//----- (000000000040FFAD) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_66_good()
{
  goodG2B_39();
  return goodB2G_38();
}

//----- (000000000040FFC7) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54e_badSink(a1);
}

//----- (000000000040FFDE) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodG2BSink(a1);
}

//----- (000000000040FFF5) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54e_goodB2GSink(a1);
}

//----- (000000000041000C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_badSink(int *a1)
{
  FILE *s; // [rsp+20h] [rbp-20h]
  int v3; // [rsp+2Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v3 = *a1;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004100C1) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_goodG2BSink(int *a1)
{
  FILE *s; // [rsp+20h] [rbp-20h]
  int v3; // [rsp+2Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v3 = *a1;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000410176) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_64b_goodB2GSink(int *a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-20h]
  int v3; // [rsp+2Ch] [rbp-14h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  result = *a1;
  v3 = *a1;
  if ( *a1 > 0 && v3 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041023B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_13_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;
// 41023B: using guessed type char buf[16];

//----- (000000000041038D) ----------------------------------------------------
int goodB2G1_30()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;
// 41038D: using guessed type char buf[16];

//----- (0000000000410506) ----------------------------------------------------
int goodB2G2_30()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;
// 410506: using guessed type char buf[16];

//----- (0000000000410673) ----------------------------------------------------
int goodG2B1_29()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004106C1) ----------------------------------------------------
int goodG2B2_29()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    useconds = 20;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000410703) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_13_good()
{
  goodB2G1_30();
  goodB2G2_30();
  goodG2B1_29();
  return goodG2B2_29();
}

//----- (0000000000410731) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+10h] [rbp-20h]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004107C9) ----------------------------------------------------
__int64 goodG2B_40()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000410819) ----------------------------------------------------
__int64 goodB2G_39()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+10h] [rbp-20h]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  result = (unsigned int)result;
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004108BD) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_34_good()
{
  goodG2B_40();
  return goodB2G_39();
}

//----- (00000000004108D7) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000410902) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodG2BSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041092D) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodB2GSink(signed int *a1)
{
  signed int useconds; // [rsp+1Ch] [rbp-4h]

  useconds = *a1;
  if ( *a1 <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (0000000000410973) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_54_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_54b_badSink(v2);
}

//----- (00000000004109DD) ----------------------------------------------------
__int64 goodG2B_41()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_54b_goodG2BSink(20);
}

//----- (00000000004109FF) ----------------------------------------------------
__int64 goodB2G_40()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_54b_goodB2GSink(v2);
}

//----- (0000000000410A69) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_54_good()
{
  goodG2B_41();
  return goodB2G_40();
}

//----- (0000000000410A83) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000410B93) ----------------------------------------------------
int goodB2G1_31()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalFive;
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000410CBE) ----------------------------------------------------
int goodB2G2_31()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = globalFive;
  if ( globalFive == 5 && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000410DDE) ----------------------------------------------------
int goodG2B1_30()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 20;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000410EB2) ----------------------------------------------------
int goodG2B2_30()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( globalFive == 5 )
    v3 = 20;
  result = globalFive;
  if ( globalFive == 5 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000410F7A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_14_good()
{
  goodB2G1_31();
  goodB2G2_31();
  goodG2B1_30();
  return goodG2B2_30();
}

//----- (0000000000410FA8) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-44h]
  char *filename; // [rsp+10h] [rbp-40h]
  FILE *s; // [rsp+18h] [rbp-38h]
  int v9; // [rsp+20h] [rbp-30h]
  int v10; // [rsp+24h] [rbp-2Ch]
  int *v11; // [rsp+28h] [rbp-28h]
  int *v12; // [rsp+30h] [rbp-20h]
  unsigned __int64 i; // [rsp+38h] [rbp-18h]

  v12 = &v6;
  v11 = &v6;
  v6 = -1;
  v10 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v10 = v2;
  *v12 = v2;
  v9 = *v11;
  i = 0LL;
  s = 0LL;
  filename = "output_bad.txt";
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; ; ++i )
  {
    result = v9;
    if ( v9 <= i )
      break;
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  if ( s )
    result = fclose(s);
  return result;
}

//----- (00000000004110C9) ----------------------------------------------------
int goodG2B_42()
{
  int result; // eax
  int v1; // [rsp+Ch] [rbp-34h]
  char *filename; // [rsp+10h] [rbp-30h]
  FILE *s; // [rsp+18h] [rbp-28h]
  int v4; // [rsp+20h] [rbp-20h]
  int v5; // [rsp+24h] [rbp-1Ch]
  int *v6; // [rsp+28h] [rbp-18h]
  int *v7; // [rsp+30h] [rbp-10h]
  unsigned __int64 i; // [rsp+38h] [rbp-8h]

  v7 = &v1;
  v6 = &v1;
  v5 = 20;
  v1 = 20;
  v4 = 20;
  i = 0LL;
  s = 0LL;
  filename = "output_bad.txt";
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; ; ++i )
  {
    result = v4;
    if ( v4 <= i )
      break;
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  if ( s )
    result = fclose(s);
  return result;
}

//----- (00000000004111A2) ----------------------------------------------------
int goodB2G_41()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  int v6; // [rsp+Ch] [rbp-44h]
  char *filename; // [rsp+10h] [rbp-40h]
  FILE *s; // [rsp+18h] [rbp-38h]
  int v9; // [rsp+20h] [rbp-30h]
  int v10; // [rsp+24h] [rbp-2Ch]
  int *v11; // [rsp+28h] [rbp-28h]
  int *v12; // [rsp+30h] [rbp-20h]
  unsigned __int64 i; // [rsp+38h] [rbp-18h]

  v12 = &v6;
  v11 = &v6;
  v6 = -1;
  v10 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v10 = v2;
  *v12 = v2;
  result = *v11;
  v9 = *v11;
  i = 0LL;
  s = 0LL;
  filename = "output_good.txt";
  if ( v9 > 0 && v9 <= 20 )
  {
    s = fopen(filename, "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; ; ++i )
    {
      result = v9;
      if ( v9 <= i )
        break;
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    if ( s )
      result = fclose(s);
  }
  return result;
}

//----- (00000000004112D3) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_32_good()
{
  goodG2B_42();
  return goodB2G_41();
}

//----- (00000000004112ED) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_badSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000411320) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_goodG2BSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000411353) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(signed int *a1)
{
  signed int useconds; // [rsp+14h] [rbp-Ch]

  useconds = *a1;
  if ( *a1 <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (00000000004113A1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_14_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (000000000041142B) ----------------------------------------------------
int goodB2G1_32()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 633150: using guessed type int globalFive;

//----- (00000000004114DC) ----------------------------------------------------
int goodB2G2_32()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( globalFive == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = globalFive;
  if ( globalFive == 5 )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000411581) ----------------------------------------------------
int goodG2B1_31()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (00000000004115CF) ----------------------------------------------------
int goodG2B2_31()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFive == 5 )
    useconds = 20;
  result = globalFive;
  if ( globalFive == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633150: using guessed type int globalFive;

//----- (0000000000411611) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_14_good()
{
  goodB2G1_32();
  goodB2G2_32();
  goodG2B1_31();
  return goodG2B2_31();
}

//----- (000000000041163F) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_badSink(int a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004116E8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_goodG2BSink(int a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000411791) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_67b_goodB2GSink(int a1)
{
  int result; // eax
  FILE *s; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = a1;
  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041184A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_32_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+4h] [rbp-2Ch]
  __useconds_t useconds; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+Ch] [rbp-24h]
  __useconds_t *v9; // [rsp+10h] [rbp-20h]
  int *v10; // [rsp+18h] [rbp-18h]

  v10 = &v6;
  v9 = (__useconds_t *)&v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  useconds = *v9;
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004118E9) ----------------------------------------------------
int goodG2B_43()
{
  int v1; // [rsp+4h] [rbp-1Ch]
  __useconds_t useconds; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+Ch] [rbp-14h]
  int *v4; // [rsp+10h] [rbp-10h]
  int *v5; // [rsp+18h] [rbp-8h]

  v5 = &v1;
  v4 = &v1;
  v3 = 20;
  v1 = 20;
  useconds = 20;
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000411940) ----------------------------------------------------
int goodB2G_42()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+4h] [rbp-2Ch]
  __useconds_t useconds; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+Ch] [rbp-24h]
  __useconds_t *v9; // [rsp+10h] [rbp-20h]
  int *v10; // [rsp+18h] [rbp-18h]

  v10 = &v6;
  v9 = (__useconds_t *)&v6;
  v6 = -1;
  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  *v10 = v2;
  useconds = *v9;
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (00000000004119FA) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_32_good()
{
  goodG2B_43();
  return goodB2G_42();
}

//----- (0000000000411A14) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000411A4D) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000411A86) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_65b_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000411ACB) ----------------------------------------------------
int __fastcall badSink_4(__useconds_t a1)
{
  int result; // eax

  result = badStatic;
  if ( badStatic )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 633198: using guessed type int badStatic;

//----- (0000000000411AF6) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_21_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  badStatic = 1;
  return badSink_4(v8);
}
// 633198: using guessed type int badStatic;
// 411AF6: using guessed type char buf[16];

//----- (0000000000411C2E) ----------------------------------------------------
int __fastcall goodB2G1Sink(signed int a1)
{
  if ( goodB2G1Static )
    return printLine("Benign, fixed string");
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}
// 63319C: using guessed type int goodB2G1Static;

//----- (0000000000411C80) ----------------------------------------------------
int goodB2G1_33()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G1Static = 0;
  return goodB2G1Sink(v8);
}
// 63319C: using guessed type int goodB2G1Static;
// 411C80: using guessed type char buf[16];

//----- (0000000000411DB8) ----------------------------------------------------
int __fastcall goodB2G2Sink(signed int a1)
{
  int result; // eax

  result = goodB2G2Static;
  if ( goodB2G2Static )
  {
    if ( a1 <= 0 || a1 > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(a1);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 6331A0: using guessed type int goodB2G2Static;

//----- (0000000000411DFE) ----------------------------------------------------
int goodB2G2_33()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  goodB2G2Static = 1;
  return goodB2G2Sink(v8);
}
// 6331A0: using guessed type int goodB2G2Static;
// 411DFE: using guessed type char buf[16];

//----- (0000000000411F36) ----------------------------------------------------
int __fastcall goodG2BSink_4(__useconds_t a1)
{
  int result; // eax

  result = goodG2BStatic;
  if ( goodG2BStatic )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 6331A4: using guessed type int goodG2BStatic;

//----- (0000000000411F61) ----------------------------------------------------
int goodG2B_44()
{
  goodG2BStatic = 1;
  return goodG2BSink_4(0x14u);
}
// 6331A4: using guessed type int goodG2BStatic;

//----- (0000000000411F8D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_21_good()
{
  goodB2G1_33();
  goodB2G2_33();
  return goodG2B_44();
}

//----- (0000000000411FB1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_03_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 411FB1: using guessed type char buf[16];

//----- (00000000004120E9) ----------------------------------------------------
int goodB2G1_34()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 4120E9: using guessed type char buf[16];

//----- (000000000041223C) ----------------------------------------------------
int goodB2G2_34()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 41223C: using guessed type char buf[16];

//----- (000000000041238F) ----------------------------------------------------
int goodG2B1_32()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004123BB) ----------------------------------------------------
int goodG2B2_32()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004123E7) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_03_good()
{
  goodB2G1_34();
  goodB2G2_34();
  goodG2B1_32();
  return goodG2B2_32();
}

//----- (0000000000412415) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_31_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  __useconds_t useconds; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  useconds = v10;
  usleep(v10);
  return printLine("Sleep time possibly too long");
}
// 412415: using guessed type char buf[16];

//----- (0000000000412559) ----------------------------------------------------
int goodG2B_45()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000412591) ----------------------------------------------------
int goodB2G_43()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  __useconds_t useconds; // [rsp+28h] [rbp-18h]
  int v6; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v6 = v10;
  useconds = v10;
  if ( v10 <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 412591: using guessed type char buf[16];

//----- (00000000004126F0) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_31_good()
{
  goodG2B_45();
  return goodB2G_43();
}

//----- (000000000041270A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_63_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink((__useconds_t *)&v5);
}
// 41270A: using guessed type char buf[16];

//----- (000000000041283A) ----------------------------------------------------
int goodG2B_46()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodG2BSink((__useconds_t *)&v1);
}

//----- (000000000041285E) ----------------------------------------------------
int goodB2G_44()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int v6; // [rsp+24h] [rbp-Ch]
  int fd; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v5 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v6 = recv(v8, buf, 0xDuLL, 0);
        if ( v6 != -1 )
        {
          if ( v6 )
          {
            buf[v6] = 0;
            v5 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_63b_goodB2GSink(&v5);
}
// 41285E: using guessed type char buf[16];

//----- (000000000041298E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_63_good()
{
  goodG2B_46();
  return goodB2G_44();
}

//----- (00000000004129A8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004129CF) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004129F6) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_67b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000412A38) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_18_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 412A38: using guessed type char buf[16];

//----- (0000000000412B72) ----------------------------------------------------
int goodB2G_45()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 412B72: using guessed type char buf[16];

//----- (0000000000412CC7) ----------------------------------------------------
int goodG2B_47()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000412CF5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_18_good()
{
  goodB2G_45();
  return goodG2B_47();
}

//----- (0000000000412D0F) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53d_badSink(a1);
}

//----- (0000000000412D26) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53d_goodG2BSink(a1);
}

//----- (0000000000412D3D) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_53c_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53d_goodB2GSink(a1);
}

//----- (0000000000412D54) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+10h] [rbp-30h]
  int v7; // [rsp+1Ch] [rbp-24h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000412E56) ----------------------------------------------------
int goodG2B_48()
{
  FILE *s; // [rsp+10h] [rbp-20h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000412F10) ----------------------------------------------------
int goodB2G_46()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+10h] [rbp-30h]
  int v6; // [rsp+1Ch] [rbp-24h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000413022) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_31_good()
{
  goodG2B_48();
  return goodB2G_46();
}

//----- (000000000041303C) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_64b_badSink((__useconds_t *)&v6);
}

//----- (00000000004130A8) ----------------------------------------------------
int goodG2B_49()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_sleep_64b_goodG2BSink((__useconds_t *)&v1);
}

//----- (00000000004130CC) ----------------------------------------------------
int goodB2G_47()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(&v6);
}

//----- (0000000000413138) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_64_good()
{
  goodG2B_49();
  return goodB2G_47();
}

//----- (0000000000413152) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_04_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004131D8) ----------------------------------------------------
int goodB2G1_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000413285) ----------------------------------------------------
int goodB2G2_35()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000413326) ----------------------------------------------------
int goodG2B1_33()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000413370) ----------------------------------------------------
int goodG2B2_33()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004133AE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_04_good()
{
  goodB2G1_35();
  goodB2G2_35();
  goodG2B1_33();
  return goodG2B2_33();
}

//----- (00000000004133DC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_31_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041345C) ----------------------------------------------------
int goodG2B_50()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000413494) ----------------------------------------------------
int goodB2G_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000041352F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_31_good()
{
  goodG2B_50();
  return goodB2G_48();
}

//----- (0000000000413549) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_67_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_67b_badSink(v2);
}

//----- (00000000004135B9) ----------------------------------------------------
int goodG2B_51()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_67b_goodG2BSink(20);
}

//----- (00000000004135E1) ----------------------------------------------------
int goodB2G_49()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_67b_goodB2GSink(v2);
}

//----- (0000000000413651) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_67_good()
{
  goodG2B_51();
  return goodB2G_49();
}

//----- (000000000041366B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_12_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  else
  {
    useconds = 20;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  else if ( (int)useconds <= 0 || (int)useconds > 2000 )
  {
    result = printLine("Sleep time too long");
  }
  else
  {
    usleep(useconds);
    result = printLine("Sleep time OK");
  }
  return result;
}
// 41366B: using guessed type char buf[16];

//----- (00000000004137FF) ----------------------------------------------------
int goodB2G_50()
{
  int result; // eax
  char nptr[16]; // [rsp+0h] [rbp-60h]
  struct sockaddr addr; // [rsp+10h] [rbp-50h]
  char buf[16]; // [rsp+20h] [rbp-40h]
  __int16 s; // [rsp+30h] [rbp-30h]
  uint16_t v5; // [rsp+32h] [rbp-2Eh]
  int v6; // [rsp+34h] [rbp-2Ch]
  int v7; // [rsp+44h] [rbp-1Ch]
  int v8; // [rsp+48h] [rbp-18h]
  int v9; // [rsp+4Ch] [rbp-14h]
  int fd; // [rsp+50h] [rbp-10h]
  int v11; // [rsp+54h] [rbp-Ch]
  int v12; // [rsp+58h] [rbp-8h]
  __useconds_t useconds; // [rsp+5Ch] [rbp-4h]

  useconds = -1;
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v12 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v6 = 0;
      v5 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v12 = accept(fd, 0LL, 0LL);
        if ( v12 != -1 )
        {
          v9 = recv(v12, buf, 0xDuLL, 0);
          if ( v9 != -1 )
          {
            if ( v9 )
            {
              buf[v9] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v12 != -1 )
      close(v12);
  }
  else
  {
    v11 = -1;
    v8 = socket(2, 1, 6);
    if ( v8 != -1 )
    {
      memset(&addr, 0, 0x10uLL);
      addr.sa_family = 2;
      *(_DWORD *)&addr.sa_data[2] = 0;
      *(_WORD *)addr.sa_data = htons(0x6987u);
      if ( bind(v8, &addr, 0x10u) != -1 && listen(v8, 5) != -1 )
      {
        v11 = accept(v8, 0LL, 0LL);
        if ( v11 != -1 )
        {
          v7 = recv(v11, nptr, 0xDuLL, 0);
          if ( v7 != -1 )
          {
            if ( v7 )
            {
              nptr[v7] = 0;
              useconds = atoi(nptr);
            }
          }
        }
      }
    }
    if ( v8 != -1 )
      close(v8);
    if ( v11 != -1 )
      close(v11);
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  else if ( (int)useconds <= 0 || (int)useconds > 2000 )
  {
    result = printLine("Sleep time too long");
  }
  else
  {
    usleep(useconds);
    result = printLine("Sleep time OK");
  }
  return result;
}
// 4137FF: using guessed type char buf[16];
// 4137FF: using guessed type char nptr[16];

//----- (0000000000413AC0) ----------------------------------------------------
int goodG2B_52()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000413B27) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_12_good()
{
  goodB2G_50();
  return goodG2B_52();
}

//----- (0000000000413B41) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_65b_badSink(v2);
}

//----- (0000000000413BB4) ----------------------------------------------------
__int64 goodG2B_53()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_65b_goodG2BSink(20);
}

//----- (0000000000413BDF) ----------------------------------------------------
__int64 goodB2G_51()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_65b_goodB2GSink(v2);
}

//----- (0000000000413C52) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_65_good()
{
  goodG2B_53();
  return goodB2G_51();
}

//----- (0000000000413C6C) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000413CFA) ----------------------------------------------------
__int64 goodB2G1_36()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000413D94) ----------------------------------------------------
__int64 goodB2G2_36()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000413E2E) ----------------------------------------------------
__int64 goodG2B1_34()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000413E74) ----------------------------------------------------
__int64 goodG2B2_34()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000413EBA) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_15_good()
{
  goodB2G1_36();
  goodB2G2_36();
  goodG2B1_34();
  return goodG2B2_34();
}

//----- (0000000000413EE8) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000413F74) ----------------------------------------------------
__int64 goodB2G1_37()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041400C) ----------------------------------------------------
__int64 goodB2G2_37()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004140A4) ----------------------------------------------------
__int64 goodG2B1_35()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004140E8) ----------------------------------------------------
__int64 goodG2B2_35()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041412C) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_03_good()
{
  goodB2G1_37();
  goodB2G2_37();
  goodG2B1_35();
  return goodG2B2_35();
}

//----- (000000000041415A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_badSink(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331EC: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal;

//----- (000000000041420B) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Sink(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global )
    return printLine("Benign, fixed string");
  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331F0: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global;

//----- (00000000004142D7) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Sink(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global && a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331F4: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global;

//----- (0000000000414398) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BSink(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331F8: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal;

//----- (0000000000414449) ----------------------------------------------------
__int64 badSource_0()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004144A8) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_42_bad()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = badSource_0();
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004144F2) ----------------------------------------------------
__int64 goodG2BSource_0()
{
  return 20LL;
}

//----- (0000000000414505) ----------------------------------------------------
__int64 goodG2B_54()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = goodG2BSource_0();
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041454F) ----------------------------------------------------
__int64 goodB2GSource_0()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (00000000004145AE) ----------------------------------------------------
__int64 goodB2G_52()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  result = goodB2GSource_0();
  v1 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v1;
      if ( v1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000414604) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_42_good()
{
  goodB2G_52();
  return goodG2B_54();
}

//----- (000000000041461E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54d_badSink(a1);
}

//----- (0000000000414635) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodG2BSink(a1);
}

//----- (000000000041464C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54d_goodB2GSink(a1);
}

//----- (0000000000414663) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54e_badSink(a1);
}

//----- (000000000041467A) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_54e_goodG2BSink(a1);
}

//----- (0000000000414691) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_54d_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_54e_goodB2GSink(a1);
}

//----- (00000000004146A8) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_badSink()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_68_badData;
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}
// 633248: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_badData;

//----- (00000000004146E7) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_goodG2BSink()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  v1 = CWE400_Resource_Exhaustion__rand_for_loop_68_goodG2BData;
  for ( i = 0LL; ; ++i )
  {
    result = v1;
    if ( v1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}
// 63324C: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_goodG2BData;

//----- (0000000000414726) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68b_goodB2GSink()
{
  __int64 result; // rax
  int v1; // [rsp+4h] [rbp-Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  result = (unsigned int)CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData;
  v1 = CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData;
  if ( CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData > 0
    && CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v1;
      if ( v1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633250: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData;

//----- (0000000000414771) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_64_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_64b_badSink(&v6);
}

//----- (00000000004147DD) ----------------------------------------------------
int goodG2B_55()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_fwrite_64b_goodG2BSink(&v1);
}

//----- (0000000000414801) ----------------------------------------------------
int goodB2G_53()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_64b_goodB2GSink(&v6);
}

//----- (000000000041486D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_64_good()
{
  goodG2B_55();
  return goodB2G_53();
}

//----- (0000000000414887) ----------------------------------------------------
int __fastcall badSink_5(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004148A8) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_44_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(__useconds_t); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = badSink_5;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 4148A8: using guessed type char buf[16];

//----- (00000000004149DF) ----------------------------------------------------
int __fastcall goodG2BSink_5(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000414A00) ----------------------------------------------------
int goodG2B_56()
{
  return goodG2BSink_5(0x14u);
}

//----- (0000000000414A2B) ----------------------------------------------------
int __fastcall goodB2GSink_4(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (0000000000414A67) ----------------------------------------------------
__int64 goodB2G_54()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+28h] [rbp-18h]
  int fd; // [rsp+2Ch] [rbp-14h]
  int (__fastcall *v7)(signed int); // [rsp+30h] [rbp-10h]
  int v8; // [rsp+38h] [rbp-8h]
  unsigned int v9; // [rsp+3Ch] [rbp-4h]

  v7 = goodB2GSink_4;
  v9 = -1;
  v8 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v8 = accept(fd, 0LL, 0LL);
      if ( v8 != -1 )
      {
        v5 = recv(v8, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v9 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v8 != -1 )
    close(v8);
  return ((__int64 (__fastcall *)(_QWORD))v7)(v9);
}
// 414A67: using guessed type char buf[16];

//----- (0000000000414B9E) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_44_good()
{
  goodG2B_56();
  return goodB2G_54();
}

//----- (0000000000414BB8) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_badSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000414BE3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_goodG2BSink(__useconds_t *a1)
{
  usleep(*a1);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000414C0E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_63b_goodB2GSink(signed int *a1)
{
  signed int useconds; // [rsp+1Ch] [rbp-4h]

  useconds = *a1;
  if ( *a1 <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (0000000000414C54) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_for_loop_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  unsigned __int64 k; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v6 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    for ( k = 0LL; v6 > k; ++k )
      printLine("Hello");
  }
}

//----- (0000000000414D06) ----------------------------------------------------
void goodB2G_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  unsigned __int64 k; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  int j; // [rsp+18h] [rbp-18h]
  int i; // [rsp+1Ch] [rbp-14h]

  v6 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v6 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v6 > 0 && v6 <= 20 )
    {
      for ( k = 0LL; v6 > k; ++k )
        printLine("Hello");
    }
  }
}

//----- (0000000000414DC4) ----------------------------------------------------
__int64 goodG2B_57()
{
  __int64 result; // rax
  unsigned __int64 k; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]
  int i; // [rsp+1Ch] [rbp-4h]

  v2 = -1;
  for ( i = 0; i <= 0; ++i )
    v2 = 20;
  for ( j = 0; j <= 0; ++j )
  {
    for ( k = 0LL; ; ++k )
    {
      result = v2;
      if ( v2 <= k )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000414E2E) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_17_good()
{
  goodB2G_55();
  return goodG2B_57();
}

//----- (0000000000414E48) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_02_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 414E48: using guessed type char buf[16];

//----- (0000000000414F80) ----------------------------------------------------
int goodB2G1_38()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 414F80: using guessed type char buf[16];

//----- (00000000004150D3) ----------------------------------------------------
int goodB2G2_38()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 4150D3: using guessed type char buf[16];

//----- (0000000000415226) ----------------------------------------------------
int goodG2B1_36()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000415252) ----------------------------------------------------
int goodG2B2_36()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041527E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_02_good()
{
  goodB2G1_38();
  goodB2G2_38();
  goodG2B1_36();
  return goodG2B2_36();
}

//----- (00000000004152AC) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_for_loop_22_badSink(v2);
}
// 6331A8: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_badGlobal;

//----- (0000000000415320) ----------------------------------------------------
int goodB2G1_39()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global = 0;
  return CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Sink(v2);
}
// 6331AC: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G1Global;

//----- (0000000000415394) ----------------------------------------------------
__int64 goodB2G2_39()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global = 1;
  return CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Sink(v2);
}
// 6331B0: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodB2G2Global;

//----- (0000000000415408) ----------------------------------------------------
__int64 goodG2B_58()
{
  CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BSink(20);
}
// 6331B4: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_22_goodG2BGlobal;

//----- (0000000000415434) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_22_good()
{
  goodB2G1_39();
  goodB2G2_39();
  return goodG2B_58();
}

//----- (0000000000415458) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)staticTrue_1;
  if ( staticTrue_1 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633144: using guessed type int staticTrue_1;

//----- (00000000004154F8) ----------------------------------------------------
int goodB2G1_40()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = staticFalse_1;
  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633144: using guessed type int staticTrue_1;
// 6331B8: using guessed type int staticFalse_1;

//----- (00000000004155B0) ----------------------------------------------------
__int64 goodB2G2_40()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( staticTrue_1 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)staticTrue_1;
  if ( staticTrue_1 && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633144: using guessed type int staticTrue_1;

//----- (000000000041565C) ----------------------------------------------------
__int64 goodG2B1_37()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( staticFalse_1 )
    printLine("Benign, fixed string");
  else
    v2 = 20;
  result = (unsigned int)staticTrue_1;
  if ( staticTrue_1 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633144: using guessed type int staticTrue_1;
// 6331B8: using guessed type int staticFalse_1;

//----- (00000000004156C0) ----------------------------------------------------
__int64 goodG2B2_37()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( staticTrue_1 )
    v2 = 20;
  result = (unsigned int)staticTrue_1;
  if ( staticTrue_1 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633144: using guessed type int staticTrue_1;

//----- (0000000000415718) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_05_good()
{
  goodB2G1_40();
  goodB2G2_40();
  goodG2B1_37();
  return goodG2B2_37();
}

//----- (0000000000415746) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_61b_badSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 415746: using guessed type char buf[16];

//----- (0000000000415869) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodG2BSource()
{
  return 20LL;
}

//----- (000000000041587C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodB2GSource(unsigned int a1)
{
  unsigned int v2; // [rsp+Ch] [rbp-34h]
  char buf[16]; // [rsp+10h] [rbp-30h]
  __int16 s; // [rsp+20h] [rbp-20h]
  uint16_t v5; // [rsp+22h] [rbp-1Eh]
  int v6; // [rsp+24h] [rbp-1Ch]
  int v7; // [rsp+34h] [rbp-Ch]
  int fd; // [rsp+38h] [rbp-8h]
  int v9; // [rsp+3Ch] [rbp-4h]

  v2 = a1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v6 = 0;
    v5 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v2 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  return v2;
}
// 41587C: using guessed type char buf[16];

//----- (000000000041599F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_10_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 41599F: using guessed type char buf[16];

//----- (0000000000415AEF) ----------------------------------------------------
int goodB2G1_41()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( globalFalse )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;
// 415AEF: using guessed type char buf[16];

//----- (0000000000415C66) ----------------------------------------------------
int goodB2G2_41()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( globalTrue )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = globalTrue;
  if ( globalTrue )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 415C66: using guessed type char buf[16];

//----- (0000000000415DD1) ----------------------------------------------------
int goodG2B1_38()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalFalse )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;
// 633220: using guessed type int globalFalse;

//----- (0000000000415E1D) ----------------------------------------------------
int goodG2B2_38()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( globalTrue )
    useconds = 20;
  result = globalTrue;
  if ( globalTrue )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 63314C: using guessed type int globalTrue;

//----- (0000000000415E5D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_10_good()
{
  goodB2G1_41();
  goodB2G2_41();
  goodG2B1_38();
  return goodG2B2_38();
}

//----- (0000000000415E8B) ----------------------------------------------------
__int64 __fastcall badSink_6(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000415EC4) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_6(v2);
}

//----- (0000000000415F2E) ----------------------------------------------------
__int64 __fastcall goodG2BSink_6(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000415F67) ----------------------------------------------------
__int64 goodG2B_59()
{
  return goodG2BSink_6(20);
}

//----- (0000000000415F89) ----------------------------------------------------
__int64 __fastcall goodB2GSink_5(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000415FCE) ----------------------------------------------------
__int64 goodB2G_56()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_5(v2);
}

//----- (0000000000416038) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_41_good()
{
  goodB2G_56();
  return goodG2B_59();
}

//----- (0000000000416052) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041608B) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004160C4) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52c_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000416109) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_sleep_22_badSink(v2);
}
// 6331BC: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_badGlobal;

//----- (000000000041617D) ----------------------------------------------------
int goodB2G1_42()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Global = 0;
  return CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Sink(v2);
}
// 6331C0: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G1Global;

//----- (00000000004161F1) ----------------------------------------------------
int goodB2G2_42()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global = 1;
  return CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Sink(v2);
}
// 6331C4: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodB2G2Global;

//----- (0000000000416265) ----------------------------------------------------
int goodG2B_60()
{
  CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BSink(0x14u);
}
// 6331C8: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_22_goodG2BGlobal;

//----- (0000000000416291) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_22_good()
{
  goodB2G1_42();
  goodB2G2_42();
  return goodG2B_60();
}

//----- (00000000004162B5) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_68_badData = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_68b_badSink();
}
// 633248: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_badData;

//----- (0000000000416328) ----------------------------------------------------
__int64 goodG2B_61()
{
  CWE400_Resource_Exhaustion__rand_for_loop_68_goodG2BData = 20;
  return CWE400_Resource_Exhaustion__rand_for_loop_68b_goodG2BSink();
}
// 63324C: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_goodG2BData;

//----- (0000000000416353) ----------------------------------------------------
__int64 goodB2G_57()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_68b_goodB2GSink();
}
// 633250: using guessed type int CWE400_Resource_Exhaustion__rand_for_loop_68_goodB2GData;

//----- (00000000004163C6) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_68_good()
{
  goodG2B_61();
  return goodB2G_57();
}

//----- (00000000004163E0) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_01_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 4163E0: using guessed type char buf[16];

//----- (0000000000416518) ----------------------------------------------------
int goodG2B_62()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000416544) ----------------------------------------------------
int goodB2G_58()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 416544: using guessed type char buf[16];

//----- (0000000000416697) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_01_good()
{
  goodG2B_62();
  return goodB2G_58();
}

//----- (00000000004166B1) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004166D2) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (00000000004166F3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_53d_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000041672F) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_badSink(__int64 a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = *(_DWORD *)(a1 + 8);
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000416773) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_goodG2BSink(__int64 a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = *(_DWORD *)(a1 + 8);
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004167B7) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_66b_goodB2GSink(__int64 a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = *(unsigned int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 8);
  if ( v2 > 0 && v2 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000416807) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54e_badSink(a1);
}

//----- (000000000041681E) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54e_goodG2BSink(a1);
}

//----- (0000000000416835) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_54d_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_54e_goodB2GSink(a1);
}

//----- (000000000041684C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(int *a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v3 = *a1;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004168F9) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_goodG2BSink(int *a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v3 = *a1;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004169A6) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_63b_goodB2GSink(int *a1)
{
  int result; // eax
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = *a1;
  v3 = *a1;
  if ( *a1 > 0 && v3 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000416A63) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_61_bad()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__listen_socket_sleep_61b_badSource(0xFFFFFFFF);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000416A95) ----------------------------------------------------
int goodG2B_63()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodG2BSource();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000416AC7) ----------------------------------------------------
int goodB2G_59()
{
  signed int useconds; // [rsp+Ch] [rbp-4h]

  useconds = CWE400_Resource_Exhaustion__listen_socket_sleep_61b_goodB2GSource(0xFFFFFFFF);
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (0000000000416B14) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_61_good()
{
  goodG2B_63();
  return goodB2G_59();
}

//----- (0000000000416B2E) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_53b_badSink(v2);
}

//----- (0000000000416B98) ----------------------------------------------------
__int64 goodG2B_64()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_53b_goodG2BSink(20);
}

//----- (0000000000416BBA) ----------------------------------------------------
__int64 goodB2G_60()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_53b_goodB2GSink(v2);
}

//----- (0000000000416C24) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_53_good()
{
  goodG2B_64();
  return goodB2G_60();
}

//----- (0000000000416C3E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416CC8) ----------------------------------------------------
int goodB2G1_43()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416D79) ----------------------------------------------------
int goodB2G2_43()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416E1E) ----------------------------------------------------
int goodG2B1_39()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    useconds = 20;
  else
    printLine("Benign, fixed string");
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416E6C) ----------------------------------------------------
int goodG2B2_39()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    useconds = 20;
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000416EAE) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_13_good()
{
  goodB2G1_43();
  goodB2G2_43();
  goodG2B1_39();
  return goodG2B2_39();
}

//----- (0000000000416EDC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_09_bad()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 416EDC: using guessed type char buf[16];

//----- (000000000041702C) ----------------------------------------------------
int goodB2G1_44()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;
// 41702C: using guessed type char buf[16];

//----- (00000000004171A3) ----------------------------------------------------
int goodB2G2_44()
{
  int result; // eax
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    v7 = -1;
    fd = socket(2, 1, 6);
    if ( fd != -1 )
    {
      memset(&s, 0, 0x10uLL);
      s = 2;
      v4 = 0;
      v3 = htons(0x6987u);
      if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
      {
        v7 = accept(fd, 0LL, 0LL);
        if ( v7 != -1 )
        {
          v5 = recv(v7, buf, 0xDuLL, 0);
          if ( v5 != -1 )
          {
            if ( v5 )
            {
              buf[v5] = 0;
              useconds = atoi(buf);
            }
          }
        }
      }
    }
    if ( fd != -1 )
      close(fd);
    if ( v7 != -1 )
      close(v7);
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( (int)useconds <= 0 || (int)useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 4171A3: using guessed type char buf[16];

//----- (000000000041730E) ----------------------------------------------------
int goodG2B1_40()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    useconds = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041735A) ----------------------------------------------------
int goodG2B2_40()
{
  int result; // eax
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = -1;
  if ( GLOBAL_CONST_TRUE )
    useconds = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041739A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_09_good()
{
  goodB2G1_44();
  goodB2G2_44();
  goodG2B1_40();
  return goodG2B2_40();
}

//----- (00000000004173C8) ----------------------------------------------------
__int64 __fastcall badSink_7(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (0000000000417401) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_7(v2);
}

//----- (0000000000417474) ----------------------------------------------------
__int64 __fastcall goodG2BSink_7(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004174AD) ----------------------------------------------------
__int64 goodG2B_65()
{
  return goodG2BSink_7(20);
}

//----- (00000000004174D8) ----------------------------------------------------
__int64 __fastcall goodB2GSink_6(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041751D) ----------------------------------------------------
__int64 goodB2G_61()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_6(v2);
}

//----- (0000000000417590) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_44_good()
{
  goodG2B_65();
  return goodB2G_61();
}

//----- (00000000004175AA) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (00000000004175E3) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041761C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_54e_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000417661) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_66_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_66b_badSink((__int64)&v6);
}

//----- (00000000004176D3) ----------------------------------------------------
__int64 goodG2B_66()
{
  char v1; // [rsp+0h] [rbp-20h]
  int v2; // [rsp+8h] [rbp-18h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = 20;
  v2 = 20;
  return CWE400_Resource_Exhaustion__rand_for_loop_66b_goodG2BSink((__int64)&v1);
}

//----- (00000000004176FD) ----------------------------------------------------
__int64 goodB2G_62()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  char v6; // [rsp+0h] [rbp-30h]
  int v7; // [rsp+8h] [rbp-28h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v8 = v2;
  v7 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_66b_goodB2GSink((__int64)&v6);
}

//----- (000000000041776F) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_66_good()
{
  goodG2B_66();
  return goodB2G_62();
}

//----- (0000000000417789) ----------------------------------------------------
int __fastcall badSink_8(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = badStatic_0;
  if ( badStatic_0 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331CC: using guessed type int badStatic_0;

//----- (000000000041783A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic_0 = 1;
  return badSink_8(v2);
}
// 6331CC: using guessed type int badStatic_0;

//----- (00000000004178AE) ----------------------------------------------------
int __fastcall goodB2G1Sink_0(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = goodB2G1Static_0;
  if ( goodB2G1Static_0 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331D0: using guessed type int goodB2G1Static_0;

//----- (000000000041797A) ----------------------------------------------------
int goodB2G1_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static_0 = 0;
  return goodB2G1Sink_0(v2);
}
// 6331D0: using guessed type int goodB2G1Static_0;

//----- (00000000004179EE) ----------------------------------------------------
int __fastcall goodB2G2Sink_0(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = goodB2G2Static_0;
  if ( goodB2G2Static_0 && a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331D4: using guessed type int goodB2G2Static_0;

//----- (0000000000417AAF) ----------------------------------------------------
int goodB2G2_45()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static_0 = 1;
  return goodB2G2Sink_0(v2);
}
// 6331D4: using guessed type int goodB2G2Static_0;

//----- (0000000000417B23) ----------------------------------------------------
int __fastcall goodG2BSink_8(int a1)
{
  int result; // eax
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = goodG2BStatic_0;
  if ( goodG2BStatic_0 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 6331D8: using guessed type int goodG2BStatic_0;

//----- (0000000000417BD4) ----------------------------------------------------
int goodG2B_67()
{
  goodG2BStatic_0 = 1;
  return goodG2BSink_8(20);
}
// 6331D8: using guessed type int goodG2BStatic_0;

//----- (0000000000417C00) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_21_good()
{
  goodB2G1_45();
  goodB2G2_45();
  return goodG2B_67();
}

//----- (0000000000417C24) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000417D1A) ----------------------------------------------------
int goodB2G1_46()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000417E20) ----------------------------------------------------
int goodB2G2_46()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000417F26) ----------------------------------------------------
int goodG2B1_41()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000417FD4) ----------------------------------------------------
int goodG2B2_41()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000418082) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_03_good()
{
  goodB2G1_46();
  goodB2G2_46();
  goodG2B1_41();
  return goodG2B2_41();
}

//----- (00000000004180B0) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_34_bad()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  useconds = v10;
  usleep(v10);
  return printLine("Sleep time possibly too long");
}
// 4180B0: using guessed type char buf[16];

//----- (00000000004181F4) ----------------------------------------------------
int goodG2B_68()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041822C) ----------------------------------------------------
int goodB2G_63()
{
  char buf[16]; // [rsp+0h] [rbp-40h]
  __int16 s; // [rsp+10h] [rbp-30h]
  uint16_t v3; // [rsp+12h] [rbp-2Eh]
  int v4; // [rsp+14h] [rbp-2Ch]
  int v5; // [rsp+20h] [rbp-20h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-14h]
  int v7; // [rsp+30h] [rbp-10h]
  int fd; // [rsp+34h] [rbp-Ch]
  int v9; // [rsp+38h] [rbp-8h]
  int v10; // [rsp+3Ch] [rbp-4h]

  v10 = -1;
  v9 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v9 = accept(fd, 0LL, 0LL);
      if ( v9 != -1 )
      {
        v7 = recv(v9, buf, 0xDuLL, 0);
        if ( v7 != -1 )
        {
          if ( v7 )
          {
            buf[v7] = 0;
            v10 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v9 != -1 )
    close(v9);
  v5 = v10;
  useconds = v10;
  if ( v10 <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 41822C: using guessed type char buf[16];

//----- (000000000041838B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_34_good()
{
  goodG2B_68();
  return goodB2G_63();
}

//----- (00000000004183A5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_63b_badSink(&v6);
}

//----- (0000000000418411) ----------------------------------------------------
int goodG2B_69()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_fwrite_63b_goodG2BSink(&v1);
}

//----- (0000000000418435) ----------------------------------------------------
int goodB2G_64()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_fwrite_63b_goodB2GSink(&v6);
}

//----- (00000000004184A1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_63_good()
{
  goodG2B_69();
  return goodB2G_64();
}

//----- (00000000004184BB) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (00000000004185B3) ----------------------------------------------------
int goodB2G_65()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (00000000004186BB) ----------------------------------------------------
int goodG2B_70()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041876B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_18_good()
{
  goodB2G_65();
  return goodG2B_70();
}

//----- (0000000000418785) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_52c_badSink(a1);
}

//----- (000000000041879C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_52c_goodG2BSink(a1);
}

//----- (00000000004187B3) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_52b_goodB2GSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_for_loop_52c_goodB2GSink(a1);
}

//----- (00000000004187CA) ----------------------------------------------------
int __fastcall badSink_9(__useconds_t a1)
{
  int result; // eax

  result = badStatic_1;
  if ( badStatic_1 )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 6331DC: using guessed type int badStatic_1;

//----- (00000000004187F5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic_1 = 1;
  return badSink_9(v2);
}
// 6331DC: using guessed type int badStatic_1;

//----- (0000000000418869) ----------------------------------------------------
int __fastcall goodB2G1Sink_1(signed int a1)
{
  if ( goodB2G1Static_1 )
    return printLine("Benign, fixed string");
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}
// 6331E0: using guessed type int goodB2G1Static_1;

//----- (00000000004188BB) ----------------------------------------------------
int goodB2G1_47()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static_1 = 0;
  return goodB2G1Sink_1(v2);
}
// 6331E0: using guessed type int goodB2G1Static_1;

//----- (000000000041892F) ----------------------------------------------------
int __fastcall goodB2G2Sink_1(signed int a1)
{
  int result; // eax

  result = goodB2G2Static_1;
  if ( goodB2G2Static_1 )
  {
    if ( a1 <= 0 || a1 > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(a1);
      result = printLine("Sleep time OK");
    }
  }
  return result;
}
// 6331E4: using guessed type int goodB2G2Static_1;

//----- (0000000000418975) ----------------------------------------------------
int goodB2G2_47()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static_1 = 1;
  return goodB2G2Sink_1(v2);
}
// 6331E4: using guessed type int goodB2G2Static_1;

//----- (00000000004189E9) ----------------------------------------------------
int __fastcall goodG2BSink_9(__useconds_t a1)
{
  int result; // eax

  result = goodG2BStatic_1;
  if ( goodG2BStatic_1 )
  {
    usleep(a1);
    result = printLine("Sleep time possibly too long");
  }
  return result;
}
// 6331E8: using guessed type int goodG2BStatic_1;

//----- (0000000000418A14) ----------------------------------------------------
int goodG2B_71()
{
  goodG2BStatic_1 = 1;
  return goodG2BSink_9(0x14u);
}
// 6331E8: using guessed type int goodG2BStatic_1;

//----- (0000000000418A40) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_21_good()
{
  goodB2G1_47();
  goodB2G2_47();
  return goodG2B_71();
}

//----- (0000000000418A64) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_03_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000418AD8) ----------------------------------------------------
int goodB2G1_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000418B67) ----------------------------------------------------
int goodB2G2_48()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000418BF6) ----------------------------------------------------
int goodG2B1_42()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000418C22) ----------------------------------------------------
int goodG2B2_42()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000418C4E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_03_good()
{
  goodB2G1_48();
  goodB2G2_48();
  goodG2B1_42();
  return goodG2B2_42();
}

//----- (0000000000418C7C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54c_badSink(a1);
}

//----- (0000000000418C93) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodG2BSink(a1);
}

//----- (0000000000418CAA) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54c_goodB2GSink(a1);
}

//----- (0000000000418CC1) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000418CCC) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (0000000000418CD7) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000418DED) ----------------------------------------------------
int goodB2G1_49()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticReturnsFalse_1();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000418F1E) ----------------------------------------------------
int goodB2G2_49()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticReturnsTrue_1();
  if ( result && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (0000000000419044) ----------------------------------------------------
int goodG2B1_43()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsFalse_1() )
    printLine("Benign, fixed string");
  else
    v3 = 20;
  result = staticReturnsTrue_1();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041911E) ----------------------------------------------------
int goodG2B2_43()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( (unsigned int)staticReturnsTrue_1() )
    v3 = 20;
  result = staticReturnsTrue_1();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (00000000004191EC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_08_good()
{
  goodB2G1_49();
  goodB2G2_49();
  goodG2B1_43();
  return goodG2B2_43();
}

//----- (000000000041921A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (0000000000419290) ----------------------------------------------------
int goodB2G_66()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (0000000000419321) ----------------------------------------------------
int goodG2B_72()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041934F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_18_good()
{
  goodB2G_66();
  return goodG2B_72();
}

//----- (0000000000419369) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_22_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_fwrite_22_badSink(v2);
}
// 6331EC: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_badGlobal;

//----- (00000000004193DD) ----------------------------------------------------
int goodB2G1_50()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global = 0;
  return CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Sink(v2);
}
// 6331F0: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G1Global;

//----- (0000000000419451) ----------------------------------------------------
int goodB2G2_50()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global = 1;
  return CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Sink(v2);
}
// 6331F4: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodB2G2Global;

//----- (00000000004194C5) ----------------------------------------------------
int goodG2B_73()
{
  CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal = 1;
  return CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BSink(20);
}
// 6331F8: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_22_goodG2BGlobal;

//----- (00000000004194F1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_22_good()
{
  goodB2G1_50();
  goodB2G2_50();
  return goodG2B_73();
}

//----- (0000000000419515) ----------------------------------------------------
__int64 staticReturnsTrue_2()
{
  return 1LL;
}

//----- (0000000000419520) ----------------------------------------------------
__int64 staticReturnsFalse_2()
{
  return 0LL;
}

//----- (000000000041952B) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_08_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = staticReturnsTrue_2();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004195D3) ----------------------------------------------------
int goodB2G1_51()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = staticReturnsFalse_2();
  if ( result )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000419693) ----------------------------------------------------
__int64 goodB2G2_51()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = staticReturnsTrue_2();
  if ( (_DWORD)result && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000419747) ----------------------------------------------------
__int64 goodG2B1_44()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( (unsigned int)staticReturnsFalse_2() )
    printLine("Benign, fixed string");
  else
    v2 = 20;
  result = staticReturnsTrue_2();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (00000000004197B3) ----------------------------------------------------
__int64 goodG2B2_44()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( (unsigned int)staticReturnsTrue_2() )
    v2 = 20;
  result = staticReturnsTrue_2();
  if ( (_DWORD)result )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (0000000000419813) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_08_good()
{
  goodB2G1_51();
  goodB2G2_51();
  goodG2B1_44();
  return goodG2B2_44();
}

//----- (0000000000419841) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *stream; // [rsp+10h] [rbp-40h]
  FILE *s; // [rsp+20h] [rbp-30h]
  unsigned __int64 j; // [rsp+28h] [rbp-28h]
  unsigned __int64 i; // [rsp+30h] [rbp-20h]
  int v10; // [rsp+3Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v10 = v2;
  }
  else
  {
    v10 = 20;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v10 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  else if ( v10 > 0 && v10 <= 20 )
  {
    stream = fopen("output_good.txt", "w+");
    if ( !stream )
      exit(1);
    for ( j = 0LL; v10 > j; ++j )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, stream) != 50 )
        exit(1);
    }
    result = fclose(stream);
  }
  return result;
}

//----- (0000000000419A10) ----------------------------------------------------
int goodB2G_67()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  int result; // eax
  FILE *stream; // [rsp+10h] [rbp-40h]
  FILE *s; // [rsp+20h] [rbp-30h]
  unsigned __int64 j; // [rsp+28h] [rbp-28h]
  unsigned __int64 i; // [rsp+30h] [rbp-20h]
  int v15; // [rsp+3Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v15 = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    v15 = v7;
  }
  result = globalReturnsTrueOrFalse();
  if ( result )
  {
    if ( v15 > 0 && v15 <= 20 )
    {
      s = fopen("output_good.txt", "w+");
      if ( !s )
        exit(1);
      for ( i = 0LL; v15 > i; ++i )
      {
        if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
          exit(1);
      }
      result = fclose(s);
    }
  }
  else if ( v15 > 0 && v15 <= 20 )
  {
    stream = fopen("output_good.txt", "w+");
    if ( !stream )
      exit(1);
    for ( j = 0LL; v15 > j; ++j )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, stream) != 50 )
        exit(1);
    }
    result = fclose(stream);
  }
  return result;
}

//----- (0000000000419C35) ----------------------------------------------------
int goodG2B_74()
{
  int result; // eax
  FILE *stream; // [rsp+10h] [rbp-30h]
  FILE *s; // [rsp+20h] [rbp-20h]
  unsigned __int64 j; // [rsp+28h] [rbp-18h]
  unsigned __int64 i; // [rsp+30h] [rbp-10h]

  globalReturnsTrueOrFalse();
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; i < 0x14; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  else
  {
    stream = fopen("output_bad.txt", "w+");
    if ( !stream )
      exit(1);
    for ( j = 0LL; j < 0x14; ++j )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, stream) != 50 )
        exit(1);
    }
    result = fclose(stream);
  }
  return result;
}

//----- (0000000000419DAC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_12_good()
{
  goodB2G_67();
  return goodG2B_74();
}

//----- (0000000000419DC6) ----------------------------------------------------
int __fastcall badSink_10(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000419E69) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_44_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))badSink_10)(v2);
}

//----- (0000000000419EDC) ----------------------------------------------------
int __fastcall goodG2BSink_10(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (0000000000419F7F) ----------------------------------------------------
int goodG2B_75()
{
  return goodG2BSink_10(20);
}

//----- (0000000000419FAA) ----------------------------------------------------
void __fastcall goodB2GSink_7(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000041A05D) ----------------------------------------------------
__int64 goodB2G_68()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))goodB2GSink_7)(v2);
}

//----- (000000000041A0D0) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_44_good()
{
  goodG2B_75();
  return goodB2G_68();
}

//----- (000000000041A0EA) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_09_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041A1F8) ----------------------------------------------------
int goodB2G1_52()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_FALSE;
  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041A321) ----------------------------------------------------
int goodB2G2_52()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( GLOBAL_CONST_TRUE )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041A43F) ----------------------------------------------------
int goodG2B1_45()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_FALSE )
    printLine("Benign, fixed string");
  else
    v3 = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;
// 426FC4: using guessed type int GLOBAL_CONST_FALSE;

//----- (000000000041A511) ----------------------------------------------------
int goodG2B2_45()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( GLOBAL_CONST_TRUE )
    v3 = 20;
  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 426FC0: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000041A5D7) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_09_good()
{
  goodB2G1_52();
  goodB2G2_52();
  goodG2B1_45();
  return goodG2B2_45();
}

//----- (000000000041A605) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_52_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_52b_badSink(v2);
}

//----- (000000000041A66F) ----------------------------------------------------
__int64 goodG2B_76()
{
  return CWE400_Resource_Exhaustion__rand_for_loop_52b_goodG2BSink(20);
}

//----- (000000000041A691) ----------------------------------------------------
__int64 goodB2G_69()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_for_loop_52b_goodB2GSink(v2);
}

//----- (000000000041A6FB) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_52_good()
{
  goodG2B_76();
  return goodB2G_69();
}

//----- (000000000041A715) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_12_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  else
  {
    useconds = 20;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    usleep(useconds);
    result = printLine("Sleep time possibly too long");
  }
  else if ( useconds <= 0 || useconds > 2000 )
  {
    result = printLine("Sleep time too long");
  }
  else
  {
    usleep(useconds);
    result = printLine("Sleep time OK");
  }
  return result;
}

//----- (000000000041A7DF) ----------------------------------------------------
int goodB2G_70()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // eax
  int v8; // ebx
  int v9; // ebx
  int result; // eax
  signed int useconds; // [rsp+Ch] [rbp-14h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    useconds = v2;
  }
  else
  {
    if ( rand() & 1 )
    {
      v5 = rand() << 30;
      v6 = (rand() << 15) ^ v5;
      v7 = v6 ^ rand();
    }
    else
    {
      v8 = rand() << 30;
      v9 = (rand() << 15) ^ v8;
      v7 = ~(v9 ^ rand());
    }
    useconds = v7;
  }
  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    if ( useconds <= 0 || useconds > 2000 )
    {
      result = printLine("Sleep time too long");
    }
    else
    {
      usleep(useconds);
      result = printLine("Sleep time OK");
    }
  }
  else if ( useconds <= 0 || useconds > 2000 )
  {
    result = printLine("Sleep time too long");
  }
  else
  {
    usleep(useconds);
    result = printLine("Sleep time OK");
  }
  return result;
}

//----- (000000000041A906) ----------------------------------------------------
int goodG2B_77()
{
  globalReturnsTrueOrFalse();
  globalReturnsTrueOrFalse();
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041A96D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_12_good()
{
  goodB2G_70();
  return goodG2B_77();
}

//----- (000000000041A987) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_badSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041A9C0) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_goodG2BSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = a1;
    if ( a1 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041A9F9) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_51b_goodB2GSink(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041AA3E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_54_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54b_badSink(v8);
}
// 41AA3E: using guessed type char buf[16];

//----- (000000000041AB6C) ----------------------------------------------------
int goodG2B_78()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodG2BSink(0x14u);
}

//----- (000000000041AB8E) ----------------------------------------------------
int goodB2G_71()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_54b_goodB2GSink(v8);
}
// 41AB8E: using guessed type char buf[16];

//----- (000000000041ACBC) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_54_good()
{
  goodG2B_78();
  return goodB2G_71();
}

//----- (000000000041ACD6) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_17_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+10h] [rbp-30h]
  unsigned __int64 k; // [rsp+18h] [rbp-28h]
  int v7; // [rsp+24h] [rbp-1Ch]
  int j; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( k = 0LL; v7 > k; ++k )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000041ADF9) ----------------------------------------------------
void goodB2G_72()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+10h] [rbp-30h]
  unsigned __int64 k; // [rsp+18h] [rbp-28h]
  int v7; // [rsp+24h] [rbp-1Ch]
  int j; // [rsp+28h] [rbp-18h]
  int i; // [rsp+2Ch] [rbp-14h]

  v7 = -1;
  for ( i = 0; i <= 0; ++i )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  for ( j = 0; j <= 0; ++j )
  {
    if ( v7 > 0 && v7 <= 20 )
    {
      s = fopen("output_good.txt", "w+");
      if ( !s )
        exit(1);
      for ( k = 0LL; v7 > k; ++k )
      {
        if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
          exit(1);
      }
      fclose(s);
    }
  }
}

//----- (000000000041AF2C) ----------------------------------------------------
void goodG2B_79()
{
  FILE *s; // [rsp+10h] [rbp-20h]
  unsigned __int64 k; // [rsp+18h] [rbp-18h]
  int v2; // [rsp+24h] [rbp-Ch]
  int j; // [rsp+28h] [rbp-8h]
  int i; // [rsp+2Ch] [rbp-4h]

  v2 = -1;
  for ( i = 0; i <= 0; ++i )
    v2 = 20;
  for ( j = 0; j <= 0; ++j )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( k = 0LL; v2 > k; ++k )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000041B007) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_17_good()
{
  goodB2G_72();
  goodG2B_79();
}

//----- (000000000041B021) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041B0AF) ----------------------------------------------------
__int64 goodB2G_73()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041B149) ----------------------------------------------------
__int64 goodG2B_80()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041B18F) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_16_good()
{
  goodB2G_73();
  return goodG2B_80();
}

//----- (000000000041B1A9) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE400_Resource_Exhaustion__rand_fwrite_65b_badSink)(v2);
}

//----- (000000000041B21C) ----------------------------------------------------
int goodG2B_81()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_65b_goodG2BSink(20);
}

//----- (000000000041B247) ----------------------------------------------------
__int64 goodB2G_74()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE400_Resource_Exhaustion__rand_fwrite_65b_goodB2GSink)(v2);
}

//----- (000000000041B2BA) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_fwrite_65_good()
{
  goodG2B_81();
  return goodB2G_74();
}

//----- (000000000041B2D4) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041B3CC) ----------------------------------------------------
int goodB2G1_53()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041B4D4) ----------------------------------------------------
int goodB2G2_53()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041B5DC) ----------------------------------------------------
int goodG2B1_46()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041B68C) ----------------------------------------------------
int goodG2B2_46()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041B73C) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_15_good()
{
  goodB2G1_53();
  goodB2G2_53();
  goodG2B1_46();
  return goodG2B2_46();
}

//----- (000000000041B76A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_52_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52b_badSink(v8);
}
// 41B76A: using guessed type char buf[16];

//----- (000000000041B898) ----------------------------------------------------
int goodG2B_82()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodG2BSink(0x14u);
}

//----- (000000000041B8BA) ----------------------------------------------------
int goodB2G_75()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_52b_goodB2GSink(v8);
}
// 41B8BA: using guessed type char buf[16];

//----- (000000000041B9E8) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_52_good()
{
  goodG2B_82();
  return goodB2G_75();
}

//----- (000000000041BA02) ----------------------------------------------------
__int64 badSource_1()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041BA61) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_42_bad()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = badSource_1();
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041BB15) ----------------------------------------------------
__int64 goodG2BSource_1()
{
  return 20LL;
}

//----- (000000000041BB28) ----------------------------------------------------
int goodG2B_83()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = goodG2BSource_1();
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041BBDC) ----------------------------------------------------
__int64 goodB2GSource_1()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041BC3B) ----------------------------------------------------
int goodB2G_76()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = goodB2GSource_1();
  v2 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v2 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041BCFF) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_42_good()
{
  goodB2G_76();
  return goodG2B_83();
}

//----- (000000000041BD19) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_65_bad()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE400_Resource_Exhaustion__rand_sleep_65b_badSink)(v2);
}

//----- (000000000041BD8C) ----------------------------------------------------
int goodG2B_84()
{
  return CWE400_Resource_Exhaustion__rand_sleep_65b_goodG2BSink(0x14u);
}

//----- (000000000041BDB7) ----------------------------------------------------
__int64 goodB2G_77()
{
  int v0; // ebx
  int v1; // ebx
  unsigned int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return ((__int64 (__fastcall *)(_QWORD))CWE400_Resource_Exhaustion__rand_sleep_65b_goodB2GSink)(v2);
}

//----- (000000000041BE2A) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_sleep_65_good()
{
  goodG2B_84();
  return goodB2G_77();
}

//----- (000000000041BE44) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041BE65) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041BE86) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000041BEC2) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_15_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041BF38) ----------------------------------------------------
int goodB2G1_54()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000041BFC9) ----------------------------------------------------
int goodB2G2_54()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000041C05A) ----------------------------------------------------
int goodG2B1_47()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041C088) ----------------------------------------------------
int goodG2B2_47()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041C0B6) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_15_good()
{
  goodB2G1_54();
  goodB2G2_54();
  goodG2B1_47();
  return goodG2B2_47();
}

//----- (000000000041C0E4) ----------------------------------------------------
int __fastcall badSink_11(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041C105) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_11(v2);
}

//----- (000000000041C16F) ----------------------------------------------------
int __fastcall goodG2BSink_11(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041C190) ----------------------------------------------------
int goodG2B_85()
{
  return goodG2BSink_11(0x14u);
}

//----- (000000000041C1B2) ----------------------------------------------------
int __fastcall goodB2GSink_8(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000041C1EE) ----------------------------------------------------
int goodB2G_78()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return goodB2GSink_8(v2);
}

//----- (000000000041C258) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_41_good()
{
  goodB2G_78();
  return goodG2B_85();
}

//----- (000000000041C272) ----------------------------------------------------
int badSink_12()
{
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_45_badData);
  return printLine("Sleep time possibly too long");
}
// 6331FC: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_badData;

//----- (000000000041C299) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_45_badData = v8;
  return badSink_12();
}
// 6331FC: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_badData;
// 41C299: using guessed type char buf[16];

//----- (000000000041C3D0) ----------------------------------------------------
int goodG2BSink_12()
{
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodG2BData);
  return printLine("Sleep time possibly too long");
}
// 633200: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodG2BData;

//----- (000000000041C3F7) ----------------------------------------------------
int goodG2B_86()
{
  CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodG2BData = 20;
  return goodG2BSink_12();
}
// 633200: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodG2BData;

//----- (000000000041C422) ----------------------------------------------------
int goodB2GSink_9()
{
  if ( CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData <= 0
    || CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData > 2000 )
  {
    return printLine("Sleep time too long");
  }
  usleep(CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData);
  return printLine("Sleep time OK");
}
// 633204: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData;

//----- (000000000041C464) ----------------------------------------------------
int goodB2G_79()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData = v8;
  return goodB2GSink_9();
}
// 633204: using guessed type int CWE400_Resource_Exhaustion__listen_socket_sleep_45_goodB2GData;
// 41C464: using guessed type char buf[16];

//----- (000000000041C59B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_45_good()
{
  goodG2B_86();
  return goodB2G_79();
}

//----- (000000000041C5B5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_16_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 41C5B5: using guessed type char buf[16];

//----- (000000000041C6EF) ----------------------------------------------------
int goodB2G_80()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 41C6EF: using guessed type char buf[16];

//----- (000000000041C844) ----------------------------------------------------
int goodG2B_87()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041C872) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_16_good()
{
  goodB2G_80();
  return goodG2B_87();
}

//----- (000000000041C88C) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_badSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53c_badSink(a1);
}

//----- (000000000041C8A3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_goodG2BSink(__useconds_t a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53c_goodG2BSink(a1);
}

//----- (000000000041C8BA) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_53b_goodB2GSink(signed int a1)
{
  return CWE400_Resource_Exhaustion__rand_sleep_53c_goodB2GSink(a1);
}

//----- (000000000041C8D1) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_68b_badSink()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_68_badData;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}
// 633230: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_badData;

//----- (000000000041C97A) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_68b_goodG2BSink()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = CWE400_Resource_Exhaustion__rand_fwrite_68_goodG2BData;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v2 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}
// 633234: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_goodG2BData;

//----- (000000000041CA23) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_68b_goodB2GSink()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData;
  v2 = CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData;
  if ( CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData > 0
    && CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v2 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633238: using guessed type int CWE400_Resource_Exhaustion__rand_fwrite_68_goodB2GData;

//----- (000000000041CADC) ----------------------------------------------------
__int64 badSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041CB3B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_42_bad()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = badSource_2();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041CB6D) ----------------------------------------------------
__int64 goodG2BSource_2()
{
  return 20LL;
}

//----- (000000000041CB80) ----------------------------------------------------
int goodG2B_88()
{
  __useconds_t useconds; // [rsp+Ch] [rbp-4h]

  useconds = goodG2BSource_2();
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041CBB2) ----------------------------------------------------
__int64 goodB2GSource_2()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    LODWORD(result) = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    LODWORD(result) = ~(v4 ^ rand());
  }
  return (unsigned int)result;
}

//----- (000000000041CC11) ----------------------------------------------------
int goodB2G_81()
{
  signed int useconds; // [rsp+Ch] [rbp-4h]

  useconds = goodB2GSource_2();
  if ( useconds <= 0 || useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}

//----- (000000000041CC5E) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_42_good()
{
  goodB2G_81();
  return goodG2B_88();
}

//----- (000000000041CC78) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_13_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CD1A) ----------------------------------------------------
int goodB2G1_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  if ( v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CDD4) ----------------------------------------------------
__int64 goodB2G2_55()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-20h]
  int v7; // [rsp+Ch] [rbp-14h]

  v7 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v7 = v2;
  }
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 && v7 > 0 && v7 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v7;
      if ( v7 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CE82) ----------------------------------------------------
__int64 goodG2B1_48()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v2 = 20;
  else
    printLine("Benign, fixed string");
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CEE8) ----------------------------------------------------
__int64 goodG2B2_48()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+0h] [rbp-10h]
  int v2; // [rsp+Ch] [rbp-4h]

  v2 = -1;
  if ( GLOBAL_CONST_FIVE == 5 )
    v2 = 20;
  result = (unsigned int)GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 426FC8: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000041CF42) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_13_good()
{
  goodB2G1_55();
  goodB2G2_55();
  goodG2B1_48();
  return goodG2B2_48();
}

//----- (000000000041CF70) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_63_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(&v6);
}

//----- (000000000041CFDC) ----------------------------------------------------
__int64 goodG2B_89()
{
  int v1; // [rsp+Ch] [rbp-4h]

  v1 = 20;
  return CWE400_Resource_Exhaustion__rand_for_loop_63b_goodG2BSink(&v1);
}

//----- (000000000041D000) ----------------------------------------------------
__int64 goodB2G_82()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int v6; // [rsp+Ch] [rbp-14h]

  v6 = -1;
  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  return CWE400_Resource_Exhaustion__rand_for_loop_63b_goodB2GSink(&v6);
}

//----- (000000000041D06C) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_63_good()
{
  goodG2B_89();
  return goodB2G_82();
}

//----- (000000000041D086) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_badSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = *a1;
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041D0C9) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_goodG2BSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  v2 = *a1;
  for ( i = 0LL; ; ++i )
  {
    result = v2;
    if ( v2 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041D10C) ----------------------------------------------------
__int64 __fastcall CWE400_Resource_Exhaustion__rand_for_loop_63b_goodB2GSink(int *a1)
{
  __int64 result; // rax
  int v2; // [rsp+14h] [rbp-Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)*a1;
  v2 = *a1;
  if ( *a1 > 0 && v2 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v2;
      if ( v2 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041D15B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_68b_badSink()
{
  usleep(CWE400_Resource_Exhaustion__rand_sleep_68_badData);
  return printLine("Sleep time possibly too long");
}
// 633258: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_badData;

//----- (000000000041D182) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_68b_goodG2BSink()
{
  usleep(CWE400_Resource_Exhaustion__rand_sleep_68_goodG2BData);
  return printLine("Sleep time possibly too long");
}
// 633254: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_goodG2BData;

//----- (000000000041D1A9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_68b_goodB2GSink()
{
  if ( CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData <= 0
    || CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData > 2000 )
  {
    return printLine("Sleep time too long");
  }
  usleep(CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData);
  return printLine("Sleep time OK");
}
// 63325C: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData;

//----- (000000000041D1EB) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_05_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633148: using guessed type int staticTrue_2;

//----- (000000000041D2F9) ----------------------------------------------------
int goodB2G1_56()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticFalse_2;
  if ( staticFalse_2 )
    return printLine("Benign, fixed string");
  if ( v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633148: using guessed type int staticTrue_2;
// 633208: using guessed type int staticFalse_2;

//----- (000000000041D422) ----------------------------------------------------
int goodB2G2_56()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-28h]
  unsigned __int64 i; // [rsp+10h] [rbp-20h]
  int v8; // [rsp+1Ch] [rbp-14h]

  v8 = -1;
  if ( staticTrue_2 )
  {
    if ( rand() & 1 )
    {
      v0 = rand() << 30;
      v1 = (rand() << 15) ^ v0;
      v2 = v1 ^ rand();
    }
    else
    {
      v3 = rand() << 30;
      v4 = (rand() << 15) ^ v3;
      v2 = ~(v4 ^ rand());
    }
    v8 = v2;
  }
  result = staticTrue_2;
  if ( staticTrue_2 && v8 > 0 && v8 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v8 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633148: using guessed type int staticTrue_2;

//----- (000000000041D540) ----------------------------------------------------
int goodG2B1_49()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( staticFalse_2 )
    printLine("Benign, fixed string");
  else
    v3 = 20;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633148: using guessed type int staticTrue_2;
// 633208: using guessed type int staticFalse_2;

//----- (000000000041D612) ----------------------------------------------------
int goodG2B2_49()
{
  int result; // eax
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = -1;
  if ( staticTrue_2 )
    v3 = 20;
  result = staticTrue_2;
  if ( staticTrue_2 )
  {
    s = fopen("output_bad.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}
// 633148: using guessed type int staticTrue_2;

//----- (000000000041D6D8) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_05_good()
{
  goodB2G1_56();
  goodB2G2_56();
  goodG2B1_49();
  return goodG2B2_49();
}

//----- (000000000041D706) ----------------------------------------------------
int __fastcall badSink_13(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041D7A9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_41_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return badSink_13(v2);
}

//----- (000000000041D813) ----------------------------------------------------
int __fastcall goodG2BSink_13(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041D8B6) ----------------------------------------------------
int goodG2B_90()
{
  return goodG2BSink_13(20);
}

//----- (000000000041D8D8) ----------------------------------------------------
void __fastcall goodB2GSink_10(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000041D98B) ----------------------------------------------------
void goodB2G_83()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2GSink_10(v2);
}

//----- (000000000041D9F5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_41_good()
{
  goodB2G_83();
  return goodG2B_90();
}

//----- (000000000041DA0F) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_51_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_51b_badSink(v8);
}
// 41DA0F: using guessed type char buf[16];

//----- (000000000041DB3D) ----------------------------------------------------
int goodG2B_91()
{
  return CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodG2BSink(0x14u);
}

//----- (000000000041DB5F) ----------------------------------------------------
int goodB2G_84()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  int v8; // [rsp+2Ch] [rbp-4h]

  v8 = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            v8 = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  return CWE400_Resource_Exhaustion__listen_socket_sleep_51b_goodB2GSink(v8);
}
// 41DB5F: using guessed type char buf[16];

//----- (000000000041DC8D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_51_good()
{
  goodG2B_91();
  return goodB2G_84();
}

//----- (000000000041DCA7) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_badSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_53c_badSink(a1);
}

//----- (000000000041DCBE) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_goodG2BSink(int a1)
{
  return CWE400_Resource_Exhaustion__rand_fwrite_53c_goodG2BSink(a1);
}

//----- (000000000041DCD5) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_53b_goodB2GSink(int a1)
{
  CWE400_Resource_Exhaustion__rand_fwrite_53c_goodB2GSink(a1);
}

//----- (000000000041DCEC) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_badSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041DD8F) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_goodG2BSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; a1 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041DE32) ----------------------------------------------------
void __fastcall CWE400_Resource_Exhaustion__rand_fwrite_52c_goodB2GSink(int a1)
{
  FILE *s; // [rsp+20h] [rbp-10h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  if ( a1 > 0 && a1 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; a1 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    fclose(s);
  }
}

//----- (000000000041DEE5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_53_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  return CWE400_Resource_Exhaustion__rand_fwrite_53b_badSink(v2);
}

//----- (000000000041DF4F) ----------------------------------------------------
int goodG2B_92()
{
  return CWE400_Resource_Exhaustion__rand_fwrite_53b_goodG2BSink(20);
}

//----- (000000000041DF71) ----------------------------------------------------
void goodB2G_85()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_fwrite_53b_goodB2GSink(v2);
}

//----- (000000000041DFDB) ----------------------------------------------------
void CWE400_Resource_Exhaustion__rand_fwrite_53_good()
{
  goodG2B_92();
  goodB2G_85();
}

//----- (000000000041DFF5) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+18h] [rbp-28h]
  int v7; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041E0F7) ----------------------------------------------------
int goodG2B_93()
{
  FILE *s; // [rsp+18h] [rbp-18h]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041E1B1) ----------------------------------------------------
int goodB2G_86()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+18h] [rbp-28h]
  int v6; // [rsp+20h] [rbp-20h]
  unsigned __int64 i; // [rsp+28h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041E2C3) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_34_good()
{
  goodG2B_93();
  return goodB2G_86();
}

//----- (000000000041E2DD) ----------------------------------------------------
__int64 __fastcall badSink_14(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)badStatic_2;
  if ( badStatic_2 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 63320C: using guessed type int badStatic_2;

//----- (000000000041E320) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_21_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  badStatic_2 = 1;
  return badSink_14(v2);
}
// 63320C: using guessed type int badStatic_2;

//----- (000000000041E394) ----------------------------------------------------
int __fastcall goodB2G1Sink_2(int a1)
{
  int result; // eax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = goodB2G1Static_2;
  if ( goodB2G1Static_2 )
    return printLine("Benign, fixed string");
  if ( a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633210: using guessed type int goodB2G1Static_2;

//----- (000000000041E3EF) ----------------------------------------------------
int goodB2G1_57()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G1Static_2 = 0;
  return goodB2G1Sink_2(v2);
}
// 633210: using guessed type int goodB2G1Static_2;

//----- (000000000041E463) ----------------------------------------------------
__int64 __fastcall goodB2G2Sink_2(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)goodB2G2Static_2;
  if ( goodB2G2Static_2 && a1 > 0 && a1 <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633214: using guessed type int goodB2G2Static_2;

//----- (000000000041E4B2) ----------------------------------------------------
__int64 goodB2G2_57()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  goodB2G2Static_2 = 1;
  return goodB2G2Sink_2(v2);
}
// 633214: using guessed type int goodB2G2Static_2;

//----- (000000000041E526) ----------------------------------------------------
__int64 __fastcall goodG2BSink_14(int a1)
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  result = (unsigned int)goodG2BStatic_2;
  if ( goodG2BStatic_2 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = a1;
      if ( a1 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}
// 633218: using guessed type int goodG2BStatic_2;

//----- (000000000041E569) ----------------------------------------------------
__int64 goodG2B_94()
{
  goodG2BStatic_2 = 1;
  return goodG2BSink_14(20);
}
// 633218: using guessed type int goodG2BStatic_2;

//----- (000000000041E595) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_21_good()
{
  goodB2G1_57();
  goodB2G2_57();
  return goodG2B_94();
}

//----- (000000000041E5B9) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_badSink(__int64 a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v3 = *(_DWORD *)(a1 + 8);
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041E667) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_goodG2BSink(__int64 a1)
{
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v3 = *(_DWORD *)(a1 + 8);
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v3 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041E715) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_fwrite_66b_goodB2GSink(__int64 a1)
{
  int result; // eax
  FILE *s; // [rsp+18h] [rbp-18h]
  int v3; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  result = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 8);
  if ( v3 > 0 && v3 <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v3 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041E7D3) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_badSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041E7F4) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_goodG2BSink(__useconds_t a1)
{
  usleep(a1);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041E815) ----------------------------------------------------
int __fastcall CWE400_Resource_Exhaustion__rand_sleep_52c_goodB2GSink(signed int a1)
{
  if ( a1 <= 0 || a1 > 2000 )
    return printLine("Sleep time too long");
  usleep(a1);
  return printLine("Sleep time OK");
}

//----- (000000000041E851) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_16_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v7; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v7 = v2;
  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; v7 > i; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041E949) ----------------------------------------------------
int goodB2G_87()
{
  int v0; // ebx
  int v1; // ebx
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  FILE *s; // [rsp+8h] [rbp-28h]
  int v6; // [rsp+14h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+18h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ rand());
  }
  v6 = result;
  if ( result > 0 && result <= 20 )
  {
    s = fopen("output_good.txt", "w+");
    if ( !s )
      exit(1);
    for ( i = 0LL; v6 > i; ++i )
    {
      if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
        exit(1);
    }
    result = fclose(s);
  }
  return result;
}

//----- (000000000041EA51) ----------------------------------------------------
int goodG2B_95()
{
  FILE *s; // [rsp+8h] [rbp-18h]
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  s = fopen("output_bad.txt", "w+");
  if ( !s )
    exit(1);
  for ( i = 0LL; i < 0x14; ++i )
  {
    if ( fwrite("This is the sentence we are printing to the file. ", 1uLL, 0x32uLL, s) != 50 )
      exit(1);
  }
  return fclose(s);
}

//----- (000000000041EB01) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_fwrite_16_good()
{
  goodB2G_87();
  return goodG2B_95();
}

//----- (000000000041EB1B) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_06_bad()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  usleep(useconds);
  return printLine("Sleep time possibly too long");
}
// 41EB1B: using guessed type char buf[16];

//----- (000000000041EC6B) ----------------------------------------------------
int goodB2G1_58()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 41EC6B: using guessed type char buf[16];

//----- (000000000041EDE2) ----------------------------------------------------
int goodB2G2_58()
{
  char buf[16]; // [rsp+0h] [rbp-30h]
  __int16 s; // [rsp+10h] [rbp-20h]
  uint16_t v3; // [rsp+12h] [rbp-1Eh]
  int v4; // [rsp+14h] [rbp-1Ch]
  int v5; // [rsp+20h] [rbp-10h]
  int fd; // [rsp+24h] [rbp-Ch]
  int v7; // [rsp+28h] [rbp-8h]
  __useconds_t useconds; // [rsp+2Ch] [rbp-4h]

  useconds = -1;
  v7 = -1;
  fd = socket(2, 1, 6);
  if ( fd != -1 )
  {
    memset(&s, 0, 0x10uLL);
    s = 2;
    v4 = 0;
    v3 = htons(0x6987u);
    if ( bind(fd, (const struct sockaddr *)&s, 0x10u) != -1 && listen(fd, 5) != -1 )
    {
      v7 = accept(fd, 0LL, 0LL);
      if ( v7 != -1 )
      {
        v5 = recv(v7, buf, 0xDuLL, 0);
        if ( v5 != -1 )
        {
          if ( v5 )
          {
            buf[v5] = 0;
            useconds = atoi(buf);
          }
        }
      }
    }
  }
  if ( fd != -1 )
    close(fd);
  if ( v7 != -1 )
    close(v7);
  if ( (int)useconds <= 0 || (int)useconds > 2000 )
    return printLine("Sleep time too long");
  usleep(useconds);
  return printLine("Sleep time OK");
}
// 41EDE2: using guessed type char buf[16];

//----- (000000000041EF4D) ----------------------------------------------------
int goodG2B1_50()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041EF99) ----------------------------------------------------
int goodG2B2_50()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041EFD9) ----------------------------------------------------
int CWE400_Resource_Exhaustion__listen_socket_sleep_06_good()
{
  goodB2G1_58();
  goodB2G2_58();
  goodG2B1_50();
  return goodG2B2_50();
}

//----- (000000000041F007) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_68_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_68_badData = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_68b_badSink();
}
// 633258: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_badData;

//----- (000000000041F07A) ----------------------------------------------------
int goodG2B_96()
{
  CWE400_Resource_Exhaustion__rand_sleep_68_goodG2BData = 20;
  return CWE400_Resource_Exhaustion__rand_sleep_68b_goodG2BSink();
}
// 633254: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_goodG2BData;

//----- (000000000041F0A5) ----------------------------------------------------
int goodB2G_88()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData = v2;
  return CWE400_Resource_Exhaustion__rand_sleep_68b_goodB2GSink();
}
// 63325C: using guessed type int CWE400_Resource_Exhaustion__rand_sleep_68_goodB2GData;

//----- (000000000041F118) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_68_good()
{
  goodG2B_96();
  return goodB2G_88();
}

//----- (000000000041F132) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_18_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx
  __int64 result; // rax
  int v6; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  v6 = v2;
  for ( i = 0LL; ; ++i )
  {
    result = v6;
    if ( v6 <= i )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041F1C0) ----------------------------------------------------
__int64 goodB2G_89()
{
  int v0; // ebx
  int v1; // ebx
  __int64 result; // rax
  int v3; // ebx
  int v4; // ebx
  int v5; // [rsp+4h] [rbp-1Ch]
  unsigned __int64 i; // [rsp+8h] [rbp-18h]

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    result = v1 ^ (unsigned int)rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    result = ~(v4 ^ (unsigned int)rand());
  }
  v5 = result;
  if ( (int)result > 0 && (int)result <= 20 )
  {
    for ( i = 0LL; ; ++i )
    {
      result = v5;
      if ( v5 <= i )
        break;
      printLine("Hello");
    }
  }
  return result;
}

//----- (000000000041F25A) ----------------------------------------------------
__int64 goodG2B_97()
{
  __int64 result; // rax
  unsigned __int64 i; // [rsp+8h] [rbp-8h]

  for ( i = 0LL; ; ++i )
  {
    result = 20LL;
    if ( i >= 0x14 )
      break;
    printLine("Hello");
  }
  return result;
}

//----- (000000000041F2A0) ----------------------------------------------------
__int64 CWE400_Resource_Exhaustion__rand_for_loop_18_good()
{
  goodB2G_89();
  return goodG2B_97();
}

//----- (000000000041F2BA) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_34_bad()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  usleep(v2);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041F33A) ----------------------------------------------------
int goodG2B_98()
{
  usleep(0x14u);
  return printLine("Sleep time possibly too long");
}

//----- (000000000041F372) ----------------------------------------------------
int goodB2G_90()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // ebx
  int v4; // ebx

  if ( rand() & 1 )
  {
    v0 = rand() << 30;
    v1 = (rand() << 15) ^ v0;
    v2 = v1 ^ rand();
  }
  else
  {
    v3 = rand() << 30;
    v4 = (rand() << 15) ^ v3;
    v2 = ~(v4 ^ rand());
  }
  if ( v2 <= 0 || v2 > 2000 )
    return printLine("Sleep time too long");
  usleep(v2);
  return printLine("Sleep time OK");
}

//----- (000000000041F40D) ----------------------------------------------------
int CWE400_Resource_Exhaustion__rand_sleep_34_good()
{
  goodG2B_98();
  return goodB2G_90();
}

//----- (000000000041F427) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (000000000041F448) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf("%", a1);
  return result;
}

//----- (000000000041F473) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (000000000041F494) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (000000000041F4B9) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000041F4DF) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000041F503) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000041F527) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (000000000041F54B) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (000000000041F56F) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000041F59F) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000041F5C0) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (000000000041F5E4) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000041F60F) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (000000000041F63B) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (000000000041F692) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400C30: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F76B) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400D50: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (000000000041F81F) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (000000000041F82A) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (000000000041F835) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (000000000041F84B) ----------------------------------------------------
void good1()
{
  ;
}

//----- (000000000041F851) ----------------------------------------------------
void good2()
{
  ;
}

//----- (000000000041F857) ----------------------------------------------------
void good3()
{
  ;
}

//----- (000000000041F85D) ----------------------------------------------------
void good4()
{
  ;
}

//----- (000000000041F863) ----------------------------------------------------
void good5()
{
  ;
}

//----- (000000000041F869) ----------------------------------------------------
void good6()
{
  ;
}

//----- (000000000041F86F) ----------------------------------------------------
void good7()
{
  ;
}

//----- (000000000041F875) ----------------------------------------------------
void good8()
{
  ;
}

//----- (000000000041F87B) ----------------------------------------------------
void good9()
{
  ;
}

//----- (000000000041F881) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (000000000041F887) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (000000000041F88D) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (000000000041F893) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (000000000041F899) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (000000000041F89F) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (000000000041F8A5) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (000000000041F8AB) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (000000000041F8B1) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (000000000041F8B7) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (000000000041F8EA) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (000000000041F98E) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (000000000041F9C2) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (000000000041F9E1) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (000000000041FA56) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (000000000041FA70) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (000000000041FA8A) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (000000000041FAB0) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 632DD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 632DD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (000000000041FB24) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 1068 function(s) have been successfully decompiled
