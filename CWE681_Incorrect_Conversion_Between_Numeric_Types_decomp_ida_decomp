/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2018 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <math.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *init_proc();
__int64 sub_4009D0();
// int printf(const char *format, ...);
// int puts(const char *s);
// __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD); weak
// void *malloc(size_t size);
// int __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);
// char *fgets(char *s, int n, FILE *stream);
// double atof(const char *nptr);
// int iswxdigit(wint_t wc);
// void free(void *ptr);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// const unsigned __int16 **__ctype_b_loc(void);
// int pthread_join(pthread_t th, void **thread_return);
// void __noreturn pthread_exit(void *retval);
// int wprintf(const wchar_t *format, ...);
// __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD); weak
// void srand(unsigned int seed);
// int pthread_mutex_lock(pthread_mutex_t *mutex);
// int rand(void);
// int pthread_mutex_destroy(pthread_mutex_t *mutex);
// double sqrt(double x);
// int pthread_mutex_unlock(pthread_mutex_t *mutex);
// time_t time(time_t *timer);
// __int64 _gmon_start__(void); weak
// void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>);
__int64 deregister_tm_clones();
__int64 register_tm_clones();
__int64 _do_global_dtors_aux();
__int64 frame_dummy();
int __cdecl main(int argc, const char **argv, const char **envp);
__int64 staticReturnsTrue();
__int64 staticReturnsFalse();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad();
int good1();
int good2();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad();
int good1_0();
int good2_0();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_bad();
int good1_1();
int good2_1();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad();
int good1_2();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad();
int good1_3();
int good2_2();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_bad();
int good1_4();
int good2_3();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad();
int good1_5();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_bad();
int good1_6();
int good2_4();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad();
int good1_7();
int good2_5();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_bad();
int good1_8();
int good2_6();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_bad();
int good1_9();
int good2_7();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_good();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad();
void good1_10();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_bad();
int good1_11();
int good2_8();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad();
int good1_12();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad();
int good1_13();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_bad();
int good1_14();
int good2_9();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_bad();
int good1_15();
int good2_10();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_bad();
int good1_16();
int good2_11();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_bad();
int good1_17();
int good2_12();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad();
int good1_18();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_bad();
int good1_19();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_good();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad();
void good1_20();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_bad();
int good1_21();
int good2_13();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_bad();
int good1_22();
int good2_14();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad();
int good1_23();
int good2_15();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_bad();
int good1_24();
int good2_16();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad();
int good1_25();
int good2_17();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_bad();
int good1_26();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad();
int good1_27();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_bad();
int good1_28();
int good2_18();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad();
int good1_29();
int good2_19();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad();
int good1_30();
int good2_20();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_bad();
int good1_31();
int good2_21();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad();
int good1_32();
int good2_22();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad();
int good1_33();
int good2_23();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad();
int good1_34();
int good2_24();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad();
int good1_35();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad();
int good1_36();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad();
int good1_37();
int good2_25();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad();
int good1_38();
int good2_26();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad();
int good1_39();
int good2_27();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_good();
__int64 staticReturnsTrue_0();
__int64 staticReturnsFalse_0();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad();
int good1_40();
int good2_28();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad();
void good1_41();
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_bad();
int good1_42();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_good();
__int64 staticReturnsTrue_1();
__int64 staticReturnsFalse_1();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad();
int good1_43();
int good2_29();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_bad();
int good1_44();
int good2_30();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_bad();
int good1_45();
int good2_31();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad();
int good1_46();
int good2_32();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_bad();
int good1_47();
int good2_33();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad();
int good1_48();
int good2_34();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_bad();
int good1_49();
int good2_35();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad();
int good1_50();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad();
int good1_51();
int good2_36();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad();
int good1_52();
int good2_37();
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_good();
int __fastcall printLine(const char *a1);
int __fastcall printWLine(__int64 a1);
int __fastcall printIntLine(unsigned int a1);
int __fastcall printShortLine(__int16 a1);
int __fastcall printFloatLine(float a1);
int __fastcall printLongLine(__int64 a1);
int __fastcall printLongLongLine(__int64 a1);
int __fastcall printSizeTLine(__int64 a1);
int __fastcall printHexCharLine(char a1);
int __fastcall printWcharLine(int a1);
int __fastcall printUnsignedLine(unsigned int a1);
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1);
int __fastcall printDoubleLine(double a1);
int __fastcall printStructLine(unsigned int *a1);
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2);
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3);
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3);
__int64 globalReturnsTrue();
__int64 globalReturnsFalse();
__int64 globalReturnsTrueOrFalse();
void good1_53();
void good2_38();
void good3();
void good4();
void good5();
void good6();
void good7();
void good8();
void good9();
void bad1();
void bad2();
void bad3();
void bad4();
void bad5();
void bad6();
void bad7();
void bad8();
void bad9();
void __fastcall __noreturn internal_start(void *a1);
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3);
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1);
__int64 __fastcall stdThreadDestroy(void *a1);
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1);
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1);
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1);
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1);
void _libc_csu_init(void); // idb
void _libc_csu_fini(void); // idb
void term_proc();

//-------------------------------------------------------------------------
// Data declarations

wchar_t format = 37; // idb
char s[3] = { '\0', '\0', '\0' }; // idb
int GLOBAL_CONST_TRUE = 1; // weak
int GLOBAL_CONST_FALSE = 0; // weak
int GLOBAL_CONST_FIVE = 5; // weak
__int64 (__fastcall *_frame_dummy_init_array_entry[2])() = { &frame_dummy, &_do_global_dtors_aux }; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
__int64 (*qword_60F010)(void) = NULL; // weak
int staticTrue = 1; // weak
int staticTrue_0 = 1; // weak
int staticFive = 5; // weak
int staticFive_0 = 5; // weak
int staticTrue_1 = 1; // weak
int staticFive_1 = 5; // weak
int globalTrue = 1; // weak
int globalFive = 5; // weak
FILE *stdin; // idb
char completed_6355; // weak
int staticFalse; // weak
int staticFalse_0; // weak
int staticFalse_1; // weak
int globalFalse; // weak
int globalArgc; // weak
__int64 globalArgv; // weak
// extern _UNKNOWN __gmon_start__; weak


//----- (00000000004009B0) ----------------------------------------------------
void *init_proc()
{
  void *result; // rax

  result = &__gmon_start__;
  if ( &__gmon_start__ )
    result = (void *)_gmon_start__();
  return result;
}
// 400B50: using guessed type __int64 _gmon_start__(void);

//----- (00000000004009D0) ----------------------------------------------------
__int64 sub_4009D0()
{
  return qword_60F010();
}
// 60F010: using guessed type __int64 (*qword_60F010)(void);

//----- (0000000000400B60) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)
{
  int v2; // esi
  int v3; // [rsp-8h] [rbp-8h]
  __int64 _0; // [rsp+0h] [rbp+0h]

  v2 = v3;
  *(_QWORD *)&v3 = a1;
  __libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v2,
    (char **)&_0,
    _libc_csu_init,
    _libc_csu_fini,
    a2,
    &v3);
  __halt();
}
// 400B66: positive sp value 8 has been found

//----- (0000000000400B90) ----------------------------------------------------
__int64 deregister_tm_clones()
{
  __int64 result; // rax

  result = 6353151LL - (_QWORD)&stdin;
  if ( (unsigned __int64)(6353151LL - (_QWORD)&stdin) > 0xE )
    result = 0LL;
  return result;
}

//----- (0000000000400BC0) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000400C00) ----------------------------------------------------
__int64 _do_global_dtors_aux()
{
  __int64 result; // rax

  if ( !completed_6355 )
  {
    result = deregister_tm_clones();
    completed_6355 = 1;
  }
  return result;
}
// 60F100: using guessed type char completed_6355;

//----- (0000000000400C20) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 400C20: could not find valid save-restore pair for rbp

//----- (0000000000400C4D) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  v3 = time(0LL);
  srand(v3);
  globalArgc = argc;
  globalArgv = (__int64)argv;
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad();
  printLine("Calling CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad();");
  CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad();
  return 0;
}
// 60F114: using guessed type int globalArgc;
// 60F118: using guessed type __int64 globalArgv;

//----- (00000000004014F8) ----------------------------------------------------
__int64 staticReturnsTrue()
{
  return 1LL;
}

//----- (0000000000401503) ----------------------------------------------------
__int64 staticReturnsFalse()
{
  return 0LL;
}

//----- (000000000040150E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}

//----- (000000000040158E) ----------------------------------------------------
int good1()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)staticReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000401647) ----------------------------------------------------
int good2()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}

//----- (00000000004016F5) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_good()
{
  good1();
  return good2();
}

//----- (000000000040170F) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (0000000000401796) ----------------------------------------------------
int good1_0()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (0000000000401834) ----------------------------------------------------
int good2_0()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004018D2) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_good()
{
  good1_0();
  return good2_0();
}

//----- (00000000004018EC) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (000000000040197D) ----------------------------------------------------
int good1_1()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 60F110: using guessed type int globalFalse;

//----- (0000000000401A34) ----------------------------------------------------
int good2_1()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (0000000000401AE0) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_10_good()
{
  good1_1();
  return good2_1();
}

//----- (0000000000401AFA) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v3);
  }
  else
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}

//----- (0000000000401C0E) ----------------------------------------------------
int good1_2()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 <= 3.402823466385289e38 && v3 >= 1.175494350822288e-38 )
      result = printFloatLine(v3);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  else
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}

//----- (0000000000401D53) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good()
{
  return good1_2();
}

//----- (0000000000401D63) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000401DF5) ----------------------------------------------------
int good1_3()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000401EAD) ----------------------------------------------------
int good2_2()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000401F5A) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_14_good()
{
  good1_3();
  return good2_2();
}

//----- (0000000000401F74) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (0000000000402005) ----------------------------------------------------
int good1_4()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004020BC) ----------------------------------------------------
int good2_3()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (0000000000402168) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_06_good()
{
  good1_4();
  return good2_3();
}

//----- (0000000000402182) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (000000000040220A) ----------------------------------------------------
int good1_5()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004022A9) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_good()
{
  return good1_5();
}

//----- (00000000004022B9) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402335) ----------------------------------------------------
int good1_6()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 40B610: using guessed type int GLOBAL_CONST_FALSE;

//----- (00000000004023EA) ----------------------------------------------------
int good2_4()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000402494) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_09_good()
{
  good1_6();
  return good2_4();
}

//----- (00000000004024AE) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (0000000000402529) ----------------------------------------------------
int good1_7()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (00000000004025DD) ----------------------------------------------------
int good2_5()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000402686) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_04_good()
{
  good1_7();
  return good2_5();
}

//----- (00000000004026A0) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (0000000000402714) ----------------------------------------------------
int good1_8()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (00000000004027B2) ----------------------------------------------------
int good2_6()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000402850) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_03_good()
{
  good1_8();
  return good2_6();
}

//----- (000000000040286A) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (00000000004028E9) ----------------------------------------------------
int good1_9()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (00000000004029A1) ----------------------------------------------------
int good2_7()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000402A4E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_14_good()
{
  good1_9();
  return good2_7();
}

//----- (0000000000402A68) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v1; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v1 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v1 = atof(&s);
    else
      printLine("fgets() failed.");
    printFloatLine(v1);
  }
}

//----- (0000000000402AED) ----------------------------------------------------
void good1_10()
{
  char s; // [rsp+10h] [rbp-110h]
  double v1; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v1 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v1 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v1 <= 3.402823466385289e38 && v1 >= 1.175494350822288e-38 )
      printFloatLine(v1);
    else
      printLine("Value is too small or large to be represented as a float");
  }
}

//----- (0000000000402BA3) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_good()
{
  good1_10();
}

//----- (0000000000402BB3) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticTrue;
  if ( staticTrue )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 60F0D4: using guessed type int staticTrue;

//----- (0000000000402C44) ----------------------------------------------------
int good1_11()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( staticFalse )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 60F104: using guessed type int staticFalse;

//----- (0000000000402CFB) ----------------------------------------------------
int good2_8()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticTrue;
  if ( staticTrue )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 60F0D4: using guessed type int staticTrue;

//----- (0000000000402DA7) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_good()
{
  good1_11();
  return good2_8();
}

//----- (0000000000402DC1) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad()
{
  double v0; // xmm0_8
  int result; // eax
  double v2; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v4; // [rsp+110h] [rbp-10h]
  double v5; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v5 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v5 = atof(&s);
    else
      printLine("fgets() failed.");
    v0 = sqrt(v5);
    result = printIntLine((int)v0);
  }
  else
  {
    v4 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v4 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v4 >= 0.0 )
    {
      v2 = sqrt(v4);
      result = printIntLine((int)v2);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}

//----- (0000000000402EEC) ----------------------------------------------------
int good1_12()
{
  int result; // eax
  double v1; // xmm0_8
  double v2; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v4; // [rsp+110h] [rbp-10h]
  double v5; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v5 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v5 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v5 >= 0.0 )
    {
      v1 = sqrt(v5);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  else
  {
    v4 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v4 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v4 >= 0.0 )
    {
      v2 = sqrt(v4);
      result = printIntLine((int)v2);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}

//----- (0000000000403035) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good()
{
  return good1_12();
}

//----- (0000000000403045) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (00000000004030BA) ----------------------------------------------------
int good1_13()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000403159) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_good()
{
  return good1_13();
}

//----- (0000000000403169) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}

//----- (00000000004031E9) ----------------------------------------------------
int good1_14()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (00000000004032A2) ----------------------------------------------------
int good2_9()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}

//----- (0000000000403350) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_11_good()
{
  good1_14();
  return good2_9();
}

//----- (000000000040336A) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (00000000004033DC) ----------------------------------------------------
int good1_15()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000403478) ----------------------------------------------------
int good2_10()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000403514) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_02_good()
{
  good1_15();
  return good2_10();
}

//----- (000000000040352E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (00000000004035AB) ----------------------------------------------------
int good1_16()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000403661) ----------------------------------------------------
int good2_11()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (000000000040370C) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_04_good()
{
  good1_16();
  return good2_11();
}

//----- (0000000000403726) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (00000000004037B6) ----------------------------------------------------
int good1_17()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (000000000040386C) ----------------------------------------------------
int good2_12()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (0000000000403917) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_04_good()
{
  good1_17();
  return good2_12();
}

//----- (0000000000403931) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (00000000004039A4) ----------------------------------------------------
int good1_18()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000403A41) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_good()
{
  return good1_18();
}

//----- (0000000000403A51) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v3);
  }
  else
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}

//----- (0000000000403B69) ----------------------------------------------------
int good1_19()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsTrueOrFalse() )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 <= 2147483647.0 && v3 >= -2147483648.0 )
      result = printIntLine((int)v3);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  else
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}

//----- (0000000000403CB2) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_12_good()
{
  return good1_19();
}

//----- (0000000000403CC2) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    v0 = sqrt(v2);
    printIntLine((int)v0);
  }
}

//----- (0000000000403D60) ----------------------------------------------------
void good1_20()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 >= 0.0 )
    {
      v0 = sqrt(v2);
      printIntLine((int)v0);
    }
    else
    {
      printLine("Value is negative");
    }
  }
}

//----- (0000000000403E18) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_good()
{
  good1_20();
}

//----- (0000000000403E28) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (0000000000403EA4) ----------------------------------------------------
int good1_21()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 60F110: using guessed type int globalFalse;

//----- (0000000000403F59) ----------------------------------------------------
int good2_13()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (0000000000404003) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_10_good()
{
  good1_21();
  return good2_13();
}

//----- (000000000040401D) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (000000000040409B) ----------------------------------------------------
int good1_22()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 40B610: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000404152) ----------------------------------------------------
int good2_14()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (00000000004041FE) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_09_good()
{
  good1_22();
  return good2_14();
}

//----- (0000000000404218) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (000000000040428B) ----------------------------------------------------
int good1_23()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000404328) ----------------------------------------------------
int good2_15()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (00000000004043C5) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_good()
{
  good1_23();
  return good2_15();
}

//----- (00000000004043DF) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}

//----- (0000000000404474) ----------------------------------------------------
int good1_24()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (000000000040452F) ----------------------------------------------------
int good2_16()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}

//----- (00000000004045DF) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_11_good()
{
  good1_24();
  return good2_16();
}

//----- (00000000004045F9) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (0000000000404680) ----------------------------------------------------
int good1_25()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (000000000040471E) ----------------------------------------------------
int good2_17()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004047BC) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_good()
{
  good1_25();
  return good2_17();
}

//----- (00000000004047D6) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (0000000000404848) ----------------------------------------------------
int good1_26()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (00000000004048E4) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_01_good()
{
  return good1_26();
}

//----- (00000000004048F4) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (000000000040497C) ----------------------------------------------------
int good1_27()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (0000000000404A1B) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_good()
{
  return good1_27();
}

//----- (0000000000404A2B) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000404AA8) ----------------------------------------------------
int good1_28()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( globalFive != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000404B5E) ----------------------------------------------------
int good2_18()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalFive;
  if ( globalFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 60F0F0: using guessed type int globalFive;

//----- (0000000000404C09) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_14_good()
{
  good1_28();
  return good2_18();
}

//----- (0000000000404C23) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 60F0D8: using guessed type int staticTrue_0;

//----- (0000000000404CA1) ----------------------------------------------------
int good1_29()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( staticFalse_0 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 60F108: using guessed type int staticFalse_0;

//----- (0000000000404D58) ----------------------------------------------------
int good2_19()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticTrue_0;
  if ( staticTrue_0 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 60F0D8: using guessed type int staticTrue_0;

//----- (0000000000404E04) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good()
{
  good1_29();
  return good2_19();
}

//----- (0000000000404E1E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000404EAF) ----------------------------------------------------
int good1_30()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FALSE )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 40B610: using guessed type int GLOBAL_CONST_FALSE;

//----- (0000000000404F66) ----------------------------------------------------
int good2_20()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_TRUE;
  if ( GLOBAL_CONST_TRUE )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 40B60C: using guessed type int GLOBAL_CONST_TRUE;

//----- (0000000000405012) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_good()
{
  good1_30();
  return good2_20();
}

//----- (000000000040502C) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}

//----- (00000000004050AE) ----------------------------------------------------
int good1_31()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)globalReturnsFalse() )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000405169) ----------------------------------------------------
int good2_21()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalReturnsTrue();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}

//----- (0000000000405219) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_11_good()
{
  good1_31();
  return good2_21();
}

//----- (0000000000405233) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (00000000004052A7) ----------------------------------------------------
int good1_32()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000405345) ----------------------------------------------------
int good2_22()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (00000000004053E3) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_good()
{
  good1_32();
  return good2_22();
}

//----- (00000000004053FD) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (0000000000405485) ----------------------------------------------------
int good1_33()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (0000000000405524) ----------------------------------------------------
int good2_23()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004055C3) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good()
{
  good1_33();
  return good2_23();
}

//----- (00000000004055DD) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticFive;
  if ( staticFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 60F0DC: using guessed type int staticFive;

//----- (000000000040565A) ----------------------------------------------------
int good1_34()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( staticFive != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 60F0DC: using guessed type int staticFive;

//----- (0000000000405710) ----------------------------------------------------
int good2_24()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticFive;
  if ( staticFive == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 60F0DC: using guessed type int staticFive;

//----- (00000000004057BB) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_good()
{
  good1_34();
  return good2_24();
}

//----- (00000000004057D5) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_bad()
{
  double v0; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  v0 = sqrt(v3);
  return printIntLine((int)v0);
}

//----- (000000000040585C) ----------------------------------------------------
int good1_35()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (00000000004058FA) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_01_good()
{
  return good1_35();
}

//----- (000000000040590A) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (000000000040597F) ----------------------------------------------------
int good1_36()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000405A1E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_good()
{
  return good1_36();
}

//----- (0000000000405A2E) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (0000000000405AAA) ----------------------------------------------------
int good1_37()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000405B5F) ----------------------------------------------------
int good2_25()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000405C09) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_good()
{
  good1_37();
  return good2_25();
}

//----- (0000000000405C23) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (0000000000405C98) ----------------------------------------------------
int good1_38()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000405D37) ----------------------------------------------------
int good2_26()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000405DD6) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good()
{
  good1_38();
  return good2_26();
}

//----- (0000000000405DF0) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405E6D) ----------------------------------------------------
int good1_39()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405F23) ----------------------------------------------------
int good2_27()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000405FCE) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_good()
{
  good1_39();
  return good2_27();
}

//----- (0000000000405FE8) ----------------------------------------------------
__int64 staticReturnsTrue_0()
{
  return 1LL;
}

//----- (0000000000405FF3) ----------------------------------------------------
__int64 staticReturnsFalse_0()
{
  return 0LL;
}

//----- (0000000000405FFE) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue_0();
  if ( result )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}

//----- (0000000000406093) ----------------------------------------------------
int good1_40()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)staticReturnsFalse_0() )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}

//----- (000000000040614E) ----------------------------------------------------
int good2_28()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue_0();
  if ( result )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}

//----- (00000000004061FE) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good()
{
  good1_40();
  return good2_28();
}

//----- (0000000000406218) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v1; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v1 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v1 = atof(&s);
    else
      printLine("fgets() failed.");
    printIntLine((int)v1);
  }
}

//----- (000000000040629F) ----------------------------------------------------
void good1_41()
{
  char s; // [rsp+10h] [rbp-110h]
  double v1; // [rsp+110h] [rbp-10h]
  int i; // [rsp+11Ch] [rbp-4h]

  for ( i = 0; i <= 0; ++i )
  {
    v1 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v1 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v1 <= 2147483647.0 && v1 >= -2147483648.0 )
      printIntLine((int)v1);
    else
      printLine("Value is too small or large to be represented as an int");
  }
}

//----- (0000000000406357) ----------------------------------------------------
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_good()
{
  good1_41();
}

//----- (0000000000406367) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (00000000004063DB) ----------------------------------------------------
int good1_42()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000406479) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_01_good()
{
  return good1_42();
}

//----- (0000000000406489) ----------------------------------------------------
__int64 staticReturnsTrue_1()
{
  return 1LL;
}

//----- (0000000000406494) ----------------------------------------------------
__int64 staticReturnsFalse_1()
{
  return 0LL;
}

//----- (000000000040649F) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue_1();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}

//----- (0000000000406521) ----------------------------------------------------
int good1_43()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( (unsigned int)staticReturnsFalse_1() )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (00000000004065DC) ----------------------------------------------------
int good2_29()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticReturnsTrue_1();
  if ( result )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}

//----- (000000000040668C) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_good()
{
  good1_43();
  return good2_29();
}

//----- (00000000004066A6) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 60F0E0: using guessed type int staticFive_0;

//----- (0000000000406738) ----------------------------------------------------
int good1_44()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( staticFive_0 != 5 )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 60F0E0: using guessed type int staticFive_0;

//----- (00000000004067F0) ----------------------------------------------------
int good2_30()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = staticFive_0;
  if ( staticFive_0 == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 60F0E0: using guessed type int staticFive_0;

//----- (000000000040689D) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_good()
{
  good1_44();
  return good2_30();
}

//----- (00000000004068B7) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printFloatLine(v2);
  }
  return result;
}
// 60F0E4: using guessed type int staticTrue_1;

//----- (0000000000406933) ----------------------------------------------------
int good1_45()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( staticFalse_1 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}
// 60F10C: using guessed type int staticFalse_1;

//----- (00000000004069E8) ----------------------------------------------------
int good2_31()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticTrue_1;
  if ( staticTrue_1 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
      result = printFloatLine(v2);
    else
      result = printLine("Value is too small or large to be represented as a float");
  }
  return result;
}
// 60F0E4: using guessed type int staticTrue_1;

//----- (0000000000406A92) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_05_good()
{
  good1_45();
  return good2_31();
}

//----- (0000000000406AAC) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    v1 = sqrt(v3);
    result = printIntLine((int)v1);
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406B3E) ----------------------------------------------------
int good1_46()
{
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v3 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v3 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v3 < 0.0 )
    return printLine("Value is negative");
  v1 = sqrt(v3);
  return printIntLine((int)v1);
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406BF6) ----------------------------------------------------
int good2_32()
{
  int result; // eax
  double v1; // xmm0_8
  char s; // [rsp+10h] [rbp-110h]
  double v3; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v3 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v3 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v3 >= 0.0 )
    {
      v1 = sqrt(v3);
      result = printIntLine((int)v1);
    }
    else
    {
      result = printLine("Value is negative");
    }
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000406CA3) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_good()
{
  good1_46();
  return good2_32();
}

//----- (0000000000406CBD) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (0000000000406D2F) ----------------------------------------------------
int good1_47()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000406DCB) ----------------------------------------------------
int good2_33()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000406E67) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_03_good()
{
  good1_47();
  return good2_33();
}

//----- (0000000000406E81) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printIntLine((int)v2);
}

//----- (0000000000406EFF) ----------------------------------------------------
int good1_48()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000406FB6) ----------------------------------------------------
int good2_34()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}

//----- (0000000000407062) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_good()
{
  good1_48();
  return good2_34();
}

//----- (000000000040707C) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (00000000004070FA) ----------------------------------------------------
int good1_49()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( globalFalse )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 60F110: using guessed type int globalFalse;

//----- (00000000004071B1) ----------------------------------------------------
int good2_35()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = globalTrue;
  if ( globalTrue )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 60F0EC: using guessed type int globalTrue;

//----- (000000000040725D) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_10_good()
{
  good1_49();
  return good2_35();
}

//----- (0000000000407277) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad()
{
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  return printFloatLine(v2);
}

//----- (00000000004072EA) ----------------------------------------------------
int good1_50()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 3.402823466385289e38 && v2 >= 1.175494350822288e-38 )
    result = printFloatLine(v2);
  else
    result = printLine("Value is too small or large to be represented as a float");
  return result;
}

//----- (0000000000407387) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_good()
{
  return good1_50();
}

//----- (0000000000407397) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (0000000000407416) ----------------------------------------------------
int good1_51()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( GLOBAL_CONST_FIVE != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (00000000004074CE) ----------------------------------------------------
int good2_36()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = GLOBAL_CONST_FIVE;
  if ( GLOBAL_CONST_FIVE == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 40B614: using guessed type int GLOBAL_CONST_FIVE;

//----- (000000000040757B) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_13_good()
{
  good1_51();
  return good2_36();
}

//----- (0000000000407595) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    result = printIntLine((int)v2);
  }
  return result;
}
// 60F0E8: using guessed type int staticFive_1;

//----- (0000000000407614) ----------------------------------------------------
int good1_52()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  if ( staticFive_1 != 5 )
    return printLine("Benign, fixed string");
  v2 = 0.0;
  if ( fgets(&s, 256, stdin) )
    v2 = atof(&s);
  else
    printLine("fgets() failed.");
  if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
    result = printIntLine((int)v2);
  else
    result = printLine("Value is too small or large to be represented as an int");
  return result;
}
// 60F0E8: using guessed type int staticFive_1;

//----- (00000000004076CC) ----------------------------------------------------
int good2_37()
{
  int result; // eax
  char s; // [rsp+10h] [rbp-110h]
  double v2; // [rsp+118h] [rbp-8h]

  result = staticFive_1;
  if ( staticFive_1 == 5 )
  {
    v2 = 0.0;
    if ( fgets(&s, 256, stdin) )
      v2 = atof(&s);
    else
      printLine("fgets() failed.");
    if ( v2 <= 2147483647.0 && v2 >= -2147483648.0 )
      result = printIntLine((int)v2);
    else
      result = printLine("Value is too small or large to be represented as an int");
  }
  return result;
}
// 60F0E8: using guessed type int staticFive_1;

//----- (0000000000407779) ----------------------------------------------------
int CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_good()
{
  good1_52();
  return good2_37();
}

//----- (0000000000407793) ----------------------------------------------------
int __fastcall printLine(const char *a1)
{
  int result; // eax

  if ( a1 )
    result = puts(a1);
  return result;
}

//----- (00000000004077B4) ----------------------------------------------------
int __fastcall printWLine(__int64 a1)
{
  int result; // eax

  if ( a1 )
    result = wprintf(&format, a1);
  return result;
}

//----- (00000000004077DF) ----------------------------------------------------
int __fastcall printIntLine(unsigned int a1)
{
  return printf("%d\n", a1);
}

//----- (0000000000407800) ----------------------------------------------------
int __fastcall printShortLine(__int16 a1)
{
  return printf("%hd\n", (unsigned int)a1);
}

//----- (0000000000407825) ----------------------------------------------------
int __fastcall printFloatLine(float a1)
{
  return printf("%f\n", a1);
}

//----- (000000000040784B) ----------------------------------------------------
int __fastcall printLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (000000000040786F) ----------------------------------------------------
int __fastcall printLongLongLine(__int64 a1)
{
  return printf("%ld\n", a1);
}

//----- (0000000000407893) ----------------------------------------------------
int __fastcall printSizeTLine(__int64 a1)
{
  return printf("%zu\n", a1);
}

//----- (00000000004078B7) ----------------------------------------------------
int __fastcall printHexCharLine(char a1)
{
  return printf("%02x\n", (unsigned int)a1);
}

//----- (00000000004078DB) ----------------------------------------------------
int __fastcall printWcharLine(int a1)
{
  int v2; // [rsp+10h] [rbp-10h]
  int v3; // [rsp+14h] [rbp-Ch]

  v2 = a1;
  v3 = 0;
  return printf("%ls\n", &v2);
}

//----- (000000000040790B) ----------------------------------------------------
int __fastcall printUnsignedLine(unsigned int a1)
{
  return printf("%u\n", a1);
}

//----- (000000000040792C) ----------------------------------------------------
int __fastcall printHexUnsignedCharLine(unsigned __int8 a1)
{
  return printf("%02x\n", a1);
}

//----- (0000000000407950) ----------------------------------------------------
int __fastcall printDoubleLine(double a1)
{
  return printf("%g\n", a1);
}

//----- (000000000040797B) ----------------------------------------------------
int __fastcall printStructLine(unsigned int *a1)
{
  return printf("%d -- %d\n", *a1, a1[1]);
}

//----- (00000000004079A7) ----------------------------------------------------
int __fastcall printBytesLine(__int64 a1, unsigned __int64 a2)
{
  unsigned __int64 i; // [rsp+18h] [rbp-8h]

  for ( i = 0LL; i < a2; ++i )
    printf("%02x", *(unsigned __int8 *)(a1 + i));
  return puts(s);
}

//----- (00000000004079FE) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL;
        i < a2
     && (*__ctype_b_loc())[*(char *)(2 * i + v4)] & 0x1000
     && (*__ctype_b_loc())[*(char *)(2 * i + 1 + v4)] & 0x1000;
        ++i )
  {
    __isoc99_sscanf(2 * i + v4, "%02x", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400A00: using guessed type __int64 __fastcall __isoc99_sscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407AD7) ----------------------------------------------------
unsigned __int64 __fastcall decodeHexWChars(__int64 a1, unsigned __int64 a2, __int64 a3)
{
  __int64 v4; // [rsp+8h] [rbp-28h]
  int v5; // [rsp+24h] [rbp-Ch]
  unsigned __int64 i; // [rsp+28h] [rbp-8h]

  v4 = a3;
  for ( i = 0LL; i < a2 && iswxdigit(*(_DWORD *)(8 * i + v4)) && iswxdigit(*(_DWORD *)(8 * i + 4 + v4)); ++i )
  {
    __isoc99_swscanf(8 * i + v4, "%", &v5);
    *(_BYTE *)(i + a1) = v5;
  }
  return i;
}
// 400AD0: using guessed type __int64 __fastcall __isoc99_swscanf(_QWORD, _QWORD, _QWORD);

//----- (0000000000407B8B) ----------------------------------------------------
__int64 globalReturnsTrue()
{
  return 1LL;
}

//----- (0000000000407B96) ----------------------------------------------------
__int64 globalReturnsFalse()
{
  return 0LL;
}

//----- (0000000000407BA1) ----------------------------------------------------
__int64 globalReturnsTrueOrFalse()
{
  return (unsigned int)(rand() % 2);
}

//----- (0000000000407BB7) ----------------------------------------------------
void good1_53()
{
  ;
}

//----- (0000000000407BBD) ----------------------------------------------------
void good2_38()
{
  ;
}

//----- (0000000000407BC3) ----------------------------------------------------
void good3()
{
  ;
}

//----- (0000000000407BC9) ----------------------------------------------------
void good4()
{
  ;
}

//----- (0000000000407BCF) ----------------------------------------------------
void good5()
{
  ;
}

//----- (0000000000407BD5) ----------------------------------------------------
void good6()
{
  ;
}

//----- (0000000000407BDB) ----------------------------------------------------
void good7()
{
  ;
}

//----- (0000000000407BE1) ----------------------------------------------------
void good8()
{
  ;
}

//----- (0000000000407BE7) ----------------------------------------------------
void good9()
{
  ;
}

//----- (0000000000407BED) ----------------------------------------------------
void bad1()
{
  ;
}

//----- (0000000000407BF3) ----------------------------------------------------
void bad2()
{
  ;
}

//----- (0000000000407BF9) ----------------------------------------------------
void bad3()
{
  ;
}

//----- (0000000000407BFF) ----------------------------------------------------
void bad4()
{
  ;
}

//----- (0000000000407C05) ----------------------------------------------------
void bad5()
{
  ;
}

//----- (0000000000407C0B) ----------------------------------------------------
void bad6()
{
  ;
}

//----- (0000000000407C11) ----------------------------------------------------
void bad7()
{
  ;
}

//----- (0000000000407C17) ----------------------------------------------------
void bad8()
{
  ;
}

//----- (0000000000407C1D) ----------------------------------------------------
void bad9()
{
  ;
}

//----- (0000000000407C23) ----------------------------------------------------
void __fastcall __noreturn internal_start(void *a1)
{
  (*((void (__fastcall **)(_QWORD))a1 + 1))(*((_QWORD *)a1 + 2));
  pthread_exit(0LL);
}

//----- (0000000000407C56) ----------------------------------------------------
__int64 __fastcall stdThreadCreate(__int64 a1, __int64 a2, void **a3)
{
  __int64 result; // rax
  void **v4; // [rsp+8h] [rbp-28h]
  pthread_t newthread; // [rsp+20h] [rbp-10h]
  void *arg; // [rsp+28h] [rbp-8h]

  v4 = a3;
  *a3 = 0LL;
  arg = malloc(0x18uLL);
  if ( !arg )
    return 0LL;
  *((_QWORD *)arg + 1) = a1;
  *((_QWORD *)arg + 2) = a2;
  if ( pthread_create(&newthread, 0LL, (void *(*)(void *))internal_start, arg) )
  {
    free(arg);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)arg = newthread;
    *v4 = arg;
    result = 1LL;
  }
  return result;
}

//----- (0000000000407CFA) ----------------------------------------------------
_BOOL8 __fastcall stdThreadJoin(pthread_t *a1)
{
  void *thread_return; // [rsp+18h] [rbp-8h]

  return pthread_join(*a1, &thread_return) == 0;
}

//----- (0000000000407D2E) ----------------------------------------------------
__int64 __fastcall stdThreadDestroy(void *a1)
{
  free(a1);
  return 1LL;
}

//----- (0000000000407D4D) ----------------------------------------------------
__int64 __fastcall stdThreadLockCreate(pthread_mutex_t **a1)
{
  __int64 result; // rax
  pthread_mutex_t *mutex; // [rsp+18h] [rbp-8h]

  *a1 = 0LL;
  mutex = (pthread_mutex_t *)malloc(0x28uLL);
  if ( !mutex )
    return 0LL;
  if ( pthread_mutex_init(mutex, 0LL) )
  {
    free(a1);
    result = 0LL;
  }
  else
  {
    *a1 = mutex;
    result = 1LL;
  }
  return result;
}

//----- (0000000000407DC2) ----------------------------------------------------
int __fastcall stdThreadLockAcquire(pthread_mutex_t *a1)
{
  return pthread_mutex_lock(a1);
}

//----- (0000000000407DDC) ----------------------------------------------------
int __fastcall stdThreadLockRelease(pthread_mutex_t *a1)
{
  return pthread_mutex_unlock(a1);
}

//----- (0000000000407DF6) ----------------------------------------------------
void __fastcall stdThreadLockDestroy(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

//----- (0000000000407E20) ----------------------------------------------------
void _libc_csu_init(void)
{
  __int64 v0; // rbx
  signed __int64 v1; // rbp

  v0 = 0LL;
  v1 = &_do_global_dtors_aux_fini_array_entry - _frame_dummy_init_array_entry;
  init_proc();
  if ( v1 )
  {
    do
      _frame_dummy_init_array_entry[v0++]();
    while ( v0 != v1 );
  }
}
// 60EDD0: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry[2])();
// 60EDD8: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (0000000000407E94) ----------------------------------------------------
void term_proc()
{
  ;
}

// ALL OK, 263 function(s) have been successfully decompiled
